{"controls":[{"id":"SV-222387","code":"control 'SV-222387' do\n  title 'The application must provide a capability to limit the number of logon sessions per user.'\n  desc 'Application management includes the ability to control the number of users and user sessions that utilize an application. Limiting the number of allowed users and sessions per user is helpful in limiting risks related to DoS attacks.\n\nThis requirement may be met via the application or by utilizing information system session control provided by a web server or other underlying solution that provides specialized session management capabilities.\n\nIf it has been specified that this requirement will be handled by the application, the capability to limit the maximum number of concurrent single user sessions must be designed and built into the application.\n\nThis requirement addresses concurrent sessions for individual system accounts and does not address concurrent sessions by single users via multiple system accounts.\n\nThe maximum number of concurrent sessions should be defined based upon mission needs and the operational environment for each system.'\n  desc 'check', 'For production environments;  Review the system documentation, identify the number of application user logon sessions allowed per user, identify the methods utilized for user session management or have application administrator describe how the application implements user session management.\n\nUtilize the management interface that is used to set the user session values, or examine configuration files in order to review user session configuration settings.\n\nEnsure the number of sessions allowed per user is specified in accordance with the organizational requirements.\n\nFor development environments;  have the developer provide design documentation or demonstrate how the application is designed to limit the number of simultaneous user logon sessions.\n\nIf the application is not configured to limit the number of logon sessions per user as defined by the organization, this is a finding.'\n  desc 'fix', 'Design and configure the application to specify the number of logon sessions that are allowed per user.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24057r493069_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222387'\n  tag rid: 'SV-222387r879511_rule'\n  tag stig_id: 'APSC-DV-000010'\n  tag gtitle: 'SRG-APP-000001'\n  tag fix_id: 'F-24046r493070_fix'\n  tag 'documentable'\n  tag legacy: ['V-69239', 'SV-83861']\n  tag cci: ['CCI-000054']\n  tag nist: ['AC-10']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222387.rb"},"title":"The application must provide a capability to limit the number of logon sessions per user.","desc":"Application management includes the ability to control the number of users and user sessions that utilize an application. Limiting the number of allowed users and sessions per user is helpful in limiting risks related to DoS attacks.\n\nThis requirement may be met via the application or by utilizing information system session control provided by a web server or other underlying solution that provides specialized session management capabilities.\n\nIf it has been specified that this requirement will be handled by the application, the capability to limit the maximum number of concurrent single user sessions must be designed and built into the application.\n\nThis requirement addresses concurrent sessions for individual system accounts and does not address concurrent sessions by single users via multiple system accounts.\n\nThe maximum number of concurrent sessions should be defined based upon mission needs and the operational environment for each system.","descriptions":{"default":"Application management includes the ability to control the number of users and user sessions that utilize an application. Limiting the number of allowed users and sessions per user is helpful in limiting risks related to DoS attacks.\n\nThis requirement may be met via the application or by utilizing information system session control provided by a web server or other underlying solution that provides specialized session management capabilities.\n\nIf it has been specified that this requirement will be handled by the application, the capability to limit the maximum number of concurrent single user sessions must be designed and built into the application.\n\nThis requirement addresses concurrent sessions for individual system accounts and does not address concurrent sessions by single users via multiple system accounts.\n\nThe maximum number of concurrent sessions should be defined based upon mission needs and the operational environment for each system.","check":"For production environments;  Review the system documentation, identify the number of application user logon sessions allowed per user, identify the methods utilized for user session management or have application administrator describe how the application implements user session management.\n\nUtilize the management interface that is used to set the user session values, or examine configuration files in order to review user session configuration settings.\n\nEnsure the number of sessions allowed per user is specified in accordance with the organizational requirements.\n\nFor development environments;  have the developer provide design documentation or demonstrate how the application is designed to limit the number of simultaneous user logon sessions.\n\nIf the application is not configured to limit the number of logon sessions per user as defined by the organization, this is a finding.","fix":"Design and configure the application to specify the number of logon sessions that are allowed per user."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24057r493069_chk","severity":"medium","gid":"V-222387","rid":"SV-222387r879511_rule","stig_id":"APSC-DV-000010","gtitle":"SRG-APP-000001","fix_id":"F-24046r493070_fix","documentable":null,"legacy":["V-69239","SV-83861"],"cci":["CCI-000054"],"nist":["AC-10"]}},{"id":"SV-222388","code":"control 'SV-222388' do\n  title 'The application must clear temporary storage and cookies when the session is terminated.'\n  desc 'Persistent cookies are a primary means by which a web application will store application state and user information.  Since HTTP is a stateless protocol, this persistence allows the web application developer to provide a robust and customizable user experience.\n\nHowever, if a web application stores user authentication information within a persistent cookie or other temporary storage mechanism, this information can be stolen and used to compromise the users account.\n\nLikewise, HTML 5 provides the developer with a client storage capability where application data larger than the 4K cookie size limit can be stored on the local client.  While this can be beneficial to the developer, this is considered insecure storage and should not be used for storing sensitive session or security tokens.  A cross site scripting attack can put this data at risk.\n\nWeb applications must clear sensitive data from files and storage areas on the client when the session is terminated.'\n  desc 'check', 'Review application design documentation and interview application administrator to identify how the application makes use of temporary client storage and cookies.  Identify cookie and web storage locations on the client.  Clear all browser cookies and web cache.\n\nLog on to the application and perform several standard operations, noting if the application ever prompts the user to accept a cookie. If prompted by the browser to save the user ID and password (decline to save the user ID and password), this is a finding. \n\nLog out of the application and close the browser. Reopen the browser and examine the stored cookies. The cookies displayed should be related to the application website.\n\nThe procedure to view cookies will vary according to the browser used. Some modern browsers are making use of SQLite databases to store cookie data so use of a SQLite db reader/browser may be required.\n\nOpen the cookies related to the application website and search for any identification or authentication information. While authentication information can vary on a per application basis, this is most often specified as \"username=x\", or \"password=x\".\n\nIf the web application prompts the user to save their password, or if a username or password value exists within a cookie or within local storage locations, even if hashed, this is a finding.\n\nThe application may use means other than cookies to store user information. If the reviewer detects an alternative mechanism for storing information locally, examine the data storage to ensure no authentication or other sensitive information is present.'\n  desc 'fix', 'Design and configure the application to clear sensitive data from cookies and local storage when the user logs out of the application.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24058r493072_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222388'\n  tag rid: 'SV-222388r879673_rule'\n  tag stig_id: 'APSC-DV-000060'\n  tag gtitle: 'SRG-APP-000295'\n  tag fix_id: 'F-24047r493073_fix'\n  tag 'documentable'\n  tag legacy: ['SV-83863', 'V-69241']\n  tag cci: ['CCI-002361']\n  tag nist: ['AC-12']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222388.rb"},"title":"The application must clear temporary storage and cookies when the session is terminated.","desc":"Persistent cookies are a primary means by which a web application will store application state and user information.  Since HTTP is a stateless protocol, this persistence allows the web application developer to provide a robust and customizable user experience.\n\nHowever, if a web application stores user authentication information within a persistent cookie or other temporary storage mechanism, this information can be stolen and used to compromise the users account.\n\nLikewise, HTML 5 provides the developer with a client storage capability where application data larger than the 4K cookie size limit can be stored on the local client.  While this can be beneficial to the developer, this is considered insecure storage and should not be used for storing sensitive session or security tokens.  A cross site scripting attack can put this data at risk.\n\nWeb applications must clear sensitive data from files and storage areas on the client when the session is terminated.","descriptions":{"default":"Persistent cookies are a primary means by which a web application will store application state and user information.  Since HTTP is a stateless protocol, this persistence allows the web application developer to provide a robust and customizable user experience.\n\nHowever, if a web application stores user authentication information within a persistent cookie or other temporary storage mechanism, this information can be stolen and used to compromise the users account.\n\nLikewise, HTML 5 provides the developer with a client storage capability where application data larger than the 4K cookie size limit can be stored on the local client.  While this can be beneficial to the developer, this is considered insecure storage and should not be used for storing sensitive session or security tokens.  A cross site scripting attack can put this data at risk.\n\nWeb applications must clear sensitive data from files and storage areas on the client when the session is terminated.","check":"Review application design documentation and interview application administrator to identify how the application makes use of temporary client storage and cookies.  Identify cookie and web storage locations on the client.  Clear all browser cookies and web cache.\n\nLog on to the application and perform several standard operations, noting if the application ever prompts the user to accept a cookie. If prompted by the browser to save the user ID and password (decline to save the user ID and password), this is a finding. \n\nLog out of the application and close the browser. Reopen the browser and examine the stored cookies. The cookies displayed should be related to the application website.\n\nThe procedure to view cookies will vary according to the browser used. Some modern browsers are making use of SQLite databases to store cookie data so use of a SQLite db reader/browser may be required.\n\nOpen the cookies related to the application website and search for any identification or authentication information. While authentication information can vary on a per application basis, this is most often specified as \"username=x\", or \"password=x\".\n\nIf the web application prompts the user to save their password, or if a username or password value exists within a cookie or within local storage locations, even if hashed, this is a finding.\n\nThe application may use means other than cookies to store user information. If the reviewer detects an alternative mechanism for storing information locally, examine the data storage to ensure no authentication or other sensitive information is present.","fix":"Design and configure the application to clear sensitive data from cookies and local storage when the user logs out of the application."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24058r493072_chk","severity":"medium","gid":"V-222388","rid":"SV-222388r879673_rule","stig_id":"APSC-DV-000060","gtitle":"SRG-APP-000295","fix_id":"F-24047r493073_fix","documentable":null,"legacy":["SV-83863","V-69241"],"cci":["CCI-002361"],"nist":["AC-12"]}},{"id":"SV-222389","code":"control 'SV-222389' do\n  title 'The application must automatically terminate the non-privileged user session and log off non-privileged users after a 15 minute idle time period has elapsed.'\n  desc \"Leaving a user’s application session established for an indefinite period of time increases the risk of session hijacking.\n\nSession termination terminates an individual user's logical application session after 15 minutes of application inactivity at which time the user must re-authenticate and a new session must be established if the user desires to continue work in the application.\"\n  desc 'check', 'Ask the application representative to demonstrate the configuration setting where the idle time out value is defined.\n\nAlternatively, logon with a regular application user account and let the session sit idle for 15 minutes.\n\nAttempt to access the application after 15 minutes of inactivity.\n\nIf the configuration setting is not set to time out user sessions after 15 minutes of inactivity, or if the regular user session used for testing does not time out after 15 minutes of inactivity, this is a finding.'\n  desc 'fix', 'Design and configure the application to terminate the non-privileged users session after 15 minutes of inactivity.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24059r493075_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222389'\n  tag rid: 'SV-222389r879673_rule'\n  tag stig_id: 'APSC-DV-000070'\n  tag gtitle: 'SRG-APP-000295'\n  tag fix_id: 'F-24048r493076_fix'\n  tag 'documentable'\n  tag legacy: ['SV-83865', 'V-69243']\n  tag cci: ['CCI-002361']\n  tag nist: ['AC-12']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222389.rb"},"title":"The application must automatically terminate the non-privileged user session and log off non-privileged users after a 15 minute idle time period has elapsed.","desc":"Leaving a user’s application session established for an indefinite period of time increases the risk of session hijacking.\n\nSession termination terminates an individual user's logical application session after 15 minutes of application inactivity at which time the user must re-authenticate and a new session must be established if the user desires to continue work in the application.","descriptions":{"default":"Leaving a user’s application session established for an indefinite period of time increases the risk of session hijacking.\n\nSession termination terminates an individual user's logical application session after 15 minutes of application inactivity at which time the user must re-authenticate and a new session must be established if the user desires to continue work in the application.","check":"Ask the application representative to demonstrate the configuration setting where the idle time out value is defined.\n\nAlternatively, logon with a regular application user account and let the session sit idle for 15 minutes.\n\nAttempt to access the application after 15 minutes of inactivity.\n\nIf the configuration setting is not set to time out user sessions after 15 minutes of inactivity, or if the regular user session used for testing does not time out after 15 minutes of inactivity, this is a finding.","fix":"Design and configure the application to terminate the non-privileged users session after 15 minutes of inactivity."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24059r493075_chk","severity":"medium","gid":"V-222389","rid":"SV-222389r879673_rule","stig_id":"APSC-DV-000070","gtitle":"SRG-APP-000295","fix_id":"F-24048r493076_fix","documentable":null,"legacy":["SV-83865","V-69243"],"cci":["CCI-002361"],"nist":["AC-12"]}},{"id":"SV-222390","code":"control 'SV-222390' do\n  title 'The application must automatically terminate the admin user session and log off admin users after a 10 minute idle time period is exceeded.'\n  desc \"Leaving an admin user's application session established for an indefinite period of time increases the risk of session hijacking.\n\nSession termination terminates an individual user's logical application session after 10 minutes of application inactivity at which time the user must re-authenticate and a new session must be established if the user desires to continue work in the application.\"\n  desc 'check', 'Ask the application representative to demonstrate the application configuration setting where the idle time out value is defined for admin users.\n\nAlternatively, logon with an admin user account and let the session sit idle for 10 minutes.\n\nAttempt to access the application after 10 minutes of inactivity.\n\nIf the configuration setting is not set to time out admin user sessions after 10 minutes of inactivity, or if the session used for testing does not time out after 10 minutes of inactivity, this is a finding.'\n  desc 'fix', 'Design and configure the application to terminate the admin users session after 10 minutes of inactivity.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24060r493078_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222390'\n  tag rid: 'SV-222390r879673_rule'\n  tag stig_id: 'APSC-DV-000080'\n  tag gtitle: 'SRG-APP-000295'\n  tag fix_id: 'F-24049r493079_fix'\n  tag 'documentable'\n  tag legacy: ['SV-83867', 'V-69245']\n  tag cci: ['CCI-002361']\n  tag nist: ['AC-12']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222390.rb"},"title":"The application must automatically terminate the admin user session and log off admin users after a 10 minute idle time period is exceeded.","desc":"Leaving an admin user's application session established for an indefinite period of time increases the risk of session hijacking.\n\nSession termination terminates an individual user's logical application session after 10 minutes of application inactivity at which time the user must re-authenticate and a new session must be established if the user desires to continue work in the application.","descriptions":{"default":"Leaving an admin user's application session established for an indefinite period of time increases the risk of session hijacking.\n\nSession termination terminates an individual user's logical application session after 10 minutes of application inactivity at which time the user must re-authenticate and a new session must be established if the user desires to continue work in the application.","check":"Ask the application representative to demonstrate the application configuration setting where the idle time out value is defined for admin users.\n\nAlternatively, logon with an admin user account and let the session sit idle for 10 minutes.\n\nAttempt to access the application after 10 minutes of inactivity.\n\nIf the configuration setting is not set to time out admin user sessions after 10 minutes of inactivity, or if the session used for testing does not time out after 10 minutes of inactivity, this is a finding.","fix":"Design and configure the application to terminate the admin users session after 10 minutes of inactivity."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24060r493078_chk","severity":"medium","gid":"V-222390","rid":"SV-222390r879673_rule","stig_id":"APSC-DV-000080","gtitle":"SRG-APP-000295","fix_id":"F-24049r493079_fix","documentable":null,"legacy":["SV-83867","V-69245"],"cci":["CCI-002361"],"nist":["AC-12"]}},{"id":"SV-222391","code":"control 'SV-222391' do\n  title 'Applications requiring user access authentication must provide a logoff capability for user initiated communication session.'\n  desc 'If a user cannot explicitly end an application session, the session may remain open and be exploited by an attacker.  Applications providing user access must provide the ability for users to manually terminate their sessions and log off.'\n  desc 'check', 'If the application does not provide an interface for interactive user access, this is not applicable.\n\nLog on to the application with a valid user account. Examine the user interface. Identify the command or link that provides the logoff function.\n\nActivate the user logoff function.\n\nObserve user interface and attempt to interact with the application.  Confirm user interaction with the application is no longer possible.\n\nIf the user session is not terminated or if the logoff function does not exist, this is a finding.'\n  desc 'fix', 'Design and configure the application to provide all users with the capability to manually terminate their application session.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24061r493081_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222391'\n  tag rid: 'SV-222391r879674_rule'\n  tag stig_id: 'APSC-DV-000090'\n  tag gtitle: 'SRG-APP-000296'\n  tag fix_id: 'F-24050r493082_fix'\n  tag 'documentable'\n  tag legacy: ['SV-83869', 'V-69247']\n  tag cci: ['CCI-002363']\n  tag nist: ['AC-12 (1)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222391.rb"},"title":"Applications requiring user access authentication must provide a logoff capability for user initiated communication session.","desc":"If a user cannot explicitly end an application session, the session may remain open and be exploited by an attacker.  Applications providing user access must provide the ability for users to manually terminate their sessions and log off.","descriptions":{"default":"If a user cannot explicitly end an application session, the session may remain open and be exploited by an attacker.  Applications providing user access must provide the ability for users to manually terminate their sessions and log off.","check":"If the application does not provide an interface for interactive user access, this is not applicable.\n\nLog on to the application with a valid user account. Examine the user interface. Identify the command or link that provides the logoff function.\n\nActivate the user logoff function.\n\nObserve user interface and attempt to interact with the application.  Confirm user interaction with the application is no longer possible.\n\nIf the user session is not terminated or if the logoff function does not exist, this is a finding.","fix":"Design and configure the application to provide all users with the capability to manually terminate their application session."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24061r493081_chk","severity":"medium","gid":"V-222391","rid":"SV-222391r879674_rule","stig_id":"APSC-DV-000090","gtitle":"SRG-APP-000296","fix_id":"F-24050r493082_fix","documentable":null,"legacy":["SV-83869","V-69247"],"cci":["CCI-002363"],"nist":["AC-12 (1)"]}},{"id":"SV-222392","code":"control 'SV-222392' do\n  title 'The application must display an explicit logoff message to users indicating the reliable termination of authenticated communications sessions.'\n  desc 'If a user is not explicitly notified that their application session has been terminated, they cannot be certain that their session did not remain open. Applications with a user access interface must provide an explicit logoff message to the user upon successful termination of the user session.'\n  desc 'check', 'If the application does not provide an interface for interactive user access, this is not applicable.\n\nLog on to the application with a valid user account. Examine the user interface. Identify the command or link that provides the logoff function.\n\nActivate the user logoff function.\n\nIf the application does not provide an explicit logoff message indicating the user session has been terminated, this is a finding.'\n  desc 'fix', 'Design and configure the application to provide an explicit logoff message to users indicating a successful logoff has occurred upon user session termination.'\n  impact 0.3\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24062r493084_chk'\n  tag severity: 'low'\n  tag gid: 'V-222392'\n  tag rid: 'SV-222392r879675_rule'\n  tag stig_id: 'APSC-DV-000100'\n  tag gtitle: 'SRG-APP-000297'\n  tag fix_id: 'F-24051r493085_fix'\n  tag 'documentable'\n  tag legacy: ['SV-83871', 'V-69249']\n  tag cci: ['CCI-002364']\n  tag nist: ['AC-12 (2)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222392.rb"},"title":"The application must display an explicit logoff message to users indicating the reliable termination of authenticated communications sessions.","desc":"If a user is not explicitly notified that their application session has been terminated, they cannot be certain that their session did not remain open. Applications with a user access interface must provide an explicit logoff message to the user upon successful termination of the user session.","descriptions":{"default":"If a user is not explicitly notified that their application session has been terminated, they cannot be certain that their session did not remain open. Applications with a user access interface must provide an explicit logoff message to the user upon successful termination of the user session.","check":"If the application does not provide an interface for interactive user access, this is not applicable.\n\nLog on to the application with a valid user account. Examine the user interface. Identify the command or link that provides the logoff function.\n\nActivate the user logoff function.\n\nIf the application does not provide an explicit logoff message indicating the user session has been terminated, this is a finding.","fix":"Design and configure the application to provide an explicit logoff message to users indicating a successful logoff has occurred upon user session termination."},"impact":0.3,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24062r493084_chk","severity":"low","gid":"V-222392","rid":"SV-222392r879675_rule","stig_id":"APSC-DV-000100","gtitle":"SRG-APP-000297","fix_id":"F-24051r493085_fix","documentable":null,"legacy":["SV-83871","V-69249"],"cci":["CCI-002364"],"nist":["AC-12 (2)"]}},{"id":"SV-222393","code":"control 'SV-222393' do\n  title 'The application must associate organization-defined types of security attributes having organization-defined security attribute values with information in storage.'\n  desc 'Without the association of security attributes to information, there is no basis for the application to make security related access-control decisions.\n\nSecurity attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese attributes are typically associated with internal data structures (e.g., records, buffers, files) within the information system and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy.\n\nOne example includes marking data as classified or FOUO. These security attributes may be assigned manually or during data processing but either way, it is imperative these assignments are maintained while the data is in storage. If the security attributes are lost when the data is stored, there is the risk of a data compromise.\n\nClassify the system hosting the application with default classification.  Treat all unmarked data at the highest classification as the overall hosting system is classified.  If there is no classification, mark system high.'\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nDetermine if the application processes classified, FOUO, or other data that is required to be marked and identify if the application requirements specify data markings of any other types of data.\n\nIf the application does not contain classified, FOUO, or other data that is required to be marked, this requirement is not applicable.\n\nReview the database or other storage mechanism and have the application administrator identify and demonstrate how the application assigns and maintains data markings while the data is in storage.\n\nTypical methods for marking data include utilizing a table or data base field that contains the marking information and associating the marking information with the data.\n\nIf application data required to be marked is not marked and does not retain its marking while it is being stored, this is a finding.'\n  desc 'fix', 'Design and configure the application to assign data marking and ensure the marking is retained when the data is stored.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24063r493087_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222393'\n  tag rid: 'SV-222393r879689_rule'\n  tag stig_id: 'APSC-DV-000110'\n  tag gtitle: 'SRG-APP-000311'\n  tag fix_id: 'F-24052r493088_fix'\n  tag 'documentable'\n  tag legacy: ['SV-83873', 'V-69251']\n  tag cci: ['CCI-002262']\n  tag nist: ['AC-16 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222393.rb"},"title":"The application must associate organization-defined types of security attributes having organization-defined security attribute values with information in storage.","desc":"Without the association of security attributes to information, there is no basis for the application to make security related access-control decisions.\n\nSecurity attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese attributes are typically associated with internal data structures (e.g., records, buffers, files) within the information system and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy.\n\nOne example includes marking data as classified or FOUO. These security attributes may be assigned manually or during data processing but either way, it is imperative these assignments are maintained while the data is in storage. If the security attributes are lost when the data is stored, there is the risk of a data compromise.\n\nClassify the system hosting the application with default classification.  Treat all unmarked data at the highest classification as the overall hosting system is classified.  If there is no classification, mark system high.","descriptions":{"default":"Without the association of security attributes to information, there is no basis for the application to make security related access-control decisions.\n\nSecurity attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese attributes are typically associated with internal data structures (e.g., records, buffers, files) within the information system and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy.\n\nOne example includes marking data as classified or FOUO. These security attributes may be assigned manually or during data processing but either way, it is imperative these assignments are maintained while the data is in storage. If the security attributes are lost when the data is stored, there is the risk of a data compromise.\n\nClassify the system hosting the application with default classification.  Treat all unmarked data at the highest classification as the overall hosting system is classified.  If there is no classification, mark system high.","check":"Review the application documentation and interview the application administrator.\n\nDetermine if the application processes classified, FOUO, or other data that is required to be marked and identify if the application requirements specify data markings of any other types of data.\n\nIf the application does not contain classified, FOUO, or other data that is required to be marked, this requirement is not applicable.\n\nReview the database or other storage mechanism and have the application administrator identify and demonstrate how the application assigns and maintains data markings while the data is in storage.\n\nTypical methods for marking data include utilizing a table or data base field that contains the marking information and associating the marking information with the data.\n\nIf application data required to be marked is not marked and does not retain its marking while it is being stored, this is a finding.","fix":"Design and configure the application to assign data marking and ensure the marking is retained when the data is stored."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24063r493087_chk","severity":"medium","gid":"V-222393","rid":"SV-222393r879689_rule","stig_id":"APSC-DV-000110","gtitle":"SRG-APP-000311","fix_id":"F-24052r493088_fix","documentable":null,"legacy":["SV-83873","V-69251"],"cci":["CCI-002262"],"nist":["AC-16 a"]}},{"id":"SV-222394","code":"control 'SV-222394' do\n  title 'The application must associate organization-defined types of security attributes having organization-defined security attribute values with information in process.'\n  desc 'Without the association of security attributes to information, there is no basis for the application to make security related access-control decisions.\n\nSecurity attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese attributes are typically associated with internal data structures (e.g., records, buffers, files) within the information system and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy.\n\nOne example includes marking data as classified or FOUO. These security attributes may be assigned manually or during data processing but either way, it is imperative these assignments are maintained while the data is in process. If the security attributes are lost when the data is being processed, there is the risk of a data compromise.'\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nIdentify if the application requirements include data marking.  Also determine if the application processes classified, FOUO or other data that is required to be marked.\n\nIf the application does not contain classified, FOUO or have data marking requirements, this requirement is not applicable.\n\nAccess the user interface for the application and navigate through the application. Perform several application actions that will manipulate data contained within the application.\n\nFor example, create a test record and assign a data marking to the data element. Save the test record, close the data entry fields and navigate to display the test record. Perform an edit action on the test data that does not edit the marking itself or perform any other form of data processing such as assigning the data to another users work queue for review or printing the data, ensure the data marking is retained throughout the data processing actions.\n\nIf application data required to be marked does not retain its marking while it is being processed by the application, this is a finding.'\n  desc 'fix', 'Design and configure the application to retain the data marking when processing data.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24064r493090_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222394'\n  tag rid: 'SV-222394r879690_rule'\n  tag stig_id: 'APSC-DV-000120'\n  tag gtitle: 'SRG-APP-000313'\n  tag fix_id: 'F-24053r493091_fix'\n  tag 'documentable'\n  tag legacy: ['SV-83875', 'V-69253']\n  tag cci: ['CCI-002263']\n  tag nist: ['AC-16 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222394.rb"},"title":"The application must associate organization-defined types of security attributes having organization-defined security attribute values with information in process.","desc":"Without the association of security attributes to information, there is no basis for the application to make security related access-control decisions.\n\nSecurity attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese attributes are typically associated with internal data structures (e.g., records, buffers, files) within the information system and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy.\n\nOne example includes marking data as classified or FOUO. These security attributes may be assigned manually or during data processing but either way, it is imperative these assignments are maintained while the data is in process. If the security attributes are lost when the data is being processed, there is the risk of a data compromise.","descriptions":{"default":"Without the association of security attributes to information, there is no basis for the application to make security related access-control decisions.\n\nSecurity attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese attributes are typically associated with internal data structures (e.g., records, buffers, files) within the information system and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy.\n\nOne example includes marking data as classified or FOUO. These security attributes may be assigned manually or during data processing but either way, it is imperative these assignments are maintained while the data is in process. If the security attributes are lost when the data is being processed, there is the risk of a data compromise.","check":"Review the application documentation and interview the application administrator.\n\nIdentify if the application requirements include data marking.  Also determine if the application processes classified, FOUO or other data that is required to be marked.\n\nIf the application does not contain classified, FOUO or have data marking requirements, this requirement is not applicable.\n\nAccess the user interface for the application and navigate through the application. Perform several application actions that will manipulate data contained within the application.\n\nFor example, create a test record and assign a data marking to the data element. Save the test record, close the data entry fields and navigate to display the test record. Perform an edit action on the test data that does not edit the marking itself or perform any other form of data processing such as assigning the data to another users work queue for review or printing the data, ensure the data marking is retained throughout the data processing actions.\n\nIf application data required to be marked does not retain its marking while it is being processed by the application, this is a finding.","fix":"Design and configure the application to retain the data marking when processing data."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24064r493090_chk","severity":"medium","gid":"V-222394","rid":"SV-222394r879690_rule","stig_id":"APSC-DV-000120","gtitle":"SRG-APP-000313","fix_id":"F-24053r493091_fix","documentable":null,"legacy":["SV-83875","V-69253"],"cci":["CCI-002263"],"nist":["AC-16 a"]}},{"id":"SV-222395","code":"control 'SV-222395' do\n  title 'The application must associate organization-defined types of security attributes having organization-defined security attribute values with information in transmission.'\n  desc 'Without the association of security attributes to information, there is no basis for the application to make security related access-control decisions.\n\nSecurity attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese attributes are typically associated with internal data structures (e.g., records, buffers, files) within the information system and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy.\n\nOne example includes marking data as classified or FOUO. These security attributes may be assigned manually or during data processing but either way, it is imperative these assignments are maintained while the data is in transmission. If the security attributes are lost when the data is being transmitted, there is the risk of a data compromise.'\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nIdentify if the application requirements include data marking also determine if the application processes classified, FOUO or other data that is required to be marked.\n\nAccess the user interface for the application and navigate through the application. Perform an application action that will transmit marked data that is contained within the application.\n\nIf the application does not contain classified, FOUO or have data marking requirements, or if the application does not transmit data, this requirement is not applicable.\n\nE.g., create a test record and assign a data marking to the data element. Save the test record, close the data entry fields and navigate to display the test record. Initiate the application processes to transmit data. Access remote system or have person with access to remote system verify the data marking is retained after the data transmission.\n\nIf application data required to be marked does not retain its marking when it is being transmitted by the application, this is a finding.'\n  desc 'fix', 'Design and configure the application to retain the data marking when transmitting data.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24065r493093_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222395'\n  tag rid: 'SV-222395r879691_rule'\n  tag stig_id: 'APSC-DV-000130'\n  tag gtitle: 'SRG-APP-000314'\n  tag fix_id: 'F-24054r493094_fix'\n  tag 'documentable'\n  tag legacy: ['SV-83877', 'V-69255']\n  tag cci: ['CCI-002264']\n  tag nist: ['AC-16 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222395.rb"},"title":"The application must associate organization-defined types of security attributes having organization-defined security attribute values with information in transmission.","desc":"Without the association of security attributes to information, there is no basis for the application to make security related access-control decisions.\n\nSecurity attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese attributes are typically associated with internal data structures (e.g., records, buffers, files) within the information system and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy.\n\nOne example includes marking data as classified or FOUO. These security attributes may be assigned manually or during data processing but either way, it is imperative these assignments are maintained while the data is in transmission. If the security attributes are lost when the data is being transmitted, there is the risk of a data compromise.","descriptions":{"default":"Without the association of security attributes to information, there is no basis for the application to make security related access-control decisions.\n\nSecurity attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese attributes are typically associated with internal data structures (e.g., records, buffers, files) within the information system and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy.\n\nOne example includes marking data as classified or FOUO. These security attributes may be assigned manually or during data processing but either way, it is imperative these assignments are maintained while the data is in transmission. If the security attributes are lost when the data is being transmitted, there is the risk of a data compromise.","check":"Review the application documentation and interview the application administrator.\n\nIdentify if the application requirements include data marking also determine if the application processes classified, FOUO or other data that is required to be marked.\n\nAccess the user interface for the application and navigate through the application. Perform an application action that will transmit marked data that is contained within the application.\n\nIf the application does not contain classified, FOUO or have data marking requirements, or if the application does not transmit data, this requirement is not applicable.\n\nE.g., create a test record and assign a data marking to the data element. Save the test record, close the data entry fields and navigate to display the test record. Initiate the application processes to transmit data. Access remote system or have person with access to remote system verify the data marking is retained after the data transmission.\n\nIf application data required to be marked does not retain its marking when it is being transmitted by the application, this is a finding.","fix":"Design and configure the application to retain the data marking when transmitting data."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24065r493093_chk","severity":"medium","gid":"V-222395","rid":"SV-222395r879691_rule","stig_id":"APSC-DV-000130","gtitle":"SRG-APP-000314","fix_id":"F-24054r493094_fix","documentable":null,"legacy":["SV-83877","V-69255"],"cci":["CCI-002264"],"nist":["AC-16 a"]}},{"id":"SV-222396","code":"control 'SV-222396' do\n  title 'The application must implement DoD-approved encryption to protect the confidentiality of remote access sessions.'\n  desc 'Without confidentiality protection mechanisms, unauthorized individuals may gain access to sensitive information via a remote access session.\n\nRemote access is access to DoD nonpublic information systems by an authorized user (or an information system) communicating through an external, non-organization-controlled network. Remote access methods include, for example, dial-up, broadband, and wireless.\n\nEncryption provides a means to secure the remote connection to prevent unauthorized access to the data traversing the remote access connection thereby providing a degree of confidentiality. The encryption strength of mechanism is selected based on the security categorization of the information.'\n  desc 'check', 'Review the application documentation and interview the system administrator.\n\nIdentify the application encryption capabilities and methods for implementing encryption protection.\n\nFor web based applications; open the web browser and access the website URL. Use the browser and determine if the session is protected via TLS. A secure connection is usually indicated in the upper left hand corner of the URL by a padlock icon. Click on the padlock icon and examine the connection information. Determine if TLS encryption is used to secure the session.\n\nFor non-web based applications, determine the TCP/IP port, protocol and method used for establishing client connections to the remote server. Review application configuration settings to ensure encryption is specified and  via TLS.\n\nIf the connection is not secured with TLS, this is a finding.'\n  desc 'fix', 'Design and configure applications to use TLS encryption to protect the confidentiality of remote access sessions.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24066r493096_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222396'\n  tag rid: 'SV-222396r879519_rule'\n  tag stig_id: 'APSC-DV-000160'\n  tag gtitle: 'SRG-APP-000014'\n  tag fix_id: 'F-24055r493097_fix'\n  tag 'documentable'\n  tag legacy: ['SV-83879', 'V-69257']\n  tag cci: ['CCI-000068']\n  tag nist: ['AC-17 (2)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222396.rb"},"title":"The application must implement DoD-approved encryption to protect the confidentiality of remote access sessions.","desc":"Without confidentiality protection mechanisms, unauthorized individuals may gain access to sensitive information via a remote access session.\n\nRemote access is access to DoD nonpublic information systems by an authorized user (or an information system) communicating through an external, non-organization-controlled network. Remote access methods include, for example, dial-up, broadband, and wireless.\n\nEncryption provides a means to secure the remote connection to prevent unauthorized access to the data traversing the remote access connection thereby providing a degree of confidentiality. The encryption strength of mechanism is selected based on the security categorization of the information.","descriptions":{"default":"Without confidentiality protection mechanisms, unauthorized individuals may gain access to sensitive information via a remote access session.\n\nRemote access is access to DoD nonpublic information systems by an authorized user (or an information system) communicating through an external, non-organization-controlled network. Remote access methods include, for example, dial-up, broadband, and wireless.\n\nEncryption provides a means to secure the remote connection to prevent unauthorized access to the data traversing the remote access connection thereby providing a degree of confidentiality. The encryption strength of mechanism is selected based on the security categorization of the information.","check":"Review the application documentation and interview the system administrator.\n\nIdentify the application encryption capabilities and methods for implementing encryption protection.\n\nFor web based applications; open the web browser and access the website URL. Use the browser and determine if the session is protected via TLS. A secure connection is usually indicated in the upper left hand corner of the URL by a padlock icon. Click on the padlock icon and examine the connection information. Determine if TLS encryption is used to secure the session.\n\nFor non-web based applications, determine the TCP/IP port, protocol and method used for establishing client connections to the remote server. Review application configuration settings to ensure encryption is specified and  via TLS.\n\nIf the connection is not secured with TLS, this is a finding.","fix":"Design and configure applications to use TLS encryption to protect the confidentiality of remote access sessions."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24066r493096_chk","severity":"medium","gid":"V-222396","rid":"SV-222396r879519_rule","stig_id":"APSC-DV-000160","gtitle":"SRG-APP-000014","fix_id":"F-24055r493097_fix","documentable":null,"legacy":["SV-83879","V-69257"],"cci":["CCI-000068"],"nist":["AC-17 (2)"]}},{"id":"SV-222397","code":"control 'SV-222397' do\n  title 'The application must implement cryptographic mechanisms to protect the integrity of remote access sessions.'\n  desc 'Without integrity protection mechanisms, unauthorized individuals may gain access to sensitive information via a remote access session.\n\nRemote access is access to DoD nonpublic information systems by an authorized user (or an information system) communicating through an external, non-organization-controlled network. Remote access methods include, for example, dial-up, broadband, and wireless.\n\nEncryption provides a means to secure the remote connection to prevent unauthorized access to the data traversing the remote access connection. Without integrity protection mechanisms, unauthorized individuals may be able to insert inauthentic content into a remote session. The encryption strength of mechanism is selected based on the security categorization of the information.'\n  desc 'check', 'Review the application documentation and interview the system administrator.\n\nIdentify the application encryption capabilities and methods for implementing encryption protection.\n\nFor web based applications; open the web browser and access the website URL. Use the browser and determine if the session is protected via TLS. A secure connection is usually indicated in the upper left hand corner of the URL by a padlock icon. Click on the padlock icon and examine the connection information. Determine if TLS encryption is used to secure the session.\n\nFor non-web based applications, determine the TCP/IP port, protocol and method used for establishing client connections to the remote server. Review application configuration settings to ensure encryption is specified and  via TLS.\n\nIf the connection is not secured with TLS, this is a finding.'\n  desc 'fix', 'Design and configure applications to use TLS encryption to protect the integrity of remote access sessions.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24067r493099_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222397'\n  tag rid: 'SV-222397r879520_rule'\n  tag stig_id: 'APSC-DV-000170'\n  tag gtitle: 'SRG-APP-000015'\n  tag fix_id: 'F-24056r493100_fix'\n  tag 'documentable'\n  tag legacy: ['V-69259', 'SV-83881']\n  tag cci: ['CCI-001453']\n  tag nist: ['AC-17 (2)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222397.rb"},"title":"The application must implement cryptographic mechanisms to protect the integrity of remote access sessions.","desc":"Without integrity protection mechanisms, unauthorized individuals may gain access to sensitive information via a remote access session.\n\nRemote access is access to DoD nonpublic information systems by an authorized user (or an information system) communicating through an external, non-organization-controlled network. Remote access methods include, for example, dial-up, broadband, and wireless.\n\nEncryption provides a means to secure the remote connection to prevent unauthorized access to the data traversing the remote access connection. Without integrity protection mechanisms, unauthorized individuals may be able to insert inauthentic content into a remote session. The encryption strength of mechanism is selected based on the security categorization of the information.","descriptions":{"default":"Without integrity protection mechanisms, unauthorized individuals may gain access to sensitive information via a remote access session.\n\nRemote access is access to DoD nonpublic information systems by an authorized user (or an information system) communicating through an external, non-organization-controlled network. Remote access methods include, for example, dial-up, broadband, and wireless.\n\nEncryption provides a means to secure the remote connection to prevent unauthorized access to the data traversing the remote access connection. Without integrity protection mechanisms, unauthorized individuals may be able to insert inauthentic content into a remote session. The encryption strength of mechanism is selected based on the security categorization of the information.","check":"Review the application documentation and interview the system administrator.\n\nIdentify the application encryption capabilities and methods for implementing encryption protection.\n\nFor web based applications; open the web browser and access the website URL. Use the browser and determine if the session is protected via TLS. A secure connection is usually indicated in the upper left hand corner of the URL by a padlock icon. Click on the padlock icon and examine the connection information. Determine if TLS encryption is used to secure the session.\n\nFor non-web based applications, determine the TCP/IP port, protocol and method used for establishing client connections to the remote server. Review application configuration settings to ensure encryption is specified and  via TLS.\n\nIf the connection is not secured with TLS, this is a finding.","fix":"Design and configure applications to use TLS encryption to protect the integrity of remote access sessions."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24067r493099_chk","severity":"medium","gid":"V-222397","rid":"SV-222397r879520_rule","stig_id":"APSC-DV-000170","gtitle":"SRG-APP-000015","fix_id":"F-24056r493100_fix","documentable":null,"legacy":["V-69259","SV-83881"],"cci":["CCI-001453"],"nist":["AC-17 (2)"]}},{"id":"SV-222398","code":"control 'SV-222398' do\n  title 'Applications with SOAP messages requiring integrity must include the following message elements:-Message ID-Service Request-Timestamp-SAML Assertion (optionally included in messages) and all elements of the message must be digitally signed.'\n  desc 'Digitally signed SOAP messages provide message integrity and authenticity of the signer of the message independent of the transport layer. Service requests may be intercepted and changed in transit and the data integrity may be at risk if the SOAP message is not digitally signed.\n\nFunctional architecture aspects of the application security plan identify the application data elements that require data integrity protection.'\n  desc 'check', 'Review the application documentation, system security plan, application architecture diagrams and interview the application administrator.\n\nReview the design document for web services using SOAP messages.\n\nIf the application does not utilize SOAP messages, this check is not applicable.\n\nReview the design document and SOAP messages.\nVerify the Message ID, Service Request, Timestamp, and SAML Assertion are included in the SOAP message.\nIf they are included, verify they are signed with a certificate.\n\nIf SOAP messages requiring integrity do not have the Message ID, Service Request, Timestamp, and SAML Assertion signed, or if any part of the message is not digitally signed, this is a finding.'\n  desc 'fix', 'Design and configure the application to sign the following message elements for SOAP messages requiring integrity:\n\n- Message ID\n- Service Request\n- Timestamp\n- SAML Assertion\n- Message elements'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24068r493102_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222398'\n  tag rid: 'SV-222398r879520_rule'\n  tag stig_id: 'APSC-DV-000180'\n  tag gtitle: 'SRG-APP-000015'\n  tag fix_id: 'F-24057r493103_fix'\n  tag 'documentable'\n  tag legacy: ['V-69261', 'SV-83883']\n  tag cci: ['CCI-001453']\n  tag nist: ['AC-17 (2)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222398.rb"},"title":"Applications with SOAP messages requiring integrity must include the following message elements:-Message ID-Service Request-Timestamp-SAML Assertion (optionally included in messages) and all elements of the message must be digitally signed.","desc":"Digitally signed SOAP messages provide message integrity and authenticity of the signer of the message independent of the transport layer. Service requests may be intercepted and changed in transit and the data integrity may be at risk if the SOAP message is not digitally signed.\n\nFunctional architecture aspects of the application security plan identify the application data elements that require data integrity protection.","descriptions":{"default":"Digitally signed SOAP messages provide message integrity and authenticity of the signer of the message independent of the transport layer. Service requests may be intercepted and changed in transit and the data integrity may be at risk if the SOAP message is not digitally signed.\n\nFunctional architecture aspects of the application security plan identify the application data elements that require data integrity protection.","check":"Review the application documentation, system security plan, application architecture diagrams and interview the application administrator.\n\nReview the design document for web services using SOAP messages.\n\nIf the application does not utilize SOAP messages, this check is not applicable.\n\nReview the design document and SOAP messages.\nVerify the Message ID, Service Request, Timestamp, and SAML Assertion are included in the SOAP message.\nIf they are included, verify they are signed with a certificate.\n\nIf SOAP messages requiring integrity do not have the Message ID, Service Request, Timestamp, and SAML Assertion signed, or if any part of the message is not digitally signed, this is a finding.","fix":"Design and configure the application to sign the following message elements for SOAP messages requiring integrity:\n\n- Message ID\n- Service Request\n- Timestamp\n- SAML Assertion\n- Message elements"},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24068r493102_chk","severity":"medium","gid":"V-222398","rid":"SV-222398r879520_rule","stig_id":"APSC-DV-000180","gtitle":"SRG-APP-000015","fix_id":"F-24057r493103_fix","documentable":null,"legacy":["V-69261","SV-83883"],"cci":["CCI-001453"],"nist":["AC-17 (2)"]}},{"id":"SV-222399","code":"control 'SV-222399' do\n  title 'Messages protected with WS_Security must use time stamps with creation and expiration times.'\n  desc 'The lack of time stamps could lead to the eventual replay of the message, leaving the application susceptible to replay events which may result in an immediate loss of confidentiality.'\n  desc 'check', 'Ask the application representative for the design document. Review the design document for web services using WS-Security tokens.\n\nIf the application does not utilize WS-Security tokens, this check is not applicable.\n\nExamine the contents of a SOAP message using WS Security; all messages should contain time stamps, sequence numbers, and expiration.\n\nIf messages using WS Security do not contain time stamps, sequence numbers, and expiration, this is a finding.'\n  desc 'fix', 'Design and configure applications using WS-Security messages to use time stamps with creation and expiration times and sequence numbers.'\n  impact 0.7\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24069r493105_chk'\n  tag severity: 'high'\n  tag gid: 'V-222399'\n  tag rid: 'SV-222399r879519_rule'\n  tag stig_id: 'APSC-DV-000190'\n  tag gtitle: 'SRG-APP-000014'\n  tag fix_id: 'F-24058r493106_fix'\n  tag 'documentable'\n  tag legacy: ['V-69279', 'SV-83901']\n  tag cci: ['CCI-000068']\n  tag nist: ['AC-17 (2)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222399.rb"},"title":"Messages protected with WS_Security must use time stamps with creation and expiration times.","desc":"The lack of time stamps could lead to the eventual replay of the message, leaving the application susceptible to replay events which may result in an immediate loss of confidentiality.","descriptions":{"default":"The lack of time stamps could lead to the eventual replay of the message, leaving the application susceptible to replay events which may result in an immediate loss of confidentiality.","check":"Ask the application representative for the design document. Review the design document for web services using WS-Security tokens.\n\nIf the application does not utilize WS-Security tokens, this check is not applicable.\n\nExamine the contents of a SOAP message using WS Security; all messages should contain time stamps, sequence numbers, and expiration.\n\nIf messages using WS Security do not contain time stamps, sequence numbers, and expiration, this is a finding.","fix":"Design and configure applications using WS-Security messages to use time stamps with creation and expiration times and sequence numbers."},"impact":0.7,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24069r493105_chk","severity":"high","gid":"V-222399","rid":"SV-222399r879519_rule","stig_id":"APSC-DV-000190","gtitle":"SRG-APP-000014","fix_id":"F-24058r493106_fix","documentable":null,"legacy":["V-69279","SV-83901"],"cci":["CCI-000068"],"nist":["AC-17 (2)"]}},{"id":"SV-222400","code":"control 'SV-222400' do\n  title 'Validity periods must be verified on all application messages using WS-Security or SAML assertions.'\n  desc 'When using WS-Security in SOAP messages, the application should check the validity of the time stamps with creation and expiration times. Time stamps that are not validated may lead to a replay event and provide immediate unauthorized access of the application. Unauthorized access results in an immediate loss of confidentiality.'\n  desc 'check', 'Ask the application representative for the design document.\n\nReview the design document for web services.\n\nIf the application does not utilize WSS or SAML assertions, this requirement is not applicable.\n\nReview the design document and verify validity periods are checked on all messages using WS-Security or SAML assertions.\n\nIf the design document does not exist, or does not indicate validity periods are checked on messages using WS-Security or SAML assertions, this is a finding.'\n  desc 'fix', 'Design and configure the application to use validity periods, ensure validity periods are verified on all WS-Security token profiles and SAML Assertions.'\n  impact 0.7\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24070r493108_chk'\n  tag severity: 'high'\n  tag gid: 'V-222400'\n  tag rid: 'SV-222400r879519_rule'\n  tag stig_id: 'APSC-DV-000200'\n  tag gtitle: 'SRG-APP-000014'\n  tag fix_id: 'F-24059r493109_fix'\n  tag 'documentable'\n  tag legacy: ['SV-83903', 'V-69281']\n  tag cci: ['CCI-000068']\n  tag nist: ['AC-17 (2)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222400.rb"},"title":"Validity periods must be verified on all application messages using WS-Security or SAML assertions.","desc":"When using WS-Security in SOAP messages, the application should check the validity of the time stamps with creation and expiration times. Time stamps that are not validated may lead to a replay event and provide immediate unauthorized access of the application. Unauthorized access results in an immediate loss of confidentiality.","descriptions":{"default":"When using WS-Security in SOAP messages, the application should check the validity of the time stamps with creation and expiration times. Time stamps that are not validated may lead to a replay event and provide immediate unauthorized access of the application. Unauthorized access results in an immediate loss of confidentiality.","check":"Ask the application representative for the design document.\n\nReview the design document for web services.\n\nIf the application does not utilize WSS or SAML assertions, this requirement is not applicable.\n\nReview the design document and verify validity periods are checked on all messages using WS-Security or SAML assertions.\n\nIf the design document does not exist, or does not indicate validity periods are checked on messages using WS-Security or SAML assertions, this is a finding.","fix":"Design and configure the application to use validity periods, ensure validity periods are verified on all WS-Security token profiles and SAML Assertions."},"impact":0.7,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24070r493108_chk","severity":"high","gid":"V-222400","rid":"SV-222400r879519_rule","stig_id":"APSC-DV-000200","gtitle":"SRG-APP-000014","fix_id":"F-24059r493109_fix","documentable":null,"legacy":["SV-83903","V-69281"],"cci":["CCI-000068"],"nist":["AC-17 (2)"]}},{"id":"SV-222401","code":"control 'SV-222401' do\n  title 'The application must ensure each unique asserting party provides unique assertion ID references for each SAML assertion.'\n  desc '<0> [object Object]'\n  desc 'check', 'Ask the application representative for the design document.\n\nReview the design document for web services using SAML assertions.\n\nIf the application does not utilize SAML assertions, this check is not applicable.\n\nReview the design document and verify SAML assertion identifiers are not reused by a single asserting party.\n\nIf the design document does not exist, or does not indicate SAML assertion identifiers which are unique for each asserting party, this is a finding.'\n  desc 'fix', 'Design and configure each SAML assertion authority to use unique assertion identifiers.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24071r493111_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222401'\n  tag rid: 'SV-222401r879519_rule'\n  tag stig_id: 'APSC-DV-000210'\n  tag gtitle: 'SRG-APP-000014'\n  tag fix_id: 'F-24060r493112_fix'\n  tag legacy: ['V-69283', 'SV-83905']\n  tag cci: ['CCI-000068']\n  tag nist: ['AC-17 (2)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222401.rb"},"title":"The application must ensure each unique asserting party provides unique assertion ID references for each SAML assertion.","desc":"<0> [object Object]","descriptions":{"default":"<0> [object Object]","check":"Ask the application representative for the design document.\n\nReview the design document for web services using SAML assertions.\n\nIf the application does not utilize SAML assertions, this check is not applicable.\n\nReview the design document and verify SAML assertion identifiers are not reused by a single asserting party.\n\nIf the design document does not exist, or does not indicate SAML assertion identifiers which are unique for each asserting party, this is a finding.","fix":"Design and configure each SAML assertion authority to use unique assertion identifiers."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24071r493111_chk","severity":"medium","gid":"V-222401","rid":"SV-222401r879519_rule","stig_id":"APSC-DV-000210","gtitle":"SRG-APP-000014","fix_id":"F-24060r493112_fix","legacy":["V-69283","SV-83905"],"cci":["CCI-000068"],"nist":["AC-17 (2)"]}},{"id":"SV-222402","code":"control 'SV-222402' do\n  title 'The application must ensure encrypted assertions, or equivalent confidentiality protections are used when assertion data is passed through an intermediary, and confidentiality of the assertion data is required when passing through the intermediary.'\n  desc '<0> [object Object]'\n  desc 'check', 'Ask the application representative for the design document.\n\nReview the design document for web services using WS-Security tokens.  \n\nIf the application does not utilize WS-Security tokens, this check is not applicable.\n\nVerify all WS-Security tokens are transmitted via an approved encryption method.\n\nIf the design document does not exist, or does not indicate all WS-Security tokens are only transmitted via an approved encryption method, this is a finding.'\n  desc 'fix', 'Encrypt assertions or use equivalent confidentiality when sensitive assertion data is passed through an intermediary.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24072r493114_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222402'\n  tag rid: 'SV-222402r879519_rule'\n  tag stig_id: 'APSC-DV-000220'\n  tag gtitle: 'SRG-APP-000014'\n  tag fix_id: 'F-24061r493115_fix'\n  tag legacy: ['SV-83907', 'V-69285']\n  tag cci: ['CCI-000068']\n  tag nist: ['AC-17 (2)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222402.rb"},"title":"The application must ensure encrypted assertions, or equivalent confidentiality protections are used when assertion data is passed through an intermediary, and confidentiality of the assertion data is required when passing through the intermediary.","desc":"<0> [object Object]","descriptions":{"default":"<0> [object Object]","check":"Ask the application representative for the design document.\n\nReview the design document for web services using WS-Security tokens.  \n\nIf the application does not utilize WS-Security tokens, this check is not applicable.\n\nVerify all WS-Security tokens are transmitted via an approved encryption method.\n\nIf the design document does not exist, or does not indicate all WS-Security tokens are only transmitted via an approved encryption method, this is a finding.","fix":"Encrypt assertions or use equivalent confidentiality when sensitive assertion data is passed through an intermediary."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24072r493114_chk","severity":"medium","gid":"V-222402","rid":"SV-222402r879519_rule","stig_id":"APSC-DV-000220","gtitle":"SRG-APP-000014","fix_id":"F-24061r493115_fix","legacy":["SV-83907","V-69285"],"cci":["CCI-000068"],"nist":["AC-17 (2)"]}},{"id":"SV-222403","code":"control 'SV-222403' do\n  title 'The application must use the NotOnOrAfter condition when using the SubjectConfirmation element in a SAML assertion.'\n  desc '<0> [object Object]'\n  desc 'check', 'Ask the application representative for the design document.\n\nReview the design document for web services using SAML assertions.\n\nIf the application does not utilize SAML assertions, this check is not applicable.\n\nExamine the contents of a SOAP message using the <SubjectConfirmation> element. All messages should contain the <NotOnOrAfter> element. This can be accomplished if the application allows the ability to view XML messages or via a protocol analyzer like Wireshark.\n\nIf SOAP messages do not contain <NotOnOrAfter> elements, this is a finding.'\n  desc 'fix', 'Design and configure the application to use the <NotOnOrAfter> condition when using the <SubjectConfirmation> element in a SAML assertion.'\n  impact 0.7\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24073r493117_chk'\n  tag severity: 'high'\n  tag gid: 'V-222403'\n  tag rid: 'SV-222403r879519_rule'\n  tag stig_id: 'APSC-DV-000230'\n  tag gtitle: 'SRG-APP-000014'\n  tag fix_id: 'F-24062r493118_fix'\n  tag legacy: ['SV-83909', 'V-69287']\n  tag cci: ['CCI-000068']\n  tag nist: ['AC-17 (2)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222403.rb"},"title":"The application must use the NotOnOrAfter condition when using the SubjectConfirmation element in a SAML assertion.","desc":"<0> [object Object]","descriptions":{"default":"<0> [object Object]","check":"Ask the application representative for the design document.\n\nReview the design document for web services using SAML assertions.\n\nIf the application does not utilize SAML assertions, this check is not applicable.\n\nExamine the contents of a SOAP message using the <SubjectConfirmation> element. All messages should contain the <NotOnOrAfter> element. This can be accomplished if the application allows the ability to view XML messages or via a protocol analyzer like Wireshark.\n\nIf SOAP messages do not contain <NotOnOrAfter> elements, this is a finding.","fix":"Design and configure the application to use the <NotOnOrAfter> condition when using the <SubjectConfirmation> element in a SAML assertion."},"impact":0.7,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24073r493117_chk","severity":"high","gid":"V-222403","rid":"SV-222403r879519_rule","stig_id":"APSC-DV-000230","gtitle":"SRG-APP-000014","fix_id":"F-24062r493118_fix","legacy":["SV-83909","V-69287"],"cci":["CCI-000068"],"nist":["AC-17 (2)"]}},{"id":"SV-222404","code":"control 'SV-222404' do\n  title 'The application must use both the NotBefore and NotOnOrAfter elements or OneTimeUse element when using the Conditions element in a SAML assertion.'\n  desc '<0> [object Object]'\n  desc 'check', 'Ask the application representative for the design document.\n\nReview the design document for web services using SAML assertions.\n\nIf the application does not utilize SAML assertions, this check is not applicable.\n\nExamine the contents of a SOAP message using the <Conditions> element; all messages should contain the <NotBefore> and <NotOnOrAfter> or <OneTimeUse> element when in a SAML Assertion. This can be accomplished using a protocol analyzer such as Wireshark.\n\nIf SOAP using the <Conditions> element does not contain <NotBefore> and <NotOnOrAfter> or <OneTimeUse> elements, this is a finding.'\n  desc 'fix', 'Design and configure the application to implement the use of the <NotBefore> and <NotOnOrAfter> or <OneTimeUse> when using the <Conditions> element in a SAML assertion.'\n  impact 0.7\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24074r493120_chk'\n  tag severity: 'high'\n  tag gid: 'V-222404'\n  tag rid: 'SV-222404r879519_rule'\n  tag stig_id: 'APSC-DV-000240'\n  tag gtitle: 'SRG-APP-000014'\n  tag fix_id: 'F-24063r493121_fix'\n  tag legacy: ['V-69289', 'SV-83911']\n  tag cci: ['CCI-000068']\n  tag nist: ['AC-17 (2)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222404.rb"},"title":"The application must use both the NotBefore and NotOnOrAfter elements or OneTimeUse element when using the Conditions element in a SAML assertion.","desc":"<0> [object Object]","descriptions":{"default":"<0> [object Object]","check":"Ask the application representative for the design document.\n\nReview the design document for web services using SAML assertions.\n\nIf the application does not utilize SAML assertions, this check is not applicable.\n\nExamine the contents of a SOAP message using the <Conditions> element; all messages should contain the <NotBefore> and <NotOnOrAfter> or <OneTimeUse> element when in a SAML Assertion. This can be accomplished using a protocol analyzer such as Wireshark.\n\nIf SOAP using the <Conditions> element does not contain <NotBefore> and <NotOnOrAfter> or <OneTimeUse> elements, this is a finding.","fix":"Design and configure the application to implement the use of the <NotBefore> and <NotOnOrAfter> or <OneTimeUse> when using the <Conditions> element in a SAML assertion."},"impact":0.7,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24074r493120_chk","severity":"high","gid":"V-222404","rid":"SV-222404r879519_rule","stig_id":"APSC-DV-000240","gtitle":"SRG-APP-000014","fix_id":"F-24063r493121_fix","legacy":["V-69289","SV-83911"],"cci":["CCI-000068"],"nist":["AC-17 (2)"]}},{"id":"SV-222405","code":"control 'SV-222405' do\n  title 'The application must ensure if a OneTimeUse element is used in an assertion, there is only one of the same used in the Conditions element portion of an assertion.'\n  desc '<0> [object Object]'\n  desc 'check', 'Ask the application representative for the design document.\n\nReview the design document for web services using SAML assertions.\n\nIf the application does not utilize SAML assertions, this check is not applicable.\n\nExamine the contents of a SOAP message using the OneTimeUse element; all messages should contain only one instance of a <OneTimeUse> element in a SAML assertion. This can be accomplished using a protocol analyzer such as Wireshark.\n\nIf SOAP message uses more than one, OneTimeUse element in a SAML assertion, this is a finding.'\n  desc 'fix', 'When using OneTimeUse elements in a SAML assertion only allow one, OneTimeUse element to be used in the conditions element of a SAML assertion.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24075r493123_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222405'\n  tag rid: 'SV-222405r879519_rule'\n  tag stig_id: 'APSC-DV-000250'\n  tag gtitle: 'SRG-APP-000014'\n  tag fix_id: 'F-24064r493124_fix'\n  tag legacy: ['SV-83913', 'V-69291']\n  tag cci: ['CCI-000068']\n  tag nist: ['AC-17 (2)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222405.rb"},"title":"The application must ensure if a OneTimeUse element is used in an assertion, there is only one of the same used in the Conditions element portion of an assertion.","desc":"<0> [object Object]","descriptions":{"default":"<0> [object Object]","check":"Ask the application representative for the design document.\n\nReview the design document for web services using SAML assertions.\n\nIf the application does not utilize SAML assertions, this check is not applicable.\n\nExamine the contents of a SOAP message using the OneTimeUse element; all messages should contain only one instance of a <OneTimeUse> element in a SAML assertion. This can be accomplished using a protocol analyzer such as Wireshark.\n\nIf SOAP message uses more than one, OneTimeUse element in a SAML assertion, this is a finding.","fix":"When using OneTimeUse elements in a SAML assertion only allow one, OneTimeUse element to be used in the conditions element of a SAML assertion."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24075r493123_chk","severity":"medium","gid":"V-222405","rid":"SV-222405r879519_rule","stig_id":"APSC-DV-000250","gtitle":"SRG-APP-000014","fix_id":"F-24064r493124_fix","legacy":["SV-83913","V-69291"],"cci":["CCI-000068"],"nist":["AC-17 (2)"]}},{"id":"SV-222406","code":"control 'SV-222406' do\n  title 'The application must ensure messages are encrypted when the SessionIndex is tied to privacy data.'\n  desc 'When the SessionIndex is tied to privacy data (e.g., attributes containing privacy data) the message should be encrypted. If the message is not encrypted there is the possibility of compromise of privacy data.'\n  desc 'check', 'Ask the application representative for the design document.\n\nReview the design document for web services using SAML assertions.\n\nIf the application does not utilize SAML assertions, this check is not applicable.\n\nExamine the contents of a SOAP message using a SessionIndex in the SAML element AuthnStatement. Verify the information which is tied to the SessionIndex.\n\nIf the SessionIndex is tied to privacy information, and it is not encrypted, this is a finding.'\n  desc 'fix', 'Encrypt messages when the SessionIndex is tied to privacy data.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24076r493126_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222406'\n  tag rid: 'SV-222406r879519_rule'\n  tag stig_id: 'APSC-DV-000260'\n  tag gtitle: 'SRG-APP-000014'\n  tag fix_id: 'F-24065r493127_fix'\n  tag 'documentable'\n  tag legacy: ['SV-83915', 'V-69293']\n  tag cci: ['CCI-000068']\n  tag nist: ['AC-17 (2)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222406.rb"},"title":"The application must ensure messages are encrypted when the SessionIndex is tied to privacy data.","desc":"When the SessionIndex is tied to privacy data (e.g., attributes containing privacy data) the message should be encrypted. If the message is not encrypted there is the possibility of compromise of privacy data.","descriptions":{"default":"When the SessionIndex is tied to privacy data (e.g., attributes containing privacy data) the message should be encrypted. If the message is not encrypted there is the possibility of compromise of privacy data.","check":"Ask the application representative for the design document.\n\nReview the design document for web services using SAML assertions.\n\nIf the application does not utilize SAML assertions, this check is not applicable.\n\nExamine the contents of a SOAP message using a SessionIndex in the SAML element AuthnStatement. Verify the information which is tied to the SessionIndex.\n\nIf the SessionIndex is tied to privacy information, and it is not encrypted, this is a finding.","fix":"Encrypt messages when the SessionIndex is tied to privacy data."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24076r493126_chk","severity":"medium","gid":"V-222406","rid":"SV-222406r879519_rule","stig_id":"APSC-DV-000260","gtitle":"SRG-APP-000014","fix_id":"F-24065r493127_fix","documentable":null,"legacy":["SV-83915","V-69293"],"cci":["CCI-000068"],"nist":["AC-17 (2)"]}},{"id":"SV-222407","code":"control 'SV-222407' do\n  title 'The application must provide automated mechanisms for supporting account management functions.'\n  desc \"Enterprise environments make application account management challenging and complex. A manual process for account management functions adds the risk of a potential oversight or other error.\n\nManual examples include but are not limited to admin staff logging into the system or systems and manually performing step by step actions affecting user accounts that could otherwise be automated.  This does not include any manual steps taken to initiate automated processes or the use of automated systems.\n\nA comprehensive application account management process that includes automation helps to ensure accounts designated as requiring attention are consistently and promptly addressed. Examples include, but are not limited to, using automation to take action on multiple accounts designated as inactive, suspended or terminated or by disabling accounts located in non-centralized account stores such as multiple servers. This requirement applies to all account types, including individual/user, shared, group, system, guest/anonymous, emergency, developer/manufacturer/vendor, temporary, and service.\n\nThe application must be configured to automatically provide account management functions and these functions must immediately enforce the organization's current account policy. The automated mechanisms may reside within the application itself or may be offered by the operating system or other infrastructure providing automated account management capabilities. Automated mechanisms may be comprised of differing technologies that when placed together contain an overall automated mechanism supporting an organization's automated account management requirements.\n\nAccount management functions include: assignment of group or role membership; identifying account type; specifying user access authorizations (i.e., privileges); account removal, update, or termination; and administrative alerts. The use of automated mechanisms can include, for example: using email or text messaging to automatically notify account managers when users are terminated or transferred; using the information system to monitor account usage; and using automated telephonic notification to report atypical system account usage.\"\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nIdentify the account management methods, processes and procedures that are used.\n\nIf the application is utilizing a centralized authentication mechanism such as Active Directory or LDAP, verify all user account activity is conducted via that solution and no local user accounts that circumvent the automated solution are used.\n\nDetermine if automated mechanisms are used when managing application user accounts and taking management action on application user accounts. Automated methods include but are not limited to:\n\nTaking action on accounts that have been determined to be inactive, suspended, terminated, or disabled.\n\nAutomated action examples include: deleting such accounts, reactivating accounts in conjunction with a validation or verification process, or sending notifications or reminders to the account holders that their account is about to be disabled or deleted.\n\nVerify the action that is taken is automated and repeatable.\n\nIf the account management process is manual in nature, this is a finding.'\n  desc 'fix', 'Use automated processes and mechanisms for account management functions.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24077r493129_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222407'\n  tag rid: 'SV-222407r879522_rule'\n  tag stig_id: 'APSC-DV-000280'\n  tag gtitle: 'SRG-APP-000023'\n  tag fix_id: 'F-24066r493130_fix'\n  tag 'documentable'\n  tag legacy: ['V-69295', 'SV-83917']\n  tag cci: ['CCI-000015']\n  tag nist: ['AC-2 (1)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222407.rb"},"title":"The application must provide automated mechanisms for supporting account management functions.","desc":"Enterprise environments make application account management challenging and complex. A manual process for account management functions adds the risk of a potential oversight or other error.\n\nManual examples include but are not limited to admin staff logging into the system or systems and manually performing step by step actions affecting user accounts that could otherwise be automated.  This does not include any manual steps taken to initiate automated processes or the use of automated systems.\n\nA comprehensive application account management process that includes automation helps to ensure accounts designated as requiring attention are consistently and promptly addressed. Examples include, but are not limited to, using automation to take action on multiple accounts designated as inactive, suspended or terminated or by disabling accounts located in non-centralized account stores such as multiple servers. This requirement applies to all account types, including individual/user, shared, group, system, guest/anonymous, emergency, developer/manufacturer/vendor, temporary, and service.\n\nThe application must be configured to automatically provide account management functions and these functions must immediately enforce the organization's current account policy. The automated mechanisms may reside within the application itself or may be offered by the operating system or other infrastructure providing automated account management capabilities. Automated mechanisms may be comprised of differing technologies that when placed together contain an overall automated mechanism supporting an organization's automated account management requirements.\n\nAccount management functions include: assignment of group or role membership; identifying account type; specifying user access authorizations (i.e., privileges); account removal, update, or termination; and administrative alerts. The use of automated mechanisms can include, for example: using email or text messaging to automatically notify account managers when users are terminated or transferred; using the information system to monitor account usage; and using automated telephonic notification to report atypical system account usage.","descriptions":{"default":"Enterprise environments make application account management challenging and complex. A manual process for account management functions adds the risk of a potential oversight or other error.\n\nManual examples include but are not limited to admin staff logging into the system or systems and manually performing step by step actions affecting user accounts that could otherwise be automated.  This does not include any manual steps taken to initiate automated processes or the use of automated systems.\n\nA comprehensive application account management process that includes automation helps to ensure accounts designated as requiring attention are consistently and promptly addressed. Examples include, but are not limited to, using automation to take action on multiple accounts designated as inactive, suspended or terminated or by disabling accounts located in non-centralized account stores such as multiple servers. This requirement applies to all account types, including individual/user, shared, group, system, guest/anonymous, emergency, developer/manufacturer/vendor, temporary, and service.\n\nThe application must be configured to automatically provide account management functions and these functions must immediately enforce the organization's current account policy. The automated mechanisms may reside within the application itself or may be offered by the operating system or other infrastructure providing automated account management capabilities. Automated mechanisms may be comprised of differing technologies that when placed together contain an overall automated mechanism supporting an organization's automated account management requirements.\n\nAccount management functions include: assignment of group or role membership; identifying account type; specifying user access authorizations (i.e., privileges); account removal, update, or termination; and administrative alerts. The use of automated mechanisms can include, for example: using email or text messaging to automatically notify account managers when users are terminated or transferred; using the information system to monitor account usage; and using automated telephonic notification to report atypical system account usage.","check":"Review the application documentation and interview the application administrator.\n\nIdentify the account management methods, processes and procedures that are used.\n\nIf the application is utilizing a centralized authentication mechanism such as Active Directory or LDAP, verify all user account activity is conducted via that solution and no local user accounts that circumvent the automated solution are used.\n\nDetermine if automated mechanisms are used when managing application user accounts and taking management action on application user accounts. Automated methods include but are not limited to:\n\nTaking action on accounts that have been determined to be inactive, suspended, terminated, or disabled.\n\nAutomated action examples include: deleting such accounts, reactivating accounts in conjunction with a validation or verification process, or sending notifications or reminders to the account holders that their account is about to be disabled or deleted.\n\nVerify the action that is taken is automated and repeatable.\n\nIf the account management process is manual in nature, this is a finding.","fix":"Use automated processes and mechanisms for account management functions."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24077r493129_chk","severity":"medium","gid":"V-222407","rid":"SV-222407r879522_rule","stig_id":"APSC-DV-000280","gtitle":"SRG-APP-000023","fix_id":"F-24066r493130_fix","documentable":null,"legacy":["V-69295","SV-83917"],"cci":["CCI-000015"],"nist":["AC-2 (1)"]}},{"id":"SV-222408","code":"control 'SV-222408' do\n  title 'Shared/group account credentials must be terminated when members leave the group.'\n  desc 'If shared/group account credentials are not terminated when individuals leave the group, the user that left the group can still gain access even though they are no longer authorized. A shared/group account credential is a shared form of authentication that allows multiple individuals to access the application using a single account. There may also be instances when specific user actions need to be performed on the information system without unique user identification or authentication. Examples of credentials include passwords and group membership certificates.'\n  desc 'check', 'Review the application documentation and determine if there is a requirement for shared or group accounts.\n\nIf there is no official requirement for shared or group application accounts, this requirement is not applicable.\n\nInterview the application representative and identify shared/group accounts.\n\nHave the application representative provide their procedures for account management as it pertains to group users.\n\nValidate there is a procedure for deleting either member accounts or the entire group account when member leave the group.\n\nIf there is no process for handling group account credentials, this is a finding.'\n  desc 'fix', 'Create a procedure for deleting either member accounts or the entire group account when members leave the group.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24078r493132_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222408'\n  tag rid: 'SV-222408r879694_rule'\n  tag stig_id: 'APSC-DV-000290'\n  tag gtitle: 'SRG-APP-000317'\n  tag fix_id: 'F-24067r493133_fix'\n  tag 'documentable'\n  tag legacy: ['SV-83919', 'V-69297']\n  tag cci: ['CCI-002142']\n  tag nist: ['AC-2 (10)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222408.rb"},"title":"Shared/group account credentials must be terminated when members leave the group.","desc":"If shared/group account credentials are not terminated when individuals leave the group, the user that left the group can still gain access even though they are no longer authorized. A shared/group account credential is a shared form of authentication that allows multiple individuals to access the application using a single account. There may also be instances when specific user actions need to be performed on the information system without unique user identification or authentication. Examples of credentials include passwords and group membership certificates.","descriptions":{"default":"If shared/group account credentials are not terminated when individuals leave the group, the user that left the group can still gain access even though they are no longer authorized. A shared/group account credential is a shared form of authentication that allows multiple individuals to access the application using a single account. There may also be instances when specific user actions need to be performed on the information system without unique user identification or authentication. Examples of credentials include passwords and group membership certificates.","check":"Review the application documentation and determine if there is a requirement for shared or group accounts.\n\nIf there is no official requirement for shared or group application accounts, this requirement is not applicable.\n\nInterview the application representative and identify shared/group accounts.\n\nHave the application representative provide their procedures for account management as it pertains to group users.\n\nValidate there is a procedure for deleting either member accounts or the entire group account when member leave the group.\n\nIf there is no process for handling group account credentials, this is a finding.","fix":"Create a procedure for deleting either member accounts or the entire group account when members leave the group."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24078r493132_chk","severity":"medium","gid":"V-222408","rid":"SV-222408r879694_rule","stig_id":"APSC-DV-000290","gtitle":"SRG-APP-000317","fix_id":"F-24067r493133_fix","documentable":null,"legacy":["SV-83919","V-69297"],"cci":["CCI-002142"],"nist":["AC-2 (10)"]}},{"id":"SV-222409","code":"control 'SV-222409' do\n  title 'The application must automatically remove or disable temporary user accounts 72 hours after account creation.'\n  desc 'If temporary user accounts remain active when no longer needed or for an excessive period, these accounts may be used to gain unauthorized access. To mitigate this risk, automated termination of all temporary accounts must be set upon account creation.\n\nTemporary accounts are established as part of normal account activation procedures when there is a need for short-term accounts without the demand for immediacy in account activation.\n\nIf temporary accounts are used, the application must be configured to automatically terminate these types of accounts after a DoD-defined time period of 72 hours starting from the point of account creation.\n\nTo address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.'\n  desc 'check', 'If official documentation exist that disallows the use of temporary user accounts within the application, this requirement is not applicable.\n\nExamine the application documentation or interview the application representative to identify how the application users are managed.\n\nNavigate to the screen where user accounts are configured.\n\nCreate a test account and determine if there is a setting to specify the user account as being temporary in nature.\n\nDetermine if there is an available setting to expire the account after a period of time.\n\nIf the application has no ability to specify a user account as being temporary in nature, or if the account has no ability to automatically disable or remove the account after 72 hours after account creation, this is a finding.'\n  desc 'fix', 'Configure temporary accounts to be automatically removed or disabled after 72 hours after account creation.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24079r493135_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222409'\n  tag rid: 'SV-222409r879523_rule'\n  tag stig_id: 'APSC-DV-000300'\n  tag gtitle: 'SRG-APP-000024'\n  tag fix_id: 'F-24068r493136_fix'\n  tag 'documentable'\n  tag legacy: ['V-69299', 'SV-83921']\n  tag cci: ['CCI-000016']\n  tag nist: ['AC-2 (2)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222409.rb"},"title":"The application must automatically remove or disable temporary user accounts 72 hours after account creation.","desc":"If temporary user accounts remain active when no longer needed or for an excessive period, these accounts may be used to gain unauthorized access. To mitigate this risk, automated termination of all temporary accounts must be set upon account creation.\n\nTemporary accounts are established as part of normal account activation procedures when there is a need for short-term accounts without the demand for immediacy in account activation.\n\nIf temporary accounts are used, the application must be configured to automatically terminate these types of accounts after a DoD-defined time period of 72 hours starting from the point of account creation.\n\nTo address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.","descriptions":{"default":"If temporary user accounts remain active when no longer needed or for an excessive period, these accounts may be used to gain unauthorized access. To mitigate this risk, automated termination of all temporary accounts must be set upon account creation.\n\nTemporary accounts are established as part of normal account activation procedures when there is a need for short-term accounts without the demand for immediacy in account activation.\n\nIf temporary accounts are used, the application must be configured to automatically terminate these types of accounts after a DoD-defined time period of 72 hours starting from the point of account creation.\n\nTo address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms meeting or exceeding access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.","check":"If official documentation exist that disallows the use of temporary user accounts within the application, this requirement is not applicable.\n\nExamine the application documentation or interview the application representative to identify how the application users are managed.\n\nNavigate to the screen where user accounts are configured.\n\nCreate a test account and determine if there is a setting to specify the user account as being temporary in nature.\n\nDetermine if there is an available setting to expire the account after a period of time.\n\nIf the application has no ability to specify a user account as being temporary in nature, or if the account has no ability to automatically disable or remove the account after 72 hours after account creation, this is a finding.","fix":"Configure temporary accounts to be automatically removed or disabled after 72 hours after account creation."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24079r493135_chk","severity":"medium","gid":"V-222409","rid":"SV-222409r879523_rule","stig_id":"APSC-DV-000300","gtitle":"SRG-APP-000024","fix_id":"F-24068r493136_fix","documentable":null,"legacy":["V-69299","SV-83921"],"cci":["CCI-000016"],"nist":["AC-2 (2)"]}},{"id":"SV-222410","code":"control 'SV-222410' do\n  title 'The application must have a process, feature or function that prevents removal or disabling of emergency accounts.'\n  desc 'Emergency accounts are administrator accounts which are established in response to crisis situations where the need for rapid account activation is required. Therefore, emergency account activation may bypass normal account authorization processes.\n\nIf these accounts are automatically disabled, system maintenance during emergencies may not be possible, thus adversely affecting system availability.\n\nEmergency accounts are different from infrequently used accounts (i.e., local logon accounts used by system administrators when network or normal logon/access is not available). Infrequently used accounts also remain available and are not subject to automatic termination dates. However, an emergency account is normally a different account which is created for use by vendors or system maintainers.\n\nTo address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.'\n  desc 'check', 'Review the application documentation and interview the application administrator. Identify if emergency accounts are ever used. \n\nIf emergency accounts are not used, this requirement is not applicable.\n\nIf emergency accounts are used, validate a procedure, process, feature or function exists that will prevent the emergency account from being deleted or disabled during a crisis situation.\n\nExamples include but are not limited to adding a flag to the account to ensure it is not deleted during a specified emergency period or placing the account in a designated group that is monitored and controlled in accordance with the crisis.\n\nIf a process, procedure, function or feature designed to prevent emergency accounts from being  deleted or disabled during a crisis situation is not available, this is a finding.'\n  desc 'fix', 'Identify accounts that are created in an emergency situation and ensure procedures or processes are in place to prevent disabling or deleting the account while the emergency is underway.'\n  impact 0.3\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24080r493138_chk'\n  tag severity: 'low'\n  tag gid: 'V-222410'\n  tag rid: 'SV-222410r879887_rule'\n  tag stig_id: 'APSC-DV-000310'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24069r493139_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84795', 'V-70173']\n  tag cci: ['CCI-000366']\n  tag nist: ['CM-6 b']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222410.rb"},"title":"The application must have a process, feature or function that prevents removal or disabling of emergency accounts.","desc":"Emergency accounts are administrator accounts which are established in response to crisis situations where the need for rapid account activation is required. Therefore, emergency account activation may bypass normal account authorization processes.\n\nIf these accounts are automatically disabled, system maintenance during emergencies may not be possible, thus adversely affecting system availability.\n\nEmergency accounts are different from infrequently used accounts (i.e., local logon accounts used by system administrators when network or normal logon/access is not available). Infrequently used accounts also remain available and are not subject to automatic termination dates. However, an emergency account is normally a different account which is created for use by vendors or system maintainers.\n\nTo address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.","descriptions":{"default":"Emergency accounts are administrator accounts which are established in response to crisis situations where the need for rapid account activation is required. Therefore, emergency account activation may bypass normal account authorization processes.\n\nIf these accounts are automatically disabled, system maintenance during emergencies may not be possible, thus adversely affecting system availability.\n\nEmergency accounts are different from infrequently used accounts (i.e., local logon accounts used by system administrators when network or normal logon/access is not available). Infrequently used accounts also remain available and are not subject to automatic termination dates. However, an emergency account is normally a different account which is created for use by vendors or system maintainers.\n\nTo address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.","check":"Review the application documentation and interview the application administrator. Identify if emergency accounts are ever used. \n\nIf emergency accounts are not used, this requirement is not applicable.\n\nIf emergency accounts are used, validate a procedure, process, feature or function exists that will prevent the emergency account from being deleted or disabled during a crisis situation.\n\nExamples include but are not limited to adding a flag to the account to ensure it is not deleted during a specified emergency period or placing the account in a designated group that is monitored and controlled in accordance with the crisis.\n\nIf a process, procedure, function or feature designed to prevent emergency accounts from being  deleted or disabled during a crisis situation is not available, this is a finding.","fix":"Identify accounts that are created in an emergency situation and ensure procedures or processes are in place to prevent disabling or deleting the account while the emergency is underway."},"impact":0.3,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24080r493138_chk","severity":"low","gid":"V-222410","rid":"SV-222410r879887_rule","stig_id":"APSC-DV-000310","gtitle":"SRG-APP-000516","fix_id":"F-24069r493139_fix","documentable":null,"legacy":["SV-84795","V-70173"],"cci":["CCI-000366"],"nist":["CM-6 b"]}},{"id":"SV-222411","code":"control 'SV-222411' do\n  title 'The application must automatically disable accounts after a 35 day period of account inactivity.'\n  desc 'Attackers that are able to exploit an inactive account can potentially obtain and maintain undetected access to an application. Owners of inactive accounts will not notice if unauthorized access to their user account has been obtained. Applications need to track periods of user inactivity and disable accounts after 35 days of inactivity. Such a process greatly reduces the risk that accounts will be hijacked, leading to a data compromise.\n\nTo address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.\n\nThis policy does not apply to either emergency accounts or infrequently used accounts. Infrequently used accounts are local logon administrator accounts used by system administrators when network or normal logon/access is not available. Emergency accounts are administrator accounts created in response to crisis situations.'\n  desc 'check', 'Examine the application documentation or interview the application representative to identify how the application users are managed.\n\nInterview the application administrator and determine if the application is configured to utilize a centralized user management system like Active Directory (AD) for user management or if the application manages user accounts within the application.\n\nIf the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.\n\nIf the application handles the management tasks for user accounts, access the applications user management utility.\n\nNavigate to the screen where user accounts are configured to be disabled after 35 days of inactivity.\n\nConfirm this setting is active.\n\nIf the application is not set to expire inactive accounts after 35 days, or if the application has no ability to expire accounts after 35 days of inactivity, this is a finding.'\n  desc 'fix', 'Design and configure the application to expire user accounts after 35 days of inactivity.'\n  impact 0.3\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24081r493141_chk'\n  tag severity: 'low'\n  tag gid: 'V-222411'\n  tag rid: 'SV-222411r879524_rule'\n  tag stig_id: 'APSC-DV-000320'\n  tag gtitle: 'SRG-APP-000025'\n  tag fix_id: 'F-24070r493142_fix'\n  tag 'documentable'\n  tag legacy: ['SV-83923', 'V-69301']\n  tag cci: ['CCI-000017']\n  tag nist: ['AC-2 (3) (d)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222411.rb"},"title":"The application must automatically disable accounts after a 35 day period of account inactivity.","desc":"Attackers that are able to exploit an inactive account can potentially obtain and maintain undetected access to an application. Owners of inactive accounts will not notice if unauthorized access to their user account has been obtained. Applications need to track periods of user inactivity and disable accounts after 35 days of inactivity. Such a process greatly reduces the risk that accounts will be hijacked, leading to a data compromise.\n\nTo address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.\n\nThis policy does not apply to either emergency accounts or infrequently used accounts. Infrequently used accounts are local logon administrator accounts used by system administrators when network or normal logon/access is not available. Emergency accounts are administrator accounts created in response to crisis situations.","descriptions":{"default":"Attackers that are able to exploit an inactive account can potentially obtain and maintain undetected access to an application. Owners of inactive accounts will not notice if unauthorized access to their user account has been obtained. Applications need to track periods of user inactivity and disable accounts after 35 days of inactivity. Such a process greatly reduces the risk that accounts will be hijacked, leading to a data compromise.\n\nTo address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.\n\nThis policy does not apply to either emergency accounts or infrequently used accounts. Infrequently used accounts are local logon administrator accounts used by system administrators when network or normal logon/access is not available. Emergency accounts are administrator accounts created in response to crisis situations.","check":"Examine the application documentation or interview the application representative to identify how the application users are managed.\n\nInterview the application administrator and determine if the application is configured to utilize a centralized user management system like Active Directory (AD) for user management or if the application manages user accounts within the application.\n\nIf the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.\n\nIf the application handles the management tasks for user accounts, access the applications user management utility.\n\nNavigate to the screen where user accounts are configured to be disabled after 35 days of inactivity.\n\nConfirm this setting is active.\n\nIf the application is not set to expire inactive accounts after 35 days, or if the application has no ability to expire accounts after 35 days of inactivity, this is a finding.","fix":"Design and configure the application to expire user accounts after 35 days of inactivity."},"impact":0.3,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24081r493141_chk","severity":"low","gid":"V-222411","rid":"SV-222411r879524_rule","stig_id":"APSC-DV-000320","gtitle":"SRG-APP-000025","fix_id":"F-24070r493142_fix","documentable":null,"legacy":["SV-83923","V-69301"],"cci":["CCI-000017"],"nist":["AC-2 (3) (d)"]}},{"id":"SV-222412","code":"control 'SV-222412' do\n  title 'Unnecessary application accounts must be disabled, or deleted.'\n  desc 'Test or demonstration accounts are sometimes created during the application installation process. This creates a security risk as these accounts often remain after the initial installation process and can be used to gain unauthorized access to the application. Applications must be designed and configured to disable or delete any unnecessary accounts that may be created. \n\nCare must be taken to ensure valid accounts used for valid application operations are not disabled or deleted when this requirement is applied.'\n  desc 'check', 'Review the system documentation and identify any valid application accounts that are required in order for the application to operate. Accounts the application itself uses in order to function are not in scope for this requirement.\n\nHave the application administrator generate a list of all application users. This should include relevant user metadata such as phone numbers or department identifiers.\n\nHave the application administrator identify and validate all user accounts.\n\nIf any accounts cannot be validated and are deemed to be unnecessary, this is a finding.'\n  desc 'fix', 'Design the application so unessential user accounts are not created during installation. Disable or delete all unnecessary application user accounts.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24082r493144_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222412'\n  tag rid: 'SV-222412r879524_rule'\n  tag stig_id: 'APSC-DV-000330'\n  tag gtitle: 'SRG-APP-000025'\n  tag fix_id: 'F-24071r493145_fix'\n  tag 'documentable'\n  tag legacy: ['V-69303', 'SV-83925']\n  tag cci: ['CCI-000017']\n  tag nist: ['AC-2 (3) (d)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222412.rb"},"title":"Unnecessary application accounts must be disabled, or deleted.","desc":"Test or demonstration accounts are sometimes created during the application installation process. This creates a security risk as these accounts often remain after the initial installation process and can be used to gain unauthorized access to the application. Applications must be designed and configured to disable or delete any unnecessary accounts that may be created. \n\nCare must be taken to ensure valid accounts used for valid application operations are not disabled or deleted when this requirement is applied.","descriptions":{"default":"Test or demonstration accounts are sometimes created during the application installation process. This creates a security risk as these accounts often remain after the initial installation process and can be used to gain unauthorized access to the application. Applications must be designed and configured to disable or delete any unnecessary accounts that may be created. \n\nCare must be taken to ensure valid accounts used for valid application operations are not disabled or deleted when this requirement is applied.","check":"Review the system documentation and identify any valid application accounts that are required in order for the application to operate. Accounts the application itself uses in order to function are not in scope for this requirement.\n\nHave the application administrator generate a list of all application users. This should include relevant user metadata such as phone numbers or department identifiers.\n\nHave the application administrator identify and validate all user accounts.\n\nIf any accounts cannot be validated and are deemed to be unnecessary, this is a finding.","fix":"Design the application so unessential user accounts are not created during installation. Disable or delete all unnecessary application user accounts."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24082r493144_chk","severity":"medium","gid":"V-222412","rid":"SV-222412r879524_rule","stig_id":"APSC-DV-000330","gtitle":"SRG-APP-000025","fix_id":"F-24071r493145_fix","documentable":null,"legacy":["V-69303","SV-83925"],"cci":["CCI-000017"],"nist":["AC-2 (3) (d)"]}},{"id":"SV-222413","code":"control 'SV-222413' do\n  title 'The application must automatically audit account creation.'\n  desc 'Once an attacker establishes initial access to a system, the attacker often attempts to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply create a new account. Auditing of account creation is one method for mitigating this risk. A comprehensive account management process will ensure an audit trail documents the creation of application user accounts and, as required, notifies administrators and/or application owners exists. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.\n\nTo address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access/auditing mechanisms meeting or exceeding access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.'\n  desc 'check', 'Examine the application documentation to identify how the application users are managed.\n\nInterview the application administrator and determine if the application is configured to utilize a centralized user management system like Active Directory for user management or if the application manages user accounts within the application.\n\nIf the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.\n\nIdentify the location of the audit logs and review the end of the logs.\n\nAccess the user account management functionality and create a new user account.\n\nExamine the log file again and determine if the account creation event was logged. The information logged should, at a minimum, include enough detail to determine which account was created and when.\n\nIf the account creation event was not logged, this is a finding.'\n  desc 'fix', 'Configure the application to write a log entry when a new user account is created.\n\nAt a minimum, ensure account name, date and time of the event are recorded.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24083r493147_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222413'\n  tag rid: 'SV-222413r879525_rule'\n  tag stig_id: 'APSC-DV-000340'\n  tag gtitle: 'SRG-APP-000026'\n  tag fix_id: 'F-24072r493148_fix'\n  tag 'documentable'\n  tag legacy: ['V-69305', 'SV-83927']\n  tag cci: ['CCI-000018']\n  tag nist: ['AC-2 (4)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222413.rb"},"title":"The application must automatically audit account creation.","desc":"Once an attacker establishes initial access to a system, the attacker often attempts to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply create a new account. Auditing of account creation is one method for mitigating this risk. A comprehensive account management process will ensure an audit trail documents the creation of application user accounts and, as required, notifies administrators and/or application owners exists. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.\n\nTo address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access/auditing mechanisms meeting or exceeding access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.","descriptions":{"default":"Once an attacker establishes initial access to a system, the attacker often attempts to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply create a new account. Auditing of account creation is one method for mitigating this risk. A comprehensive account management process will ensure an audit trail documents the creation of application user accounts and, as required, notifies administrators and/or application owners exists. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.\n\nTo address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access/auditing mechanisms meeting or exceeding access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.","check":"Examine the application documentation to identify how the application users are managed.\n\nInterview the application administrator and determine if the application is configured to utilize a centralized user management system like Active Directory for user management or if the application manages user accounts within the application.\n\nIf the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.\n\nIdentify the location of the audit logs and review the end of the logs.\n\nAccess the user account management functionality and create a new user account.\n\nExamine the log file again and determine if the account creation event was logged. The information logged should, at a minimum, include enough detail to determine which account was created and when.\n\nIf the account creation event was not logged, this is a finding.","fix":"Configure the application to write a log entry when a new user account is created.\n\nAt a minimum, ensure account name, date and time of the event are recorded."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24083r493147_chk","severity":"medium","gid":"V-222413","rid":"SV-222413r879525_rule","stig_id":"APSC-DV-000340","gtitle":"SRG-APP-000026","fix_id":"F-24072r493148_fix","documentable":null,"legacy":["V-69305","SV-83927"],"cci":["CCI-000018"],"nist":["AC-2 (4)"]}},{"id":"SV-222414","code":"control 'SV-222414' do\n  title 'The application must automatically audit account modification.'\n  desc 'One way for an attacker to establish persistent access is for the attacker to modify or copy an existing account. Auditing of account modification is one method for mitigating this risk. A comprehensive account management process will ensure an audit trail documents the modification of application user accounts. Such a process greatly reduces the risk that accounts will be surreptitiously modified and provides logging that can be used for forensic purposes.\n\nTo address account requirements and to ensure application accounts follow requirements consistently, application developers are strongly encouraged to integrate their applications with enterprise-level authentication/access/auditing mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.'\n  desc 'check', 'Examine the application documentation to identify how the application users are managed.\n\nInterview the application administrator and determine if the application is configured to utilize a centralized user management system like Active Directory for user management or if the application manages user accounts within the application.\n\nIf the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.\n\nIdentify the location of the audit logs and review the end of the logs.\n\nAccess the user account management functionality and modify a test user account.\n\nExamine the log file again and determine if the account event was logged. The information logged should, at a minimum, include enough detail to determine which account was modified and when.\n\nIf the account modification event information was not logged, this is a finding.'\n  desc 'fix', 'Configure the application to write a log entry when a user account is modified.\n\nAt a minimum, ensure account name, date and time of the event are recorded.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24084r493150_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222414'\n  tag rid: 'SV-222414r879526_rule'\n  tag stig_id: 'APSC-DV-000350'\n  tag gtitle: 'SRG-APP-000027'\n  tag fix_id: 'F-24073r493151_fix'\n  tag 'documentable'\n  tag legacy: ['V-69307', 'SV-83929']\n  tag cci: ['CCI-001403']\n  tag nist: ['AC-2 (4)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222414.rb"},"title":"The application must automatically audit account modification.","desc":"One way for an attacker to establish persistent access is for the attacker to modify or copy an existing account. Auditing of account modification is one method for mitigating this risk. A comprehensive account management process will ensure an audit trail documents the modification of application user accounts. Such a process greatly reduces the risk that accounts will be surreptitiously modified and provides logging that can be used for forensic purposes.\n\nTo address account requirements and to ensure application accounts follow requirements consistently, application developers are strongly encouraged to integrate their applications with enterprise-level authentication/access/auditing mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.","descriptions":{"default":"One way for an attacker to establish persistent access is for the attacker to modify or copy an existing account. Auditing of account modification is one method for mitigating this risk. A comprehensive account management process will ensure an audit trail documents the modification of application user accounts. Such a process greatly reduces the risk that accounts will be surreptitiously modified and provides logging that can be used for forensic purposes.\n\nTo address account requirements and to ensure application accounts follow requirements consistently, application developers are strongly encouraged to integrate their applications with enterprise-level authentication/access/auditing mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.","check":"Examine the application documentation to identify how the application users are managed.\n\nInterview the application administrator and determine if the application is configured to utilize a centralized user management system like Active Directory for user management or if the application manages user accounts within the application.\n\nIf the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.\n\nIdentify the location of the audit logs and review the end of the logs.\n\nAccess the user account management functionality and modify a test user account.\n\nExamine the log file again and determine if the account event was logged. The information logged should, at a minimum, include enough detail to determine which account was modified and when.\n\nIf the account modification event information was not logged, this is a finding.","fix":"Configure the application to write a log entry when a user account is modified.\n\nAt a minimum, ensure account name, date and time of the event are recorded."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24084r493150_chk","severity":"medium","gid":"V-222414","rid":"SV-222414r879526_rule","stig_id":"APSC-DV-000350","gtitle":"SRG-APP-000027","fix_id":"F-24073r493151_fix","documentable":null,"legacy":["V-69307","SV-83929"],"cci":["CCI-001403"],"nist":["AC-2 (4)"]}},{"id":"SV-222415","code":"control 'SV-222415' do\n  title 'The application must automatically audit account disabling actions.'\n  desc 'When application accounts are disabled, user accessibility is affected. Accounts are utilized for identifying individual application users or for identifying the application processes themselves. In order to detect and respond to events affecting user accessibility and application processing, applications must audit account disabling actions and, as required, notify the appropriate individuals, so they can investigate the event. Such a capability greatly reduces the risk that application accessibility will be negatively affected for extended periods of time and provides logging that can be used for forensic purposes. \n\nApplication developers are encouraged to integrate their applications with enterprise-level authentication/access/audit mechanisms such as Syslog, Active Directory or LDAP.'\n  desc 'check', 'Examine the application documentation to identify how the application users are managed.\n\nInterview the application administrator and determine if the application is configured to utilize a centralized user management system like Active Directory for user management or if the application manages user accounts within the application.\n\nIf the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.\n\nIdentify the location of the audit logs and review the end of the logs.\n\nAccess the user account management functionality and disable a test user account.\n\nExamine the log file again and determine if the account disable event was logged. The information logged should, at a minimum, include enough detail to determine which account was disabled and when.\n\nIf the account disabling event information was not logged, this is a finding.'\n  desc 'fix', 'Configure the application to write a log entry when a user account is disabled.\n\nAt a minimum, ensure account name, date and time of the event are recorded.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24085r493153_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222415'\n  tag rid: 'SV-222415r879527_rule'\n  tag stig_id: 'APSC-DV-000360'\n  tag gtitle: 'SRG-APP-000028'\n  tag fix_id: 'F-24074r493154_fix'\n  tag 'documentable'\n  tag legacy: ['V-69309', 'SV-83931']\n  tag cci: ['CCI-001404']\n  tag nist: ['AC-2 (4)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222415.rb"},"title":"The application must automatically audit account disabling actions.","desc":"When application accounts are disabled, user accessibility is affected. Accounts are utilized for identifying individual application users or for identifying the application processes themselves. In order to detect and respond to events affecting user accessibility and application processing, applications must audit account disabling actions and, as required, notify the appropriate individuals, so they can investigate the event. Such a capability greatly reduces the risk that application accessibility will be negatively affected for extended periods of time and provides logging that can be used for forensic purposes. \n\nApplication developers are encouraged to integrate their applications with enterprise-level authentication/access/audit mechanisms such as Syslog, Active Directory or LDAP.","descriptions":{"default":"When application accounts are disabled, user accessibility is affected. Accounts are utilized for identifying individual application users or for identifying the application processes themselves. In order to detect and respond to events affecting user accessibility and application processing, applications must audit account disabling actions and, as required, notify the appropriate individuals, so they can investigate the event. Such a capability greatly reduces the risk that application accessibility will be negatively affected for extended periods of time and provides logging that can be used for forensic purposes. \n\nApplication developers are encouraged to integrate their applications with enterprise-level authentication/access/audit mechanisms such as Syslog, Active Directory or LDAP.","check":"Examine the application documentation to identify how the application users are managed.\n\nInterview the application administrator and determine if the application is configured to utilize a centralized user management system like Active Directory for user management or if the application manages user accounts within the application.\n\nIf the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.\n\nIdentify the location of the audit logs and review the end of the logs.\n\nAccess the user account management functionality and disable a test user account.\n\nExamine the log file again and determine if the account disable event was logged. The information logged should, at a minimum, include enough detail to determine which account was disabled and when.\n\nIf the account disabling event information was not logged, this is a finding.","fix":"Configure the application to write a log entry when a user account is disabled.\n\nAt a minimum, ensure account name, date and time of the event are recorded."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24085r493153_chk","severity":"medium","gid":"V-222415","rid":"SV-222415r879527_rule","stig_id":"APSC-DV-000360","gtitle":"SRG-APP-000028","fix_id":"F-24074r493154_fix","documentable":null,"legacy":["V-69309","SV-83931"],"cci":["CCI-001404"],"nist":["AC-2 (4)"]}},{"id":"SV-222416","code":"control 'SV-222416' do\n  title 'The application must automatically audit account removal actions.'\n  desc 'When application accounts are removed, user accessibility is affected. Accounts are utilized for identifying individual application users or for identifying the application processes themselves. In order to detect and respond to events affecting user accessibility and application processing, applications must audit account removal actions and, as required, notify the appropriate individuals, so they can investigate the event. Such a capability greatly reduces the risk that application accessibility will be negatively affected for extended periods of time and provides logging that can be used for forensic purposes.\n\nApplication developers are encouraged to integrate their applications with enterprise-level authentication/access/audit mechanisms such as Syslog, Active Directory or LDAP.'\n  desc 'check', 'Examine the application documentation to identify how the application users are managed.\n\nInterview the application administrator and determine if the application is configured to utilize a centralized user management system like Active Directory for user management or if the application manages user accounts within the application.\n\nIf the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.\n\nIdentify the location of the audit logs and review the end of the logs.\n\nAccess the user account management functionality and remove a test user account.\n\nExamine the log file again and determine if the account removal event was logged. The information logged should, at a minimum, include enough detail to determine which account was disabled and when.\n\nIf the account removal event information was not logged, this is a finding.'\n  desc 'fix', 'Configure the application to write a log entry when a user account is removed.\n\nAt a minimum, ensure account name, date and time of the event are recorded.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24086r493156_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222416'\n  tag rid: 'SV-222416r879528_rule'\n  tag stig_id: 'APSC-DV-000370'\n  tag gtitle: 'SRG-APP-000029'\n  tag fix_id: 'F-24075r493157_fix'\n  tag 'documentable'\n  tag legacy: ['V-69311', 'SV-83933']\n  tag cci: ['CCI-001405']\n  tag nist: ['AC-2 (4)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222416.rb"},"title":"The application must automatically audit account removal actions.","desc":"When application accounts are removed, user accessibility is affected. Accounts are utilized for identifying individual application users or for identifying the application processes themselves. In order to detect and respond to events affecting user accessibility and application processing, applications must audit account removal actions and, as required, notify the appropriate individuals, so they can investigate the event. Such a capability greatly reduces the risk that application accessibility will be negatively affected for extended periods of time and provides logging that can be used for forensic purposes.\n\nApplication developers are encouraged to integrate their applications with enterprise-level authentication/access/audit mechanisms such as Syslog, Active Directory or LDAP.","descriptions":{"default":"When application accounts are removed, user accessibility is affected. Accounts are utilized for identifying individual application users or for identifying the application processes themselves. In order to detect and respond to events affecting user accessibility and application processing, applications must audit account removal actions and, as required, notify the appropriate individuals, so they can investigate the event. Such a capability greatly reduces the risk that application accessibility will be negatively affected for extended periods of time and provides logging that can be used for forensic purposes.\n\nApplication developers are encouraged to integrate their applications with enterprise-level authentication/access/audit mechanisms such as Syslog, Active Directory or LDAP.","check":"Examine the application documentation to identify how the application users are managed.\n\nInterview the application administrator and determine if the application is configured to utilize a centralized user management system like Active Directory for user management or if the application manages user accounts within the application.\n\nIf the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.\n\nIdentify the location of the audit logs and review the end of the logs.\n\nAccess the user account management functionality and remove a test user account.\n\nExamine the log file again and determine if the account removal event was logged. The information logged should, at a minimum, include enough detail to determine which account was disabled and when.\n\nIf the account removal event information was not logged, this is a finding.","fix":"Configure the application to write a log entry when a user account is removed.\n\nAt a minimum, ensure account name, date and time of the event are recorded."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24086r493156_chk","severity":"medium","gid":"V-222416","rid":"SV-222416r879528_rule","stig_id":"APSC-DV-000370","gtitle":"SRG-APP-000029","fix_id":"F-24075r493157_fix","documentable":null,"legacy":["V-69311","SV-83933"],"cci":["CCI-001405"],"nist":["AC-2 (4)"]}},{"id":"SV-222417","code":"control 'SV-222417' do\n  title 'The application must notify System Administrators and Information System Security Officers when accounts are created.'\n  desc 'Once an attacker establishes access to a system, the attacker often attempts to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply create a new account. Notification of account creation is one method for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the creation of application user accounts and notifies administrators and Information System Security Officers (ISSO) exists. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.\n\nTo address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access/auditing mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.'\n  desc 'check', 'Review the application and system documentation.\n\nInterview the application administrator and determine if the application is configured to utilize a centralized user management system like Active Directory for user management or if the application manages user accounts within the application.\n\nIf the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.\n\nEnsure the application is configured to notify system administrators when new accounts are created by identifying system administrators who will be notified when new accounts are created, creating a test account and checking with system administrator to verify notification was received.\n\nIf system administrators and ISSOs are not notified when accounts are created, this is a finding.'\n  desc 'fix', 'Configure the application to notify the system administrator and the ISSO when application accounts are created.'\n  impact 0.3\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24087r493159_chk'\n  tag severity: 'low'\n  tag gid: 'V-222417'\n  tag rid: 'SV-222417r879669_rule'\n  tag stig_id: 'APSC-DV-000380'\n  tag gtitle: 'SRG-APP-000291'\n  tag fix_id: 'F-24076r493160_fix'\n  tag 'documentable'\n  tag legacy: ['SV-83935', 'V-69313']\n  tag cci: ['CCI-001683']\n  tag nist: ['AC-2 (4)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222417.rb"},"title":"The application must notify System Administrators and Information System Security Officers when accounts are created.","desc":"Once an attacker establishes access to a system, the attacker often attempts to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply create a new account. Notification of account creation is one method for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the creation of application user accounts and notifies administrators and Information System Security Officers (ISSO) exists. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.\n\nTo address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access/auditing mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.","descriptions":{"default":"Once an attacker establishes access to a system, the attacker often attempts to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply create a new account. Notification of account creation is one method for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the creation of application user accounts and notifies administrators and Information System Security Officers (ISSO) exists. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.\n\nTo address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access/auditing mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.","check":"Review the application and system documentation.\n\nInterview the application administrator and determine if the application is configured to utilize a centralized user management system like Active Directory for user management or if the application manages user accounts within the application.\n\nIf the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.\n\nEnsure the application is configured to notify system administrators when new accounts are created by identifying system administrators who will be notified when new accounts are created, creating a test account and checking with system administrator to verify notification was received.\n\nIf system administrators and ISSOs are not notified when accounts are created, this is a finding.","fix":"Configure the application to notify the system administrator and the ISSO when application accounts are created."},"impact":0.3,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24087r493159_chk","severity":"low","gid":"V-222417","rid":"SV-222417r879669_rule","stig_id":"APSC-DV-000380","gtitle":"SRG-APP-000291","fix_id":"F-24076r493160_fix","documentable":null,"legacy":["SV-83935","V-69313"],"cci":["CCI-001683"],"nist":["AC-2 (4)"]}},{"id":"SV-222418","code":"control 'SV-222418' do\n  title 'The application must notify System Administrators and Information System Security Officers when accounts are modified.'\n  desc 'Once an attacker establishes access to a system, the attacker often attempts to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply create a new account. Notification of account creation is one method for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the creation of application user accounts and notifies administrators and Information System Security Officers (ISSO) exists. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.\n\nTo address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access/auditing mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.'\n  desc 'check', 'Review the application and system documentation.\n\nInterview the application administrator and determine if the application is configured to utilize a centralized user management system like Active Directory for user management or if the application manages user accounts within the application.\n\nIf the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.\n\nEnsure the application is configured to notify system administrators when accounts are modified by identifying system administrators who will be notified when accounts are modified.\n\nModify a test account and check with a system administrator to verify notification was received.\n\nIf system administrators and ISSOs are not notified when accounts are modified, this is a finding.'\n  desc 'fix', 'Configure the application to notify the system administrator and the ISSO when application accounts are modified.'\n  impact 0.3\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24088r493162_chk'\n  tag severity: 'low'\n  tag gid: 'V-222418'\n  tag rid: 'SV-222418r879670_rule'\n  tag stig_id: 'APSC-DV-000390'\n  tag gtitle: 'SRG-APP-000292'\n  tag fix_id: 'F-24077r493163_fix'\n  tag 'documentable'\n  tag legacy: ['SV-83937', 'V-69315']\n  tag cci: ['CCI-001684']\n  tag nist: ['AC-2 (4)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222418.rb"},"title":"The application must notify System Administrators and Information System Security Officers when accounts are modified.","desc":"Once an attacker establishes access to a system, the attacker often attempts to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply create a new account. Notification of account creation is one method for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the creation of application user accounts and notifies administrators and Information System Security Officers (ISSO) exists. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.\n\nTo address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access/auditing mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.","descriptions":{"default":"Once an attacker establishes access to a system, the attacker often attempts to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply create a new account. Notification of account creation is one method for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the creation of application user accounts and notifies administrators and Information System Security Officers (ISSO) exists. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.\n\nTo address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access/auditing mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.","check":"Review the application and system documentation.\n\nInterview the application administrator and determine if the application is configured to utilize a centralized user management system like Active Directory for user management or if the application manages user accounts within the application.\n\nIf the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.\n\nEnsure the application is configured to notify system administrators when accounts are modified by identifying system administrators who will be notified when accounts are modified.\n\nModify a test account and check with a system administrator to verify notification was received.\n\nIf system administrators and ISSOs are not notified when accounts are modified, this is a finding.","fix":"Configure the application to notify the system administrator and the ISSO when application accounts are modified."},"impact":0.3,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24088r493162_chk","severity":"low","gid":"V-222418","rid":"SV-222418r879670_rule","stig_id":"APSC-DV-000390","gtitle":"SRG-APP-000292","fix_id":"F-24077r493163_fix","documentable":null,"legacy":["SV-83937","V-69315"],"cci":["CCI-001684"],"nist":["AC-2 (4)"]}},{"id":"SV-222419","code":"control 'SV-222419' do\n  title 'The application must notify System Administrators and Information System Security Officers of account disabling actions.'\n  desc 'Once an attacker establishes access to a system, the attacker often attempts to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply create a new account. Notification of account creation is one method for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the creation of application user accounts and notifies administrators and Information System Security Officers (ISSO) exists. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes. \n\nTo address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access/auditing mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.'\n  desc 'check', 'Review the application and system documentation.\n\nInterview the application administrator and determine if the application is configured to utilize a centralized user management system like Active Directory for user management or if the application manages user accounts within the application.\n\nIf the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.\n\nEnsure application is configured to notify system administrators when accounts are disabled by identifying system administrators who will be notified when accounts are disabled.\n\nDisable a test account and check with a system administrator to verify notification was received.\n\nIf system administrators and ISSOs are not notified when accounts are disabled, this is a finding.'\n  desc 'fix', 'Configure the application to notify the system administrator and the ISSO when application accounts are disabled.'\n  impact 0.3\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24089r493165_chk'\n  tag severity: 'low'\n  tag gid: 'V-222419'\n  tag rid: 'SV-222419r879671_rule'\n  tag stig_id: 'APSC-DV-000400'\n  tag gtitle: 'SRG-APP-000293'\n  tag fix_id: 'F-24078r493166_fix'\n  tag 'documentable'\n  tag legacy: ['SV-83939', 'V-69317']\n  tag cci: ['CCI-001685']\n  tag nist: ['AC-2 (4)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222419.rb"},"title":"The application must notify System Administrators and Information System Security Officers of account disabling actions.","desc":"Once an attacker establishes access to a system, the attacker often attempts to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply create a new account. Notification of account creation is one method for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the creation of application user accounts and notifies administrators and Information System Security Officers (ISSO) exists. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes. \n\nTo address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access/auditing mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.","descriptions":{"default":"Once an attacker establishes access to a system, the attacker often attempts to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply create a new account. Notification of account creation is one method for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the creation of application user accounts and notifies administrators and Information System Security Officers (ISSO) exists. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes. \n\nTo address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access/auditing mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.","check":"Review the application and system documentation.\n\nInterview the application administrator and determine if the application is configured to utilize a centralized user management system like Active Directory for user management or if the application manages user accounts within the application.\n\nIf the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.\n\nEnsure application is configured to notify system administrators when accounts are disabled by identifying system administrators who will be notified when accounts are disabled.\n\nDisable a test account and check with a system administrator to verify notification was received.\n\nIf system administrators and ISSOs are not notified when accounts are disabled, this is a finding.","fix":"Configure the application to notify the system administrator and the ISSO when application accounts are disabled."},"impact":0.3,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24089r493165_chk","severity":"low","gid":"V-222419","rid":"SV-222419r879671_rule","stig_id":"APSC-DV-000400","gtitle":"SRG-APP-000293","fix_id":"F-24078r493166_fix","documentable":null,"legacy":["SV-83939","V-69317"],"cci":["CCI-001685"],"nist":["AC-2 (4)"]}},{"id":"SV-222420","code":"control 'SV-222420' do\n  title 'The application must notify System Administrators and Information System Security Officers of account removal actions.'\n  desc 'Once an attacker establishes access to a system, the attacker often attempts to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply create a new account. Notification of account creation is one method for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the creation of application user accounts and notifies administrators and Information System Security Officers (ISSO) exists. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.\n\nTo address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access/auditing mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.'\n  desc 'check', 'Review the application and system documentation.\n\nInterview the application administrator and determine if the application is configured to utilize a centralized user management system like Active Directory for user management or if the application manages user accounts within the application.\n\nIf the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.\n\nEnsure application is configured to notify system administrators when accounts are removed by identifying system administrators who will be notified when accounts are removed.\n\nRemove a test account and check with a system administrator to verify notification was received.\n\nIf system administrators and ISSOs are not notified when accounts are removed, this is a finding.'\n  desc 'fix', 'Configure the application to notify the system administrator and the ISSO when application accounts are removed.'\n  impact 0.3\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24090r493168_chk'\n  tag severity: 'low'\n  tag gid: 'V-222420'\n  tag rid: 'SV-222420r879672_rule'\n  tag stig_id: 'APSC-DV-000410'\n  tag gtitle: 'SRG-APP-000294'\n  tag fix_id: 'F-24079r493169_fix'\n  tag 'documentable'\n  tag legacy: ['SV-83941', 'V-69319']\n  tag cci: ['CCI-001686']\n  tag nist: ['AC-2 (4)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222420.rb"},"title":"The application must notify System Administrators and Information System Security Officers of account removal actions.","desc":"Once an attacker establishes access to a system, the attacker often attempts to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply create a new account. Notification of account creation is one method for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the creation of application user accounts and notifies administrators and Information System Security Officers (ISSO) exists. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.\n\nTo address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access/auditing mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.","descriptions":{"default":"Once an attacker establishes access to a system, the attacker often attempts to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply create a new account. Notification of account creation is one method for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the creation of application user accounts and notifies administrators and Information System Security Officers (ISSO) exists. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.\n\nTo address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access/auditing mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.","check":"Review the application and system documentation.\n\nInterview the application administrator and determine if the application is configured to utilize a centralized user management system like Active Directory for user management or if the application manages user accounts within the application.\n\nIf the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.\n\nEnsure application is configured to notify system administrators when accounts are removed by identifying system administrators who will be notified when accounts are removed.\n\nRemove a test account and check with a system administrator to verify notification was received.\n\nIf system administrators and ISSOs are not notified when accounts are removed, this is a finding.","fix":"Configure the application to notify the system administrator and the ISSO when application accounts are removed."},"impact":0.3,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24090r493168_chk","severity":"low","gid":"V-222420","rid":"SV-222420r879672_rule","stig_id":"APSC-DV-000410","gtitle":"SRG-APP-000294","fix_id":"F-24079r493169_fix","documentable":null,"legacy":["SV-83941","V-69319"],"cci":["CCI-001686"],"nist":["AC-2 (4)"]}},{"id":"SV-222421","code":"control 'SV-222421' do\n  title 'The application must automatically audit account enabling actions.'\n  desc 'When application accounts are enabled, user accessibility is affected. Accounts are utilized for identifying individual application users or for identifying the application processes themselves. In order to detect and respond to events affecting user accessibility and application processing, applications must audit account removal actions and, as required, notify the appropriate individuals, so they can investigate the event. Such a capability greatly reduces the risk that application accessibility will be negatively affected for extended periods of time and provides logging that can be used for forensic purposes.\n\nApplication developers are encouraged to integrate their applications with enterprise-level authentication/access/audit mechanisms such as Syslog, Active Directory or LDAP.'\n  desc 'check', 'Examine the application documentation or interview the application representative to identify how the application users are managed.\n\nInterview the application administrator and determine if the application is configured to utilize a centralized user management system such as Active Directory for user management or if the application manages user accounts within the application.\n\nIf the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.\n\nIdentify the location of the audit logs and review the end of the logs.\n\nAccess the user account management functionality and enable a test user account.\n\nExamine the log file again and determine if the account enable event was logged. The information logged should, at a minimum, include enough detail to determine which account was enabled and when.\n\nIf the account enabling event information was not logged, this is a finding.'\n  desc 'fix', 'Configure the application to write a log entry when a user account is enabled. \n\nAt a minimum, ensure account name, date and time of the event are recorded.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24091r918114_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222421'\n  tag rid: 'SV-222421r918115_rule'\n  tag stig_id: 'APSC-DV-000420'\n  tag gtitle: 'SRG-APP-000319'\n  tag fix_id: 'F-24080r493172_fix'\n  tag 'documentable'\n  tag legacy: ['SV-83943', 'V-69321']\n  tag cci: ['CCI-002130']\n  tag nist: ['AC-2 (4)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222421.rb"},"title":"The application must automatically audit account enabling actions.","desc":"When application accounts are enabled, user accessibility is affected. Accounts are utilized for identifying individual application users or for identifying the application processes themselves. In order to detect and respond to events affecting user accessibility and application processing, applications must audit account removal actions and, as required, notify the appropriate individuals, so they can investigate the event. Such a capability greatly reduces the risk that application accessibility will be negatively affected for extended periods of time and provides logging that can be used for forensic purposes.\n\nApplication developers are encouraged to integrate their applications with enterprise-level authentication/access/audit mechanisms such as Syslog, Active Directory or LDAP.","descriptions":{"default":"When application accounts are enabled, user accessibility is affected. Accounts are utilized for identifying individual application users or for identifying the application processes themselves. In order to detect and respond to events affecting user accessibility and application processing, applications must audit account removal actions and, as required, notify the appropriate individuals, so they can investigate the event. Such a capability greatly reduces the risk that application accessibility will be negatively affected for extended periods of time and provides logging that can be used for forensic purposes.\n\nApplication developers are encouraged to integrate their applications with enterprise-level authentication/access/audit mechanisms such as Syslog, Active Directory or LDAP.","check":"Examine the application documentation or interview the application representative to identify how the application users are managed.\n\nInterview the application administrator and determine if the application is configured to utilize a centralized user management system such as Active Directory for user management or if the application manages user accounts within the application.\n\nIf the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.\n\nIdentify the location of the audit logs and review the end of the logs.\n\nAccess the user account management functionality and enable a test user account.\n\nExamine the log file again and determine if the account enable event was logged. The information logged should, at a minimum, include enough detail to determine which account was enabled and when.\n\nIf the account enabling event information was not logged, this is a finding.","fix":"Configure the application to write a log entry when a user account is enabled. \n\nAt a minimum, ensure account name, date and time of the event are recorded."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24091r918114_chk","severity":"medium","gid":"V-222421","rid":"SV-222421r918115_rule","stig_id":"APSC-DV-000420","gtitle":"SRG-APP-000319","fix_id":"F-24080r493172_fix","documentable":null,"legacy":["SV-83943","V-69321"],"cci":["CCI-002130"],"nist":["AC-2 (4)"]}},{"id":"SV-222422","code":"control 'SV-222422' do\n  title 'The application must notify System Administrators and Information System Security Officers of account enabling actions.'\n  desc 'Once an attacker establishes access to a system, the attacker often attempts to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply enable an existing account that has been previously disabled. Notification when account enabling actions occur is one method for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the enabling of application user accounts and notifies administrators and Information System Security Officers (ISSO) exists. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.\n\nTo address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access/auditing mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.'\n  desc 'check', 'Review the application and system documentation.\n\nInterview application administrator and determine if the application is configured to utilize a centralized user management system like Active Directory for user management or if the application manages user accounts within the application.\n\nIf the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.\n\nEnsure application is configured to notify system administrators when accounts are enabled by identifying system administrators who will be notified when accounts are enabled.\n\nDisable and then enable a test account and check with system administrator to verify notification was received to indicate the account was enabled.\n\nIf system administrators and ISSOs are not notified when accounts are enabled, this is a finding.'\n  desc 'fix', 'Configure the application to notify the system administrator and the ISSO when application accounts are enabled.'\n  impact 0.3\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24092r493174_chk'\n  tag severity: 'low'\n  tag gid: 'V-222422'\n  tag rid: 'SV-222422r879697_rule'\n  tag stig_id: 'APSC-DV-000430'\n  tag gtitle: 'SRG-APP-000320'\n  tag fix_id: 'F-24081r493175_fix'\n  tag 'documentable'\n  tag legacy: ['SV-83945', 'V-69323']\n  tag cci: ['CCI-002132']\n  tag nist: ['AC-2 (4)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222422.rb"},"title":"The application must notify System Administrators and Information System Security Officers of account enabling actions.","desc":"Once an attacker establishes access to a system, the attacker often attempts to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply enable an existing account that has been previously disabled. Notification when account enabling actions occur is one method for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the enabling of application user accounts and notifies administrators and Information System Security Officers (ISSO) exists. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.\n\nTo address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access/auditing mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.","descriptions":{"default":"Once an attacker establishes access to a system, the attacker often attempts to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to simply enable an existing account that has been previously disabled. Notification when account enabling actions occur is one method for mitigating this risk. A comprehensive account management process will ensure an audit trail which documents the enabling of application user accounts and notifies administrators and Information System Security Officers (ISSO) exists. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.\n\nTo address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access/auditing mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to off-load those access control functions and focus on core application features and functionality.","check":"Review the application and system documentation.\n\nInterview application administrator and determine if the application is configured to utilize a centralized user management system like Active Directory for user management or if the application manages user accounts within the application.\n\nIf the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.\n\nEnsure application is configured to notify system administrators when accounts are enabled by identifying system administrators who will be notified when accounts are enabled.\n\nDisable and then enable a test account and check with system administrator to verify notification was received to indicate the account was enabled.\n\nIf system administrators and ISSOs are not notified when accounts are enabled, this is a finding.","fix":"Configure the application to notify the system administrator and the ISSO when application accounts are enabled."},"impact":0.3,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24092r493174_chk","severity":"low","gid":"V-222422","rid":"SV-222422r879697_rule","stig_id":"APSC-DV-000430","gtitle":"SRG-APP-000320","fix_id":"F-24081r493175_fix","documentable":null,"legacy":["SV-83945","V-69323"],"cci":["CCI-002132"],"nist":["AC-2 (4)"]}},{"id":"SV-222423","code":"control 'SV-222423' do\n  title 'Application data protection requirements must be identified and documented.'\n  desc 'Failure to protect organizational information from data mining may result in a compromise of information. In order to assign the appropriate data protections, application data must be identified and then protection requirements assigned. Access to sensitive data and sensitive data objects should be restricted to those authorized to access the data.\n\nExamples of sensitive data include but are not limited to; Social Security Numbers, Personally Identifiable Information, or any other data that is has been identified as being sensitive in nature by the data owner.\n\nData storage objects include, for example, databases, database records, and database fields.\n\nData mining prevention and detection techniques include, for example: limiting the types of responses provided to database queries; limiting the number/frequency of database queries to increase the work factor needed to determine the contents of such databases; and notifying organizational personnel when atypical database queries or accesses occur.\n\nProtection methods include but are not limited to data encryption, Role-Based Access Controls and access authentication.'\n  desc 'check', 'Ask the application representative for the documentation that identifies the application data elements, the protection requirements, and any associated steps that are being taken to protect the data.\n\nIf the application data protection requirements are not documented, this is a finding.'\n  desc 'fix', 'Identify and document the application data elements and the data protection requirements.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24093r493177_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222423'\n  tag rid: 'SV-222423r879700_rule'\n  tag stig_id: 'APSC-DV-000440'\n  tag gtitle: 'SRG-APP-000323'\n  tag fix_id: 'F-24082r493178_fix'\n  tag 'documentable'\n  tag legacy: ['SV-83947', 'V-69325']\n  tag cci: ['CCI-002346']\n  tag nist: ['AC-23']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222423.rb"},"title":"Application data protection requirements must be identified and documented.","desc":"Failure to protect organizational information from data mining may result in a compromise of information. In order to assign the appropriate data protections, application data must be identified and then protection requirements assigned. Access to sensitive data and sensitive data objects should be restricted to those authorized to access the data.\n\nExamples of sensitive data include but are not limited to; Social Security Numbers, Personally Identifiable Information, or any other data that is has been identified as being sensitive in nature by the data owner.\n\nData storage objects include, for example, databases, database records, and database fields.\n\nData mining prevention and detection techniques include, for example: limiting the types of responses provided to database queries; limiting the number/frequency of database queries to increase the work factor needed to determine the contents of such databases; and notifying organizational personnel when atypical database queries or accesses occur.\n\nProtection methods include but are not limited to data encryption, Role-Based Access Controls and access authentication.","descriptions":{"default":"Failure to protect organizational information from data mining may result in a compromise of information. In order to assign the appropriate data protections, application data must be identified and then protection requirements assigned. Access to sensitive data and sensitive data objects should be restricted to those authorized to access the data.\n\nExamples of sensitive data include but are not limited to; Social Security Numbers, Personally Identifiable Information, or any other data that is has been identified as being sensitive in nature by the data owner.\n\nData storage objects include, for example, databases, database records, and database fields.\n\nData mining prevention and detection techniques include, for example: limiting the types of responses provided to database queries; limiting the number/frequency of database queries to increase the work factor needed to determine the contents of such databases; and notifying organizational personnel when atypical database queries or accesses occur.\n\nProtection methods include but are not limited to data encryption, Role-Based Access Controls and access authentication.","check":"Ask the application representative for the documentation that identifies the application data elements, the protection requirements, and any associated steps that are being taken to protect the data.\n\nIf the application data protection requirements are not documented, this is a finding.","fix":"Identify and document the application data elements and the data protection requirements."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24093r493177_chk","severity":"medium","gid":"V-222423","rid":"SV-222423r879700_rule","stig_id":"APSC-DV-000440","gtitle":"SRG-APP-000323","fix_id":"F-24082r493178_fix","documentable":null,"legacy":["SV-83947","V-69325"],"cci":["CCI-002346"],"nist":["AC-23"]}},{"id":"SV-222424","code":"control 'SV-222424' do\n  title 'The application must utilize organization-defined data mining detection techniques for organization-defined data storage objects to adequately detect data mining attempts.'\n  desc 'Failure to protect organizational information from data mining may result in a compromise of information.\n\nData mining occurs when the application is programmatically probed and data is automatically extracted. While there are valid uses for data mining within data sets, the organization should be mindful that adversaries may attempt to use data mining capabilities built into the application in order to completely extract application data so it can be evaluated using methods that are not natively offered by the application. This can provide the adversary with an opportunity to utilize inference attacks or obtain additional insights that might not have been intended when the application was designed.\n\nMethods of extraction include database queries or screen scrapes using the application itself. The entity performing the data mining must have access to the application in order to extract the data. Data mining attacks will usually occur with publicly releasable data access but can also occur when access is limited to authorized or authenticated inside users.\n\nData storage objects include, for example, databases, database records, and database fields.\n\nData mining prevention and detection techniques include, for example: limiting the types of responses provided to database queries; limiting the number/frequency of database queries to increase the work factor needed to determine the contents of such databases; and notifying organizational personnel when atypical database queries or accesses occur.'\n  desc 'check', 'Review the security plan, application and system documentation and interview the application administrator to identify data mining protections that are required of the application.\n\nIf there are no data mining protections required, this requirement is not applicable.\n\nReview the application authentication requirements and permissions.\n\nReview documented protections that have been established to protect from data mining.\n\nThis can include limiting the number of queries allowed.\n\nAutomated alarming on atypical query events.\n\nLimiting the number of records allowed to be returned in a query.\n\nNot allowing data dumps.\n\nIf the application requirements specify protections for data mining and the application administrator is unable to identify or demonstrate that the protections are in place, this is a finding.'\n  desc 'fix', 'Utilize and implement data mining protections when requirements specify it.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24094r493180_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222424'\n  tag rid: 'SV-222424r879701_rule'\n  tag stig_id: 'APSC-DV-000450'\n  tag gtitle: 'SRG-APP-000324'\n  tag fix_id: 'F-24083r493181_fix'\n  tag 'documentable'\n  tag legacy: ['SV-83949', 'V-69327']\n  tag cci: ['CCI-002347']\n  tag nist: ['AC-23']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222424.rb"},"title":"The application must utilize organization-defined data mining detection techniques for organization-defined data storage objects to adequately detect data mining attempts.","desc":"Failure to protect organizational information from data mining may result in a compromise of information.\n\nData mining occurs when the application is programmatically probed and data is automatically extracted. While there are valid uses for data mining within data sets, the organization should be mindful that adversaries may attempt to use data mining capabilities built into the application in order to completely extract application data so it can be evaluated using methods that are not natively offered by the application. This can provide the adversary with an opportunity to utilize inference attacks or obtain additional insights that might not have been intended when the application was designed.\n\nMethods of extraction include database queries or screen scrapes using the application itself. The entity performing the data mining must have access to the application in order to extract the data. Data mining attacks will usually occur with publicly releasable data access but can also occur when access is limited to authorized or authenticated inside users.\n\nData storage objects include, for example, databases, database records, and database fields.\n\nData mining prevention and detection techniques include, for example: limiting the types of responses provided to database queries; limiting the number/frequency of database queries to increase the work factor needed to determine the contents of such databases; and notifying organizational personnel when atypical database queries or accesses occur.","descriptions":{"default":"Failure to protect organizational information from data mining may result in a compromise of information.\n\nData mining occurs when the application is programmatically probed and data is automatically extracted. While there are valid uses for data mining within data sets, the organization should be mindful that adversaries may attempt to use data mining capabilities built into the application in order to completely extract application data so it can be evaluated using methods that are not natively offered by the application. This can provide the adversary with an opportunity to utilize inference attacks or obtain additional insights that might not have been intended when the application was designed.\n\nMethods of extraction include database queries or screen scrapes using the application itself. The entity performing the data mining must have access to the application in order to extract the data. Data mining attacks will usually occur with publicly releasable data access but can also occur when access is limited to authorized or authenticated inside users.\n\nData storage objects include, for example, databases, database records, and database fields.\n\nData mining prevention and detection techniques include, for example: limiting the types of responses provided to database queries; limiting the number/frequency of database queries to increase the work factor needed to determine the contents of such databases; and notifying organizational personnel when atypical database queries or accesses occur.","check":"Review the security plan, application and system documentation and interview the application administrator to identify data mining protections that are required of the application.\n\nIf there are no data mining protections required, this requirement is not applicable.\n\nReview the application authentication requirements and permissions.\n\nReview documented protections that have been established to protect from data mining.\n\nThis can include limiting the number of queries allowed.\n\nAutomated alarming on atypical query events.\n\nLimiting the number of records allowed to be returned in a query.\n\nNot allowing data dumps.\n\nIf the application requirements specify protections for data mining and the application administrator is unable to identify or demonstrate that the protections are in place, this is a finding.","fix":"Utilize and implement data mining protections when requirements specify it."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24094r493180_chk","severity":"medium","gid":"V-222424","rid":"SV-222424r879701_rule","stig_id":"APSC-DV-000450","gtitle":"SRG-APP-000324","fix_id":"F-24083r493181_fix","documentable":null,"legacy":["SV-83949","V-69327"],"cci":["CCI-002347"],"nist":["AC-23"]}},{"id":"SV-222425","code":"control 'SV-222425' do\n  title 'The application must enforce approved authorizations for logical access to information and system resources in accordance with applicable access control policies.'\n  desc 'To mitigate the risk of unauthorized access to sensitive information by entities that have been issued certificates by DoD-approved PKIs, all DoD systems (e.g., networks, web servers, and web portals) must be properly configured to incorporate access control methods that do not rely solely on the possession of a certificate for access. \n\nSuccessful authentication must not automatically give an entity access to a restricted asset or security boundary.\n\nAuthorization procedures and controls must be implemented to ensure each authenticated entity also has a validated and current authorization.\n\nAuthorization is the process of determining whether an entity, once authenticated, is permitted to access a specific asset.\n\nInformation systems use access control policies and enforcement mechanisms to implement this requirement.\n\nAccess control policies include identity-based policies, role-based policies, and attribute-based policies.\n\nAccess enforcement mechanisms include access control lists, access control matrices, and cryptography.\n\nThese policies and mechanisms must be employed by the application to control access between users (or processes acting on behalf of users) and objects (e.g., devices, files, records, processes, programs, and domains) in the information system.\n\nThis requirement is applicable to access control enforcement applications (e.g., authentication servers) and other applications that perform information and system access control functions.'\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nReview application data protection requirements.\n\nIdentify application resources that require protection and authentication over and above the authentication required to access the application itself.\n\nThis can be access to a URL, a folder, a file, a process or a database record that should only be available to certain individuals.\n\nIdentify the access control methods utilized by the application in order to control access to the resource.\n\nExamples include Role-Based Access Control policies (RBAC).\n\nUsing RBAC as an example, utilize a test account placed into a test role.\n\nSet a protection control on a resource and explicitly deny access to the role assigned to the test user account.\n\nTry to access an application resource that is not configured to allow access. Access should be denied.\n\nIf the enforcement of configured access restrictions is not performed, this is a finding.'\n  desc 'fix', 'Design or configure the application to enforce access to application resources.'\n  impact 0.7\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24095r493183_chk'\n  tag severity: 'high'\n  tag gid: 'V-222425'\n  tag rid: 'SV-222425r879530_rule'\n  tag stig_id: 'APSC-DV-000460'\n  tag gtitle: 'SRG-APP-000033'\n  tag fix_id: 'F-24084r493184_fix'\n  tag 'documentable'\n  tag legacy: ['SV-83951', 'V-69329']\n  tag cci: ['CCI-000213']\n  tag nist: ['AC-3']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222425.rb"},"title":"The application must enforce approved authorizations for logical access to information and system resources in accordance with applicable access control policies.","desc":"To mitigate the risk of unauthorized access to sensitive information by entities that have been issued certificates by DoD-approved PKIs, all DoD systems (e.g., networks, web servers, and web portals) must be properly configured to incorporate access control methods that do not rely solely on the possession of a certificate for access. \n\nSuccessful authentication must not automatically give an entity access to a restricted asset or security boundary.\n\nAuthorization procedures and controls must be implemented to ensure each authenticated entity also has a validated and current authorization.\n\nAuthorization is the process of determining whether an entity, once authenticated, is permitted to access a specific asset.\n\nInformation systems use access control policies and enforcement mechanisms to implement this requirement.\n\nAccess control policies include identity-based policies, role-based policies, and attribute-based policies.\n\nAccess enforcement mechanisms include access control lists, access control matrices, and cryptography.\n\nThese policies and mechanisms must be employed by the application to control access between users (or processes acting on behalf of users) and objects (e.g., devices, files, records, processes, programs, and domains) in the information system.\n\nThis requirement is applicable to access control enforcement applications (e.g., authentication servers) and other applications that perform information and system access control functions.","descriptions":{"default":"To mitigate the risk of unauthorized access to sensitive information by entities that have been issued certificates by DoD-approved PKIs, all DoD systems (e.g., networks, web servers, and web portals) must be properly configured to incorporate access control methods that do not rely solely on the possession of a certificate for access. \n\nSuccessful authentication must not automatically give an entity access to a restricted asset or security boundary.\n\nAuthorization procedures and controls must be implemented to ensure each authenticated entity also has a validated and current authorization.\n\nAuthorization is the process of determining whether an entity, once authenticated, is permitted to access a specific asset.\n\nInformation systems use access control policies and enforcement mechanisms to implement this requirement.\n\nAccess control policies include identity-based policies, role-based policies, and attribute-based policies.\n\nAccess enforcement mechanisms include access control lists, access control matrices, and cryptography.\n\nThese policies and mechanisms must be employed by the application to control access between users (or processes acting on behalf of users) and objects (e.g., devices, files, records, processes, programs, and domains) in the information system.\n\nThis requirement is applicable to access control enforcement applications (e.g., authentication servers) and other applications that perform information and system access control functions.","check":"Review the application documentation and interview the application administrator.\n\nReview application data protection requirements.\n\nIdentify application resources that require protection and authentication over and above the authentication required to access the application itself.\n\nThis can be access to a URL, a folder, a file, a process or a database record that should only be available to certain individuals.\n\nIdentify the access control methods utilized by the application in order to control access to the resource.\n\nExamples include Role-Based Access Control policies (RBAC).\n\nUsing RBAC as an example, utilize a test account placed into a test role.\n\nSet a protection control on a resource and explicitly deny access to the role assigned to the test user account.\n\nTry to access an application resource that is not configured to allow access. Access should be denied.\n\nIf the enforcement of configured access restrictions is not performed, this is a finding.","fix":"Design or configure the application to enforce access to application resources."},"impact":0.7,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24095r493183_chk","severity":"high","gid":"V-222425","rid":"SV-222425r879530_rule","stig_id":"APSC-DV-000460","gtitle":"SRG-APP-000033","fix_id":"F-24084r493184_fix","documentable":null,"legacy":["SV-83951","V-69329"],"cci":["CCI-000213"],"nist":["AC-3"]}},{"id":"SV-222426","code":"control 'SV-222426' do\n  title 'The application must enforce organization-defined discretionary access control policies over defined subjects and objects.'\n  desc 'Discretionary Access Control allows users to determine who is allowed to access their data. To mitigate the risk of unauthorized access to sensitive information by entities that have been issued certificates by DoD-approved PKIs, all DoD systems (e.g., networks, web servers, and web portals) must be properly configured to incorporate access control methods that do not rely solely on the possession of a certificate for access. Successful authentication must not automatically give an entity access to an asset or security boundary. Authorization procedures and controls must be implemented to ensure each authenticated entity also has a validated and current authorization. Authorization is the process of determining whether an entity, once authenticated, is permitted to access a specific asset. Information systems use access control policies and enforcement mechanisms to implement this requirement.\n\nAccess control policies include identity-based policies, role-based policies, and attribute-based policies. Access enforcement mechanisms include access control lists, access control matrices, and cryptography. These policies and mechanisms must be employed by the application to control access between users (or processes acting on behalf of users) and objects (e.g., devices, files, records, processes, programs, and domains) in the information system.\n\nThis requirement is applicable to access control enforcement applications (e.g., authentication servers) and other applications that perform information and system access control functions.'\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nReview application data protection requirements and application integrated access control methods.\n\nIdentify if the application implements discretionary access control to application resources. Discretionary Access Controls (DAC) allows application users to determine and set permissions on application data and application objects. The result is the user is given the ability to control who has access to the data they control.\n\nIf the application does not implement discretionary access controls, this requirement is not applicable.\n\nResources can be a URL, a folder, a file, a process, a database record, or any other application asset that warrants sharing or authorization permission reassignment.\n\nCreate 3 test accounts.\n\nUsing test account 1 set protection control on a test user 1 controlled resource.\n\nGrant access to test user 2 and only test user 2.\n\nAuthenticate as test user 3 and attempt to access the application resource where test user 1 and test user 2 are granted access. Access should be denied.\n\nIf the enforcement of configured access restrictions is not performed, this is a finding.'\n  desc 'fix', 'Design and configure the application to enforce discretionary access control policies.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24096r493186_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222426'\n  tag rid: 'SV-222426r879705_rule'\n  tag stig_id: 'APSC-DV-000470'\n  tag gtitle: 'SRG-APP-000328'\n  tag fix_id: 'F-24085r493187_fix'\n  tag 'documentable'\n  tag legacy: ['SV-83953', 'V-69331']\n  tag cci: ['CCI-002165']\n  tag nist: ['AC-3 (4)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222426.rb"},"title":"The application must enforce organization-defined discretionary access control policies over defined subjects and objects.","desc":"Discretionary Access Control allows users to determine who is allowed to access their data. To mitigate the risk of unauthorized access to sensitive information by entities that have been issued certificates by DoD-approved PKIs, all DoD systems (e.g., networks, web servers, and web portals) must be properly configured to incorporate access control methods that do not rely solely on the possession of a certificate for access. Successful authentication must not automatically give an entity access to an asset or security boundary. Authorization procedures and controls must be implemented to ensure each authenticated entity also has a validated and current authorization. Authorization is the process of determining whether an entity, once authenticated, is permitted to access a specific asset. Information systems use access control policies and enforcement mechanisms to implement this requirement.\n\nAccess control policies include identity-based policies, role-based policies, and attribute-based policies. Access enforcement mechanisms include access control lists, access control matrices, and cryptography. These policies and mechanisms must be employed by the application to control access between users (or processes acting on behalf of users) and objects (e.g., devices, files, records, processes, programs, and domains) in the information system.\n\nThis requirement is applicable to access control enforcement applications (e.g., authentication servers) and other applications that perform information and system access control functions.","descriptions":{"default":"Discretionary Access Control allows users to determine who is allowed to access their data. To mitigate the risk of unauthorized access to sensitive information by entities that have been issued certificates by DoD-approved PKIs, all DoD systems (e.g., networks, web servers, and web portals) must be properly configured to incorporate access control methods that do not rely solely on the possession of a certificate for access. Successful authentication must not automatically give an entity access to an asset or security boundary. Authorization procedures and controls must be implemented to ensure each authenticated entity also has a validated and current authorization. Authorization is the process of determining whether an entity, once authenticated, is permitted to access a specific asset. Information systems use access control policies and enforcement mechanisms to implement this requirement.\n\nAccess control policies include identity-based policies, role-based policies, and attribute-based policies. Access enforcement mechanisms include access control lists, access control matrices, and cryptography. These policies and mechanisms must be employed by the application to control access between users (or processes acting on behalf of users) and objects (e.g., devices, files, records, processes, programs, and domains) in the information system.\n\nThis requirement is applicable to access control enforcement applications (e.g., authentication servers) and other applications that perform information and system access control functions.","check":"Review the application documentation and interview the application administrator.\n\nReview application data protection requirements and application integrated access control methods.\n\nIdentify if the application implements discretionary access control to application resources. Discretionary Access Controls (DAC) allows application users to determine and set permissions on application data and application objects. The result is the user is given the ability to control who has access to the data they control.\n\nIf the application does not implement discretionary access controls, this requirement is not applicable.\n\nResources can be a URL, a folder, a file, a process, a database record, or any other application asset that warrants sharing or authorization permission reassignment.\n\nCreate 3 test accounts.\n\nUsing test account 1 set protection control on a test user 1 controlled resource.\n\nGrant access to test user 2 and only test user 2.\n\nAuthenticate as test user 3 and attempt to access the application resource where test user 1 and test user 2 are granted access. Access should be denied.\n\nIf the enforcement of configured access restrictions is not performed, this is a finding.","fix":"Design and configure the application to enforce discretionary access control policies."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24096r493186_chk","severity":"medium","gid":"V-222426","rid":"SV-222426r879705_rule","stig_id":"APSC-DV-000470","gtitle":"SRG-APP-000328","fix_id":"F-24085r493187_fix","documentable":null,"legacy":["SV-83953","V-69331"],"cci":["CCI-002165"],"nist":["AC-3 (4)"]}},{"id":"SV-222427","code":"control 'SV-222427' do\n  title 'The application must enforce approved authorizations for controlling the flow of information within the system based on organization-defined information flow control policies.'\n  desc 'A mechanism to detect and prevent unauthorized communication flow must be configured or provided as part of the system design. If information flow is not enforced based on approved authorizations, the system may become compromised. Information flow control regulates where information is allowed to travel within a system and between interconnected systems. The flow of all system information must be monitored and controlled so it does not introduce any unacceptable risk to the systems or data.\n\nApplication specific examples of enforcement occurs in systems that employ rule sets or establish configuration settings that restrict information system services, or message-filtering capability based on message content (e.g., implementing key word searches or using document characteristics).\n\nThis is usually established by identifying if there are rulesets, policies or other configurations settings provided by the application which serve to control the flow of information within the system. Control of data flow is established by using labels on data and data subsets, evaluating the destination of the data within or without the system (similar security domain) and referencing a corresponding policy that is used to control the flow of data.\n\nApplications providing information flow control must be able to enforce approved authorizations for controlling the flow of information within the system in accordance with applicable policy.'\n  desc 'check', 'Review the application documentation and interview the application and system administrators.\n\nReview application features and functions to determine if the application is designed to control the flow of information within the system.\nIdentify:\n\n- rulesets,\n- data labels, and\n- policies\n\nto determine if the application is designed to control the flow of data within the system.\n\nIf the application does not provide data flow control capabilities, the requirement is not applicable.\n\nAccess the system as a user with access rights that allow the creation of test data or use of existing test data.\n\nCreate a test data set and label the data with a data label provided with or by the application, e.g., Personally Identifiable Information (PII) data.\n\nReview the policy to determine where in the system the PII labeled data is allowed and is not allowed to go.\n\nUsing application features and functions, attempt to transmit the labeled data to an area that is prohibited by policy.\n\nVerify the flow control policy was enforced and the data was not transmitted.\n\nIf the application does not enforce the approved authorizations for controlling data flow, this is a finding.'\n  desc 'fix', 'Configure the application to enforce data flow control in accordance with data flow control policies.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24097r493189_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222427'\n  tag rid: 'SV-222427r879533_rule'\n  tag stig_id: 'APSC-DV-000480'\n  tag gtitle: 'SRG-APP-000038'\n  tag fix_id: 'F-24086r493190_fix'\n  tag 'documentable'\n  tag legacy: ['V-69333', 'SV-83955']\n  tag cci: ['CCI-001368']\n  tag nist: ['AC-4']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222427.rb"},"title":"The application must enforce approved authorizations for controlling the flow of information within the system based on organization-defined information flow control policies.","desc":"A mechanism to detect and prevent unauthorized communication flow must be configured or provided as part of the system design. If information flow is not enforced based on approved authorizations, the system may become compromised. Information flow control regulates where information is allowed to travel within a system and between interconnected systems. The flow of all system information must be monitored and controlled so it does not introduce any unacceptable risk to the systems or data.\n\nApplication specific examples of enforcement occurs in systems that employ rule sets or establish configuration settings that restrict information system services, or message-filtering capability based on message content (e.g., implementing key word searches or using document characteristics).\n\nThis is usually established by identifying if there are rulesets, policies or other configurations settings provided by the application which serve to control the flow of information within the system. Control of data flow is established by using labels on data and data subsets, evaluating the destination of the data within or without the system (similar security domain) and referencing a corresponding policy that is used to control the flow of data.\n\nApplications providing information flow control must be able to enforce approved authorizations for controlling the flow of information within the system in accordance with applicable policy.","descriptions":{"default":"A mechanism to detect and prevent unauthorized communication flow must be configured or provided as part of the system design. If information flow is not enforced based on approved authorizations, the system may become compromised. Information flow control regulates where information is allowed to travel within a system and between interconnected systems. The flow of all system information must be monitored and controlled so it does not introduce any unacceptable risk to the systems or data.\n\nApplication specific examples of enforcement occurs in systems that employ rule sets or establish configuration settings that restrict information system services, or message-filtering capability based on message content (e.g., implementing key word searches or using document characteristics).\n\nThis is usually established by identifying if there are rulesets, policies or other configurations settings provided by the application which serve to control the flow of information within the system. Control of data flow is established by using labels on data and data subsets, evaluating the destination of the data within or without the system (similar security domain) and referencing a corresponding policy that is used to control the flow of data.\n\nApplications providing information flow control must be able to enforce approved authorizations for controlling the flow of information within the system in accordance with applicable policy.","check":"Review the application documentation and interview the application and system administrators.\n\nReview application features and functions to determine if the application is designed to control the flow of information within the system.\nIdentify:\n\n- rulesets,\n- data labels, and\n- policies\n\nto determine if the application is designed to control the flow of data within the system.\n\nIf the application does not provide data flow control capabilities, the requirement is not applicable.\n\nAccess the system as a user with access rights that allow the creation of test data or use of existing test data.\n\nCreate a test data set and label the data with a data label provided with or by the application, e.g., Personally Identifiable Information (PII) data.\n\nReview the policy to determine where in the system the PII labeled data is allowed and is not allowed to go.\n\nUsing application features and functions, attempt to transmit the labeled data to an area that is prohibited by policy.\n\nVerify the flow control policy was enforced and the data was not transmitted.\n\nIf the application does not enforce the approved authorizations for controlling data flow, this is a finding.","fix":"Configure the application to enforce data flow control in accordance with data flow control policies."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24097r493189_chk","severity":"medium","gid":"V-222427","rid":"SV-222427r879533_rule","stig_id":"APSC-DV-000480","gtitle":"SRG-APP-000038","fix_id":"F-24086r493190_fix","documentable":null,"legacy":["V-69333","SV-83955"],"cci":["CCI-001368"],"nist":["AC-4"]}},{"id":"SV-222428","code":"control 'SV-222428' do\n  title 'The application must enforce approved authorizations for controlling the flow of information between interconnected systems based on organization-defined information flow control policies.'\n  desc 'A mechanism to detect and prevent unauthorized communication flow must be configured or provided as part of the system design. If information flow is not enforced based on approved authorizations, the system may become compromised. Information flow control regulates where information is allowed to travel within a system and between interconnected systems. The flow of all system information must be monitored and controlled so it does not introduce any unacceptable risk to the systems or data.\n\nApplication specific examples of enforcement occurs in systems that employ rule sets or establish configuration settings that restrict information system services, or message-filtering capability based on message content (e.g., implementing key word searches or using document characteristics).\n\nThis is usually established by identifying if there are rulesets, policies or other configurations settings provided by the application which serve to control the flow of information within the system. Control of data flow is established by using labels on data and data subsets, evaluating the destination of the data within or without the system (similar security domain) and referencing a corresponding policy that is used to control the flow of data.\n\nApplications providing information flow control must be able to enforce approved authorizations for controlling the flow of information within the system in accordance with applicable policy.'\n  desc 'check', 'Review the application documentation and interview the application and system administrators.\n\nIdentify application features and functions to determine if the application is designed to control the flow of information between interconnected systems.\n\nIdentify:\n\n- rulesets,\n- data labels\n- policies\n- systems\n\nto determine if the application is designed to control the flow of data between interconnected systems.\n\nIf the application does not provide data flow control capabilities, the requirement is not applicable.\n\nAccess the system as a user with access rights allowing the creation of test data or use of existing test data.\n\nCreate a test data set and label the data with a data label provided with or by the application (for example, a Personally Identifiable Information (PII) data label).\n\nReview the policy settings to determine where the PII labeled data is allowed and is not allowed.\n\nUsing application features and functions, attempt to transmit the labeled data to an interconnected system that is prohibited by policy.\n\nVerify the flow control policy was enforced and the data was not transmitted.\n\nIf the application does not enforce the approved authorizations for controlling data flow, this is a finding.'\n  desc 'fix', 'Configure the application to enforce data flow control in accordance with data flow control policies.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24098r493192_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222428'\n  tag rid: 'SV-222428r879534_rule'\n  tag stig_id: 'APSC-DV-000490'\n  tag gtitle: 'SRG-APP-000039'\n  tag fix_id: 'F-24087r493193_fix'\n  tag 'documentable'\n  tag legacy: ['V-69335', 'SV-83957']\n  tag cci: ['CCI-001414']\n  tag nist: ['AC-4']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222428.rb"},"title":"The application must enforce approved authorizations for controlling the flow of information between interconnected systems based on organization-defined information flow control policies.","desc":"A mechanism to detect and prevent unauthorized communication flow must be configured or provided as part of the system design. If information flow is not enforced based on approved authorizations, the system may become compromised. Information flow control regulates where information is allowed to travel within a system and between interconnected systems. The flow of all system information must be monitored and controlled so it does not introduce any unacceptable risk to the systems or data.\n\nApplication specific examples of enforcement occurs in systems that employ rule sets or establish configuration settings that restrict information system services, or message-filtering capability based on message content (e.g., implementing key word searches or using document characteristics).\n\nThis is usually established by identifying if there are rulesets, policies or other configurations settings provided by the application which serve to control the flow of information within the system. Control of data flow is established by using labels on data and data subsets, evaluating the destination of the data within or without the system (similar security domain) and referencing a corresponding policy that is used to control the flow of data.\n\nApplications providing information flow control must be able to enforce approved authorizations for controlling the flow of information within the system in accordance with applicable policy.","descriptions":{"default":"A mechanism to detect and prevent unauthorized communication flow must be configured or provided as part of the system design. If information flow is not enforced based on approved authorizations, the system may become compromised. Information flow control regulates where information is allowed to travel within a system and between interconnected systems. The flow of all system information must be monitored and controlled so it does not introduce any unacceptable risk to the systems or data.\n\nApplication specific examples of enforcement occurs in systems that employ rule sets or establish configuration settings that restrict information system services, or message-filtering capability based on message content (e.g., implementing key word searches or using document characteristics).\n\nThis is usually established by identifying if there are rulesets, policies or other configurations settings provided by the application which serve to control the flow of information within the system. Control of data flow is established by using labels on data and data subsets, evaluating the destination of the data within or without the system (similar security domain) and referencing a corresponding policy that is used to control the flow of data.\n\nApplications providing information flow control must be able to enforce approved authorizations for controlling the flow of information within the system in accordance with applicable policy.","check":"Review the application documentation and interview the application and system administrators.\n\nIdentify application features and functions to determine if the application is designed to control the flow of information between interconnected systems.\n\nIdentify:\n\n- rulesets,\n- data labels\n- policies\n- systems\n\nto determine if the application is designed to control the flow of data between interconnected systems.\n\nIf the application does not provide data flow control capabilities, the requirement is not applicable.\n\nAccess the system as a user with access rights allowing the creation of test data or use of existing test data.\n\nCreate a test data set and label the data with a data label provided with or by the application (for example, a Personally Identifiable Information (PII) data label).\n\nReview the policy settings to determine where the PII labeled data is allowed and is not allowed.\n\nUsing application features and functions, attempt to transmit the labeled data to an interconnected system that is prohibited by policy.\n\nVerify the flow control policy was enforced and the data was not transmitted.\n\nIf the application does not enforce the approved authorizations for controlling data flow, this is a finding.","fix":"Configure the application to enforce data flow control in accordance with data flow control policies."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24098r493192_chk","severity":"medium","gid":"V-222428","rid":"SV-222428r879534_rule","stig_id":"APSC-DV-000490","gtitle":"SRG-APP-000039","fix_id":"F-24087r493193_fix","documentable":null,"legacy":["V-69335","SV-83957"],"cci":["CCI-001414"],"nist":["AC-4"]}},{"id":"SV-222429","code":"control 'SV-222429' do\n  title 'The application must prevent non-privileged users from executing privileged functions to include disabling, circumventing, or altering implemented security safeguards/countermeasures.'\n  desc 'Preventing non-privileged users from executing privileged functions mitigates the risk that unauthorized individuals or processes may gain unnecessary access to information or privileges.\n\nPrivileged functions include, for example, establishing accounts, performing system integrity checks, or administering cryptographic key management activities. Non-privileged users are individuals that do not possess appropriate authorizations. Circumventing intrusion detection and prevention mechanisms or malicious code protection mechanisms are examples of privileged functions that require protection from non-privileged users.'\n  desc 'check', 'Identify the application user account(s) that the application uses to run. These accounts include the application processes (defined by Control Panel Services (Windows) or ps –ef (UNIX)) or for an n-tier application, the account that connects from one service (such as a web server) to another (such as a database server).\n\nDetermine the OS user groups in which each account is a member.\n\nList the user rights assigned to these users and groups and evaluate whether any of them are unnecessary.\n\nIf the OS rights exceed application operational requirements, this is a finding.\n\nIf the application user account is a member of the Administrators group (Windows) or has a User Identification (UID) of 0 (i.e., is equivalent to root in UNIX), this is a finding.\n\nSearch the file system to determine if the application user or groups have ownership or permissions to any files or directories.\n\nReview the list of files and identify any that are outside the scope of the application.\n\nIf there are such files outside the scope of the application, this is a finding.\n\nCheck ownership and permissions; identify permissions beyond the minimum necessary to support the application.\n\nIf there are instances of unnecessary ownership or permissions, this is a finding.\n\nThe finding details should note the full path of the file(s) and the associated issue (i.e., outside scope, permissions improperly granted to user X, etc.).'\n  desc 'fix', 'Modify the application to limit access and prevent the disabling or circumvention of security safeguards.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24099r493195_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222429'\n  tag rid: 'SV-222429r879717_rule'\n  tag stig_id: 'APSC-DV-000500'\n  tag gtitle: 'SRG-APP-000340'\n  tag fix_id: 'F-24088r493196_fix'\n  tag 'documentable'\n  tag legacy: ['SV-83959', 'V-69337']\n  tag cci: ['CCI-002235']\n  tag nist: ['AC-6 (10)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222429.rb"},"title":"The application must prevent non-privileged users from executing privileged functions to include disabling, circumventing, or altering implemented security safeguards/countermeasures.","desc":"Preventing non-privileged users from executing privileged functions mitigates the risk that unauthorized individuals or processes may gain unnecessary access to information or privileges.\n\nPrivileged functions include, for example, establishing accounts, performing system integrity checks, or administering cryptographic key management activities. Non-privileged users are individuals that do not possess appropriate authorizations. Circumventing intrusion detection and prevention mechanisms or malicious code protection mechanisms are examples of privileged functions that require protection from non-privileged users.","descriptions":{"default":"Preventing non-privileged users from executing privileged functions mitigates the risk that unauthorized individuals or processes may gain unnecessary access to information or privileges.\n\nPrivileged functions include, for example, establishing accounts, performing system integrity checks, or administering cryptographic key management activities. Non-privileged users are individuals that do not possess appropriate authorizations. Circumventing intrusion detection and prevention mechanisms or malicious code protection mechanisms are examples of privileged functions that require protection from non-privileged users.","check":"Identify the application user account(s) that the application uses to run. These accounts include the application processes (defined by Control Panel Services (Windows) or ps –ef (UNIX)) or for an n-tier application, the account that connects from one service (such as a web server) to another (such as a database server).\n\nDetermine the OS user groups in which each account is a member.\n\nList the user rights assigned to these users and groups and evaluate whether any of them are unnecessary.\n\nIf the OS rights exceed application operational requirements, this is a finding.\n\nIf the application user account is a member of the Administrators group (Windows) or has a User Identification (UID) of 0 (i.e., is equivalent to root in UNIX), this is a finding.\n\nSearch the file system to determine if the application user or groups have ownership or permissions to any files or directories.\n\nReview the list of files and identify any that are outside the scope of the application.\n\nIf there are such files outside the scope of the application, this is a finding.\n\nCheck ownership and permissions; identify permissions beyond the minimum necessary to support the application.\n\nIf there are instances of unnecessary ownership or permissions, this is a finding.\n\nThe finding details should note the full path of the file(s) and the associated issue (i.e., outside scope, permissions improperly granted to user X, etc.).","fix":"Modify the application to limit access and prevent the disabling or circumvention of security safeguards."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24099r493195_chk","severity":"medium","gid":"V-222429","rid":"SV-222429r879717_rule","stig_id":"APSC-DV-000500","gtitle":"SRG-APP-000340","fix_id":"F-24088r493196_fix","documentable":null,"legacy":["SV-83959","V-69337"],"cci":["CCI-002235"],"nist":["AC-6 (10)"]}},{"id":"SV-222430","code":"control 'SV-222430' do\n  title 'The application must execute without excessive account permissions.'\n  desc 'Applications are often designed to utilize a user account.  The account represents a means to control application permissions and access to OS resources, application resources or both.  \n\nWhen the application is designed and installed, care must be taken not to assign excessive permissions to the user account that is used by the application.  \n\nAn application operating with unnecessary privileges can potentially give an attacker access to the underlying operating system or if the privileges required for application execution are at a higher level than the privileges assigned to organizational users invoking such applications/programs, those users are indirectly provided with greater privileges than assigned by organizations.\n\nApplications must be designed and configured to operate with only those permissions that are required for proper operation.'\n  desc 'check', 'Review the system documentation or interview the application representative and identify if the application utilizes an account in order to operate.\n\nDetermine the OS user groups in which each application account is a member.  List the user rights assigned to these users and groups using relevant OS commands and evaluate whether any of them provide admin rights or if they are unnecessary or excessive. \n\nIf the application connects to a database, open an admin console to the database and view the database users, their roles and group rights.\n\nLocate the application user account used to access the database and examine the accounts privileges. This includes group privileges.\n\nIf the application user account has excessive OS privileges such as being in the admin group, database privileges such as being in the DBA role, has the ability to create, drop, alter the database (not application database tables), or if the application user account has other excessive or undefined system privileges, this is a finding.'\n  desc 'fix', 'Configure the application accounts with minimalist privileges. Do not allow the application to operate with admin credentials.'\n  impact 0.7\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24100r493198_chk'\n  tag severity: 'high'\n  tag gid: 'V-222430'\n  tag rid: 'SV-222430r879719_rule'\n  tag stig_id: 'APSC-DV-000510'\n  tag gtitle: 'SRG-APP-000342'\n  tag fix_id: 'F-24089r493199_fix'\n  tag 'documentable'\n  tag legacy: ['SV-83961', 'V-69339']\n  tag cci: ['CCI-002233']\n  tag nist: ['AC-6 (8)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222430.rb"},"title":"The application must execute without excessive account permissions.","desc":"Applications are often designed to utilize a user account.  The account represents a means to control application permissions and access to OS resources, application resources or both.  \n\nWhen the application is designed and installed, care must be taken not to assign excessive permissions to the user account that is used by the application.  \n\nAn application operating with unnecessary privileges can potentially give an attacker access to the underlying operating system or if the privileges required for application execution are at a higher level than the privileges assigned to organizational users invoking such applications/programs, those users are indirectly provided with greater privileges than assigned by organizations.\n\nApplications must be designed and configured to operate with only those permissions that are required for proper operation.","descriptions":{"default":"Applications are often designed to utilize a user account.  The account represents a means to control application permissions and access to OS resources, application resources or both.  \n\nWhen the application is designed and installed, care must be taken not to assign excessive permissions to the user account that is used by the application.  \n\nAn application operating with unnecessary privileges can potentially give an attacker access to the underlying operating system or if the privileges required for application execution are at a higher level than the privileges assigned to organizational users invoking such applications/programs, those users are indirectly provided with greater privileges than assigned by organizations.\n\nApplications must be designed and configured to operate with only those permissions that are required for proper operation.","check":"Review the system documentation or interview the application representative and identify if the application utilizes an account in order to operate.\n\nDetermine the OS user groups in which each application account is a member.  List the user rights assigned to these users and groups using relevant OS commands and evaluate whether any of them provide admin rights or if they are unnecessary or excessive. \n\nIf the application connects to a database, open an admin console to the database and view the database users, their roles and group rights.\n\nLocate the application user account used to access the database and examine the accounts privileges. This includes group privileges.\n\nIf the application user account has excessive OS privileges such as being in the admin group, database privileges such as being in the DBA role, has the ability to create, drop, alter the database (not application database tables), or if the application user account has other excessive or undefined system privileges, this is a finding.","fix":"Configure the application accounts with minimalist privileges. Do not allow the application to operate with admin credentials."},"impact":0.7,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24100r493198_chk","severity":"high","gid":"V-222430","rid":"SV-222430r879719_rule","stig_id":"APSC-DV-000510","gtitle":"SRG-APP-000342","fix_id":"F-24089r493199_fix","documentable":null,"legacy":["SV-83961","V-69339"],"cci":["CCI-002233"],"nist":["AC-6 (8)"]}},{"id":"SV-222431","code":"control 'SV-222431' do\n  title 'The application must audit the execution of privileged functions.'\n  desc 'Misuse of privileged functions, either intentionally or unintentionally by authorized users, or by unauthorized external entities that have compromised information system accounts, is a serious and ongoing concern and can have significant adverse impacts on organizations. Auditing the use of privileged functions is one way to detect such misuse, and identify the risk from insider threats and the advanced persistent threat.'\n  desc 'check', 'Log on to the application as an administrative user.\n\nIdentify functionality within the application that requires utilizing the admin role.\n\nMonitor application logs while performing privileged functions within the application.\n\nPerform administrative types of tasks such as adding or modifying user accounts, modifying application configuration, or managing encryption keys.\n\nReview logs for entries that indicate the administrative actions performed were logged.\n\nEnsure the specific action taken, date and time or event is recorded.\n\nIf the execution of privileged functionality is not logged, this is a finding.'\n  desc 'fix', 'Configure the application to write log entries when privileged functions are executed. At a minimum, ensure the specific action taken, date and time of event are recorded.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24101r493201_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222431'\n  tag rid: 'SV-222431r879720_rule'\n  tag stig_id: 'APSC-DV-000520'\n  tag gtitle: 'SRG-APP-000343'\n  tag fix_id: 'F-24090r493202_fix'\n  tag 'documentable'\n  tag legacy: ['SV-83963', 'V-69341']\n  tag cci: ['CCI-002234']\n  tag nist: ['AC-6 (9)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222431.rb"},"title":"The application must audit the execution of privileged functions.","desc":"Misuse of privileged functions, either intentionally or unintentionally by authorized users, or by unauthorized external entities that have compromised information system accounts, is a serious and ongoing concern and can have significant adverse impacts on organizations. Auditing the use of privileged functions is one way to detect such misuse, and identify the risk from insider threats and the advanced persistent threat.","descriptions":{"default":"Misuse of privileged functions, either intentionally or unintentionally by authorized users, or by unauthorized external entities that have compromised information system accounts, is a serious and ongoing concern and can have significant adverse impacts on organizations. Auditing the use of privileged functions is one way to detect such misuse, and identify the risk from insider threats and the advanced persistent threat.","check":"Log on to the application as an administrative user.\n\nIdentify functionality within the application that requires utilizing the admin role.\n\nMonitor application logs while performing privileged functions within the application.\n\nPerform administrative types of tasks such as adding or modifying user accounts, modifying application configuration, or managing encryption keys.\n\nReview logs for entries that indicate the administrative actions performed were logged.\n\nEnsure the specific action taken, date and time or event is recorded.\n\nIf the execution of privileged functionality is not logged, this is a finding.","fix":"Configure the application to write log entries when privileged functions are executed. At a minimum, ensure the specific action taken, date and time of event are recorded."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24101r493201_chk","severity":"medium","gid":"V-222431","rid":"SV-222431r879720_rule","stig_id":"APSC-DV-000520","gtitle":"SRG-APP-000343","fix_id":"F-24090r493202_fix","documentable":null,"legacy":["SV-83963","V-69341"],"cci":["CCI-002234"],"nist":["AC-6 (9)"]}},{"id":"SV-222432","code":"control 'SV-222432' do\n  title 'The application must enforce the limit of three consecutive invalid logon attempts by a user during a 15 minute time period.'\n  desc 'By limiting the number of failed logon attempts, the risk of unauthorized system access via user password guessing, otherwise known as brute forcing, is reduced.\n\nLimits are imposed by locking the account.\n\nUser notification when three failed logon attempts are exceeded is an operational consideration determined by the application owner. In some instances the operational situation may dictate that no notice is to be provided to the user when their account is locked. In other situations, the user may be notified their account is now locked. This decision is left to the application owner based upon their operational scenarios.'\n  desc 'check', 'All testing must be performed within a 15-minute window.\n\nLog on to the application with a test user account.\n\nIntentionally enter an incorrect user password or pin.\n\nRepeat 2 times within 15 minutes for a total of three failed attempts.\n\nNotification of a locked account may or may not be provided.\n\nUsing the correct user password or pin, attempt to logon a 4th time.\n\nIf the logon is successful upon the 4th attempt the account was not locked after the third failed attempt and this is a finding.'\n  desc 'fix', 'Configure the application to enforce an account lock after 3 failed logon attempts occurring within a 15-minute window.'\n  impact 0.7\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24102r493204_chk'\n  tag severity: 'high'\n  tag gid: 'V-222432'\n  tag rid: 'SV-222432r879546_rule'\n  tag stig_id: 'APSC-DV-000530'\n  tag gtitle: 'SRG-APP-000065'\n  tag fix_id: 'F-24091r493205_fix'\n  tag 'documentable'\n  tag legacy: ['V-69343', 'SV-83965']\n  tag cci: ['CCI-000044']\n  tag nist: ['AC-7 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222432.rb"},"title":"The application must enforce the limit of three consecutive invalid logon attempts by a user during a 15 minute time period.","desc":"By limiting the number of failed logon attempts, the risk of unauthorized system access via user password guessing, otherwise known as brute forcing, is reduced.\n\nLimits are imposed by locking the account.\n\nUser notification when three failed logon attempts are exceeded is an operational consideration determined by the application owner. In some instances the operational situation may dictate that no notice is to be provided to the user when their account is locked. In other situations, the user may be notified their account is now locked. This decision is left to the application owner based upon their operational scenarios.","descriptions":{"default":"By limiting the number of failed logon attempts, the risk of unauthorized system access via user password guessing, otherwise known as brute forcing, is reduced.\n\nLimits are imposed by locking the account.\n\nUser notification when three failed logon attempts are exceeded is an operational consideration determined by the application owner. In some instances the operational situation may dictate that no notice is to be provided to the user when their account is locked. In other situations, the user may be notified their account is now locked. This decision is left to the application owner based upon their operational scenarios.","check":"All testing must be performed within a 15-minute window.\n\nLog on to the application with a test user account.\n\nIntentionally enter an incorrect user password or pin.\n\nRepeat 2 times within 15 minutes for a total of three failed attempts.\n\nNotification of a locked account may or may not be provided.\n\nUsing the correct user password or pin, attempt to logon a 4th time.\n\nIf the logon is successful upon the 4th attempt the account was not locked after the third failed attempt and this is a finding.","fix":"Configure the application to enforce an account lock after 3 failed logon attempts occurring within a 15-minute window."},"impact":0.7,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24102r493204_chk","severity":"high","gid":"V-222432","rid":"SV-222432r879546_rule","stig_id":"APSC-DV-000530","gtitle":"SRG-APP-000065","fix_id":"F-24091r493205_fix","documentable":null,"legacy":["V-69343","SV-83965"],"cci":["CCI-000044"],"nist":["AC-7 a"]}},{"id":"SV-222433","code":"control 'SV-222433' do\n  title 'The application administrator must follow an approved process to unlock locked user accounts.'\n  desc 'Once a user account has been locked, it must be unlocked by an administrator.\n\nAn ISSM and ISSO approved process must be created and followed to ensure the user requesting access is properly authenticated prior to access being re-established.\n\nThe process must include having the user provide information only the user would know and having the administrator verify the accuracy of the information prior to unlocking the account. This means having the user provide this information when their account is created so the information can be referenced when they are locked out.    \n\nThe process utilized may be manual in nature, however it is recognized that password resets are a time consuming task. To minimize helpdesk resource constraints related to user lockout requests, procedures may be automated by administrators in order to unlock the account or reset the password.  \n\nAuthentication process examples include having the user provide personal information known only by the user and provided when the account was created and/or using Out-of-Band or side channel communication methods such as text messages to the users established cell phone number in order to provide a temporary password or token that can be used to logon once and reset the password.\n\nThe OWASP site provides an acceptable password reset process that can be used as a reference.  https://www.owasp.org/index.php/Forgot_Password_Cheat_Sheet.  \n\nAutomated procedures should follow industry standards and best practice for securely automating password reset/account unlocks and must be reviewed, tested, and then approved by the ISSM and ISSO.'\n  desc 'check', 'Interview the application administrator and identify the approved process for unlocking user accounts.\n\nThe process may involve a manual or automated reset after the locked out user has identified themselves using standard user identification processes outlined in the vulnerability discussion.\n\nIf the admin does not unlock the account following the approved process, and if the process does not have documented ISSO and ISSM approvals, this is a finding.'\n  desc 'fix', 'Create a standard approved process for unlocking locked application accounts which includes validating user identity prior to unlocking the account.\n\nUse that process when unlocking application user accounts.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24103r493207_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222433'\n  tag rid: 'SV-222433r879722_rule'\n  tag stig_id: 'APSC-DV-000540'\n  tag gtitle: 'SRG-APP-000345'\n  tag fix_id: 'F-24092r493208_fix'\n  tag 'documentable'\n  tag legacy: ['SV-83969', 'V-69347']\n  tag cci: ['CCI-002238']\n  tag nist: ['AC-7 b']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222433.rb"},"title":"The application administrator must follow an approved process to unlock locked user accounts.","desc":"Once a user account has been locked, it must be unlocked by an administrator.\n\nAn ISSM and ISSO approved process must be created and followed to ensure the user requesting access is properly authenticated prior to access being re-established.\n\nThe process must include having the user provide information only the user would know and having the administrator verify the accuracy of the information prior to unlocking the account. This means having the user provide this information when their account is created so the information can be referenced when they are locked out.    \n\nThe process utilized may be manual in nature, however it is recognized that password resets are a time consuming task. To minimize helpdesk resource constraints related to user lockout requests, procedures may be automated by administrators in order to unlock the account or reset the password.  \n\nAuthentication process examples include having the user provide personal information known only by the user and provided when the account was created and/or using Out-of-Band or side channel communication methods such as text messages to the users established cell phone number in order to provide a temporary password or token that can be used to logon once and reset the password.\n\nThe OWASP site provides an acceptable password reset process that can be used as a reference.  https://www.owasp.org/index.php/Forgot_Password_Cheat_Sheet.  \n\nAutomated procedures should follow industry standards and best practice for securely automating password reset/account unlocks and must be reviewed, tested, and then approved by the ISSM and ISSO.","descriptions":{"default":"Once a user account has been locked, it must be unlocked by an administrator.\n\nAn ISSM and ISSO approved process must be created and followed to ensure the user requesting access is properly authenticated prior to access being re-established.\n\nThe process must include having the user provide information only the user would know and having the administrator verify the accuracy of the information prior to unlocking the account. This means having the user provide this information when their account is created so the information can be referenced when they are locked out.    \n\nThe process utilized may be manual in nature, however it is recognized that password resets are a time consuming task. To minimize helpdesk resource constraints related to user lockout requests, procedures may be automated by administrators in order to unlock the account or reset the password.  \n\nAuthentication process examples include having the user provide personal information known only by the user and provided when the account was created and/or using Out-of-Band or side channel communication methods such as text messages to the users established cell phone number in order to provide a temporary password or token that can be used to logon once and reset the password.\n\nThe OWASP site provides an acceptable password reset process that can be used as a reference.  https://www.owasp.org/index.php/Forgot_Password_Cheat_Sheet.  \n\nAutomated procedures should follow industry standards and best practice for securely automating password reset/account unlocks and must be reviewed, tested, and then approved by the ISSM and ISSO.","check":"Interview the application administrator and identify the approved process for unlocking user accounts.\n\nThe process may involve a manual or automated reset after the locked out user has identified themselves using standard user identification processes outlined in the vulnerability discussion.\n\nIf the admin does not unlock the account following the approved process, and if the process does not have documented ISSO and ISSM approvals, this is a finding.","fix":"Create a standard approved process for unlocking locked application accounts which includes validating user identity prior to unlocking the account.\n\nUse that process when unlocking application user accounts."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24103r493207_chk","severity":"medium","gid":"V-222433","rid":"SV-222433r879722_rule","stig_id":"APSC-DV-000540","gtitle":"SRG-APP-000345","fix_id":"F-24092r493208_fix","documentable":null,"legacy":["SV-83969","V-69347"],"cci":["CCI-002238"],"nist":["AC-7 b"]}},{"id":"SV-222434","code":"control 'SV-222434' do\n  title 'The application must display the Standard Mandatory DoD Notice and Consent Banner before granting access to the application.'\n  desc %q(Display of the DoD-approved use notification before granting access to the application ensures privacy and security notification verbiage used is consistent with applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance.\n\nSystem use notifications are required only for access via logon interfaces with human users and are not required when such human interfaces do not exist.\n\nThe banner must be formatted in accordance with DTM-08-060. Use the following verbiage for applications that can accommodate banners of 1300 characters:\n\n\"You are accessing a U.S. Government (USG) Information System (IS) that is provided for USG-authorized use only.\n\nBy using this IS (which includes any device attached to this IS), you consent to the following conditions:\n\n-The USG routinely intercepts and monitors communications on this IS for purposes including, but not limited to, penetration testing, COMSEC monitoring, network operations and defense, personnel misconduct (PM), law enforcement (LE), and counterintelligence (CI) investigations.\n\n-At any time, the USG may inspect and seize data stored on this IS.\n\n-Communications using, or data stored on, this IS are not private, are subject to routine monitoring, interception, and search, and may be disclosed or used for any USG-authorized purpose.\n\n-This IS includes security measures (e.g., authentication and access controls) to protect USG interests--not for your personal benefit or privacy.\n\n-Notwithstanding the above, using this IS does not constitute consent to PM, LE or CI investigative searching or monitoring of the content of privileged communications, or work product, related to personal representation or services by attorneys, psychotherapists, or clergy, and their assistants. Such communications and work product are private and confidential. See User Agreement for details.\"\n\nUse the following verbiage for operating systems that have severe limitations on the number of characters that can be displayed in the banner:\n\n\"I've read & consent to terms in IS user agreem't.\")\n  desc 'check', 'If the application has no interactive user interface, this requirement is not applicable.\n\nLog on to the application as a user.\n\nObserve the screen and ensure the DoD-approved banner is displayed prior to obtaining access to the application. Refer to the vulnerability discussion for the approved text.\n\nIf the only way to access the application is through the OS console, e.g., a fat client application installed on a GFE desktop or laptop, and that GFE is configured to display the DoD banner, an additional banner is not required at the application level.\n\nIf the standard DoD-approved banner is not displayed prior to obtaining access, this is a finding.'\n  desc 'fix', 'Configure the application to present the standard DoD-approved banner prior to granting access to the application.'\n  impact 0.3\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24104r493210_chk'\n  tag severity: 'low'\n  tag gid: 'V-222434'\n  tag rid: 'SV-222434r879547_rule'\n  tag stig_id: 'APSC-DV-000550'\n  tag gtitle: 'SRG-APP-000068'\n  tag fix_id: 'F-24093r493211_fix'\n  tag 'documentable'\n  tag legacy: ['V-69349', 'SV-83971']\n  tag cci: ['CCI-000048']\n  tag nist: ['AC-8 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222434.rb"},"title":"The application must display the Standard Mandatory DoD Notice and Consent Banner before granting access to the application.","desc":"Display of the DoD-approved use notification before granting access to the application ensures privacy and security notification verbiage used is consistent with applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance.\n\nSystem use notifications are required only for access via logon interfaces with human users and are not required when such human interfaces do not exist.\n\nThe banner must be formatted in accordance with DTM-08-060. Use the following verbiage for applications that can accommodate banners of 1300 characters:\n\n\"You are accessing a U.S. Government (USG) Information System (IS) that is provided for USG-authorized use only.\n\nBy using this IS (which includes any device attached to this IS), you consent to the following conditions:\n\n-The USG routinely intercepts and monitors communications on this IS for purposes including, but not limited to, penetration testing, COMSEC monitoring, network operations and defense, personnel misconduct (PM), law enforcement (LE), and counterintelligence (CI) investigations.\n\n-At any time, the USG may inspect and seize data stored on this IS.\n\n-Communications using, or data stored on, this IS are not private, are subject to routine monitoring, interception, and search, and may be disclosed or used for any USG-authorized purpose.\n\n-This IS includes security measures (e.g., authentication and access controls) to protect USG interests--not for your personal benefit or privacy.\n\n-Notwithstanding the above, using this IS does not constitute consent to PM, LE or CI investigative searching or monitoring of the content of privileged communications, or work product, related to personal representation or services by attorneys, psychotherapists, or clergy, and their assistants. Such communications and work product are private and confidential. See User Agreement for details.\"\n\nUse the following verbiage for operating systems that have severe limitations on the number of characters that can be displayed in the banner:\n\n\"I've read & consent to terms in IS user agreem't.\"","descriptions":{"default":"Display of the DoD-approved use notification before granting access to the application ensures privacy and security notification verbiage used is consistent with applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance.\n\nSystem use notifications are required only for access via logon interfaces with human users and are not required when such human interfaces do not exist.\n\nThe banner must be formatted in accordance with DTM-08-060. Use the following verbiage for applications that can accommodate banners of 1300 characters:\n\n\"You are accessing a U.S. Government (USG) Information System (IS) that is provided for USG-authorized use only.\n\nBy using this IS (which includes any device attached to this IS), you consent to the following conditions:\n\n-The USG routinely intercepts and monitors communications on this IS for purposes including, but not limited to, penetration testing, COMSEC monitoring, network operations and defense, personnel misconduct (PM), law enforcement (LE), and counterintelligence (CI) investigations.\n\n-At any time, the USG may inspect and seize data stored on this IS.\n\n-Communications using, or data stored on, this IS are not private, are subject to routine monitoring, interception, and search, and may be disclosed or used for any USG-authorized purpose.\n\n-This IS includes security measures (e.g., authentication and access controls) to protect USG interests--not for your personal benefit or privacy.\n\n-Notwithstanding the above, using this IS does not constitute consent to PM, LE or CI investigative searching or monitoring of the content of privileged communications, or work product, related to personal representation or services by attorneys, psychotherapists, or clergy, and their assistants. Such communications and work product are private and confidential. See User Agreement for details.\"\n\nUse the following verbiage for operating systems that have severe limitations on the number of characters that can be displayed in the banner:\n\n\"I've read & consent to terms in IS user agreem't.\"","check":"If the application has no interactive user interface, this requirement is not applicable.\n\nLog on to the application as a user.\n\nObserve the screen and ensure the DoD-approved banner is displayed prior to obtaining access to the application. Refer to the vulnerability discussion for the approved text.\n\nIf the only way to access the application is through the OS console, e.g., a fat client application installed on a GFE desktop or laptop, and that GFE is configured to display the DoD banner, an additional banner is not required at the application level.\n\nIf the standard DoD-approved banner is not displayed prior to obtaining access, this is a finding.","fix":"Configure the application to present the standard DoD-approved banner prior to granting access to the application."},"impact":0.3,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24104r493210_chk","severity":"low","gid":"V-222434","rid":"SV-222434r879547_rule","stig_id":"APSC-DV-000550","gtitle":"SRG-APP-000068","fix_id":"F-24093r493211_fix","documentable":null,"legacy":["V-69349","SV-83971"],"cci":["CCI-000048"],"nist":["AC-8 a"]}},{"id":"SV-222435","code":"control 'SV-222435' do\n  title 'The application must retain the Standard Mandatory DoD Notice and Consent Banner on the screen until users acknowledge the usage conditions and take explicit actions to log on for further access.'\n  desc 'The banner must be acknowledged by the user prior to allowing the user access to the application. This provides assurance that the user has seen the message and accepted the conditions for access. If the consent banner is not acknowledged by the user, DoD will not be in compliance with system use notifications required by law.\n\nTo establish acceptance of the application usage policy, a click-through banner at application logon is required. The application must prevent further activity until the user executes a positive action to manifest agreement by clicking on a box indicating \"OK\".'\n  desc 'check', 'If the application has no interactive user interface, this requirement is not applicable.\n\nIf the user interface is only available via the OS console, e.g., a fat client application installed on a GFE desktop or laptop, and that GFE is configured to display the DoD banner, this requirement is not applicable.\n\nAccess the application and authenticate if necessary. Verify the banner is displayed and action must be taken to accept terms of use.\n\nIf the banner is not displayed or no action must be taken to accept terms of use, this is a finding.'\n  desc 'fix', 'Configure the application to retain the standard DoD-approved banner until the user accepts the usage conditions prior to granting access to the application.'\n  impact 0.3\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24105r493213_chk'\n  tag severity: 'low'\n  tag gid: 'V-222435'\n  tag rid: 'SV-222435r879548_rule'\n  tag stig_id: 'APSC-DV-000560'\n  tag gtitle: 'SRG-APP-000069'\n  tag fix_id: 'F-24094r493214_fix'\n  tag 'documentable'\n  tag legacy: ['V-69351', 'SV-83973']\n  tag cci: ['CCI-000050']\n  tag nist: ['AC-8 b']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222435.rb"},"title":"The application must retain the Standard Mandatory DoD Notice and Consent Banner on the screen until users acknowledge the usage conditions and take explicit actions to log on for further access.","desc":"The banner must be acknowledged by the user prior to allowing the user access to the application. This provides assurance that the user has seen the message and accepted the conditions for access. If the consent banner is not acknowledged by the user, DoD will not be in compliance with system use notifications required by law.\n\nTo establish acceptance of the application usage policy, a click-through banner at application logon is required. The application must prevent further activity until the user executes a positive action to manifest agreement by clicking on a box indicating \"OK\".","descriptions":{"default":"The banner must be acknowledged by the user prior to allowing the user access to the application. This provides assurance that the user has seen the message and accepted the conditions for access. If the consent banner is not acknowledged by the user, DoD will not be in compliance with system use notifications required by law.\n\nTo establish acceptance of the application usage policy, a click-through banner at application logon is required. The application must prevent further activity until the user executes a positive action to manifest agreement by clicking on a box indicating \"OK\".","check":"If the application has no interactive user interface, this requirement is not applicable.\n\nIf the user interface is only available via the OS console, e.g., a fat client application installed on a GFE desktop or laptop, and that GFE is configured to display the DoD banner, this requirement is not applicable.\n\nAccess the application and authenticate if necessary. Verify the banner is displayed and action must be taken to accept terms of use.\n\nIf the banner is not displayed or no action must be taken to accept terms of use, this is a finding.","fix":"Configure the application to retain the standard DoD-approved banner until the user accepts the usage conditions prior to granting access to the application."},"impact":0.3,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24105r493213_chk","severity":"low","gid":"V-222435","rid":"SV-222435r879548_rule","stig_id":"APSC-DV-000560","gtitle":"SRG-APP-000069","fix_id":"F-24094r493214_fix","documentable":null,"legacy":["V-69351","SV-83973"],"cci":["CCI-000050"],"nist":["AC-8 b"]}},{"id":"SV-222436","code":"control 'SV-222436' do\n  title 'The publicly accessible application must display the Standard Mandatory DoD Notice and Consent Banner before granting access to the application.'\n  desc %q(Display of a standardized and approved use notification before granting access to the publicly accessible application ensures privacy and security notification verbiage used is consistent with applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance.\n\nSystem use notifications are required only for access via logon interfaces with human users and are not required when such human interfaces do not exist.\n\nThe banner must be formatted in accordance with DTM-08-060. Use the following verbiage for desktops, laptops, and other devices accommodating banners of 1300 characters:\n\n\"You are accessing a U.S. Government (USG) Information System (IS) that is provided for USG-authorized use only.\n\nBy using this IS (which includes any device attached to this IS), you consent to the following conditions:\n\n-The USG routinely intercepts and monitors communications on this IS for purposes including, but not limited to, penetration testing, COMSEC monitoring, network operations and defense, personnel misconduct (PM), law enforcement (LE), and counterintelligence (CI) investigations.\n\n-At any time, the USG may inspect and seize data stored on this IS.\n\n-Communications using, or data stored on, this IS are not private, are subject to routine monitoring, interception, and search, and may be disclosed or used for any USG-authorized purpose.\n\n-This IS includes security measures (e.g., authentication and access controls) to protect USG interests--not for your personal benefit or privacy.\n\n-Notwithstanding the above, using this IS does not constitute consent to PM, LE or CI investigative searching or monitoring of the content of privileged communications, or work product, related to personal representation or services by attorneys, psychotherapists, or clergy, and their assistants. Such communications and work product are private and confidential. See User Agreement for details.\"\n\nUse the following verbiage for operating systems that have severe limitations on the number of characters that can be displayed in the banner:\n\n\"I've read & consent to terms in IS user agreem't.\")\n  desc 'check', 'This requirement only applies to publicly accessible applications. If the application is not publicly accessible, this requirement is not applicable.\n\nAccess the application and observe the screen to ensure the DoD-approved banner is displayed prior to obtaining full access to the application. Refer to the vulnerability discussion for the approved banner text.\n\nIf the standard DoD-approved banner is not displayed prior to obtaining access, this is a finding.'\n  desc 'fix', 'Configure the application to present the standard DoD-approved banner prior to granting access to the application.'\n  impact 0.3\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24106r493216_chk'\n  tag severity: 'low'\n  tag gid: 'V-222436'\n  tag rid: 'SV-222436r879549_rule'\n  tag stig_id: 'APSC-DV-000570'\n  tag gtitle: 'SRG-APP-000070'\n  tag fix_id: 'F-24095r493217_fix'\n  tag 'documentable'\n  tag legacy: ['V-69353', 'SV-83975']\n  tag cci: ['CCI-001384', 'CCI-001385', 'CCI-001386', 'CCI-001387', 'CCI-001388']\n  tag nist: ['AC-8 c 1', 'AC-8 c 2', 'AC-8 c 2', 'AC-8 c 2', 'AC-8 c 3']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222436.rb"},"title":"The publicly accessible application must display the Standard Mandatory DoD Notice and Consent Banner before granting access to the application.","desc":"Display of a standardized and approved use notification before granting access to the publicly accessible application ensures privacy and security notification verbiage used is consistent with applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance.\n\nSystem use notifications are required only for access via logon interfaces with human users and are not required when such human interfaces do not exist.\n\nThe banner must be formatted in accordance with DTM-08-060. Use the following verbiage for desktops, laptops, and other devices accommodating banners of 1300 characters:\n\n\"You are accessing a U.S. Government (USG) Information System (IS) that is provided for USG-authorized use only.\n\nBy using this IS (which includes any device attached to this IS), you consent to the following conditions:\n\n-The USG routinely intercepts and monitors communications on this IS for purposes including, but not limited to, penetration testing, COMSEC monitoring, network operations and defense, personnel misconduct (PM), law enforcement (LE), and counterintelligence (CI) investigations.\n\n-At any time, the USG may inspect and seize data stored on this IS.\n\n-Communications using, or data stored on, this IS are not private, are subject to routine monitoring, interception, and search, and may be disclosed or used for any USG-authorized purpose.\n\n-This IS includes security measures (e.g., authentication and access controls) to protect USG interests--not for your personal benefit or privacy.\n\n-Notwithstanding the above, using this IS does not constitute consent to PM, LE or CI investigative searching or monitoring of the content of privileged communications, or work product, related to personal representation or services by attorneys, psychotherapists, or clergy, and their assistants. Such communications and work product are private and confidential. See User Agreement for details.\"\n\nUse the following verbiage for operating systems that have severe limitations on the number of characters that can be displayed in the banner:\n\n\"I've read & consent to terms in IS user agreem't.\"","descriptions":{"default":"Display of a standardized and approved use notification before granting access to the publicly accessible application ensures privacy and security notification verbiage used is consistent with applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance.\n\nSystem use notifications are required only for access via logon interfaces with human users and are not required when such human interfaces do not exist.\n\nThe banner must be formatted in accordance with DTM-08-060. Use the following verbiage for desktops, laptops, and other devices accommodating banners of 1300 characters:\n\n\"You are accessing a U.S. Government (USG) Information System (IS) that is provided for USG-authorized use only.\n\nBy using this IS (which includes any device attached to this IS), you consent to the following conditions:\n\n-The USG routinely intercepts and monitors communications on this IS for purposes including, but not limited to, penetration testing, COMSEC monitoring, network operations and defense, personnel misconduct (PM), law enforcement (LE), and counterintelligence (CI) investigations.\n\n-At any time, the USG may inspect and seize data stored on this IS.\n\n-Communications using, or data stored on, this IS are not private, are subject to routine monitoring, interception, and search, and may be disclosed or used for any USG-authorized purpose.\n\n-This IS includes security measures (e.g., authentication and access controls) to protect USG interests--not for your personal benefit or privacy.\n\n-Notwithstanding the above, using this IS does not constitute consent to PM, LE or CI investigative searching or monitoring of the content of privileged communications, or work product, related to personal representation or services by attorneys, psychotherapists, or clergy, and their assistants. Such communications and work product are private and confidential. See User Agreement for details.\"\n\nUse the following verbiage for operating systems that have severe limitations on the number of characters that can be displayed in the banner:\n\n\"I've read & consent to terms in IS user agreem't.\"","check":"This requirement only applies to publicly accessible applications. If the application is not publicly accessible, this requirement is not applicable.\n\nAccess the application and observe the screen to ensure the DoD-approved banner is displayed prior to obtaining full access to the application. Refer to the vulnerability discussion for the approved banner text.\n\nIf the standard DoD-approved banner is not displayed prior to obtaining access, this is a finding.","fix":"Configure the application to present the standard DoD-approved banner prior to granting access to the application."},"impact":0.3,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24106r493216_chk","severity":"low","gid":"V-222436","rid":"SV-222436r879549_rule","stig_id":"APSC-DV-000570","gtitle":"SRG-APP-000070","fix_id":"F-24095r493217_fix","documentable":null,"legacy":["V-69353","SV-83975"],"cci":["CCI-001384","CCI-001385","CCI-001386","CCI-001387","CCI-001388"],"nist":["AC-8 c 1","AC-8 c 2","AC-8 c 2","AC-8 c 2","AC-8 c 3"]}},{"id":"SV-222437","code":"control 'SV-222437' do\n  title 'The application must display the time and date of the users last successful logon.'\n  desc 'Providing a last successful logon date and time stamp notification to the user when they authenticate and access the application allows the user to determine if their application account has been used without their knowledge. \n\nArmed with that information, the user can notify the application administrator and initiate a forensics investigation to identify root cause.  Without providing this information to the user, a potential compromise of user accounts could go unnoticed.'\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nIf the application does not provide a user interface, this requirement is not applicable.\n\nLogon to the application as a test user and verify successful authentication by creating test data, navigating the application functionality or otherwise utilizing the application.\n\nNote the date and time access was granted.\n\nLog out of the application.\n\nRe-authenticate to the application as the same user.\n\nValidate the last logon date and time is displayed in the user interface. \n\nIf the date and time the user account was last granted access to the application is not displayed in the user interface, this is a finding.'\n  desc 'fix', 'Design and configure the application to display the date and time when the user was last successfully granted access to the application.'\n  impact 0.3\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24107r493219_chk'\n  tag severity: 'low'\n  tag gid: 'V-222437'\n  tag rid: 'SV-222437r879551_rule'\n  tag stig_id: 'APSC-DV-000580'\n  tag gtitle: 'SRG-APP-000075'\n  tag fix_id: 'F-24096r493220_fix'\n  tag 'documentable'\n  tag legacy: ['V-69355', 'SV-83977']\n  tag cci: ['CCI-000052']\n  tag nist: ['AC-9']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222437.rb"},"title":"The application must display the time and date of the users last successful logon.","desc":"Providing a last successful logon date and time stamp notification to the user when they authenticate and access the application allows the user to determine if their application account has been used without their knowledge. \n\nArmed with that information, the user can notify the application administrator and initiate a forensics investigation to identify root cause.  Without providing this information to the user, a potential compromise of user accounts could go unnoticed.","descriptions":{"default":"Providing a last successful logon date and time stamp notification to the user when they authenticate and access the application allows the user to determine if their application account has been used without their knowledge. \n\nArmed with that information, the user can notify the application administrator and initiate a forensics investigation to identify root cause.  Without providing this information to the user, a potential compromise of user accounts could go unnoticed.","check":"Review the application documentation and interview the application administrator.\n\nIf the application does not provide a user interface, this requirement is not applicable.\n\nLogon to the application as a test user and verify successful authentication by creating test data, navigating the application functionality or otherwise utilizing the application.\n\nNote the date and time access was granted.\n\nLog out of the application.\n\nRe-authenticate to the application as the same user.\n\nValidate the last logon date and time is displayed in the user interface. \n\nIf the date and time the user account was last granted access to the application is not displayed in the user interface, this is a finding.","fix":"Design and configure the application to display the date and time when the user was last successfully granted access to the application."},"impact":0.3,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24107r493219_chk","severity":"low","gid":"V-222437","rid":"SV-222437r879551_rule","stig_id":"APSC-DV-000580","gtitle":"SRG-APP-000075","fix_id":"F-24096r493220_fix","documentable":null,"legacy":["V-69355","SV-83977"],"cci":["CCI-000052"],"nist":["AC-9"]}},{"id":"SV-222438","code":"control 'SV-222438' do\n  title 'The application must protect against an individual (or process acting on behalf of an individual) falsely denying having performed organization-defined actions to be covered by non-repudiation.'\n  desc 'Without non-repudiation, it is impossible to positively attribute an action to an individual (or process acting on behalf of an individual).\n\nNon-repudiation services can be used to determine if information originated from a particular individual, or if an individual took specific actions (e.g., sending an email, signing a contract, approving a procurement request) or received specific information. Non-repudiation protects individuals against later claims by an author of not having authored a particular document, a sender of not having transmitted a message, a receiver of not having received a message, or a signatory of not having signed a document. The application will be configured to provide non-repudiation services for an organization-defined set of commands that are used by the user (or processes action on behalf of the user).\n\nDoD PKI provides for non-repudiation through the use of digital signatures. Non-repudiation requirements will vary from one application to another and will be defined based on application functionality, data sensitivity, and mission requirements.'\n  desc 'check', 'Review the application documentation, the design requirements if available and interview the application administrator.\n\nIdentify application services or application commands that are formerly required and designed to provide non-repudiation services (e.g., digital signatures).  \n\nIf the application documentation specifically states that non-repudiation services for application users are not defined as part of the application design, this requirement is not applicable.  \n\nEmail is one example of an application specifically required to provide non-repudiation services for application users within the DoD. \n\nInterview the application administrators and have them describe which aspect of the application, if any, is required to provide digital signatures.\n\nAccess the application as a test user or observe the application administrator as they demonstrate the applications signature capabilities.\n\nIf the application is required to provide non-repudiation services and does not, or if the non-repudiation functionality fails on demonstration, this is a finding.'\n  desc 'fix', 'Configure the application to provide users with a non-repudiation function in the form of digital signatures when it is required by the organization or by the application design and architecture.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24108r493222_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222438'\n  tag rid: 'SV-222438r879554_rule'\n  tag stig_id: 'APSC-DV-000590'\n  tag gtitle: 'SRG-APP-000080'\n  tag fix_id: 'F-24097r493223_fix'\n  tag 'documentable'\n  tag legacy: ['V-69357', 'SV-83979']\n  tag cci: ['CCI-000166']\n  tag nist: ['AU-10']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222438.rb"},"title":"The application must protect against an individual (or process acting on behalf of an individual) falsely denying having performed organization-defined actions to be covered by non-repudiation.","desc":"Without non-repudiation, it is impossible to positively attribute an action to an individual (or process acting on behalf of an individual).\n\nNon-repudiation services can be used to determine if information originated from a particular individual, or if an individual took specific actions (e.g., sending an email, signing a contract, approving a procurement request) or received specific information. Non-repudiation protects individuals against later claims by an author of not having authored a particular document, a sender of not having transmitted a message, a receiver of not having received a message, or a signatory of not having signed a document. The application will be configured to provide non-repudiation services for an organization-defined set of commands that are used by the user (or processes action on behalf of the user).\n\nDoD PKI provides for non-repudiation through the use of digital signatures. Non-repudiation requirements will vary from one application to another and will be defined based on application functionality, data sensitivity, and mission requirements.","descriptions":{"default":"Without non-repudiation, it is impossible to positively attribute an action to an individual (or process acting on behalf of an individual).\n\nNon-repudiation services can be used to determine if information originated from a particular individual, or if an individual took specific actions (e.g., sending an email, signing a contract, approving a procurement request) or received specific information. Non-repudiation protects individuals against later claims by an author of not having authored a particular document, a sender of not having transmitted a message, a receiver of not having received a message, or a signatory of not having signed a document. The application will be configured to provide non-repudiation services for an organization-defined set of commands that are used by the user (or processes action on behalf of the user).\n\nDoD PKI provides for non-repudiation through the use of digital signatures. Non-repudiation requirements will vary from one application to another and will be defined based on application functionality, data sensitivity, and mission requirements.","check":"Review the application documentation, the design requirements if available and interview the application administrator.\n\nIdentify application services or application commands that are formerly required and designed to provide non-repudiation services (e.g., digital signatures).  \n\nIf the application documentation specifically states that non-repudiation services for application users are not defined as part of the application design, this requirement is not applicable.  \n\nEmail is one example of an application specifically required to provide non-repudiation services for application users within the DoD. \n\nInterview the application administrators and have them describe which aspect of the application, if any, is required to provide digital signatures.\n\nAccess the application as a test user or observe the application administrator as they demonstrate the applications signature capabilities.\n\nIf the application is required to provide non-repudiation services and does not, or if the non-repudiation functionality fails on demonstration, this is a finding.","fix":"Configure the application to provide users with a non-repudiation function in the form of digital signatures when it is required by the organization or by the application design and architecture."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24108r493222_chk","severity":"medium","gid":"V-222438","rid":"SV-222438r879554_rule","stig_id":"APSC-DV-000590","gtitle":"SRG-APP-000080","fix_id":"F-24097r493223_fix","documentable":null,"legacy":["V-69357","SV-83979"],"cci":["CCI-000166"],"nist":["AU-10"]}},{"id":"SV-222439","code":"control 'SV-222439' do\n  title 'For applications providing audit record aggregation, the application must compile audit records from organization-defined information system components into a system-wide audit trail that is time-correlated with an organization-defined level of tolerance for the relationship between time stamps of individual records in the audit trail.'\n  desc 'Without the ability to collate records based on the time when the events occurred, the ability to perform forensic analysis and investigations across multiple components is significantly degraded.\n\nAudit trails are time-correlated if the time stamps in the individual audit records can be reliably related to the time stamps in other audit records to achieve a time ordering of the records within organization-defined level of tolerance.\n\nThis requirement applies to applications which provide the capability to compile system-wide audit records for multiple systems or system components. However, all applications must provide the relevant log details that are used to aggregate the information.'\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nDetermine if the application has the ability to compile audit records from multiple systems or system components.\n\nIf the application does not provide log aggregation services, this requirement is not applicable.\n\nIdentify the systems that comprise the application.\n\nAccess each system comprising the application or a random sample of several application systems. Review the application logs and obtain date and time stamps for several random audit events. Record the information.\n\nAccess the server providing the log aggregation. Access the application logs that have been written to the server and compare the samples obtained from the application systems to the aggregated logs. Ensure the dates and time stamps correlate with one another.\n\nIf the log dates and times do not correlate when the logs are aggregated, this is a finding.'\n  desc 'fix', 'Configure the application to correlate time stamps when aggregating audit records.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-36237r602277_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222439'\n  tag rid: 'SV-222439r879557_rule'\n  tag stig_id: 'APSC-DV-000600'\n  tag gtitle: 'SRG-APP-000086'\n  tag fix_id: 'F-36204r602278_fix'\n  tag 'documentable'\n  tag legacy: ['SV-83981', 'V-69359']\n  tag cci: ['CCI-000174']\n  tag nist: ['AU-12 (1)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222439.rb"},"title":"For applications providing audit record aggregation, the application must compile audit records from organization-defined information system components into a system-wide audit trail that is time-correlated with an organization-defined level of tolerance for the relationship between time stamps of individual records in the audit trail.","desc":"Without the ability to collate records based on the time when the events occurred, the ability to perform forensic analysis and investigations across multiple components is significantly degraded.\n\nAudit trails are time-correlated if the time stamps in the individual audit records can be reliably related to the time stamps in other audit records to achieve a time ordering of the records within organization-defined level of tolerance.\n\nThis requirement applies to applications which provide the capability to compile system-wide audit records for multiple systems or system components. However, all applications must provide the relevant log details that are used to aggregate the information.","descriptions":{"default":"Without the ability to collate records based on the time when the events occurred, the ability to perform forensic analysis and investigations across multiple components is significantly degraded.\n\nAudit trails are time-correlated if the time stamps in the individual audit records can be reliably related to the time stamps in other audit records to achieve a time ordering of the records within organization-defined level of tolerance.\n\nThis requirement applies to applications which provide the capability to compile system-wide audit records for multiple systems or system components. However, all applications must provide the relevant log details that are used to aggregate the information.","check":"Review the application documentation and interview the application administrator.\n\nDetermine if the application has the ability to compile audit records from multiple systems or system components.\n\nIf the application does not provide log aggregation services, this requirement is not applicable.\n\nIdentify the systems that comprise the application.\n\nAccess each system comprising the application or a random sample of several application systems. Review the application logs and obtain date and time stamps for several random audit events. Record the information.\n\nAccess the server providing the log aggregation. Access the application logs that have been written to the server and compare the samples obtained from the application systems to the aggregated logs. Ensure the dates and time stamps correlate with one another.\n\nIf the log dates and times do not correlate when the logs are aggregated, this is a finding.","fix":"Configure the application to correlate time stamps when aggregating audit records."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-36237r602277_chk","severity":"medium","gid":"V-222439","rid":"SV-222439r879557_rule","stig_id":"APSC-DV-000600","gtitle":"SRG-APP-000086","fix_id":"F-36204r602278_fix","documentable":null,"legacy":["SV-83981","V-69359"],"cci":["CCI-000174"],"nist":["AU-12 (1)"]}},{"id":"SV-222441","code":"control 'SV-222441' do\n  title 'The application must provide audit record generation capability for the creation of session IDs.'\n  desc 'Applications create session IDs at the onset of a user session in order to manage user access to the application and differentiate between different user sessions. It is important to log the creation of these session ID creation events for forensic purposes.\n\nIt is equally important to not log the session ID itself. Logging the session ID puts active sessions at risk if log data is compromised. Specific session ID information should be removed, masked, sanitized, or encrypted.\n\nA hash value of the session ID that can be mapped to the session ID is an acceptable method for assuring active session protection when logging session ID information. Alternatively, logging protections that protect the logs and defend from unauthorized access are means to assure log confidentiality and protect session integrity.\n\nWeb based applications will often utilize an application server that creates, manages and logs user session IDs.  It is acceptable for the application to delegate this requirement to the application server.'\n  desc 'check', 'Access the management interface for the application or configuration file and evaluate the log/audit management settings.\n\nDetermine if the setting that enables session ID creation event auditing is activated.\n\nCreate a new user session by logging in to the application.\n\nReview the logs to ensure the session creation event was recorded.\n\nIf the application is not configured to log session ID creation events, or if no creation event was recorded, this is a finding.\n\nIf a web-based application delegates session ID creation to an application server, this is not a finding. \n\nIf the application generates session ID creation event logs by default, and that behavior cannot be disabled, this is not a finding.'\n  desc 'fix', 'Enable session ID creation event auditing.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24111r493231_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222441'\n  tag rid: 'SV-222441r879559_rule'\n  tag stig_id: 'APSC-DV-000620'\n  tag gtitle: 'SRG-APP-000089'\n  tag fix_id: 'F-24100r493232_fix'\n  tag 'documentable'\n  tag legacy: ['V-69363', 'SV-83985']\n  tag cci: ['CCI-000169']\n  tag nist: ['AU-12 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222441.rb"},"title":"The application must provide audit record generation capability for the creation of session IDs.","desc":"Applications create session IDs at the onset of a user session in order to manage user access to the application and differentiate between different user sessions. It is important to log the creation of these session ID creation events for forensic purposes.\n\nIt is equally important to not log the session ID itself. Logging the session ID puts active sessions at risk if log data is compromised. Specific session ID information should be removed, masked, sanitized, or encrypted.\n\nA hash value of the session ID that can be mapped to the session ID is an acceptable method for assuring active session protection when logging session ID information. Alternatively, logging protections that protect the logs and defend from unauthorized access are means to assure log confidentiality and protect session integrity.\n\nWeb based applications will often utilize an application server that creates, manages and logs user session IDs.  It is acceptable for the application to delegate this requirement to the application server.","descriptions":{"default":"Applications create session IDs at the onset of a user session in order to manage user access to the application and differentiate between different user sessions. It is important to log the creation of these session ID creation events for forensic purposes.\n\nIt is equally important to not log the session ID itself. Logging the session ID puts active sessions at risk if log data is compromised. Specific session ID information should be removed, masked, sanitized, or encrypted.\n\nA hash value of the session ID that can be mapped to the session ID is an acceptable method for assuring active session protection when logging session ID information. Alternatively, logging protections that protect the logs and defend from unauthorized access are means to assure log confidentiality and protect session integrity.\n\nWeb based applications will often utilize an application server that creates, manages and logs user session IDs.  It is acceptable for the application to delegate this requirement to the application server.","check":"Access the management interface for the application or configuration file and evaluate the log/audit management settings.\n\nDetermine if the setting that enables session ID creation event auditing is activated.\n\nCreate a new user session by logging in to the application.\n\nReview the logs to ensure the session creation event was recorded.\n\nIf the application is not configured to log session ID creation events, or if no creation event was recorded, this is a finding.\n\nIf a web-based application delegates session ID creation to an application server, this is not a finding. \n\nIf the application generates session ID creation event logs by default, and that behavior cannot be disabled, this is not a finding.","fix":"Enable session ID creation event auditing."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24111r493231_chk","severity":"medium","gid":"V-222441","rid":"SV-222441r879559_rule","stig_id":"APSC-DV-000620","gtitle":"SRG-APP-000089","fix_id":"F-24100r493232_fix","documentable":null,"legacy":["V-69363","SV-83985"],"cci":["CCI-000169"],"nist":["AU-12 a"]}},{"id":"SV-222442","code":"control 'SV-222442' do\n  title 'The application must provide audit record generation capability for the destruction of session IDs.'\n  desc 'Applications should destroy session IDs at the end of a user session in order to terminate user access to the application session and to reduce the possibility of an unauthorized attacker high jacking the session and impersonating the user. It is important to log when session IDs are destroyed for forensic purposes.\n\nWeb based applications will often utilize an application server that creates, manages and logs session IDs.  It is acceptable for the application to delegate this requirement to the application server.'\n  desc 'check', 'Access the management interface for the application or configuration file and evaluate the log/audit management settings.\n\nDetermine if the setting that enables session ID destruction event auditing is activated.\n\nTerminate a user session within the application and review the logs to ensure the session destruction event was recorded.\n\nIf the application is not configured to log session ID destruction events, or if the application has no means to enable auditing of session ID destruction events, this is a finding.\n\nIf a web-based application delegates session ID destruction to an application server, this is not a finding. \n\nIf the application generates audit logs by default when session IDs are destroyed, and that behavior cannot be disabled, this is not a finding.'\n  desc 'fix', 'Enable session ID destruction event auditing.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24112r493234_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222442'\n  tag rid: 'SV-222442r879559_rule'\n  tag stig_id: 'APSC-DV-000630'\n  tag gtitle: 'SRG-APP-000089'\n  tag fix_id: 'F-24101r493235_fix'\n  tag 'documentable'\n  tag legacy: ['V-69365', 'SV-83987']\n  tag cci: ['CCI-000169']\n  tag nist: ['AU-12 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222442.rb"},"title":"The application must provide audit record generation capability for the destruction of session IDs.","desc":"Applications should destroy session IDs at the end of a user session in order to terminate user access to the application session and to reduce the possibility of an unauthorized attacker high jacking the session and impersonating the user. It is important to log when session IDs are destroyed for forensic purposes.\n\nWeb based applications will often utilize an application server that creates, manages and logs session IDs.  It is acceptable for the application to delegate this requirement to the application server.","descriptions":{"default":"Applications should destroy session IDs at the end of a user session in order to terminate user access to the application session and to reduce the possibility of an unauthorized attacker high jacking the session and impersonating the user. It is important to log when session IDs are destroyed for forensic purposes.\n\nWeb based applications will often utilize an application server that creates, manages and logs session IDs.  It is acceptable for the application to delegate this requirement to the application server.","check":"Access the management interface for the application or configuration file and evaluate the log/audit management settings.\n\nDetermine if the setting that enables session ID destruction event auditing is activated.\n\nTerminate a user session within the application and review the logs to ensure the session destruction event was recorded.\n\nIf the application is not configured to log session ID destruction events, or if the application has no means to enable auditing of session ID destruction events, this is a finding.\n\nIf a web-based application delegates session ID destruction to an application server, this is not a finding. \n\nIf the application generates audit logs by default when session IDs are destroyed, and that behavior cannot be disabled, this is not a finding.","fix":"Enable session ID destruction event auditing."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24112r493234_chk","severity":"medium","gid":"V-222442","rid":"SV-222442r879559_rule","stig_id":"APSC-DV-000630","gtitle":"SRG-APP-000089","fix_id":"F-24101r493235_fix","documentable":null,"legacy":["V-69365","SV-83987"],"cci":["CCI-000169"],"nist":["AU-12 a"]}},{"id":"SV-222443","code":"control 'SV-222443' do\n  title 'The application must provide audit record generation capability for the renewal of session IDs.'\n  desc \"Application design sometimes requires the renewal of session IDs in order to continue approved user access to the application.\n\nSession renewal is done on a case by case basis under circumstances defined by the application architecture. The following are some examples of when session renewal must be done; whenever there is a change in user privilege such as transitioning from a user to an admin role or when a user changes from an anonymous user to an authenticated user or when a user's permissions have changed.\n\nFor these types of critical application functionalities, the previous session ID needs to be destroyed or otherwise invalidated and a new session ID must be created.\n\nIt is important to log when session IDs are renewed for forensic purposes.\n\nWeb based applications will often utilize an application server that creates, manages and logs session IDs.  It is acceptable for the application to delegate this requirement to the application server.\"\n  desc 'check', \"Interview the system admin and review the application documentation.\n\nIdentify any web pages or application functionality where a user's privileges or permissions will change. This is most likely to occur during the authentication stages.\n\nEvaluate the log/audit output by opening the log files and observing changes to the logs.\n\nCreate a new user session by accessing the application.\n\nReview the logs and save the relevant session creation event recorded.\n\nUtilize the application pages that provide privilege escalation.\n\nEscalate privileges by authenticating as a privileged user.\n\nReview the logs and determine if new session information is created and being used.\n\nIf a web-based application delegates session ID renewals to an application server, this is not a finding. \n\nIf the application is not configured to log session ID renewal events this is a finding.\"\n  desc 'fix', 'Design or reconfigure the application to log session renewal events on those application events that provide changes in the users privileges or permissions to the application.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24113r493237_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222443'\n  tag rid: 'SV-222443r879559_rule'\n  tag stig_id: 'APSC-DV-000640'\n  tag gtitle: 'SRG-APP-000089'\n  tag fix_id: 'F-24102r493238_fix'\n  tag 'documentable'\n  tag legacy: ['SV-83989', 'V-69367']\n  tag cci: ['CCI-000169']\n  tag nist: ['AU-12 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222443.rb"},"title":"The application must provide audit record generation capability for the renewal of session IDs.","desc":"Application design sometimes requires the renewal of session IDs in order to continue approved user access to the application.\n\nSession renewal is done on a case by case basis under circumstances defined by the application architecture. The following are some examples of when session renewal must be done; whenever there is a change in user privilege such as transitioning from a user to an admin role or when a user changes from an anonymous user to an authenticated user or when a user's permissions have changed.\n\nFor these types of critical application functionalities, the previous session ID needs to be destroyed or otherwise invalidated and a new session ID must be created.\n\nIt is important to log when session IDs are renewed for forensic purposes.\n\nWeb based applications will often utilize an application server that creates, manages and logs session IDs.  It is acceptable for the application to delegate this requirement to the application server.","descriptions":{"default":"Application design sometimes requires the renewal of session IDs in order to continue approved user access to the application.\n\nSession renewal is done on a case by case basis under circumstances defined by the application architecture. The following are some examples of when session renewal must be done; whenever there is a change in user privilege such as transitioning from a user to an admin role or when a user changes from an anonymous user to an authenticated user or when a user's permissions have changed.\n\nFor these types of critical application functionalities, the previous session ID needs to be destroyed or otherwise invalidated and a new session ID must be created.\n\nIt is important to log when session IDs are renewed for forensic purposes.\n\nWeb based applications will often utilize an application server that creates, manages and logs session IDs.  It is acceptable for the application to delegate this requirement to the application server.","check":"Interview the system admin and review the application documentation.\n\nIdentify any web pages or application functionality where a user's privileges or permissions will change. This is most likely to occur during the authentication stages.\n\nEvaluate the log/audit output by opening the log files and observing changes to the logs.\n\nCreate a new user session by accessing the application.\n\nReview the logs and save the relevant session creation event recorded.\n\nUtilize the application pages that provide privilege escalation.\n\nEscalate privileges by authenticating as a privileged user.\n\nReview the logs and determine if new session information is created and being used.\n\nIf a web-based application delegates session ID renewals to an application server, this is not a finding. \n\nIf the application is not configured to log session ID renewal events this is a finding.","fix":"Design or reconfigure the application to log session renewal events on those application events that provide changes in the users privileges or permissions to the application."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24113r493237_chk","severity":"medium","gid":"V-222443","rid":"SV-222443r879559_rule","stig_id":"APSC-DV-000640","gtitle":"SRG-APP-000089","fix_id":"F-24102r493238_fix","documentable":null,"legacy":["SV-83989","V-69367"],"cci":["CCI-000169"],"nist":["AU-12 a"]}},{"id":"SV-222444","code":"control 'SV-222444' do\n  title 'The application must not write sensitive data into the application logs.'\n  desc 'It is important to identify and exclude certain types of data that is written into the logs. If the logs are compromised and sensitive data is included in the logs, this could assist an attacker in furthering their attack or it could completely compromise the system.\n\nExamples of such data include but are not limited to; Passwords, Session IDs, Application source code, encryption keys, and sensitive data such as personal health information (PHI), Personally Identifiable Information (PII), or government identifiers (e.g., SSN).'\n  desc 'check', 'Review the application logs and identify application logging format. Using the format of the log and the requisite search data as a guide to create your search, create search strings that could successfully identify the existence of passwords, session IDs, or other sensitive information such as SSN.\n\nUtilizing the UNIX grep-based search utility include the following examples which are meant to illustrate the purpose of the requirement.\n\nPassword values are usually associated with usernames so searching for \"username\" in the provided log file will often assist in determining if password values are included.\n\ngrep -i \"username\" <  logfile.txt\n\nSearch for social security numbers in the provided log file.\n\ngrep -i \"[0-9]{3}[-]?[0-9]{2}[-]?[0-9]{4}\" <  logfile.txt\n\nUse regular expressions to aid in searching log files. All search syntax cannot be provided within the STIG, the reviewer must utilize their knowledge to create new search criteria based upon the log format used and the potentially sensitive data processed by the application.\n\nIf the application logs sensitive data such as session IDs, application source code, encryption keys, or passwords, this is a finding.'\n  desc 'fix', 'Design or reconfigure the application to not write sensitive data to the logs.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24114r493240_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222444'\n  tag rid: 'SV-222444r879559_rule'\n  tag stig_id: 'APSC-DV-000650'\n  tag gtitle: 'SRG-APP-000089'\n  tag fix_id: 'F-24103r493241_fix'\n  tag 'documentable'\n  tag legacy: ['SV-83991', 'V-69369']\n  tag cci: ['CCI-000169']\n  tag nist: ['AU-12 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222444.rb"},"title":"The application must not write sensitive data into the application logs.","desc":"It is important to identify and exclude certain types of data that is written into the logs. If the logs are compromised and sensitive data is included in the logs, this could assist an attacker in furthering their attack or it could completely compromise the system.\n\nExamples of such data include but are not limited to; Passwords, Session IDs, Application source code, encryption keys, and sensitive data such as personal health information (PHI), Personally Identifiable Information (PII), or government identifiers (e.g., SSN).","descriptions":{"default":"It is important to identify and exclude certain types of data that is written into the logs. If the logs are compromised and sensitive data is included in the logs, this could assist an attacker in furthering their attack or it could completely compromise the system.\n\nExamples of such data include but are not limited to; Passwords, Session IDs, Application source code, encryption keys, and sensitive data such as personal health information (PHI), Personally Identifiable Information (PII), or government identifiers (e.g., SSN).","check":"Review the application logs and identify application logging format. Using the format of the log and the requisite search data as a guide to create your search, create search strings that could successfully identify the existence of passwords, session IDs, or other sensitive information such as SSN.\n\nUtilizing the UNIX grep-based search utility include the following examples which are meant to illustrate the purpose of the requirement.\n\nPassword values are usually associated with usernames so searching for \"username\" in the provided log file will often assist in determining if password values are included.\n\ngrep -i \"username\" <  logfile.txt\n\nSearch for social security numbers in the provided log file.\n\ngrep -i \"[0-9]{3}[-]?[0-9]{2}[-]?[0-9]{4}\" <  logfile.txt\n\nUse regular expressions to aid in searching log files. All search syntax cannot be provided within the STIG, the reviewer must utilize their knowledge to create new search criteria based upon the log format used and the potentially sensitive data processed by the application.\n\nIf the application logs sensitive data such as session IDs, application source code, encryption keys, or passwords, this is a finding.","fix":"Design or reconfigure the application to not write sensitive data to the logs."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24114r493240_chk","severity":"medium","gid":"V-222444","rid":"SV-222444r879559_rule","stig_id":"APSC-DV-000650","gtitle":"SRG-APP-000089","fix_id":"F-24103r493241_fix","documentable":null,"legacy":["SV-83991","V-69369"],"cci":["CCI-000169"],"nist":["AU-12 a"]}},{"id":"SV-222445","code":"control 'SV-222445' do\n  title 'The application must provide audit record generation capability for session timeouts.'\n  desc \"When a user's session times out, it is important to be able to identify these events in the application logs.\n\nWithout the capability to generate audit records, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the application (e.g., process, module). Certain specific application functionalities may be audited as well. The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.\n\nDoD has defined the list of events for which the application will provide an audit record generation capability as the following:\n\n(i) Successful and unsuccessful attempts to access, modify, or delete privileges, security objects, security levels, or categories of information (e.g., classification levels);\n\n(ii) Access actions, such as successful and unsuccessful logon attempts, privileged activities or other system level access, starting and ending time for user access to the system, concurrent logons from different workstations, successful and unsuccessful accesses to objects, all program initiations, and all direct access to the information system; and\n\n(iii) All account creation, modification, disabling, and termination actions.\n\nWeb-based applications will often utilize an application server that creates, manages, and logs session timeout information. It is acceptable for the application to delegate this requirement to the application server.\"\n  desc 'check', 'Review the application documentation and interview the application administrator to identify log locations for application session activity.\n\nOpen the log file that tracks user session activity.\n\nAccess the application as a regular user and identify the user session within the log files.\n\nIdentify the session timeout threshold defined by the application.\n\nPerform no action within the application in order to allow the session to timeout.\n\nOnce the session timeout threshold has been exceeded, verify the session has been terminated due to the timeout event and review the logs again to ensure the session timeout event was recorded in the logs.\n\nIf a web-based application delegates session timeout auditing to an application server, this is not a finding. \n\nIf the session timeout event is not recorded in the logs, this is a finding.'\n  desc 'fix', 'Configure the application to record session timeout events in the logs.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24115r493243_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222445'\n  tag rid: 'SV-222445r879559_rule'\n  tag stig_id: 'APSC-DV-000660'\n  tag gtitle: 'SRG-APP-000089'\n  tag fix_id: 'F-24104r493244_fix'\n  tag 'documentable'\n  tag legacy: ['SV-83993', 'V-69371']\n  tag cci: ['CCI-000169']\n  tag nist: ['AU-12 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222445.rb"},"title":"The application must provide audit record generation capability for session timeouts.","desc":"When a user's session times out, it is important to be able to identify these events in the application logs.\n\nWithout the capability to generate audit records, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the application (e.g., process, module). Certain specific application functionalities may be audited as well. The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.\n\nDoD has defined the list of events for which the application will provide an audit record generation capability as the following:\n\n(i) Successful and unsuccessful attempts to access, modify, or delete privileges, security objects, security levels, or categories of information (e.g., classification levels);\n\n(ii) Access actions, such as successful and unsuccessful logon attempts, privileged activities or other system level access, starting and ending time for user access to the system, concurrent logons from different workstations, successful and unsuccessful accesses to objects, all program initiations, and all direct access to the information system; and\n\n(iii) All account creation, modification, disabling, and termination actions.\n\nWeb-based applications will often utilize an application server that creates, manages, and logs session timeout information. It is acceptable for the application to delegate this requirement to the application server.","descriptions":{"default":"When a user's session times out, it is important to be able to identify these events in the application logs.\n\nWithout the capability to generate audit records, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the application (e.g., process, module). Certain specific application functionalities may be audited as well. The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.\n\nDoD has defined the list of events for which the application will provide an audit record generation capability as the following:\n\n(i) Successful and unsuccessful attempts to access, modify, or delete privileges, security objects, security levels, or categories of information (e.g., classification levels);\n\n(ii) Access actions, such as successful and unsuccessful logon attempts, privileged activities or other system level access, starting and ending time for user access to the system, concurrent logons from different workstations, successful and unsuccessful accesses to objects, all program initiations, and all direct access to the information system; and\n\n(iii) All account creation, modification, disabling, and termination actions.\n\nWeb-based applications will often utilize an application server that creates, manages, and logs session timeout information. It is acceptable for the application to delegate this requirement to the application server.","check":"Review the application documentation and interview the application administrator to identify log locations for application session activity.\n\nOpen the log file that tracks user session activity.\n\nAccess the application as a regular user and identify the user session within the log files.\n\nIdentify the session timeout threshold defined by the application.\n\nPerform no action within the application in order to allow the session to timeout.\n\nOnce the session timeout threshold has been exceeded, verify the session has been terminated due to the timeout event and review the logs again to ensure the session timeout event was recorded in the logs.\n\nIf a web-based application delegates session timeout auditing to an application server, this is not a finding. \n\nIf the session timeout event is not recorded in the logs, this is a finding.","fix":"Configure the application to record session timeout events in the logs."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24115r493243_chk","severity":"medium","gid":"V-222445","rid":"SV-222445r879559_rule","stig_id":"APSC-DV-000660","gtitle":"SRG-APP-000089","fix_id":"F-24104r493244_fix","documentable":null,"legacy":["SV-83993","V-69371"],"cci":["CCI-000169"],"nist":["AU-12 a"]}},{"id":"SV-222446","code":"control 'SV-222446' do\n  title 'The application must record a time stamp indicating when the event occurred.'\n  desc 'It is important to include the time stamps for when an event occurred. Failure to include time stamps in the event logs is detrimental to forensic analysis.'\n  desc 'check', 'Review the application logs.\n\nIf the time the event occurred is not included as part of the event, this is a finding.'\n  desc 'fix', 'Configure the application to record the time the event occurred when recording the event.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24116r493246_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222446'\n  tag rid: 'SV-222446r879559_rule'\n  tag stig_id: 'APSC-DV-000670'\n  tag gtitle: 'SRG-APP-000089'\n  tag fix_id: 'F-24105r493247_fix'\n  tag 'documentable'\n  tag legacy: ['V-69373', 'SV-83995']\n  tag cci: ['CCI-000169']\n  tag nist: ['AU-12 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222446.rb"},"title":"The application must record a time stamp indicating when the event occurred.","desc":"It is important to include the time stamps for when an event occurred. Failure to include time stamps in the event logs is detrimental to forensic analysis.","descriptions":{"default":"It is important to include the time stamps for when an event occurred. Failure to include time stamps in the event logs is detrimental to forensic analysis.","check":"Review the application logs.\n\nIf the time the event occurred is not included as part of the event, this is a finding.","fix":"Configure the application to record the time the event occurred when recording the event."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24116r493246_chk","severity":"medium","gid":"V-222446","rid":"SV-222446r879559_rule","stig_id":"APSC-DV-000670","gtitle":"SRG-APP-000089","fix_id":"F-24105r493247_fix","documentable":null,"legacy":["V-69373","SV-83995"],"cci":["CCI-000169"],"nist":["AU-12 a"]}},{"id":"SV-222447","code":"control 'SV-222447' do\n  title 'The application must provide audit record generation capability for HTTP headers including User-Agent, Referer, GET, and POST.'\n  desc 'HTTP header information is a critical component of data that is used when evaluating forensic activity.\n\nWithout the capability to generate audit records, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the application (e.g., process, module). Certain specific application functionalities may be audited as well. The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.\n\nDoD has defined the list of events for which the application will provide an audit record generation capability as the following:\n\n(i) Successful and unsuccessful attempts to access, modify, or delete privileges, security objects, security levels, or categories of information (e.g., classification levels);\n\n(ii) Access actions, such as successful and unsuccessful logon attempts, privileged activities or other system level access, starting and ending time for user access to the system, concurrent logons from different workstations, successful and unsuccessful accesses to objects, all program initiations, and all direct access to the information system; and\n\n(iii) All account creation, modification, disabling, and termination actions.'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify log locations for application session activity.\n\nOpen the log file that tracks user session activity.\n\nAccess the application as a regular user and identify the user session within the log files.\n\nPerform several actions within the application in order to generate HTTP header traffic.\n\nReview the logs to ensure the HTTP header information is recorded in the logs. Header information logged will vary based upon the application and environment. Examples of headers include but are not limited to:\n\nUser-Agent:\nReferer:\nX-Forwarded-For:\nDate:\nExpires:\n\nIf HTTP headers are not logged, this is a finding.'\n  desc 'fix', 'Configure the web application and/or the web server to log HTTP headers.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24117r493249_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222447'\n  tag rid: 'SV-222447r879559_rule'\n  tag stig_id: 'APSC-DV-000680'\n  tag gtitle: 'SRG-APP-000089'\n  tag fix_id: 'F-24106r493250_fix'\n  tag 'documentable'\n  tag legacy: ['V-69375', 'SV-83997']\n  tag cci: ['CCI-000169']\n  tag nist: ['AU-12 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222447.rb"},"title":"The application must provide audit record generation capability for HTTP headers including User-Agent, Referer, GET, and POST.","desc":"HTTP header information is a critical component of data that is used when evaluating forensic activity.\n\nWithout the capability to generate audit records, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the application (e.g., process, module). Certain specific application functionalities may be audited as well. The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.\n\nDoD has defined the list of events for which the application will provide an audit record generation capability as the following:\n\n(i) Successful and unsuccessful attempts to access, modify, or delete privileges, security objects, security levels, or categories of information (e.g., classification levels);\n\n(ii) Access actions, such as successful and unsuccessful logon attempts, privileged activities or other system level access, starting and ending time for user access to the system, concurrent logons from different workstations, successful and unsuccessful accesses to objects, all program initiations, and all direct access to the information system; and\n\n(iii) All account creation, modification, disabling, and termination actions.","descriptions":{"default":"HTTP header information is a critical component of data that is used when evaluating forensic activity.\n\nWithout the capability to generate audit records, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the application (e.g., process, module). Certain specific application functionalities may be audited as well. The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.\n\nDoD has defined the list of events for which the application will provide an audit record generation capability as the following:\n\n(i) Successful and unsuccessful attempts to access, modify, or delete privileges, security objects, security levels, or categories of information (e.g., classification levels);\n\n(ii) Access actions, such as successful and unsuccessful logon attempts, privileged activities or other system level access, starting and ending time for user access to the system, concurrent logons from different workstations, successful and unsuccessful accesses to objects, all program initiations, and all direct access to the information system; and\n\n(iii) All account creation, modification, disabling, and termination actions.","check":"Review the application documentation and interview the application administrator to identify log locations for application session activity.\n\nOpen the log file that tracks user session activity.\n\nAccess the application as a regular user and identify the user session within the log files.\n\nPerform several actions within the application in order to generate HTTP header traffic.\n\nReview the logs to ensure the HTTP header information is recorded in the logs. Header information logged will vary based upon the application and environment. Examples of headers include but are not limited to:\n\nUser-Agent:\nReferer:\nX-Forwarded-For:\nDate:\nExpires:\n\nIf HTTP headers are not logged, this is a finding.","fix":"Configure the web application and/or the web server to log HTTP headers."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24117r493249_chk","severity":"medium","gid":"V-222447","rid":"SV-222447r879559_rule","stig_id":"APSC-DV-000680","gtitle":"SRG-APP-000089","fix_id":"F-24106r493250_fix","documentable":null,"legacy":["V-69375","SV-83997"],"cci":["CCI-000169"],"nist":["AU-12 a"]}},{"id":"SV-222448","code":"control 'SV-222448' do\n  title 'The application must provide audit record generation capability for connecting system IP addresses.'\n  desc 'Without the capability to generate audit records, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the application (e.g., process, module). Certain specific application functionalities may be audited as well. The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.\n\nThe IP addresses of remote systems that connect to the application are an important aspect of identifying the sources of application activity. Recording these IP addresses in the application logs provides forensic evidence and aids in investigating and identifying sources of malicious behavior related to security events.'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify where audit logs are stored.\n\nReview audit logs and determine if the IP address information of systems that connect to the application is kept in the logs.\n\nIf connecting IP addresses are not seen in the logs, connect to the application remotely and review the logs to determine if the connection was logged.\n\nIf the IP addresses of the systems that connect to the application are not recorded in the logs, this is a finding.'\n  desc 'fix', 'Configure the application or application server to log all connecting IP address information'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24118r493252_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222448'\n  tag rid: 'SV-222448r879559_rule'\n  tag stig_id: 'APSC-DV-000690'\n  tag gtitle: 'SRG-APP-000089'\n  tag fix_id: 'F-24107r493253_fix'\n  tag 'documentable'\n  tag legacy: ['SV-83999', 'V-69377']\n  tag cci: ['CCI-000169']\n  tag nist: ['AU-12 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222448.rb"},"title":"The application must provide audit record generation capability for connecting system IP addresses.","desc":"Without the capability to generate audit records, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the application (e.g., process, module). Certain specific application functionalities may be audited as well. The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.\n\nThe IP addresses of remote systems that connect to the application are an important aspect of identifying the sources of application activity. Recording these IP addresses in the application logs provides forensic evidence and aids in investigating and identifying sources of malicious behavior related to security events.","descriptions":{"default":"Without the capability to generate audit records, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the application (e.g., process, module). Certain specific application functionalities may be audited as well. The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.\n\nThe IP addresses of remote systems that connect to the application are an important aspect of identifying the sources of application activity. Recording these IP addresses in the application logs provides forensic evidence and aids in investigating and identifying sources of malicious behavior related to security events.","check":"Review the application documentation and interview the application administrator to identify where audit logs are stored.\n\nReview audit logs and determine if the IP address information of systems that connect to the application is kept in the logs.\n\nIf connecting IP addresses are not seen in the logs, connect to the application remotely and review the logs to determine if the connection was logged.\n\nIf the IP addresses of the systems that connect to the application are not recorded in the logs, this is a finding.","fix":"Configure the application or application server to log all connecting IP address information"},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24118r493252_chk","severity":"medium","gid":"V-222448","rid":"SV-222448r879559_rule","stig_id":"APSC-DV-000690","gtitle":"SRG-APP-000089","fix_id":"F-24107r493253_fix","documentable":null,"legacy":["SV-83999","V-69377"],"cci":["CCI-000169"],"nist":["AU-12 a"]}},{"id":"SV-222449","code":"control 'SV-222449' do\n  title 'The application must record the username or user ID of the user associated with the event.'\n  desc 'When users conduct activity within an application, that user’s identity must be recorded in the audit log. Failing to record the identity of the user responsible for the activity within the application is detrimental to forensic analysis.'\n  desc 'check', 'Review and monitor the application logs.\n\nConnect to the application and perform application activity that is allowed by the user such as accessing data or running reports.\n\nObserve if the log includes an entry to indicate the user ID of the user that conducted the activity.\n\nIf the user ID is not recorded along with the event in the event log, this is a finding.'\n  desc 'fix', 'Configure the application to record the user ID of the user responsible for the log event entry.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24119r493255_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222449'\n  tag rid: 'SV-222449r879559_rule'\n  tag stig_id: 'APSC-DV-000700'\n  tag gtitle: 'SRG-APP-000089'\n  tag fix_id: 'F-24108r493256_fix'\n  tag 'documentable'\n  tag legacy: ['V-69379', 'SV-84001']\n  tag cci: ['CCI-000169']\n  tag nist: ['AU-12 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222449.rb"},"title":"The application must record the username or user ID of the user associated with the event.","desc":"When users conduct activity within an application, that user’s identity must be recorded in the audit log. Failing to record the identity of the user responsible for the activity within the application is detrimental to forensic analysis.","descriptions":{"default":"When users conduct activity within an application, that user’s identity must be recorded in the audit log. Failing to record the identity of the user responsible for the activity within the application is detrimental to forensic analysis.","check":"Review and monitor the application logs.\n\nConnect to the application and perform application activity that is allowed by the user such as accessing data or running reports.\n\nObserve if the log includes an entry to indicate the user ID of the user that conducted the activity.\n\nIf the user ID is not recorded along with the event in the event log, this is a finding.","fix":"Configure the application to record the user ID of the user responsible for the log event entry."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24119r493255_chk","severity":"medium","gid":"V-222449","rid":"SV-222449r879559_rule","stig_id":"APSC-DV-000700","gtitle":"SRG-APP-000089","fix_id":"F-24108r493256_fix","documentable":null,"legacy":["V-69379","SV-84001"],"cci":["CCI-000169"],"nist":["AU-12 a"]}},{"id":"SV-222450","code":"control 'SV-222450' do\n  title 'The application must generate audit records when successful/unsuccessful attempts to grant privileges occur.'\n  desc 'Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).\n\nWhen a user is granted access or rights to application features and function not afforded to an ordinary user, they have been granted access to privilege and that action must be logged.'\n  desc 'check', \"Review the application documentation and interview the application admin to identify application management interfaces and features.\n\nAccess the application management utility and create a test user account or use the account of a regular unprivileged user who is cooperating with the testing.\n\nAccess and open the auditing logs.\n\nUsing an account with the appropriate privileges, grant the user a privilege they previously did not have.\n\nAttempt to grant privileges in a manner that will cause a failure event such as granting privileges to a non-existent user or attempting to grant privileges with an account that doesn't have the rights to do so.\n\nReview the application logs and ensure both events were captured in the logs. The event data should include the user’s identity and the privilege that was granted and the privilege that failed to be granted.\n\nIf the application does not log when successful and unsuccessful attempts to grant privilege occur, this is a finding.\"\n  desc 'fix', 'Configure the application to audit successful and unsuccessful attempts to grant privileges.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24120r493258_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222450'\n  tag rid: 'SV-222450r879561_rule'\n  tag stig_id: 'APSC-DV-000710'\n  tag gtitle: 'SRG-APP-000091'\n  tag fix_id: 'F-24109r493259_fix'\n  tag 'documentable'\n  tag legacy: ['V-69381', 'SV-84003']\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222450.rb"},"title":"The application must generate audit records when successful/unsuccessful attempts to grant privileges occur.","desc":"Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).\n\nWhen a user is granted access or rights to application features and function not afforded to an ordinary user, they have been granted access to privilege and that action must be logged.","descriptions":{"default":"Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).\n\nWhen a user is granted access or rights to application features and function not afforded to an ordinary user, they have been granted access to privilege and that action must be logged.","check":"Review the application documentation and interview the application admin to identify application management interfaces and features.\n\nAccess the application management utility and create a test user account or use the account of a regular unprivileged user who is cooperating with the testing.\n\nAccess and open the auditing logs.\n\nUsing an account with the appropriate privileges, grant the user a privilege they previously did not have.\n\nAttempt to grant privileges in a manner that will cause a failure event such as granting privileges to a non-existent user or attempting to grant privileges with an account that doesn't have the rights to do so.\n\nReview the application logs and ensure both events were captured in the logs. The event data should include the user’s identity and the privilege that was granted and the privilege that failed to be granted.\n\nIf the application does not log when successful and unsuccessful attempts to grant privilege occur, this is a finding.","fix":"Configure the application to audit successful and unsuccessful attempts to grant privileges."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24120r493258_chk","severity":"medium","gid":"V-222450","rid":"SV-222450r879561_rule","stig_id":"APSC-DV-000710","gtitle":"SRG-APP-000091","fix_id":"F-24109r493259_fix","documentable":null,"legacy":["V-69381","SV-84003"],"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-222451","code":"control 'SV-222451' do\n  title 'The application must generate audit records when successful/unsuccessful attempts to access security objects occur.'\n  desc 'Security objects represent application objects that provide or require security protections or have a security role within the application. Examples include but are not limited to, files, application modules, folders, and database records. Essentially, if permissions are assigned to protect it, it can be considered a security object. Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).'\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nIdentify where the application logs are stored.\n\nIdentify application functionality that provides privilege or permission settings to security objects within the application.\nThis can be an application function that assigns privileges to an application object or data element.\n\nAuthenticate to the application as a regular user. Using application functionality, attempt to access the security object within the application.\n\nPerform two attempts, one successfully and one unsuccessfully.\n\nReview the log data and ensure both the successful and unsuccessful access attempts are logged.\n\nIf the application does not generate an audit record when successful and unsuccessful attempts to access security objects occur, this is a finding.'\n  desc 'fix', 'Configure the application to create an audit record for both successful and unsuccessful attempts to access security objects.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24121r493261_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222451'\n  tag rid: 'SV-222451r879863_rule'\n  tag stig_id: 'APSC-DV-000720'\n  tag gtitle: 'SRG-APP-000492'\n  tag fix_id: 'F-24110r493262_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84005', 'V-69383']\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222451.rb"},"title":"The application must generate audit records when successful/unsuccessful attempts to access security objects occur.","desc":"Security objects represent application objects that provide or require security protections or have a security role within the application. Examples include but are not limited to, files, application modules, folders, and database records. Essentially, if permissions are assigned to protect it, it can be considered a security object. Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).","descriptions":{"default":"Security objects represent application objects that provide or require security protections or have a security role within the application. Examples include but are not limited to, files, application modules, folders, and database records. Essentially, if permissions are assigned to protect it, it can be considered a security object. Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).","check":"Review the application documentation and interview the application administrator.\n\nIdentify where the application logs are stored.\n\nIdentify application functionality that provides privilege or permission settings to security objects within the application.\nThis can be an application function that assigns privileges to an application object or data element.\n\nAuthenticate to the application as a regular user. Using application functionality, attempt to access the security object within the application.\n\nPerform two attempts, one successfully and one unsuccessfully.\n\nReview the log data and ensure both the successful and unsuccessful access attempts are logged.\n\nIf the application does not generate an audit record when successful and unsuccessful attempts to access security objects occur, this is a finding.","fix":"Configure the application to create an audit record for both successful and unsuccessful attempts to access security objects."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24121r493261_chk","severity":"medium","gid":"V-222451","rid":"SV-222451r879863_rule","stig_id":"APSC-DV-000720","gtitle":"SRG-APP-000492","fix_id":"F-24110r493262_fix","documentable":null,"legacy":["SV-84005","V-69383"],"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-222452","code":"control 'SV-222452' do\n  title 'The application must generate audit records when successful/unsuccessful attempts to access security levels occur.'\n  desc 'A security level denotes a permissions or authorization capability within the application. This is most often associated with a user role. Attempts to access a security level can occur when a user attempts an action such as escalating their privilege from within the application itself. Attempts to access a security level can be construed as an attempt to change your user role from within the application. \n\nWithout generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one. Audit records can be generated from various components within the information system (e.g., module or policy filter).'\n  desc 'check', 'Review the application documentation and interview the application administrator. Identify where the application logs are stored.\n\nIdentify application functionality that provides privilege escalation or access to additional security levels within the application.\n\nThis can be performing a function that escalates the privileges of the user, or accessing a protected area of the application that requires additional authentication in order to access.\n\nAuthenticate to the application as a regular user. Using application functionality, attempt to access a different security level or domain within the application.\n\nPerform two attempts, one successfully and one unsuccessfully.\n\nReview the log data and ensure both the successful and unsuccessful access attempts are logged.\n\nIf the application does not generate an audit record when successful and unsuccessful attempts to access security levels occur, this is a finding.'\n  desc 'fix', 'Configure the application to create an audit record for both successful and unsuccessful attempts to access security levels.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24122r493264_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222452'\n  tag rid: 'SV-222452r879864_rule'\n  tag stig_id: 'APSC-DV-000730'\n  tag gtitle: 'SRG-APP-000493'\n  tag fix_id: 'F-24111r493265_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84007', 'V-69385']\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222452.rb"},"title":"The application must generate audit records when successful/unsuccessful attempts to access security levels occur.","desc":"A security level denotes a permissions or authorization capability within the application. This is most often associated with a user role. Attempts to access a security level can occur when a user attempts an action such as escalating their privilege from within the application itself. Attempts to access a security level can be construed as an attempt to change your user role from within the application. \n\nWithout generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one. Audit records can be generated from various components within the information system (e.g., module or policy filter).","descriptions":{"default":"A security level denotes a permissions or authorization capability within the application. This is most often associated with a user role. Attempts to access a security level can occur when a user attempts an action such as escalating their privilege from within the application itself. Attempts to access a security level can be construed as an attempt to change your user role from within the application. \n\nWithout generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one. Audit records can be generated from various components within the information system (e.g., module or policy filter).","check":"Review the application documentation and interview the application administrator. Identify where the application logs are stored.\n\nIdentify application functionality that provides privilege escalation or access to additional security levels within the application.\n\nThis can be performing a function that escalates the privileges of the user, or accessing a protected area of the application that requires additional authentication in order to access.\n\nAuthenticate to the application as a regular user. Using application functionality, attempt to access a different security level or domain within the application.\n\nPerform two attempts, one successfully and one unsuccessfully.\n\nReview the log data and ensure both the successful and unsuccessful access attempts are logged.\n\nIf the application does not generate an audit record when successful and unsuccessful attempts to access security levels occur, this is a finding.","fix":"Configure the application to create an audit record for both successful and unsuccessful attempts to access security levels."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24122r493264_chk","severity":"medium","gid":"V-222452","rid":"SV-222452r879864_rule","stig_id":"APSC-DV-000730","gtitle":"SRG-APP-000493","fix_id":"F-24111r493265_fix","documentable":null,"legacy":["SV-84007","V-69385"],"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-222453","code":"control 'SV-222453' do\n  title 'The application must generate audit records when successful/unsuccessful attempts to access categories of information (e.g., classification levels) occur.'\n  desc 'Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nCategories of information is information that is identified as being sensitive or requiring additional protection from regular user access. The data is accessed on a need to know basis and has been assigned a category or a classification in order to assign protections and track access.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).'\n  desc 'check', 'Review the application documentation and interview the application administrator. Identify where the application logs are stored.\n\nIdentify any data protections that are required.\n\nIdentify any categories of data or classification of data.\n\nIf the application requirements do not call for compartmentalized data and data protection, this requirement is not applicable.\n\nAuthenticate to the application as a regular user. Using application functionality, attempt to access data that has been assigned to a protected category.\n\nPerform two access attempts, one successful and one unsuccessful.\n\nTesting this will require obtaining access to test data that has been assigned to a protected category, or having an authorized user access the data for you.\n\nReview the log data and ensure both the successful and unsuccessful access attempts are logged.\n\nIf the application does not generate an audit record when successful and unsuccessful attempts to access categories of information occur, this is a finding.'\n  desc 'fix', 'Configure the application to create an audit record for both successful and unsuccessful attempts to access protected categories of information.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24123r493267_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222453'\n  tag rid: 'SV-222453r879865_rule'\n  tag stig_id: 'APSC-DV-000740'\n  tag gtitle: 'SRG-APP-000494'\n  tag fix_id: 'F-24112r493268_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84009', 'V-69387']\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222453.rb"},"title":"The application must generate audit records when successful/unsuccessful attempts to access categories of information (e.g., classification levels) occur.","desc":"Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nCategories of information is information that is identified as being sensitive or requiring additional protection from regular user access. The data is accessed on a need to know basis and has been assigned a category or a classification in order to assign protections and track access.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).","descriptions":{"default":"Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nCategories of information is information that is identified as being sensitive or requiring additional protection from regular user access. The data is accessed on a need to know basis and has been assigned a category or a classification in order to assign protections and track access.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).","check":"Review the application documentation and interview the application administrator. Identify where the application logs are stored.\n\nIdentify any data protections that are required.\n\nIdentify any categories of data or classification of data.\n\nIf the application requirements do not call for compartmentalized data and data protection, this requirement is not applicable.\n\nAuthenticate to the application as a regular user. Using application functionality, attempt to access data that has been assigned to a protected category.\n\nPerform two access attempts, one successful and one unsuccessful.\n\nTesting this will require obtaining access to test data that has been assigned to a protected category, or having an authorized user access the data for you.\n\nReview the log data and ensure both the successful and unsuccessful access attempts are logged.\n\nIf the application does not generate an audit record when successful and unsuccessful attempts to access categories of information occur, this is a finding.","fix":"Configure the application to create an audit record for both successful and unsuccessful attempts to access protected categories of information."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24123r493267_chk","severity":"medium","gid":"V-222453","rid":"SV-222453r879865_rule","stig_id":"APSC-DV-000740","gtitle":"SRG-APP-000494","fix_id":"F-24112r493268_fix","documentable":null,"legacy":["SV-84009","V-69387"],"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-222454","code":"control 'SV-222454' do\n  title 'The application must generate audit records when successful/unsuccessful attempts to modify privileges occur.'\n  desc 'Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).'\n  desc 'check', \"Review the application documentation and interview the application admin to identify application management interfaces and features.\n\nAccess the application management utility and create a test user account or use the account of a regular privileged user who is cooperating with the testing.\n\nAccess and open the auditing logs.\n\nUsing an admin account, modify the privileges of a privileged user.\n\nAttempt to modify privileges in a manner that will cause a failure event such as attempting to modify a user’s privileges with an account that doesn't have the rights to do so.\n\nReview the application logs and ensure both events were captured in the logs. The event data should include the user’s identity and the privilege that was granted and the privilege that failed to be granted.\n\nIf the application does not log when successful and unsuccessful attempts to modify privileges occur, this is a finding.\"\n  desc 'fix', 'Configure the application to audit successful and unsuccessful attempts to modify privileges.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24124r493270_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222454'\n  tag rid: 'SV-222454r879866_rule'\n  tag stig_id: 'APSC-DV-000750'\n  tag gtitle: 'SRG-APP-000495'\n  tag fix_id: 'F-24113r493271_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84011', 'V-69389']\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222454.rb"},"title":"The application must generate audit records when successful/unsuccessful attempts to modify privileges occur.","desc":"Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).","descriptions":{"default":"Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).","check":"Review the application documentation and interview the application admin to identify application management interfaces and features.\n\nAccess the application management utility and create a test user account or use the account of a regular privileged user who is cooperating with the testing.\n\nAccess and open the auditing logs.\n\nUsing an admin account, modify the privileges of a privileged user.\n\nAttempt to modify privileges in a manner that will cause a failure event such as attempting to modify a user’s privileges with an account that doesn't have the rights to do so.\n\nReview the application logs and ensure both events were captured in the logs. The event data should include the user’s identity and the privilege that was granted and the privilege that failed to be granted.\n\nIf the application does not log when successful and unsuccessful attempts to modify privileges occur, this is a finding.","fix":"Configure the application to audit successful and unsuccessful attempts to modify privileges."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24124r493270_chk","severity":"medium","gid":"V-222454","rid":"SV-222454r879866_rule","stig_id":"APSC-DV-000750","gtitle":"SRG-APP-000495","fix_id":"F-24113r493271_fix","documentable":null,"legacy":["SV-84011","V-69389"],"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-222455","code":"control 'SV-222455' do\n  title 'The application must generate audit records when successful/unsuccessful attempts to modify security objects occur.'\n  desc 'Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).'\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nIdentify where the application logs are stored.\n\nIdentify application functionality that provides privilege or permission settings to security objects within the application.\nThis can be an application function that assigns privileges to an application object or data element.\n\nAuthenticate to the application as a regular user.  Using application functionality, attempt to modify the security object within the application.\n\nPerform two attempts, one successfully and one unsuccessfully.\n\nReview the log data and ensure the modification events both successful and unsuccessful are logged.\n\nIf the application does not generate an audit record when successful and unsuccessful attempts to modify security objects occur, this is a finding.'\n  desc 'fix', 'Configure the application to create an audit record for both successful and unsuccessful attempts to modify security objects.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24125r493273_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222455'\n  tag rid: 'SV-222455r879867_rule'\n  tag stig_id: 'APSC-DV-000760'\n  tag gtitle: 'SRG-APP-000496'\n  tag fix_id: 'F-24114r493274_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84013', 'V-69391']\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222455.rb"},"title":"The application must generate audit records when successful/unsuccessful attempts to modify security objects occur.","desc":"Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).","descriptions":{"default":"Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).","check":"Review the application documentation and interview the application administrator.\n\nIdentify where the application logs are stored.\n\nIdentify application functionality that provides privilege or permission settings to security objects within the application.\nThis can be an application function that assigns privileges to an application object or data element.\n\nAuthenticate to the application as a regular user.  Using application functionality, attempt to modify the security object within the application.\n\nPerform two attempts, one successfully and one unsuccessfully.\n\nReview the log data and ensure the modification events both successful and unsuccessful are logged.\n\nIf the application does not generate an audit record when successful and unsuccessful attempts to modify security objects occur, this is a finding.","fix":"Configure the application to create an audit record for both successful and unsuccessful attempts to modify security objects."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24125r493273_chk","severity":"medium","gid":"V-222455","rid":"SV-222455r879867_rule","stig_id":"APSC-DV-000760","gtitle":"SRG-APP-000496","fix_id":"F-24114r493274_fix","documentable":null,"legacy":["SV-84013","V-69391"],"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-222456","code":"control 'SV-222456' do\n  title 'The application must generate audit records when successful/unsuccessful attempts to modify security levels occur.'\n  desc 'A security level denotes a permissions or authorization capability within the application. This is most often associated with a user role. Attempts to modify a security level can be construed as an attempt to change the configuration of the application so as to create a new security role or modify an existing security role. Some applications may or may not provide this capability.\n\nWithout generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).'\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nIdentify where the application logs are stored.\n\nIdentify application functionality that provides privilege escalation or access to additional security levels within the application.\n\nThis can be performing a function that escalates the privileges of the user, or accessing a protected area of the application that requires additional authentication in order to access.\n\nAuthenticate to the application as a regular user. Using application functionality, attempt to modify the permissions of a different security level or domain within the application.\n\nPerform two attempts, one successfully and one unsuccessfully.\n\nReview the log data and ensure the modify events, both successful and unsuccessful, are logged.\n\nIf the application does not generate an audit record when successful and unsuccessful attempts to modify the permissions regarding the security levels occur, this is a finding.'\n  desc 'fix', 'Configure the application to create an audit record for both successful and unsuccessful attempts to modify security levels.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24126r493276_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222456'\n  tag rid: 'SV-222456r879868_rule'\n  tag stig_id: 'APSC-DV-000770'\n  tag gtitle: 'SRG-APP-000497'\n  tag fix_id: 'F-24115r493277_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84015', 'V-69393']\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222456.rb"},"title":"The application must generate audit records when successful/unsuccessful attempts to modify security levels occur.","desc":"A security level denotes a permissions or authorization capability within the application. This is most often associated with a user role. Attempts to modify a security level can be construed as an attempt to change the configuration of the application so as to create a new security role or modify an existing security role. Some applications may or may not provide this capability.\n\nWithout generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).","descriptions":{"default":"A security level denotes a permissions or authorization capability within the application. This is most often associated with a user role. Attempts to modify a security level can be construed as an attempt to change the configuration of the application so as to create a new security role or modify an existing security role. Some applications may or may not provide this capability.\n\nWithout generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).","check":"Review the application documentation and interview the application administrator.\n\nIdentify where the application logs are stored.\n\nIdentify application functionality that provides privilege escalation or access to additional security levels within the application.\n\nThis can be performing a function that escalates the privileges of the user, or accessing a protected area of the application that requires additional authentication in order to access.\n\nAuthenticate to the application as a regular user. Using application functionality, attempt to modify the permissions of a different security level or domain within the application.\n\nPerform two attempts, one successfully and one unsuccessfully.\n\nReview the log data and ensure the modify events, both successful and unsuccessful, are logged.\n\nIf the application does not generate an audit record when successful and unsuccessful attempts to modify the permissions regarding the security levels occur, this is a finding.","fix":"Configure the application to create an audit record for both successful and unsuccessful attempts to modify security levels."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24126r493276_chk","severity":"medium","gid":"V-222456","rid":"SV-222456r879868_rule","stig_id":"APSC-DV-000770","gtitle":"SRG-APP-000497","fix_id":"F-24115r493277_fix","documentable":null,"legacy":["SV-84015","V-69393"],"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-222457","code":"control 'SV-222457' do\n  title 'The application must generate audit records when successful/unsuccessful attempts to modify categories of information (e.g., classification levels) occur.'\n  desc 'Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).'\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nIdentify where the application logs are stored.\n\nIdentify any data protections that are required.\n\nIdentify any categories of data or classification of data.\n\nIf the application requirements do not call for compartmentalized data and data protection, this requirement is not applicable.\n\nAuthenticate to the application as a regular user. Using application functionality, attempt to modify data that has been assigned to a protected category.\n\nPerform two modification attempts, one successful and one unsuccessful.\n\nTesting this will require obtaining access to test data that has been assigned to a protected category, or having an authorized user access the data for you.\n\nReview the log data and ensure both the successful and unsuccessful modification attempts are logged.\n\nIf the application does not generate an audit record when successful and unsuccessful attempts to modify categories of information occur, this is a finding.'\n  desc 'fix', 'Configure the application to create an audit record for both successful and unsuccessful attempts to modify protected categories of information.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24127r493279_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222457'\n  tag rid: 'SV-222457r879869_rule'\n  tag stig_id: 'APSC-DV-000780'\n  tag gtitle: 'SRG-APP-000498'\n  tag fix_id: 'F-24116r493280_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84017', 'V-69395']\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222457.rb"},"title":"The application must generate audit records when successful/unsuccessful attempts to modify categories of information (e.g., classification levels) occur.","desc":"Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).","descriptions":{"default":"Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).","check":"Review the application documentation and interview the application administrator.\n\nIdentify where the application logs are stored.\n\nIdentify any data protections that are required.\n\nIdentify any categories of data or classification of data.\n\nIf the application requirements do not call for compartmentalized data and data protection, this requirement is not applicable.\n\nAuthenticate to the application as a regular user. Using application functionality, attempt to modify data that has been assigned to a protected category.\n\nPerform two modification attempts, one successful and one unsuccessful.\n\nTesting this will require obtaining access to test data that has been assigned to a protected category, or having an authorized user access the data for you.\n\nReview the log data and ensure both the successful and unsuccessful modification attempts are logged.\n\nIf the application does not generate an audit record when successful and unsuccessful attempts to modify categories of information occur, this is a finding.","fix":"Configure the application to create an audit record for both successful and unsuccessful attempts to modify protected categories of information."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24127r493279_chk","severity":"medium","gid":"V-222457","rid":"SV-222457r879869_rule","stig_id":"APSC-DV-000780","gtitle":"SRG-APP-000498","fix_id":"F-24116r493280_fix","documentable":null,"legacy":["SV-84017","V-69395"],"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-222458","code":"control 'SV-222458' do\n  title 'The application must generate audit records when successful/unsuccessful attempts to delete privileges occur.'\n  desc 'Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).'\n  desc 'check', \"Review the application documentation and interview the application admin to identify application management interfaces and features.\n\nAccess the application management utility and create a test user account or use the account of a regular privileged user who is cooperating with the testing.\n\nAccess and open the auditing logs.\n\nUsing an admin account, delete some or all of the privileges of a privileged user.\n\nAttempt to delete privileges in a manner that will cause a failure event such as attempting to delete a user’s privileges with an account that doesn't have the rights to do so.\n\nReview the application logs and ensure both events were captured in the logs. The event data should include the user’s identity and the privilege that was granted and the privilege that failed to be granted.\n\nIf the application does not log when successful and unsuccessful attempts to delete privileges occur, this is a finding.\"\n  desc 'fix', 'Configure the application to audit successful and unsuccessful attempts to delete privileges.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24128r493282_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222458'\n  tag rid: 'SV-222458r879870_rule'\n  tag stig_id: 'APSC-DV-000790'\n  tag gtitle: 'SRG-APP-000499'\n  tag fix_id: 'F-24117r493283_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84019', 'V-69397']\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222458.rb"},"title":"The application must generate audit records when successful/unsuccessful attempts to delete privileges occur.","desc":"Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).","descriptions":{"default":"Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).","check":"Review the application documentation and interview the application admin to identify application management interfaces and features.\n\nAccess the application management utility and create a test user account or use the account of a regular privileged user who is cooperating with the testing.\n\nAccess and open the auditing logs.\n\nUsing an admin account, delete some or all of the privileges of a privileged user.\n\nAttempt to delete privileges in a manner that will cause a failure event such as attempting to delete a user’s privileges with an account that doesn't have the rights to do so.\n\nReview the application logs and ensure both events were captured in the logs. The event data should include the user’s identity and the privilege that was granted and the privilege that failed to be granted.\n\nIf the application does not log when successful and unsuccessful attempts to delete privileges occur, this is a finding.","fix":"Configure the application to audit successful and unsuccessful attempts to delete privileges."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24128r493282_chk","severity":"medium","gid":"V-222458","rid":"SV-222458r879870_rule","stig_id":"APSC-DV-000790","gtitle":"SRG-APP-000499","fix_id":"F-24117r493283_fix","documentable":null,"legacy":["SV-84019","V-69397"],"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-222459","code":"control 'SV-222459' do\n  title 'The application must generate audit records when successful/unsuccessful attempts to delete security levels occur.'\n  desc 'A security level denotes a permissions or authorization capability within the application. This is most often associated with a user role. Attempts to delete a security level can be construed as an attempt to change the configuration of the application so as to delete an existing security role. Some applications may or may not provide this capability.\n\nWithout generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).'\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nIdentify where the application logs are stored.\n\nIdentify application functionality that provides privilege escalation or access to additional security levels within the application.\n\nThis can be performing a function that escalates the privileges of the user, or accessing a protected area of the application that requires additional authentication in order to access.\n\nAuthenticate to the application as a regular user. Using application functionality, attempt to delete permissions of a different security level or domain within the application.\n\nPerform two attempts, one successfully and one unsuccessfully.\n\nReview the log data and ensure the deletion events, both successful and unsuccessful are logged.\n\nIf the application does not generate an audit record when successful and unsuccessful attempts to delete permissions regarding the security levels occur, this is a finding.'\n  desc 'fix', 'Configure the application to create an audit record for both successful and unsuccessful attempts to delete security levels.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24129r493285_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222459'\n  tag rid: 'SV-222459r879871_rule'\n  tag stig_id: 'APSC-DV-000800'\n  tag gtitle: 'SRG-APP-000500'\n  tag fix_id: 'F-24118r493286_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84021', 'V-69399']\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222459.rb"},"title":"The application must generate audit records when successful/unsuccessful attempts to delete security levels occur.","desc":"A security level denotes a permissions or authorization capability within the application. This is most often associated with a user role. Attempts to delete a security level can be construed as an attempt to change the configuration of the application so as to delete an existing security role. Some applications may or may not provide this capability.\n\nWithout generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).","descriptions":{"default":"A security level denotes a permissions or authorization capability within the application. This is most often associated with a user role. Attempts to delete a security level can be construed as an attempt to change the configuration of the application so as to delete an existing security role. Some applications may or may not provide this capability.\n\nWithout generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).","check":"Review the application documentation and interview the application administrator.\n\nIdentify where the application logs are stored.\n\nIdentify application functionality that provides privilege escalation or access to additional security levels within the application.\n\nThis can be performing a function that escalates the privileges of the user, or accessing a protected area of the application that requires additional authentication in order to access.\n\nAuthenticate to the application as a regular user. Using application functionality, attempt to delete permissions of a different security level or domain within the application.\n\nPerform two attempts, one successfully and one unsuccessfully.\n\nReview the log data and ensure the deletion events, both successful and unsuccessful are logged.\n\nIf the application does not generate an audit record when successful and unsuccessful attempts to delete permissions regarding the security levels occur, this is a finding.","fix":"Configure the application to create an audit record for both successful and unsuccessful attempts to delete security levels."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24129r493285_chk","severity":"medium","gid":"V-222459","rid":"SV-222459r879871_rule","stig_id":"APSC-DV-000800","gtitle":"SRG-APP-000500","fix_id":"F-24118r493286_fix","documentable":null,"legacy":["SV-84021","V-69399"],"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-222460","code":"control 'SV-222460' do\n  title 'The application must generate audit records when successful/unsuccessful attempts to delete application database security objects occur.'\n  desc 'Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).'\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nIdentify where the application logs are stored.\n\nIdentify application functionality that provides privilege or permission settings to database security objects within the application. This can be an application function that assigns privileges to an application object or data element.\n\nAuthenticate to the application as a regular user. Using application functionality, attempt to delete the database security object within the application.\n\nPerform two attempts, one successfully and one unsuccessfully.\n\nReview the log data and ensure the deletion events, both successful and unsuccessful, are logged.\n\nIf the application does not generate an audit record when successful and unsuccessful attempts to delete database security objects occur, this is a finding.'\n  desc 'fix', 'Configure the application to create an audit record for both successful and unsuccessful attempts to delete database security objects.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24130r493288_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222460'\n  tag rid: 'SV-222460r879872_rule'\n  tag stig_id: 'APSC-DV-000810'\n  tag gtitle: 'SRG-APP-000501'\n  tag fix_id: 'F-24119r493289_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84023', 'V-69401']\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222460.rb"},"title":"The application must generate audit records when successful/unsuccessful attempts to delete application database security objects occur.","desc":"Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).","descriptions":{"default":"Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).","check":"Review the application documentation and interview the application administrator.\n\nIdentify where the application logs are stored.\n\nIdentify application functionality that provides privilege or permission settings to database security objects within the application. This can be an application function that assigns privileges to an application object or data element.\n\nAuthenticate to the application as a regular user. Using application functionality, attempt to delete the database security object within the application.\n\nPerform two attempts, one successfully and one unsuccessfully.\n\nReview the log data and ensure the deletion events, both successful and unsuccessful, are logged.\n\nIf the application does not generate an audit record when successful and unsuccessful attempts to delete database security objects occur, this is a finding.","fix":"Configure the application to create an audit record for both successful and unsuccessful attempts to delete database security objects."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24130r493288_chk","severity":"medium","gid":"V-222460","rid":"SV-222460r879872_rule","stig_id":"APSC-DV-000810","gtitle":"SRG-APP-000501","fix_id":"F-24119r493289_fix","documentable":null,"legacy":["SV-84023","V-69401"],"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-222461","code":"control 'SV-222461' do\n  title 'The application must generate audit records when successful/unsuccessful attempts to delete categories of information (e.g., classification levels) occur.'\n  desc 'Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).'\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nIdentify where the application logs are stored.\n\nIdentify any data protections that are required.\n\nIdentify any categories of data or classification of data.\n\nIf the application requirements do not call for compartmentalized data and data protection, this requirement is not applicable.\n\nAuthenticate to the application as a regular user. Using application functionality, attempt to delete data that has been assigned to a protected category.\n\nPerform two modification attempts, one successful and one unsuccessful.\n\nTesting this will require obtaining access to test data that has been assigned to a protected category, or having an authorized user access the data for you.\n\nReview the log data and ensure both the successful and unsuccessful deletion attempts are logged.\n\nIf the application does not generate an audit record when successful and unsuccessful attempts to delete categories of information occur, this is a finding.'\n  desc 'fix', 'Configure the application to create an audit record for both successful and unsuccessful attempts to delete protected categories of information.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24131r493291_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222461'\n  tag rid: 'SV-222461r879873_rule'\n  tag stig_id: 'APSC-DV-000820'\n  tag gtitle: 'SRG-APP-000502'\n  tag fix_id: 'F-24120r493292_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84025', 'V-69403']\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222461.rb"},"title":"The application must generate audit records when successful/unsuccessful attempts to delete categories of information (e.g., classification levels) occur.","desc":"Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).","descriptions":{"default":"Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).","check":"Review the application documentation and interview the application administrator.\n\nIdentify where the application logs are stored.\n\nIdentify any data protections that are required.\n\nIdentify any categories of data or classification of data.\n\nIf the application requirements do not call for compartmentalized data and data protection, this requirement is not applicable.\n\nAuthenticate to the application as a regular user. Using application functionality, attempt to delete data that has been assigned to a protected category.\n\nPerform two modification attempts, one successful and one unsuccessful.\n\nTesting this will require obtaining access to test data that has been assigned to a protected category, or having an authorized user access the data for you.\n\nReview the log data and ensure both the successful and unsuccessful deletion attempts are logged.\n\nIf the application does not generate an audit record when successful and unsuccessful attempts to delete categories of information occur, this is a finding.","fix":"Configure the application to create an audit record for both successful and unsuccessful attempts to delete protected categories of information."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24131r493291_chk","severity":"medium","gid":"V-222461","rid":"SV-222461r879873_rule","stig_id":"APSC-DV-000820","gtitle":"SRG-APP-000502","fix_id":"F-24120r493292_fix","documentable":null,"legacy":["SV-84025","V-69403"],"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-222462","code":"control 'SV-222462' do\n  title 'The application must generate audit records when successful/unsuccessful logon attempts occur.'\n  desc 'Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).\n\nKnowing when a user successfully or unsuccessfully logged on to the application is critical information that aids in forensic analysis.'\n  desc 'check', 'Review and monitor the application logs.\n\nAuthenticate to the application and observe if the log includes an entry to indicate the user’s authentication was successful.\n\nTerminate the user session by logging out.\n\nReauthenticate using invalid user credentials and observe if the log includes an entry to indicate the authentication was unsuccessful.\n\nIf successful and unsuccessful logon events are not recorded in the logs, this is a finding.'\n  desc 'fix', 'Configure the application or application server to write a log entry when successful and unsuccessful logon events occur.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24132r493294_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222462'\n  tag rid: 'SV-222462r879874_rule'\n  tag stig_id: 'APSC-DV-000830'\n  tag gtitle: 'SRG-APP-000503'\n  tag fix_id: 'F-24121r493295_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84027', 'V-69405']\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222462.rb"},"title":"The application must generate audit records when successful/unsuccessful logon attempts occur.","desc":"Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).\n\nKnowing when a user successfully or unsuccessfully logged on to the application is critical information that aids in forensic analysis.","descriptions":{"default":"Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).\n\nKnowing when a user successfully or unsuccessfully logged on to the application is critical information that aids in forensic analysis.","check":"Review and monitor the application logs.\n\nAuthenticate to the application and observe if the log includes an entry to indicate the user’s authentication was successful.\n\nTerminate the user session by logging out.\n\nReauthenticate using invalid user credentials and observe if the log includes an entry to indicate the authentication was unsuccessful.\n\nIf successful and unsuccessful logon events are not recorded in the logs, this is a finding.","fix":"Configure the application or application server to write a log entry when successful and unsuccessful logon events occur."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24132r493294_chk","severity":"medium","gid":"V-222462","rid":"SV-222462r879874_rule","stig_id":"APSC-DV-000830","gtitle":"SRG-APP-000503","fix_id":"F-24121r493295_fix","documentable":null,"legacy":["SV-84027","V-69405"],"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-222463","code":"control 'SV-222463' do\n  title 'The application must generate audit records for privileged activities or other system-level access.'\n  desc 'Privileged activities include the tasks or actions taken by users in an administrative role (admin, backup operator, manager, etc.) which are used to manage or reconfigure application function. Examples include but are not limited to:\n\nModifying application logging verbosity, starting or stopping of application services, application user account management, managing application functionality, or otherwise changing the underlying application capabilities such as adding a new application module or plugin.\n\nPrivileged access does not include an application design which does not modify the application but does provide users with the functionality or the ability to manage their own user specific preferences or otherwise tailor the application to suit individual user needs based upon choices or selections built into the application.'\n  desc 'check', 'Review and monitor the application logs.\n\nAuthenticate to the application as a privileged user and observe if the log includes an entry to indicate the user’s authentication was successful.\n\nPerform actions as an admin or other privileged user such as modifying the logging verbosity, or starting or stopping an application service, or terminating a test user session.\n\nIf log events that correspond with the actions performed are not recorded in the logs, this is a finding.'\n  desc 'fix', 'Configure the application to write a log entry when privileged activities or other system-level events occur.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24133r493297_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222463'\n  tag rid: 'SV-222463r879875_rule'\n  tag stig_id: 'APSC-DV-000840'\n  tag gtitle: 'SRG-APP-000504'\n  tag fix_id: 'F-24122r493298_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84029', 'V-69407']\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222463.rb"},"title":"The application must generate audit records for privileged activities or other system-level access.","desc":"Privileged activities include the tasks or actions taken by users in an administrative role (admin, backup operator, manager, etc.) which are used to manage or reconfigure application function. Examples include but are not limited to:\n\nModifying application logging verbosity, starting or stopping of application services, application user account management, managing application functionality, or otherwise changing the underlying application capabilities such as adding a new application module or plugin.\n\nPrivileged access does not include an application design which does not modify the application but does provide users with the functionality or the ability to manage their own user specific preferences or otherwise tailor the application to suit individual user needs based upon choices or selections built into the application.","descriptions":{"default":"Privileged activities include the tasks or actions taken by users in an administrative role (admin, backup operator, manager, etc.) which are used to manage or reconfigure application function. Examples include but are not limited to:\n\nModifying application logging verbosity, starting or stopping of application services, application user account management, managing application functionality, or otherwise changing the underlying application capabilities such as adding a new application module or plugin.\n\nPrivileged access does not include an application design which does not modify the application but does provide users with the functionality or the ability to manage their own user specific preferences or otherwise tailor the application to suit individual user needs based upon choices or selections built into the application.","check":"Review and monitor the application logs.\n\nAuthenticate to the application as a privileged user and observe if the log includes an entry to indicate the user’s authentication was successful.\n\nPerform actions as an admin or other privileged user such as modifying the logging verbosity, or starting or stopping an application service, or terminating a test user session.\n\nIf log events that correspond with the actions performed are not recorded in the logs, this is a finding.","fix":"Configure the application to write a log entry when privileged activities or other system-level events occur."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24133r493297_chk","severity":"medium","gid":"V-222463","rid":"SV-222463r879875_rule","stig_id":"APSC-DV-000840","gtitle":"SRG-APP-000504","fix_id":"F-24122r493298_fix","documentable":null,"legacy":["SV-84029","V-69407"],"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-222464","code":"control 'SV-222464' do\n  title 'The application must generate audit records showing starting and ending time for user access to the system.'\n  desc 'Knowing when a user’s application session began and when it ended is critical information that aids in forensic analysis.'\n  desc 'check', 'Review and monitor the application logs.\n\nInitiate a user session and observe if the log includes a time stamp showing the start of the session.\n\nTerminate the user session and observe if the log includes a time stamp showing the end of the session.\n\nIf the start and the end time of the session are not recorded in the logs, this is a finding.'\n  desc 'fix', 'Configure the application or application server to record the start and end time of user session activity.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24134r493300_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222464'\n  tag rid: 'SV-222464r879876_rule'\n  tag stig_id: 'APSC-DV-000850'\n  tag gtitle: 'SRG-APP-000505'\n  tag fix_id: 'F-24123r493301_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84031', 'V-69409']\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222464.rb"},"title":"The application must generate audit records showing starting and ending time for user access to the system.","desc":"Knowing when a user’s application session began and when it ended is critical information that aids in forensic analysis.","descriptions":{"default":"Knowing when a user’s application session began and when it ended is critical information that aids in forensic analysis.","check":"Review and monitor the application logs.\n\nInitiate a user session and observe if the log includes a time stamp showing the start of the session.\n\nTerminate the user session and observe if the log includes a time stamp showing the end of the session.\n\nIf the start and the end time of the session are not recorded in the logs, this is a finding.","fix":"Configure the application or application server to record the start and end time of user session activity."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24134r493300_chk","severity":"medium","gid":"V-222464","rid":"SV-222464r879876_rule","stig_id":"APSC-DV-000850","gtitle":"SRG-APP-000505","fix_id":"F-24123r493301_fix","documentable":null,"legacy":["SV-84031","V-69409"],"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-222465","code":"control 'SV-222465' do\n  title 'The application must generate audit records when successful/unsuccessful accesses to objects occur.'\n  desc 'Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nApplication objects are system or application components that comprise the application. This includes but is not limited to; application files, folders, processes and modules.\n\nThis requirement is not intended to force the use of debug logging which would be used for troubleshooting or forensic actions; rather it is intended to assure the application strikes a balance when auditing access to application objects and logs normal and potentially abnormal application activity.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify log locations.\n\nAccess the application logs.\n\nReview the logs and identify if the application is logging both successful and unsuccessful access to application objects such as files, folders, processes, or application modules and sub components, or systems.\n\nIf the application does not log application object access, this is a finding.'\n  desc 'fix', 'Configure the application to log successful and unsuccessful access to application objects.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24135r493303_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222465'\n  tag rid: 'SV-222465r879878_rule'\n  tag stig_id: 'APSC-DV-000860'\n  tag gtitle: 'SRG-APP-000507'\n  tag fix_id: 'F-24124r493304_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84033', 'V-69411']\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222465.rb"},"title":"The application must generate audit records when successful/unsuccessful accesses to objects occur.","desc":"Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nApplication objects are system or application components that comprise the application. This includes but is not limited to; application files, folders, processes and modules.\n\nThis requirement is not intended to force the use of debug logging which would be used for troubleshooting or forensic actions; rather it is intended to assure the application strikes a balance when auditing access to application objects and logs normal and potentially abnormal application activity.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).","descriptions":{"default":"Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nApplication objects are system or application components that comprise the application. This includes but is not limited to; application files, folders, processes and modules.\n\nThis requirement is not intended to force the use of debug logging which would be used for troubleshooting or forensic actions; rather it is intended to assure the application strikes a balance when auditing access to application objects and logs normal and potentially abnormal application activity.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).","check":"Review the application documentation and interview the application administrator to identify log locations.\n\nAccess the application logs.\n\nReview the logs and identify if the application is logging both successful and unsuccessful access to application objects such as files, folders, processes, or application modules and sub components, or systems.\n\nIf the application does not log application object access, this is a finding.","fix":"Configure the application to log successful and unsuccessful access to application objects."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24135r493303_chk","severity":"medium","gid":"V-222465","rid":"SV-222465r879878_rule","stig_id":"APSC-DV-000860","gtitle":"SRG-APP-000507","fix_id":"F-24124r493304_fix","documentable":null,"legacy":["SV-84033","V-69411"],"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-222466","code":"control 'SV-222466' do\n  title 'The application must generate audit records for all direct access to the information system.'\n  desc 'Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nWhen an application provides direct access to underlying OS features and functions, that access must be audited.\nAudit records can be generated from various components within the information system (e.g., module or policy filter).'\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nIdentify if the application implements a direct access feature or function that allows users to directly access the underlying OS.\n\nDirect access includes but is not limited to: executing OS commands, navigating the file system, manipulating system resources such as print queues, or reading files hosted on the OS that are not specifically shared or made available on the website.\n\nIf the application does not provide direct access to the system, this requirement is not applicable.\n\nAccess the application logs.\n\nAccess the application as a user or test user with appropriate permissions and attempt to execute application features and functions that provide direct access to the system.\n\nReview the logs and ensure the actions executed were logged.\n\nLog information must include the user responsible for executing the action, the action executed, and the result of the action.\n\nIf the application does not log all direct access to the system, this is a finding.'\n  desc 'fix', 'Configure the application to log all direct access to the system.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24136r493306_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222466'\n  tag rid: 'SV-222466r879879_rule'\n  tag stig_id: 'APSC-DV-000870'\n  tag gtitle: 'SRG-APP-000508'\n  tag fix_id: 'F-24125r493307_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84035', 'V-69413']\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222466.rb"},"title":"The application must generate audit records for all direct access to the information system.","desc":"Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nWhen an application provides direct access to underlying OS features and functions, that access must be audited.\nAudit records can be generated from various components within the information system (e.g., module or policy filter).","descriptions":{"default":"Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nWhen an application provides direct access to underlying OS features and functions, that access must be audited.\nAudit records can be generated from various components within the information system (e.g., module or policy filter).","check":"Review the application documentation and interview the application administrator.\n\nIdentify if the application implements a direct access feature or function that allows users to directly access the underlying OS.\n\nDirect access includes but is not limited to: executing OS commands, navigating the file system, manipulating system resources such as print queues, or reading files hosted on the OS that are not specifically shared or made available on the website.\n\nIf the application does not provide direct access to the system, this requirement is not applicable.\n\nAccess the application logs.\n\nAccess the application as a user or test user with appropriate permissions and attempt to execute application features and functions that provide direct access to the system.\n\nReview the logs and ensure the actions executed were logged.\n\nLog information must include the user responsible for executing the action, the action executed, and the result of the action.\n\nIf the application does not log all direct access to the system, this is a finding.","fix":"Configure the application to log all direct access to the system."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24136r493306_chk","severity":"medium","gid":"V-222466","rid":"SV-222466r879879_rule","stig_id":"APSC-DV-000870","gtitle":"SRG-APP-000508","fix_id":"F-24125r493307_fix","documentable":null,"legacy":["SV-84035","V-69413"],"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-222467","code":"control 'SV-222467' do\n  title 'The application must generate audit records for all account creations, modifications, disabling, and termination events.'\n  desc 'When application user accounts are created, modified, disabled or terminated the event must be logged.\n\nCentralized management of user accounts allows for rapid response to user related security events and also provides ease of management.\n\nAllowing the centralized user management solution to log these events is acceptable practice; however, if the application provides a user management interface to manage these tasks, the application must also log these events.\n\nApplication developers are encouraged to integrate their applications with enterprise-level authentication/access/audit mechanisms such as Syslog, Active Directory or LDAP.'\n  desc 'check', 'Examine the application documentation or interview the application representative to identify how the application users are managed.\n\nInterview the application administrator and determine if the application is configured to utilize a centralized user management system such as Active Directory for user management or if the application manages user accounts within the application.\n\nIf the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.\n\nIdentify the location of the audit logs and review the end of the logs.\n\nAccess the user account management functionality.\n\nCreate an application test account and then review the log to ensure a log record that documents the event is created.\n\nModify the test account and then review the log to ensure a log record that documents the event is created.\n\nDisable the test account and then review the log to ensure a log record that documents the event is created.\n\nTerminate/remove the test account and then review the log to ensure a log record that documents the event is created.\n\nIf log events are not created that document all of these events, this is a finding.\n\nIf some but not all of the aforementioned events are documented in the logs, this is a finding.\n\nFindings should document which of the events was not logged.'\n  desc 'fix', 'Configure the application to log user account creation, modification, disabling, and termination events.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24137r918116_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222467'\n  tag rid: 'SV-222467r918117_rule'\n  tag stig_id: 'APSC-DV-000880'\n  tag gtitle: 'SRG-APP-000509'\n  tag fix_id: 'F-24126r493310_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84037', 'V-69415']\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222467.rb"},"title":"The application must generate audit records for all account creations, modifications, disabling, and termination events.","desc":"When application user accounts are created, modified, disabled or terminated the event must be logged.\n\nCentralized management of user accounts allows for rapid response to user related security events and also provides ease of management.\n\nAllowing the centralized user management solution to log these events is acceptable practice; however, if the application provides a user management interface to manage these tasks, the application must also log these events.\n\nApplication developers are encouraged to integrate their applications with enterprise-level authentication/access/audit mechanisms such as Syslog, Active Directory or LDAP.","descriptions":{"default":"When application user accounts are created, modified, disabled or terminated the event must be logged.\n\nCentralized management of user accounts allows for rapid response to user related security events and also provides ease of management.\n\nAllowing the centralized user management solution to log these events is acceptable practice; however, if the application provides a user management interface to manage these tasks, the application must also log these events.\n\nApplication developers are encouraged to integrate their applications with enterprise-level authentication/access/audit mechanisms such as Syslog, Active Directory or LDAP.","check":"Examine the application documentation or interview the application representative to identify how the application users are managed.\n\nInterview the application administrator and determine if the application is configured to utilize a centralized user management system such as Active Directory for user management or if the application manages user accounts within the application.\n\nIf the application is configured to use an enterprise-based application user management capability that is STIG compliant, the requirement is not applicable.\n\nIdentify the location of the audit logs and review the end of the logs.\n\nAccess the user account management functionality.\n\nCreate an application test account and then review the log to ensure a log record that documents the event is created.\n\nModify the test account and then review the log to ensure a log record that documents the event is created.\n\nDisable the test account and then review the log to ensure a log record that documents the event is created.\n\nTerminate/remove the test account and then review the log to ensure a log record that documents the event is created.\n\nIf log events are not created that document all of these events, this is a finding.\n\nIf some but not all of the aforementioned events are documented in the logs, this is a finding.\n\nFindings should document which of the events was not logged.","fix":"Configure the application to log user account creation, modification, disabling, and termination events."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24137r918116_chk","severity":"medium","gid":"V-222467","rid":"SV-222467r918117_rule","stig_id":"APSC-DV-000880","gtitle":"SRG-APP-000509","fix_id":"F-24126r493310_fix","documentable":null,"legacy":["SV-84037","V-69415"],"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-222468","code":"control 'SV-222468' do\n  title 'The application must initiate session auditing upon startup.'\n  desc 'If the application does not begin logging upon startup, important log events could be missed.'\n  desc 'check', 'Examine the application design documentation and interview the application administrator to identify application logging behavior.\n\nIf the application is writing to an existing log or log file:\n\nOpen and monitor the application log.\n\nStart the application service and view the log entries. \n\nLog entries indicating the application is starting should commence as soon as the application starts. Determine if the log events correlate with the time the application was started and if event log entries include an application start up sequence of events.\n\nIf the application writes events to a new log on startup: \n\nIdentify location logs are written to, start the application and then identify and access the new log.\n\nDetermine if the log events correlate with the time the application was started and if event log entries include an application start up sequence of events.\n\nIf the application does not begin logging events upon start up, this is a finding.'\n  desc 'fix', 'Configure the application to begin logging application events as soon as the application starts up.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24138r493312_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222468'\n  tag rid: 'SV-222468r879562_rule'\n  tag stig_id: 'APSC-DV-000910'\n  tag gtitle: 'SRG-APP-000092'\n  tag fix_id: 'F-24127r493313_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84041', 'V-69419']\n  tag cci: ['CCI-001464']\n  tag nist: ['AU-14 (1)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222468.rb"},"title":"The application must initiate session auditing upon startup.","desc":"If the application does not begin logging upon startup, important log events could be missed.","descriptions":{"default":"If the application does not begin logging upon startup, important log events could be missed.","check":"Examine the application design documentation and interview the application administrator to identify application logging behavior.\n\nIf the application is writing to an existing log or log file:\n\nOpen and monitor the application log.\n\nStart the application service and view the log entries. \n\nLog entries indicating the application is starting should commence as soon as the application starts. Determine if the log events correlate with the time the application was started and if event log entries include an application start up sequence of events.\n\nIf the application writes events to a new log on startup: \n\nIdentify location logs are written to, start the application and then identify and access the new log.\n\nDetermine if the log events correlate with the time the application was started and if event log entries include an application start up sequence of events.\n\nIf the application does not begin logging events upon start up, this is a finding.","fix":"Configure the application to begin logging application events as soon as the application starts up."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24138r493312_chk","severity":"medium","gid":"V-222468","rid":"SV-222468r879562_rule","stig_id":"APSC-DV-000910","gtitle":"SRG-APP-000092","fix_id":"F-24127r493313_fix","documentable":null,"legacy":["SV-84041","V-69419"],"cci":["CCI-001464"],"nist":["AU-14 (1)"]}},{"id":"SV-222469","code":"control 'SV-222469' do\n  title 'The application must log application shutdown events.'\n  desc 'Forensics is a large part of security incident response.  Applications must provide a record of their actions so application events can be investigated post-event.  \n\nAttackers may attempt to shut off the application logging capability to cover their activity while on the system.  Recording the shutdown event and the time it occurred in the application or  system logs helps to provide forensic evidence that aids in investigating the events.'\n  desc 'check', 'Review and monitor the application and system logs.\n\nIf an application shutdown event is not recorded in the logs, either initiate a shutdown event and review the logs after reestablishing access or request backup copies of the application or system logs that indicate shutdown events are being recorded.\n\nAlternatively, check for a setting within the application that controls application logging events and determine if application shutdown logging is configured.\n\nIf the application is not recording application shutdown events in either the application or system log, or if the application is not configured to record shutdown events, this is a finding.'\n  desc 'fix', 'Configure the application or application server to record application shutdown events in the event logs.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-36238r602280_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222469'\n  tag rid: 'SV-222469r879563_rule'\n  tag stig_id: 'APSC-DV-000940'\n  tag gtitle: 'SRG-APP-000095'\n  tag fix_id: 'F-24128r493316_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84043', 'V-69421']\n  tag cci: ['CCI-000130']\n  tag nist: ['AU-3 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222469.rb"},"title":"The application must log application shutdown events.","desc":"Forensics is a large part of security incident response.  Applications must provide a record of their actions so application events can be investigated post-event.  \n\nAttackers may attempt to shut off the application logging capability to cover their activity while on the system.  Recording the shutdown event and the time it occurred in the application or  system logs helps to provide forensic evidence that aids in investigating the events.","descriptions":{"default":"Forensics is a large part of security incident response.  Applications must provide a record of their actions so application events can be investigated post-event.  \n\nAttackers may attempt to shut off the application logging capability to cover their activity while on the system.  Recording the shutdown event and the time it occurred in the application or  system logs helps to provide forensic evidence that aids in investigating the events.","check":"Review and monitor the application and system logs.\n\nIf an application shutdown event is not recorded in the logs, either initiate a shutdown event and review the logs after reestablishing access or request backup copies of the application or system logs that indicate shutdown events are being recorded.\n\nAlternatively, check for a setting within the application that controls application logging events and determine if application shutdown logging is configured.\n\nIf the application is not recording application shutdown events in either the application or system log, or if the application is not configured to record shutdown events, this is a finding.","fix":"Configure the application or application server to record application shutdown events in the event logs."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-36238r602280_chk","severity":"medium","gid":"V-222469","rid":"SV-222469r879563_rule","stig_id":"APSC-DV-000940","gtitle":"SRG-APP-000095","fix_id":"F-24128r493316_fix","documentable":null,"legacy":["SV-84043","V-69421"],"cci":["CCI-000130"],"nist":["AU-3 a"]}},{"id":"SV-222470","code":"control 'SV-222470' do\n  title 'The application must log destination IP addresses.'\n  desc 'The IP addresses of the systems that the application connects to are an important aspect of identifying application network related activity. Recording the IP addresses of the system the application connects to in the application logs provides forensic evidence and aids in investigating and correlating the sources of malicious behavior related to security events. Logging this information can be particularly useful for Service-Oriented Applications where there is application to application connectivity.'\n  desc 'check', 'If the application design documentation indicates the application does not initiate connections to remote systems this requirement is not applicable.\n\nNetwork connections to systems used for support services such as DNS, AD, or LDAP may be stored in the system logs. These connections are applicable.\n\nIdentify log source based upon application architecture, design documents and input from application admin.\n\nReview and monitor the application or system logs.\n\nConnect to the application and utilize the application functionality that initiates connections to a destination system.\n\nIf the application routinely connects to remote system on a regular basis you may simply allow the application to operate in the background while the logs are observed.\n\nObserve the log activity and determine if the log includes an entry to indicate the IP address of the destination system.\n\nIf the IP address of the remote system is not recorded along with the event in the event log, this is a finding.'\n  desc 'fix', 'Configure the application to record the destination IP address of the remote system.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24140r493318_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222470'\n  tag rid: 'SV-222470r879563_rule'\n  tag stig_id: 'APSC-DV-000950'\n  tag gtitle: 'SRG-APP-000095'\n  tag fix_id: 'F-24129r493319_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84045', 'V-69423']\n  tag cci: ['CCI-000130']\n  tag nist: ['AU-3 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222470.rb"},"title":"The application must log destination IP addresses.","desc":"The IP addresses of the systems that the application connects to are an important aspect of identifying application network related activity. Recording the IP addresses of the system the application connects to in the application logs provides forensic evidence and aids in investigating and correlating the sources of malicious behavior related to security events. Logging this information can be particularly useful for Service-Oriented Applications where there is application to application connectivity.","descriptions":{"default":"The IP addresses of the systems that the application connects to are an important aspect of identifying application network related activity. Recording the IP addresses of the system the application connects to in the application logs provides forensic evidence and aids in investigating and correlating the sources of malicious behavior related to security events. Logging this information can be particularly useful for Service-Oriented Applications where there is application to application connectivity.","check":"If the application design documentation indicates the application does not initiate connections to remote systems this requirement is not applicable.\n\nNetwork connections to systems used for support services such as DNS, AD, or LDAP may be stored in the system logs. These connections are applicable.\n\nIdentify log source based upon application architecture, design documents and input from application admin.\n\nReview and monitor the application or system logs.\n\nConnect to the application and utilize the application functionality that initiates connections to a destination system.\n\nIf the application routinely connects to remote system on a regular basis you may simply allow the application to operate in the background while the logs are observed.\n\nObserve the log activity and determine if the log includes an entry to indicate the IP address of the destination system.\n\nIf the IP address of the remote system is not recorded along with the event in the event log, this is a finding.","fix":"Configure the application to record the destination IP address of the remote system."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24140r493318_chk","severity":"medium","gid":"V-222470","rid":"SV-222470r879563_rule","stig_id":"APSC-DV-000950","gtitle":"SRG-APP-000095","fix_id":"F-24129r493319_fix","documentable":null,"legacy":["SV-84045","V-69423"],"cci":["CCI-000130"],"nist":["AU-3 a"]}},{"id":"SV-222471","code":"control 'SV-222471' do\n  title 'The application must log user actions involving access to data.'\n  desc 'When users access application data, there is risk of data compromise or seepage if the account used to access is compromised or access is granted improperly. To be able to investigate which account accessed data, the account access must be logged. Without establishing when the access event occurred, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAssociating event types with detected events in the application and audit logs provides a means of investigating an attack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application.'\n  desc 'check', 'Review and monitor the application logs. When accessing data, the logs are most likely database logs.\n\nIf the application design documents include specific data elements that require protection, ensure user access to those data elements are logged.\n\nUtilize the application as a regular user and operate the application so as to access data elements contained within the application. This includes using the application user interface to browse through data elements, query/search data elements and using report generation capability if it exists.\n\nObserve and determine if the application log includes an entry to indicate the user’s access to the data was recorded.\n\nIf successful access to application data elements is not recorded in the logs, this is a finding.'\n  desc 'fix', 'Identify the specific data elements requiring protection and audit access to the data.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24141r493321_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222471'\n  tag rid: 'SV-222471r879563_rule'\n  tag stig_id: 'APSC-DV-000960'\n  tag gtitle: 'SRG-APP-000095'\n  tag fix_id: 'F-24130r493322_fix'\n  tag 'documentable'\n  tag legacy: ['V-69425', 'SV-84047']\n  tag cci: ['CCI-000130']\n  tag nist: ['AU-3 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222471.rb"},"title":"The application must log user actions involving access to data.","desc":"When users access application data, there is risk of data compromise or seepage if the account used to access is compromised or access is granted improperly. To be able to investigate which account accessed data, the account access must be logged. Without establishing when the access event occurred, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAssociating event types with detected events in the application and audit logs provides a means of investigating an attack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application.","descriptions":{"default":"When users access application data, there is risk of data compromise or seepage if the account used to access is compromised or access is granted improperly. To be able to investigate which account accessed data, the account access must be logged. Without establishing when the access event occurred, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAssociating event types with detected events in the application and audit logs provides a means of investigating an attack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application.","check":"Review and monitor the application logs. When accessing data, the logs are most likely database logs.\n\nIf the application design documents include specific data elements that require protection, ensure user access to those data elements are logged.\n\nUtilize the application as a regular user and operate the application so as to access data elements contained within the application. This includes using the application user interface to browse through data elements, query/search data elements and using report generation capability if it exists.\n\nObserve and determine if the application log includes an entry to indicate the user’s access to the data was recorded.\n\nIf successful access to application data elements is not recorded in the logs, this is a finding.","fix":"Identify the specific data elements requiring protection and audit access to the data."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24141r493321_chk","severity":"medium","gid":"V-222471","rid":"SV-222471r879563_rule","stig_id":"APSC-DV-000960","gtitle":"SRG-APP-000095","fix_id":"F-24130r493322_fix","documentable":null,"legacy":["V-69425","SV-84047"],"cci":["CCI-000130"],"nist":["AU-3 a"]}},{"id":"SV-222472","code":"control 'SV-222472' do\n  title 'The application must log user actions involving changes to data.'\n  desc 'When users change/modify application data, there is risk of data compromise if the account used to access is compromised or access is granted improperly. To be able to investigate which account accessed data, the account making the data changes must be logged. Without establishing when the data change event occurred, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAssociating event types with detected events in the application and audit logs provides a means of investigating an attack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application.'\n  desc 'check', 'Review and monitor the application logs. When modifying data, the logs are most likely database logs.\n\nIf the application design documents include specific data elements that require protection, ensure any changes to those specific data elements are logged. Otherwise, a random check is sufficient.\n\nIf the application uses a database configured to use Transaction SQL logging this is not a finding if the application admin can demonstrate a process for reviewing the transaction log for data changes. The process must include using the transaction log and some form of query capability to identify users and the data they changed within the application and vice versa.\n\nUtilize the application as a regular user and operate the application so as to modify a data element contained within the application.\n\nObserve and determine if the application log includes an entry to indicate the users data change event was recorded.\n\nIf successful changes/modifications to application data elements are not recorded in the logs, this is a finding.'\n  desc 'fix', 'Configure the application to log all changes to application data.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24142r493324_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222472'\n  tag rid: 'SV-222472r879563_rule'\n  tag stig_id: 'APSC-DV-000970'\n  tag gtitle: 'SRG-APP-000095'\n  tag fix_id: 'F-24131r493325_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84049', 'V-69427']\n  tag cci: ['CCI-000130']\n  tag nist: ['AU-3 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222472.rb"},"title":"The application must log user actions involving changes to data.","desc":"When users change/modify application data, there is risk of data compromise if the account used to access is compromised or access is granted improperly. To be able to investigate which account accessed data, the account making the data changes must be logged. Without establishing when the data change event occurred, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAssociating event types with detected events in the application and audit logs provides a means of investigating an attack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application.","descriptions":{"default":"When users change/modify application data, there is risk of data compromise if the account used to access is compromised or access is granted improperly. To be able to investigate which account accessed data, the account making the data changes must be logged. Without establishing when the data change event occurred, it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one.\n\nAssociating event types with detected events in the application and audit logs provides a means of investigating an attack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application.","check":"Review and monitor the application logs. When modifying data, the logs are most likely database logs.\n\nIf the application design documents include specific data elements that require protection, ensure any changes to those specific data elements are logged. Otherwise, a random check is sufficient.\n\nIf the application uses a database configured to use Transaction SQL logging this is not a finding if the application admin can demonstrate a process for reviewing the transaction log for data changes. The process must include using the transaction log and some form of query capability to identify users and the data they changed within the application and vice versa.\n\nUtilize the application as a regular user and operate the application so as to modify a data element contained within the application.\n\nObserve and determine if the application log includes an entry to indicate the users data change event was recorded.\n\nIf successful changes/modifications to application data elements are not recorded in the logs, this is a finding.","fix":"Configure the application to log all changes to application data."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24142r493324_chk","severity":"medium","gid":"V-222472","rid":"SV-222472r879563_rule","stig_id":"APSC-DV-000970","gtitle":"SRG-APP-000095","fix_id":"F-24131r493325_fix","documentable":null,"legacy":["SV-84049","V-69427"],"cci":["CCI-000130"],"nist":["AU-3 a"]}},{"id":"SV-222473","code":"control 'SV-222473' do\n  title 'The application must produce audit records containing information to establish when (date and time) the events occurred.'\n  desc 'Without establishing when events occurred, it is impossible to establish, correlate, and investigate the events relating to an incident.\n\nIn order to compile an accurate risk assessment, and provide forensic analysis, it is essential for security personnel to know when events occurred (date and time).'\n  desc 'check', 'Access the application logs and review the log entries for date and time. Each event written into the log must have a corresponding date and time stamp associated with it.\n\nIf the audit logs do not have a corresponding date and time associated with each event, this is a finding.'\n  desc 'fix', 'Configure the application or application server to include the date and the time of the event in the audit logs.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24143r493327_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222473'\n  tag rid: 'SV-222473r879564_rule'\n  tag stig_id: 'APSC-DV-000980'\n  tag gtitle: 'SRG-APP-000096'\n  tag fix_id: 'F-24132r493328_fix'\n  tag 'documentable'\n  tag legacy: ['V-69429', 'SV-84051']\n  tag cci: ['CCI-000131']\n  tag nist: ['AU-3 b']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222473.rb"},"title":"The application must produce audit records containing information to establish when (date and time) the events occurred.","desc":"Without establishing when events occurred, it is impossible to establish, correlate, and investigate the events relating to an incident.\n\nIn order to compile an accurate risk assessment, and provide forensic analysis, it is essential for security personnel to know when events occurred (date and time).","descriptions":{"default":"Without establishing when events occurred, it is impossible to establish, correlate, and investigate the events relating to an incident.\n\nIn order to compile an accurate risk assessment, and provide forensic analysis, it is essential for security personnel to know when events occurred (date and time).","check":"Access the application logs and review the log entries for date and time. Each event written into the log must have a corresponding date and time stamp associated with it.\n\nIf the audit logs do not have a corresponding date and time associated with each event, this is a finding.","fix":"Configure the application or application server to include the date and the time of the event in the audit logs."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24143r493327_chk","severity":"medium","gid":"V-222473","rid":"SV-222473r879564_rule","stig_id":"APSC-DV-000980","gtitle":"SRG-APP-000096","fix_id":"F-24132r493328_fix","documentable":null,"legacy":["V-69429","SV-84051"],"cci":["CCI-000131"],"nist":["AU-3 b"]}},{"id":"SV-222474","code":"control 'SV-222474' do\n  title 'The application must produce audit records containing enough information to establish which component, feature or function of the application triggered the audit event.'\n  desc 'It is impossible to establish, correlate, and investigate the events relating to an incident if the details regarding the source of the event it not available.\n\nIn order to compile an accurate risk assessment, and provide forensic analysis, it is essential for security personnel to know where within the application the events occurred, such as which application component, application modules, filenames, and functionality.\n\nAssociating information about where the event occurred within the application provides a means of quickly investigating an attack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application.'\n  desc 'check', 'Review application administration and/or design documents.\n\nIdentify key aspects of application architecture objects and components, e.g., Web Server, Application server, Database server.\n\nInterview the application administrator and identify the log locations.\n\nAccess the application logs and review the log entries for events that indicate the application is auditing the internal components, objects, or functions of the application.\n\nConfirm the event logs provide information as to which component, feature, or functionality of the application triggered the event.\n\nExamples of the types of events to look for are as follows:\n\n- Application and Protocol events. e.g., Application loads or unloads and Protocol use.\n- Data Access events. e.g., Database connections.\n\nEvents could include reference to database library or executable initiating connectivity:\n\n- Middleware events. e.g., Source code initiating calls or being invoked.\n- Name of application modules being loaded or unloaded.\n- Library loads and unloads.\n- Application deployment activity.\n\nEvents written into the log must be able to be traced back to the originating component, feature or function name, service name, application name, library name etcetera in order to establish which aspect of the application triggered the event.\n\nIf the audit logs do not contain enough data in the logs to establish which component, feature or functionality of the application triggered the event, this is a finding.'\n  desc 'fix', 'Configure the application to log which component, feature or functionality of the application triggered the event.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24144r493330_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222474'\n  tag rid: 'SV-222474r879565_rule'\n  tag stig_id: 'APSC-DV-000990'\n  tag gtitle: 'SRG-APP-000097'\n  tag fix_id: 'F-24133r493331_fix'\n  tag 'documentable'\n  tag legacy: ['V-69431', 'SV-84053']\n  tag cci: ['CCI-000132']\n  tag nist: ['AU-3 c']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222474.rb"},"title":"The application must produce audit records containing enough information to establish which component, feature or function of the application triggered the audit event.","desc":"It is impossible to establish, correlate, and investigate the events relating to an incident if the details regarding the source of the event it not available.\n\nIn order to compile an accurate risk assessment, and provide forensic analysis, it is essential for security personnel to know where within the application the events occurred, such as which application component, application modules, filenames, and functionality.\n\nAssociating information about where the event occurred within the application provides a means of quickly investigating an attack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application.","descriptions":{"default":"It is impossible to establish, correlate, and investigate the events relating to an incident if the details regarding the source of the event it not available.\n\nIn order to compile an accurate risk assessment, and provide forensic analysis, it is essential for security personnel to know where within the application the events occurred, such as which application component, application modules, filenames, and functionality.\n\nAssociating information about where the event occurred within the application provides a means of quickly investigating an attack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application.","check":"Review application administration and/or design documents.\n\nIdentify key aspects of application architecture objects and components, e.g., Web Server, Application server, Database server.\n\nInterview the application administrator and identify the log locations.\n\nAccess the application logs and review the log entries for events that indicate the application is auditing the internal components, objects, or functions of the application.\n\nConfirm the event logs provide information as to which component, feature, or functionality of the application triggered the event.\n\nExamples of the types of events to look for are as follows:\n\n- Application and Protocol events. e.g., Application loads or unloads and Protocol use.\n- Data Access events. e.g., Database connections.\n\nEvents could include reference to database library or executable initiating connectivity:\n\n- Middleware events. e.g., Source code initiating calls or being invoked.\n- Name of application modules being loaded or unloaded.\n- Library loads and unloads.\n- Application deployment activity.\n\nEvents written into the log must be able to be traced back to the originating component, feature or function name, service name, application name, library name etcetera in order to establish which aspect of the application triggered the event.\n\nIf the audit logs do not contain enough data in the logs to establish which component, feature or functionality of the application triggered the event, this is a finding.","fix":"Configure the application to log which component, feature or functionality of the application triggered the event."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24144r493330_chk","severity":"medium","gid":"V-222474","rid":"SV-222474r879565_rule","stig_id":"APSC-DV-000990","gtitle":"SRG-APP-000097","fix_id":"F-24133r493331_fix","documentable":null,"legacy":["V-69431","SV-84053"],"cci":["CCI-000132"],"nist":["AU-3 c"]}},{"id":"SV-222475","code":"control 'SV-222475' do\n  title 'When using centralized logging; the application must include a unique identifier in order to distinguish itself from other application logs.'\n  desc \"Without establishing the source, it is impossible to establish, correlate, and investigate the events leading up to an outage or attack.\n\nIn the case of centralized logging, or other instances where log files are consolidated, there is risk that the application's log data could be co-mingled with other log data.  To address this issue, the application itself must be identified as well as the application host or client name. \n\nIn order to compile an accurate risk assessment, and provide forensic analysis, it is essential for security personnel to know the source of the event, particularly in the case of centralized logging.\n\nAssociating information about the source of the event within the application provides a means of investigating an attack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application.\"\n  desc 'check', 'If the application is logging locally and does not utilize a centralized logging solution, this requirement is not applicable.\n\nReview system documentation and identify log location.  Access the application logs.\n\nReview the application logs.\n\nEnsure the application is uniquely identified either within the logs themselves or via log storage mechanisms.\n\nEnsure the hosts or client names hosting the application are also identified.  Either hostname or IP address is acceptable.\n\nIf the application name and the hosts or client names are not identified, this is a finding.'\n  desc 'fix', 'Configure the application logs or the centralized log storage facility so the application name and the hosts hosting the application are uniquely identified in the logs.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24145r493333_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222475'\n  tag rid: 'SV-222475r879566_rule'\n  tag stig_id: 'APSC-DV-001000'\n  tag gtitle: 'SRG-APP-000098'\n  tag fix_id: 'F-24134r493334_fix'\n  tag 'documentable'\n  tag legacy: ['V-69433', 'SV-84055']\n  tag cci: ['CCI-000133']\n  tag nist: ['AU-3 d']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222475.rb"},"title":"When using centralized logging; the application must include a unique identifier in order to distinguish itself from other application logs.","desc":"Without establishing the source, it is impossible to establish, correlate, and investigate the events leading up to an outage or attack.\n\nIn the case of centralized logging, or other instances where log files are consolidated, there is risk that the application's log data could be co-mingled with other log data.  To address this issue, the application itself must be identified as well as the application host or client name. \n\nIn order to compile an accurate risk assessment, and provide forensic analysis, it is essential for security personnel to know the source of the event, particularly in the case of centralized logging.\n\nAssociating information about the source of the event within the application provides a means of investigating an attack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application.","descriptions":{"default":"Without establishing the source, it is impossible to establish, correlate, and investigate the events leading up to an outage or attack.\n\nIn the case of centralized logging, or other instances where log files are consolidated, there is risk that the application's log data could be co-mingled with other log data.  To address this issue, the application itself must be identified as well as the application host or client name. \n\nIn order to compile an accurate risk assessment, and provide forensic analysis, it is essential for security personnel to know the source of the event, particularly in the case of centralized logging.\n\nAssociating information about the source of the event within the application provides a means of investigating an attack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application.","check":"If the application is logging locally and does not utilize a centralized logging solution, this requirement is not applicable.\n\nReview system documentation and identify log location.  Access the application logs.\n\nReview the application logs.\n\nEnsure the application is uniquely identified either within the logs themselves or via log storage mechanisms.\n\nEnsure the hosts or client names hosting the application are also identified.  Either hostname or IP address is acceptable.\n\nIf the application name and the hosts or client names are not identified, this is a finding.","fix":"Configure the application logs or the centralized log storage facility so the application name and the hosts hosting the application are uniquely identified in the logs."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24145r493333_chk","severity":"medium","gid":"V-222475","rid":"SV-222475r879566_rule","stig_id":"APSC-DV-001000","gtitle":"SRG-APP-000098","fix_id":"F-24134r493334_fix","documentable":null,"legacy":["V-69433","SV-84055"],"cci":["CCI-000133"],"nist":["AU-3 d"]}},{"id":"SV-222476","code":"control 'SV-222476' do\n  title 'The application must produce audit records that contain information to establish the outcome of the events.'\n  desc 'Without information about the outcome of events, security personnel cannot make an accurate assessment as to whether an attack was successful or if changes were made to the security state of the system.\n\nEvent outcomes can include indicators of event success or failure and event-specific results (e.g., the security state of the information system after the event occurred). As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response.\n\nSuccessful application events are expected to far outnumber errors.   Therefore, success events may be implied by default and not specified in the logs if this behavior is documented.'\n  desc 'check', 'Review system and application documentation to identify application operation and function.\n\nAccess the application logs and review the logs to determine if the results of application operations are logged.\n\nSuccessful application events are expected to far outnumber errors.   Therefore, success events may be implied by default and not specified in the logs if this behavior is documented.\n\nThe outcome will be a log record that displays the application event/operation that occurred followed by the result of the operation such as \"ERROR\", \"FAILURE\", \"SUCCESS\" or \"PASS\".\n\nOperation outcomes may also be indicated by numeric code where a \"1\" might indicate success and a \"0\" may indicate operation failure.\n\nIf the application does not produce audit records that contain information regarding the results of application operations, this is a finding.'\n  desc 'fix', 'Configure the application to include the outcome of application functions or events.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24146r493336_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222476'\n  tag rid: 'SV-222476r879567_rule'\n  tag stig_id: 'APSC-DV-001010'\n  tag gtitle: 'SRG-APP-000099'\n  tag fix_id: 'F-24135r493337_fix'\n  tag 'documentable'\n  tag legacy: ['V-69435', 'SV-84057']\n  tag cci: ['CCI-000134']\n  tag nist: ['AU-3 e']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222476.rb"},"title":"The application must produce audit records that contain information to establish the outcome of the events.","desc":"Without information about the outcome of events, security personnel cannot make an accurate assessment as to whether an attack was successful or if changes were made to the security state of the system.\n\nEvent outcomes can include indicators of event success or failure and event-specific results (e.g., the security state of the information system after the event occurred). As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response.\n\nSuccessful application events are expected to far outnumber errors.   Therefore, success events may be implied by default and not specified in the logs if this behavior is documented.","descriptions":{"default":"Without information about the outcome of events, security personnel cannot make an accurate assessment as to whether an attack was successful or if changes were made to the security state of the system.\n\nEvent outcomes can include indicators of event success or failure and event-specific results (e.g., the security state of the information system after the event occurred). As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response.\n\nSuccessful application events are expected to far outnumber errors.   Therefore, success events may be implied by default and not specified in the logs if this behavior is documented.","check":"Review system and application documentation to identify application operation and function.\n\nAccess the application logs and review the logs to determine if the results of application operations are logged.\n\nSuccessful application events are expected to far outnumber errors.   Therefore, success events may be implied by default and not specified in the logs if this behavior is documented.\n\nThe outcome will be a log record that displays the application event/operation that occurred followed by the result of the operation such as \"ERROR\", \"FAILURE\", \"SUCCESS\" or \"PASS\".\n\nOperation outcomes may also be indicated by numeric code where a \"1\" might indicate success and a \"0\" may indicate operation failure.\n\nIf the application does not produce audit records that contain information regarding the results of application operations, this is a finding.","fix":"Configure the application to include the outcome of application functions or events."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24146r493336_chk","severity":"medium","gid":"V-222476","rid":"SV-222476r879567_rule","stig_id":"APSC-DV-001010","gtitle":"SRG-APP-000099","fix_id":"F-24135r493337_fix","documentable":null,"legacy":["V-69435","SV-84057"],"cci":["CCI-000134"],"nist":["AU-3 e"]}},{"id":"SV-222477","code":"control 'SV-222477' do\n  title 'The application must generate audit records containing information that establishes the identity of any individual or process associated with the event.'\n  desc 'Without information that establishes the identity of the subjects (i.e., users or processes acting on behalf of users) associated with the events, security personnel cannot determine responsibility for the potentially harmful event.\n\nEvent identifiers (if authenticated or otherwise known) include, but are not limited to, user database tables, primary key values, user names, or process identifiers.'\n  desc 'check', 'Review system documentation and discuss application operation with application administrator.\n\nIdentify application processes and application users.\nIdentify application components, e.g., application features framework and function. Identify server components, such as web server, database server.\n\nReview application logs. Ensure the application event logs include an identifier or identifiers that will allow an investigator to determine the user or the application process responsible for the application event.\n\nIf the event logs do not include the appropriate identifier or identifiers, this is a finding.'\n  desc 'fix', 'Configure the application to log the identity of the user and/or the process associated with the event.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24147r493339_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222477'\n  tag rid: 'SV-222477r879568_rule'\n  tag stig_id: 'APSC-DV-001020'\n  tag gtitle: 'SRG-APP-000100'\n  tag fix_id: 'F-24136r493340_fix'\n  tag 'documentable'\n  tag legacy: ['V-69437', 'SV-84059']\n  tag cci: ['CCI-001487']\n  tag nist: ['AU-3 f']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222477.rb"},"title":"The application must generate audit records containing information that establishes the identity of any individual or process associated with the event.","desc":"Without information that establishes the identity of the subjects (i.e., users or processes acting on behalf of users) associated with the events, security personnel cannot determine responsibility for the potentially harmful event.\n\nEvent identifiers (if authenticated or otherwise known) include, but are not limited to, user database tables, primary key values, user names, or process identifiers.","descriptions":{"default":"Without information that establishes the identity of the subjects (i.e., users or processes acting on behalf of users) associated with the events, security personnel cannot determine responsibility for the potentially harmful event.\n\nEvent identifiers (if authenticated or otherwise known) include, but are not limited to, user database tables, primary key values, user names, or process identifiers.","check":"Review system documentation and discuss application operation with application administrator.\n\nIdentify application processes and application users.\nIdentify application components, e.g., application features framework and function. Identify server components, such as web server, database server.\n\nReview application logs. Ensure the application event logs include an identifier or identifiers that will allow an investigator to determine the user or the application process responsible for the application event.\n\nIf the event logs do not include the appropriate identifier or identifiers, this is a finding.","fix":"Configure the application to log the identity of the user and/or the process associated with the event."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24147r493339_chk","severity":"medium","gid":"V-222477","rid":"SV-222477r879568_rule","stig_id":"APSC-DV-001020","gtitle":"SRG-APP-000100","fix_id":"F-24136r493340_fix","documentable":null,"legacy":["V-69437","SV-84059"],"cci":["CCI-001487"],"nist":["AU-3 f"]}},{"id":"SV-222478","code":"control 'SV-222478' do\n  title 'The application must generate audit records containing the full-text recording of privileged commands or the individual identities of group account users.'\n  desc 'Reconstruction of harmful events or forensic analysis is not possible if audit records do not contain enough information.\n\nOrganizations consider limiting the additional audit information to only that information explicitly needed for specific audit requirements. The additional information required is dependent on the type of information (i.e., sensitivity of the data and the environment within which it resides). At a minimum, the organization must audit either full-text recording of privileged commands or the individual identities of group users, or both. The organization must maintain audit trails in sufficient detail to reconstruct events to determine the cause and impact of compromise. \n\nIn addition, the application must have the capability to include organization-defined additional, more detailed information in the audit records for audit events.'\n  desc 'check', 'Review application documentation and interview application administrator. Identify audit log locations and review audit logs.\n\nAccess the system as a privileged user and execute privileged commands.\n\nReview the application logs and ensure that the logs contain all details of the actions performed.  \n\nIf a privileged command was typed within the application that command text must be included in the logs. Authentication information provided as part of the text must NOT be logged, just the commands.\n\nIf an action was performed, such as activating a check box, that action must be logged.\n\nReview group account users, review logs to determine if the individual users of group accounts are identified in the logs.\n\nIf the application does not log the full text recording of privileged commands or if the application does not identify and log the individuals associated with group accounts, this is a finding.'\n  desc 'fix', 'Configure the application to log the full text recording of privileged commands or the individual identities of group users.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24148r493342_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222478'\n  tag rid: 'SV-222478r879569_rule'\n  tag stig_id: 'APSC-DV-001030'\n  tag gtitle: 'SRG-APP-000101'\n  tag fix_id: 'F-24137r493343_fix'\n  tag 'documentable'\n  tag legacy: ['V-69439', 'SV-84061']\n  tag cci: ['CCI-000135']\n  tag nist: ['AU-3 (1)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222478.rb"},"title":"The application must generate audit records containing the full-text recording of privileged commands or the individual identities of group account users.","desc":"Reconstruction of harmful events or forensic analysis is not possible if audit records do not contain enough information.\n\nOrganizations consider limiting the additional audit information to only that information explicitly needed for specific audit requirements. The additional information required is dependent on the type of information (i.e., sensitivity of the data and the environment within which it resides). At a minimum, the organization must audit either full-text recording of privileged commands or the individual identities of group users, or both. The organization must maintain audit trails in sufficient detail to reconstruct events to determine the cause and impact of compromise. \n\nIn addition, the application must have the capability to include organization-defined additional, more detailed information in the audit records for audit events.","descriptions":{"default":"Reconstruction of harmful events or forensic analysis is not possible if audit records do not contain enough information.\n\nOrganizations consider limiting the additional audit information to only that information explicitly needed for specific audit requirements. The additional information required is dependent on the type of information (i.e., sensitivity of the data and the environment within which it resides). At a minimum, the organization must audit either full-text recording of privileged commands or the individual identities of group users, or both. The organization must maintain audit trails in sufficient detail to reconstruct events to determine the cause and impact of compromise. \n\nIn addition, the application must have the capability to include organization-defined additional, more detailed information in the audit records for audit events.","check":"Review application documentation and interview application administrator. Identify audit log locations and review audit logs.\n\nAccess the system as a privileged user and execute privileged commands.\n\nReview the application logs and ensure that the logs contain all details of the actions performed.  \n\nIf a privileged command was typed within the application that command text must be included in the logs. Authentication information provided as part of the text must NOT be logged, just the commands.\n\nIf an action was performed, such as activating a check box, that action must be logged.\n\nReview group account users, review logs to determine if the individual users of group accounts are identified in the logs.\n\nIf the application does not log the full text recording of privileged commands or if the application does not identify and log the individuals associated with group accounts, this is a finding.","fix":"Configure the application to log the full text recording of privileged commands or the individual identities of group users."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24148r493342_chk","severity":"medium","gid":"V-222478","rid":"SV-222478r879569_rule","stig_id":"APSC-DV-001030","gtitle":"SRG-APP-000101","fix_id":"F-24137r493343_fix","documentable":null,"legacy":["V-69439","SV-84061"],"cci":["CCI-000135"],"nist":["AU-3 (1)"]}},{"id":"SV-222479","code":"control 'SV-222479' do\n  title 'The application must implement transaction recovery logs when transaction based.'\n  desc 'Without required logging and access control, security issues related to data changes will not be identified. This could lead to security compromises such as data misuse, unauthorized changes, or unauthorized access.\n\nTransaction logs contain a sequential record of all changes to the database. Using a transaction log helps with maintaining application availability and aids in speedy recovery. Transactional logging should be enabled whenever the application database offers the transactional logging capability.'\n  desc 'check', 'Review the application documentation and interview the application administrator.  Have the application administrator provide configuration settings that demonstrate transaction logging is enabled.\n\nReview configuration settings for the location of transaction specific logs and verify transaction logs exist and the log records access and changes to the data.\n\nIf the application is not configured to utilize transaction logging, this is a finding.'\n  desc 'fix', 'Configure the application database to utilize transactional logging.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24149r493345_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222479'\n  tag rid: 'SV-222479r879569_rule'\n  tag stig_id: 'APSC-DV-001040'\n  tag gtitle: 'SRG-APP-000101'\n  tag fix_id: 'F-24138r493346_fix'\n  tag 'documentable'\n  tag legacy: ['V-69441', 'SV-84063']\n  tag cci: ['CCI-000135']\n  tag nist: ['AU-3 (1)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222479.rb"},"title":"The application must implement transaction recovery logs when transaction based.","desc":"Without required logging and access control, security issues related to data changes will not be identified. This could lead to security compromises such as data misuse, unauthorized changes, or unauthorized access.\n\nTransaction logs contain a sequential record of all changes to the database. Using a transaction log helps with maintaining application availability and aids in speedy recovery. Transactional logging should be enabled whenever the application database offers the transactional logging capability.","descriptions":{"default":"Without required logging and access control, security issues related to data changes will not be identified. This could lead to security compromises such as data misuse, unauthorized changes, or unauthorized access.\n\nTransaction logs contain a sequential record of all changes to the database. Using a transaction log helps with maintaining application availability and aids in speedy recovery. Transactional logging should be enabled whenever the application database offers the transactional logging capability.","check":"Review the application documentation and interview the application administrator.  Have the application administrator provide configuration settings that demonstrate transaction logging is enabled.\n\nReview configuration settings for the location of transaction specific logs and verify transaction logs exist and the log records access and changes to the data.\n\nIf the application is not configured to utilize transaction logging, this is a finding.","fix":"Configure the application database to utilize transactional logging."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24149r493345_chk","severity":"medium","gid":"V-222479","rid":"SV-222479r879569_rule","stig_id":"APSC-DV-001040","gtitle":"SRG-APP-000101","fix_id":"F-24138r493346_fix","documentable":null,"legacy":["V-69441","SV-84063"],"cci":["CCI-000135"],"nist":["AU-3 (1)"]}},{"id":"SV-222480","code":"control 'SV-222480' do\n  title 'The application must provide centralized management and configuration of the content to be captured in audit records generated by all application components.'\n  desc 'Without the ability to centrally manage the content captured in the audit records, identification, troubleshooting, and correlation of suspicious behavior would be difficult and could lead to a delayed or incomplete analysis of an ongoing attack.\n\nThis requirement requires that the content captured in audit records be managed from a central location (necessitating automation). Centralized management of audit records and logs provides for efficiency in maintenance and management of records, as well as the backup and archiving of those records. Application components requiring centralized audit log management must have the capability to support centralized management.\n\nThis requirement applies to centralized management applications or similar types of applications designed to manage and configure audit record capture.'\n  desc 'check', 'Review the application documentation and interview the application administrator to determine the logging architecture of the application.\n\nIf the application is configured to log application event entries to a centralized, enterprise based logging solution that meets this requirement, the requirement is not applicable.\n\nReview the application components and the log management capabilities of the application.\n\nVerify the application log management interface includes the ability to centrally manage the configuration of what is captured in the logs of all application components. \n\nIf the application does not provide the ability to centrally manage the content captured in the audit logs, this is a finding.'\n  desc 'fix', 'Configure the application to utilize a centralized log management system that provides the capability to configure the content of audit records.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24150r493348_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222480'\n  tag rid: 'SV-222480r879729_rule'\n  tag stig_id: 'APSC-DV-001050'\n  tag gtitle: 'SRG-APP-000356'\n  tag fix_id: 'F-24139r493349_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84065', 'V-69443']\n  tag cci: ['CCI-001844']\n  tag nist: ['AU-3 (2)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222480.rb"},"title":"The application must provide centralized management and configuration of the content to be captured in audit records generated by all application components.","desc":"Without the ability to centrally manage the content captured in the audit records, identification, troubleshooting, and correlation of suspicious behavior would be difficult and could lead to a delayed or incomplete analysis of an ongoing attack.\n\nThis requirement requires that the content captured in audit records be managed from a central location (necessitating automation). Centralized management of audit records and logs provides for efficiency in maintenance and management of records, as well as the backup and archiving of those records. Application components requiring centralized audit log management must have the capability to support centralized management.\n\nThis requirement applies to centralized management applications or similar types of applications designed to manage and configure audit record capture.","descriptions":{"default":"Without the ability to centrally manage the content captured in the audit records, identification, troubleshooting, and correlation of suspicious behavior would be difficult and could lead to a delayed or incomplete analysis of an ongoing attack.\n\nThis requirement requires that the content captured in audit records be managed from a central location (necessitating automation). Centralized management of audit records and logs provides for efficiency in maintenance and management of records, as well as the backup and archiving of those records. Application components requiring centralized audit log management must have the capability to support centralized management.\n\nThis requirement applies to centralized management applications or similar types of applications designed to manage and configure audit record capture.","check":"Review the application documentation and interview the application administrator to determine the logging architecture of the application.\n\nIf the application is configured to log application event entries to a centralized, enterprise based logging solution that meets this requirement, the requirement is not applicable.\n\nReview the application components and the log management capabilities of the application.\n\nVerify the application log management interface includes the ability to centrally manage the configuration of what is captured in the logs of all application components. \n\nIf the application does not provide the ability to centrally manage the content captured in the audit logs, this is a finding.","fix":"Configure the application to utilize a centralized log management system that provides the capability to configure the content of audit records."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24150r493348_chk","severity":"medium","gid":"V-222480","rid":"SV-222480r879729_rule","stig_id":"APSC-DV-001050","gtitle":"SRG-APP-000356","fix_id":"F-24139r493349_fix","documentable":null,"legacy":["SV-84065","V-69443"],"cci":["CCI-001844"],"nist":["AU-3 (2)"]}},{"id":"SV-222481","code":"control 'SV-222481' do\n  title 'The application must off-load audit records onto a different system or media than the system being audited.'\n  desc 'Information stored in one location is vulnerable to accidental or incidental deletion or alteration.  In addition, attackers often manipulate logs to hide or obfuscate their activity.\n\nThe goal is to off-load application logs to a separate server as quickly and efficiently as possible so as to mitigate these risks.  \n\nA centralized logging solution offering applications an enterprise designed and managed logging capability which is the desired solution.\n\nHowever, when a centralized logging solution is not an option due to the operational environment or other situations where the risk has been officially recognized and accepted, off-loading is a common process utilized to address this type of scenario.'\n  desc 'check', 'Review application documentation and interview application administrator.  Identify log functionality and locations of log files.  Obtain risk acceptance documentation and task scheduling information.\n\nIf the application is configured to utilize a centralized logging solution, this requirement is not applicable.\n\nEvaluate log management processes and determine if there are automated tasks that move the logs off of the system hosting the application.   \n\nVerify automated tasks are performed on an ISSO approved schedule (hourly, daily etc.).  Automation can be via scripting, log management oriented tools or other automated means.\n\nReview risk acceptance documentation for not utilizing a centralized logging solution.\n\nIf the logs are not automatically moved off the system as per approved schedule, or if there is no formal risk acceptance documentation, this is a finding.'\n  desc 'fix', 'Configure the application to off-load audit records onto a different system as per approved schedule.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24151r493351_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222481'\n  tag rid: 'SV-222481r879731_rule'\n  tag stig_id: 'APSC-DV-001070'\n  tag gtitle: 'SRG-APP-000358'\n  tag fix_id: 'F-24140r493352_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84067', 'V-69445']\n  tag cci: ['CCI-001851']\n  tag nist: ['AU-4 (1)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222481.rb"},"title":"The application must off-load audit records onto a different system or media than the system being audited.","desc":"Information stored in one location is vulnerable to accidental or incidental deletion or alteration.  In addition, attackers often manipulate logs to hide or obfuscate their activity.\n\nThe goal is to off-load application logs to a separate server as quickly and efficiently as possible so as to mitigate these risks.  \n\nA centralized logging solution offering applications an enterprise designed and managed logging capability which is the desired solution.\n\nHowever, when a centralized logging solution is not an option due to the operational environment or other situations where the risk has been officially recognized and accepted, off-loading is a common process utilized to address this type of scenario.","descriptions":{"default":"Information stored in one location is vulnerable to accidental or incidental deletion or alteration.  In addition, attackers often manipulate logs to hide or obfuscate their activity.\n\nThe goal is to off-load application logs to a separate server as quickly and efficiently as possible so as to mitigate these risks.  \n\nA centralized logging solution offering applications an enterprise designed and managed logging capability which is the desired solution.\n\nHowever, when a centralized logging solution is not an option due to the operational environment or other situations where the risk has been officially recognized and accepted, off-loading is a common process utilized to address this type of scenario.","check":"Review application documentation and interview application administrator.  Identify log functionality and locations of log files.  Obtain risk acceptance documentation and task scheduling information.\n\nIf the application is configured to utilize a centralized logging solution, this requirement is not applicable.\n\nEvaluate log management processes and determine if there are automated tasks that move the logs off of the system hosting the application.   \n\nVerify automated tasks are performed on an ISSO approved schedule (hourly, daily etc.).  Automation can be via scripting, log management oriented tools or other automated means.\n\nReview risk acceptance documentation for not utilizing a centralized logging solution.\n\nIf the logs are not automatically moved off the system as per approved schedule, or if there is no formal risk acceptance documentation, this is a finding.","fix":"Configure the application to off-load audit records onto a different system as per approved schedule."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24151r493351_chk","severity":"medium","gid":"V-222481","rid":"SV-222481r879731_rule","stig_id":"APSC-DV-001070","gtitle":"SRG-APP-000358","fix_id":"F-24140r493352_fix","documentable":null,"legacy":["SV-84067","V-69445"],"cci":["CCI-001851"],"nist":["AU-4 (1)"]}},{"id":"SV-222482","code":"control 'SV-222482' do\n  title 'The application must be configured to write application logs to a centralized log repository.'\n  desc 'Information stored in one location is vulnerable to accidental or incidental deletion or alteration.  In addition, attackers often manipulate logs to hide or obfuscate their activity.\n\nOff-loading is a common process in information systems with limited audit storage capacity or when trying to assure log availability and integrity.\n\nThis requirement is meant to address space limitations and integrity issues that can be encountered when storing logs on the local server.\n\nThe goal of the requirement being to offload application logs to a separate server as quickly and efficiently as possible so as to mitigate these risks.'\n  desc 'check', 'Review application documentation and interview application administrator.\n\nEvaluate application log management processes and determine if the system is configured to utilize a centralized log management system for the hosting and management of application audit logs.\n\nIf the system is not configured to write the application logs to the centralized log management repository in an expeditious manner, this is a finding.'\n  desc 'fix', 'Configure the application to utilize a centralized log repository and ensure the logs are off-loaded from the application system as quickly as possible.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24152r493354_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222482'\n  tag rid: 'SV-222482r879886_rule'\n  tag stig_id: 'APSC-DV-001080'\n  tag gtitle: 'SRG-APP-000515'\n  tag fix_id: 'F-24141r493355_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84069', 'V-69447']\n  tag cci: ['CCI-001851']\n  tag nist: ['AU-4 (1)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222482.rb"},"title":"The application must be configured to write application logs to a centralized log repository.","desc":"Information stored in one location is vulnerable to accidental or incidental deletion or alteration.  In addition, attackers often manipulate logs to hide or obfuscate their activity.\n\nOff-loading is a common process in information systems with limited audit storage capacity or when trying to assure log availability and integrity.\n\nThis requirement is meant to address space limitations and integrity issues that can be encountered when storing logs on the local server.\n\nThe goal of the requirement being to offload application logs to a separate server as quickly and efficiently as possible so as to mitigate these risks.","descriptions":{"default":"Information stored in one location is vulnerable to accidental or incidental deletion or alteration.  In addition, attackers often manipulate logs to hide or obfuscate their activity.\n\nOff-loading is a common process in information systems with limited audit storage capacity or when trying to assure log availability and integrity.\n\nThis requirement is meant to address space limitations and integrity issues that can be encountered when storing logs on the local server.\n\nThe goal of the requirement being to offload application logs to a separate server as quickly and efficiently as possible so as to mitigate these risks.","check":"Review application documentation and interview application administrator.\n\nEvaluate application log management processes and determine if the system is configured to utilize a centralized log management system for the hosting and management of application audit logs.\n\nIf the system is not configured to write the application logs to the centralized log management repository in an expeditious manner, this is a finding.","fix":"Configure the application to utilize a centralized log repository and ensure the logs are off-loaded from the application system as quickly as possible."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24152r493354_chk","severity":"medium","gid":"V-222482","rid":"SV-222482r879886_rule","stig_id":"APSC-DV-001080","gtitle":"SRG-APP-000515","fix_id":"F-24141r493355_fix","documentable":null,"legacy":["SV-84069","V-69447"],"cci":["CCI-001851"],"nist":["AU-4 (1)"]}},{"id":"SV-222483","code":"control 'SV-222483' do\n  title 'The application must provide an immediate warning to the SA and ISSO (at a minimum) when allocated audit record storage volume reaches 75% of repository maximum audit record storage capacity.'\n  desc 'If security personnel are not notified immediately upon storage volume utilization reaching 75%, they are unable to plan for storage capacity expansion.\n\nDue to variances in application usage and audit records storage usage, the SA and the ISSO may evaluate usage patterns and determine if a higher percentage of usage is warranted before an alarm is sent.  The intent of the requirement is to provide a warning that will allow the SA and ISSO ample time to plan and implement an audit storage capacity expansion that will provide for the increased audit log storage requirements without forcing an emergency or otherwise negatively impacting the recording of audit events.\n\nThe requirement will take into account a reasonable amount of processing time such as 1 or 2 minutes that may be required of the system in order to satisfy the requirement.'\n  desc 'check', 'Review system documentation and interview application administrator for details regarding logging configuration. \n\nIf the application utilizes a centralized logging system that provides storage capacity alarming, this requirement is not applicable.\n\nIdentify application alarming capability relating to storage capacity alarming for the log repository. Coordinate with the appropriate personnel regarding the generation of test alarms.\n\nReview log alarm settings and ensure audit log storage capacity alarming is enabled and set to alarm when the storage threshold exceeds 75% of disk storage capacity or the capacity value the SA and ISSO have determined will provide adequate time to plan for capacity expansion.\n\nEnsure the alarm will be sent to the ISSO and the application administrator when the utilization threshold is exceeded by changing the threshold settings to below the current disk space utilization. An alarm should be triggered at that point and forwarded to the ISSO and the SA/application admin.\n\nIf the application is not configured to send an alarm when storage volume exceeds 75% of disc capacity or if the designated alarm recipients did not receive an alarm when the test was conducted, this is a finding.'\n  desc 'fix', 'Configure the application to send an immediate alarm to the application admin/SA and the ISSO when the allocated log storage capacity exceeds 75% of usage or exceeds the capacity value the SA and ISSO have determined will provide adequate time to plan for capacity expansion.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-36239r602282_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222483'\n  tag rid: 'SV-222483r879732_rule'\n  tag stig_id: 'APSC-DV-001090'\n  tag gtitle: 'SRG-APP-000359'\n  tag fix_id: 'F-36205r865216_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84071', 'V-69449']\n  tag cci: ['CCI-001855']\n  tag nist: ['AU-5 (1)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222483.rb"},"title":"The application must provide an immediate warning to the SA and ISSO (at a minimum) when allocated audit record storage volume reaches 75% of repository maximum audit record storage capacity.","desc":"If security personnel are not notified immediately upon storage volume utilization reaching 75%, they are unable to plan for storage capacity expansion.\n\nDue to variances in application usage and audit records storage usage, the SA and the ISSO may evaluate usage patterns and determine if a higher percentage of usage is warranted before an alarm is sent.  The intent of the requirement is to provide a warning that will allow the SA and ISSO ample time to plan and implement an audit storage capacity expansion that will provide for the increased audit log storage requirements without forcing an emergency or otherwise negatively impacting the recording of audit events.\n\nThe requirement will take into account a reasonable amount of processing time such as 1 or 2 minutes that may be required of the system in order to satisfy the requirement.","descriptions":{"default":"If security personnel are not notified immediately upon storage volume utilization reaching 75%, they are unable to plan for storage capacity expansion.\n\nDue to variances in application usage and audit records storage usage, the SA and the ISSO may evaluate usage patterns and determine if a higher percentage of usage is warranted before an alarm is sent.  The intent of the requirement is to provide a warning that will allow the SA and ISSO ample time to plan and implement an audit storage capacity expansion that will provide for the increased audit log storage requirements without forcing an emergency or otherwise negatively impacting the recording of audit events.\n\nThe requirement will take into account a reasonable amount of processing time such as 1 or 2 minutes that may be required of the system in order to satisfy the requirement.","check":"Review system documentation and interview application administrator for details regarding logging configuration. \n\nIf the application utilizes a centralized logging system that provides storage capacity alarming, this requirement is not applicable.\n\nIdentify application alarming capability relating to storage capacity alarming for the log repository. Coordinate with the appropriate personnel regarding the generation of test alarms.\n\nReview log alarm settings and ensure audit log storage capacity alarming is enabled and set to alarm when the storage threshold exceeds 75% of disk storage capacity or the capacity value the SA and ISSO have determined will provide adequate time to plan for capacity expansion.\n\nEnsure the alarm will be sent to the ISSO and the application administrator when the utilization threshold is exceeded by changing the threshold settings to below the current disk space utilization. An alarm should be triggered at that point and forwarded to the ISSO and the SA/application admin.\n\nIf the application is not configured to send an alarm when storage volume exceeds 75% of disc capacity or if the designated alarm recipients did not receive an alarm when the test was conducted, this is a finding.","fix":"Configure the application to send an immediate alarm to the application admin/SA and the ISSO when the allocated log storage capacity exceeds 75% of usage or exceeds the capacity value the SA and ISSO have determined will provide adequate time to plan for capacity expansion."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-36239r602282_chk","severity":"medium","gid":"V-222483","rid":"SV-222483r879732_rule","stig_id":"APSC-DV-001090","gtitle":"SRG-APP-000359","fix_id":"F-36205r865216_fix","documentable":null,"legacy":["SV-84071","V-69449"],"cci":["CCI-001855"],"nist":["AU-5 (1)"]}},{"id":"SV-222484","code":"control 'SV-222484' do\n  title 'Applications categorized as having a moderate or high impact must provide an immediate real-time alert to the SA and ISSO (at a minimum) for all audit failure events.'\n  desc 'Applications that are categorized as having a high or moderate impact on the organization must provide immediate alerts when encountering failures with the application audit system.  It is critical for the appropriate personnel to be aware if a system is at risk of failing to process audit logs as required. Without this notification, the security personnel may be unaware of an impending failure of the audit capability and system operation may be adversely affected. \n\nAudit processing failures include software/hardware errors, failures in the audit capturing mechanisms, and audit storage capacity being reached or exceeded.\n\nWhile alerts provide organizations with urgent messages containing important information regarding application audit log activity, real-time alerts provide these messages at information technology speed (i.e., the time from event detection to alert occurs in seconds or no more than 1-2 minutes).  \n\nWithout a real-time alert, security personnel may be unaware of an impending failure of the audit capability and system operation may be adversely affected.'\n  desc 'check', 'Review system documentation and interview application administrator for details regarding application security categorization and logging configuration.\n\nIf the application utilizes a centralized logging system that provides the real-time alarms, this requirement is not applicable.\n\nReview application log alert configuration.\n\nIdentify audit failure events and associated alarming configuration.\n\nIf the application is categorized as having a moderate or high impact and is not configured to provide a real-time alert that indicates the audit system has failed or is failing, this is a finding.'\n  desc 'fix', 'Configure the log alerts to send an alarm when the audit system is in danger of failing or has failed.  \n\nConfigure the log alerts to be immediately sent to the application admin/SA and ISSO.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24154r493360_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222484'\n  tag rid: 'SV-222484r879733_rule'\n  tag stig_id: 'APSC-DV-001100'\n  tag gtitle: 'SRG-APP-000360'\n  tag fix_id: 'F-24143r493361_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84073', 'V-69451']\n  tag cci: ['CCI-001858']\n  tag nist: ['AU-5 (2)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222484.rb"},"title":"Applications categorized as having a moderate or high impact must provide an immediate real-time alert to the SA and ISSO (at a minimum) for all audit failure events.","desc":"Applications that are categorized as having a high or moderate impact on the organization must provide immediate alerts when encountering failures with the application audit system.  It is critical for the appropriate personnel to be aware if a system is at risk of failing to process audit logs as required. Without this notification, the security personnel may be unaware of an impending failure of the audit capability and system operation may be adversely affected. \n\nAudit processing failures include software/hardware errors, failures in the audit capturing mechanisms, and audit storage capacity being reached or exceeded.\n\nWhile alerts provide organizations with urgent messages containing important information regarding application audit log activity, real-time alerts provide these messages at information technology speed (i.e., the time from event detection to alert occurs in seconds or no more than 1-2 minutes).  \n\nWithout a real-time alert, security personnel may be unaware of an impending failure of the audit capability and system operation may be adversely affected.","descriptions":{"default":"Applications that are categorized as having a high or moderate impact on the organization must provide immediate alerts when encountering failures with the application audit system.  It is critical for the appropriate personnel to be aware if a system is at risk of failing to process audit logs as required. Without this notification, the security personnel may be unaware of an impending failure of the audit capability and system operation may be adversely affected. \n\nAudit processing failures include software/hardware errors, failures in the audit capturing mechanisms, and audit storage capacity being reached or exceeded.\n\nWhile alerts provide organizations with urgent messages containing important information regarding application audit log activity, real-time alerts provide these messages at information technology speed (i.e., the time from event detection to alert occurs in seconds or no more than 1-2 minutes).  \n\nWithout a real-time alert, security personnel may be unaware of an impending failure of the audit capability and system operation may be adversely affected.","check":"Review system documentation and interview application administrator for details regarding application security categorization and logging configuration.\n\nIf the application utilizes a centralized logging system that provides the real-time alarms, this requirement is not applicable.\n\nReview application log alert configuration.\n\nIdentify audit failure events and associated alarming configuration.\n\nIf the application is categorized as having a moderate or high impact and is not configured to provide a real-time alert that indicates the audit system has failed or is failing, this is a finding.","fix":"Configure the log alerts to send an alarm when the audit system is in danger of failing or has failed.  \n\nConfigure the log alerts to be immediately sent to the application admin/SA and ISSO."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24154r493360_chk","severity":"medium","gid":"V-222484","rid":"SV-222484r879733_rule","stig_id":"APSC-DV-001100","gtitle":"SRG-APP-000360","fix_id":"F-24143r493361_fix","documentable":null,"legacy":["SV-84073","V-69451"],"cci":["CCI-001858"],"nist":["AU-5 (2)"]}},{"id":"SV-222485","code":"control 'SV-222485' do\n  title 'The application must alert the ISSO and SA (at a minimum) in the event of an audit processing failure.'\n  desc 'It is critical for the appropriate personnel to be aware if a system is at risk of failing to process audit logs as required. Without this notification, the security personnel may be unaware of an impending failure of the audit capability and system operation may be adversely affected. \n\nAudit processing failures include software/hardware errors, failures in the audit capturing mechanisms, and audit storage capacity being reached or exceeded.\n\nThis requirement applies to each audit data storage repository (i.e., distinct information system component where audit records are stored), the centralized audit storage capacity of organizations (i.e., all audit data storage repositories combined), or both.'\n  desc 'check', 'Review system documentation and interview application administrator for details regarding logging configuration.\n\nIf the application utilizes a centralized logging system that provides the audit processing failure alarms, this requirement is not applicable.\n\nIdentify application alarming capability regarding audit processing failure events.\n\nVerify the application is configured to alarm when the auditing system fails.\n\nExample alarm events include but are not limited to: \n\nhardware failure events\nfailures to capture audit record events\naudit storage errors\n\nIf the application is not configured to alarm on alerts that indicate the audit system has failed or is failing, this is a finding.'\n  desc 'fix', 'Configure the application to send an alarm in the event the audit system has failed or is failing.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24155r493363_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222485'\n  tag rid: 'SV-222485r879570_rule'\n  tag stig_id: 'APSC-DV-001110'\n  tag gtitle: 'SRG-APP-000108'\n  tag fix_id: 'F-24144r493364_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84075', 'V-69453']\n  tag cci: ['CCI-000139']\n  tag nist: ['AU-5 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222485.rb"},"title":"The application must alert the ISSO and SA (at a minimum) in the event of an audit processing failure.","desc":"It is critical for the appropriate personnel to be aware if a system is at risk of failing to process audit logs as required. Without this notification, the security personnel may be unaware of an impending failure of the audit capability and system operation may be adversely affected. \n\nAudit processing failures include software/hardware errors, failures in the audit capturing mechanisms, and audit storage capacity being reached or exceeded.\n\nThis requirement applies to each audit data storage repository (i.e., distinct information system component where audit records are stored), the centralized audit storage capacity of organizations (i.e., all audit data storage repositories combined), or both.","descriptions":{"default":"It is critical for the appropriate personnel to be aware if a system is at risk of failing to process audit logs as required. Without this notification, the security personnel may be unaware of an impending failure of the audit capability and system operation may be adversely affected. \n\nAudit processing failures include software/hardware errors, failures in the audit capturing mechanisms, and audit storage capacity being reached or exceeded.\n\nThis requirement applies to each audit data storage repository (i.e., distinct information system component where audit records are stored), the centralized audit storage capacity of organizations (i.e., all audit data storage repositories combined), or both.","check":"Review system documentation and interview application administrator for details regarding logging configuration.\n\nIf the application utilizes a centralized logging system that provides the audit processing failure alarms, this requirement is not applicable.\n\nIdentify application alarming capability regarding audit processing failure events.\n\nVerify the application is configured to alarm when the auditing system fails.\n\nExample alarm events include but are not limited to: \n\nhardware failure events\nfailures to capture audit record events\naudit storage errors\n\nIf the application is not configured to alarm on alerts that indicate the audit system has failed or is failing, this is a finding.","fix":"Configure the application to send an alarm in the event the audit system has failed or is failing."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24155r493363_chk","severity":"medium","gid":"V-222485","rid":"SV-222485r879570_rule","stig_id":"APSC-DV-001110","gtitle":"SRG-APP-000108","fix_id":"F-24144r493364_fix","documentable":null,"legacy":["SV-84075","V-69453"],"cci":["CCI-000139"],"nist":["AU-5 a"]}},{"id":"SV-222486","code":"control 'SV-222486' do\n  title 'The application must shut down by default upon audit failure (unless availability is an overriding concern).'\n  desc 'It is critical that when the application is at risk of failing to process audit logs as required, it take action to mitigate the failure. Audit processing failures include: software/hardware errors; failures in the audit capturing mechanisms; and audit storage capacity being reached or exceeded. Responses to audit failure depend upon the nature of the failure mode.\n\nWhen availability is an overriding concern, other approved actions in response to an audit failure are as follows: \n\n(i) If the failure was caused by the lack of audit record storage capacity, the application must continue generating audit records if possible (automatically restarting the audit service if necessary), overwriting the oldest audit records in a first-in-first-out manner.\n\n(ii) If audit records are sent to a centralized collection server and communication with this server is lost or the server fails, the application must queue audit records locally until communication is restored or until the audit records are retrieved manually. Upon restoration of the connection to the centralized collection server, action should be taken to synchronize the local audit data with the collection server.'\n  desc 'check', 'Review system documentation and interview application administrator for details regarding logging configuration.\n\nIdentify application shut down capability regarding audit processing failure events.  Locate and verify application logging settings that specify the application will halt processing on detected audit failure.\n\nIf ISSO approval to continue operating and not shut down the application upon an audit failure exists and is documented, validate the application is configured as follows:\n\nIf logging locally and the failure is attributed to a lack of disk space:\n\nEnsure the application is configured to overwrite the oldest logs first so as to maintain the most up to date audit events in the event of an audit failure.\n\nWhen logging centrally:\n\nEnsure the application is configured to locally spool/queue audit events in the event an audit failure is detected with the centralized system.\n\nIf the application does not shut down processing when an audit failure is detected, or if the application does not take steps needed to ensure audit events are not lost due to audit failure, this is a finding.'\n  desc 'fix', 'Configure the application to cease processing if the audit system fails or configure the application to continue logging in a manner that compensates for the audit failure.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24156r493366_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222486'\n  tag rid: 'SV-222486r879571_rule'\n  tag stig_id: 'APSC-DV-001120'\n  tag gtitle: 'SRG-APP-000109'\n  tag fix_id: 'F-24145r493367_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84077', 'V-69455']\n  tag cci: ['CCI-000140']\n  tag nist: ['AU-5 b']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222486.rb"},"title":"The application must shut down by default upon audit failure (unless availability is an overriding concern).","desc":"It is critical that when the application is at risk of failing to process audit logs as required, it take action to mitigate the failure. Audit processing failures include: software/hardware errors; failures in the audit capturing mechanisms; and audit storage capacity being reached or exceeded. Responses to audit failure depend upon the nature of the failure mode.\n\nWhen availability is an overriding concern, other approved actions in response to an audit failure are as follows: \n\n(i) If the failure was caused by the lack of audit record storage capacity, the application must continue generating audit records if possible (automatically restarting the audit service if necessary), overwriting the oldest audit records in a first-in-first-out manner.\n\n(ii) If audit records are sent to a centralized collection server and communication with this server is lost or the server fails, the application must queue audit records locally until communication is restored or until the audit records are retrieved manually. Upon restoration of the connection to the centralized collection server, action should be taken to synchronize the local audit data with the collection server.","descriptions":{"default":"It is critical that when the application is at risk of failing to process audit logs as required, it take action to mitigate the failure. Audit processing failures include: software/hardware errors; failures in the audit capturing mechanisms; and audit storage capacity being reached or exceeded. Responses to audit failure depend upon the nature of the failure mode.\n\nWhen availability is an overriding concern, other approved actions in response to an audit failure are as follows: \n\n(i) If the failure was caused by the lack of audit record storage capacity, the application must continue generating audit records if possible (automatically restarting the audit service if necessary), overwriting the oldest audit records in a first-in-first-out manner.\n\n(ii) If audit records are sent to a centralized collection server and communication with this server is lost or the server fails, the application must queue audit records locally until communication is restored or until the audit records are retrieved manually. Upon restoration of the connection to the centralized collection server, action should be taken to synchronize the local audit data with the collection server.","check":"Review system documentation and interview application administrator for details regarding logging configuration.\n\nIdentify application shut down capability regarding audit processing failure events.  Locate and verify application logging settings that specify the application will halt processing on detected audit failure.\n\nIf ISSO approval to continue operating and not shut down the application upon an audit failure exists and is documented, validate the application is configured as follows:\n\nIf logging locally and the failure is attributed to a lack of disk space:\n\nEnsure the application is configured to overwrite the oldest logs first so as to maintain the most up to date audit events in the event of an audit failure.\n\nWhen logging centrally:\n\nEnsure the application is configured to locally spool/queue audit events in the event an audit failure is detected with the centralized system.\n\nIf the application does not shut down processing when an audit failure is detected, or if the application does not take steps needed to ensure audit events are not lost due to audit failure, this is a finding.","fix":"Configure the application to cease processing if the audit system fails or configure the application to continue logging in a manner that compensates for the audit failure."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24156r493366_chk","severity":"medium","gid":"V-222486","rid":"SV-222486r879571_rule","stig_id":"APSC-DV-001120","gtitle":"SRG-APP-000109","fix_id":"F-24145r493367_fix","documentable":null,"legacy":["SV-84077","V-69455"],"cci":["CCI-000140"],"nist":["AU-5 b"]}},{"id":"SV-222487","code":"control 'SV-222487' do\n  title 'The application must provide the capability to centrally review and analyze audit records from multiple components within the system.'\n  desc 'Successful incident response and auditing relies on timely, accurate system information and analysis in order to allow the organization to identify and respond to potential incidents in a proficient manner. If the application does not provide the ability to centrally review the application logs, forensic analysis is negatively impacted.\n\nSegregation of logging data to multiple disparate computer systems is counterproductive and makes log analysis and log event alarming difficult to implement and manage, particularly when the system or application has multiple logging components written to different locations or systems.\n\nAutomated mechanisms for centralized reviews and analyses include, for example, Security Information Management products.'\n  desc 'check', \"Review system documentation and interview application administrator for details regarding application architecture and logging configuration.  Identify the application components, the logs that are associated with the components and the locations of the logs.\n\nIf the application utilizes a centralized logging system that provides the capability to review the log files from one central location, this requirement is not applicable.\n\nAccess the application's log management utility and review the log files.  Ensure all of the applications logs are reviewable from within the centralized log management function and access to other systems in order to review application logs are not required.\n\nIf all of the application logs are not reviewable from a central location, this is a finding.\"\n  desc 'fix', 'Configure the application so all of the applications logs are available for review from one centralized location.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24157r493369_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222487'\n  tag rid: 'SV-222487r879572_rule'\n  tag stig_id: 'APSC-DV-001130'\n  tag gtitle: 'SRG-APP-000111'\n  tag fix_id: 'F-24146r493370_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84079', 'V-69457']\n  tag cci: ['CCI-000154']\n  tag nist: ['AU-6 (4)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222487.rb"},"title":"The application must provide the capability to centrally review and analyze audit records from multiple components within the system.","desc":"Successful incident response and auditing relies on timely, accurate system information and analysis in order to allow the organization to identify and respond to potential incidents in a proficient manner. If the application does not provide the ability to centrally review the application logs, forensic analysis is negatively impacted.\n\nSegregation of logging data to multiple disparate computer systems is counterproductive and makes log analysis and log event alarming difficult to implement and manage, particularly when the system or application has multiple logging components written to different locations or systems.\n\nAutomated mechanisms for centralized reviews and analyses include, for example, Security Information Management products.","descriptions":{"default":"Successful incident response and auditing relies on timely, accurate system information and analysis in order to allow the organization to identify and respond to potential incidents in a proficient manner. If the application does not provide the ability to centrally review the application logs, forensic analysis is negatively impacted.\n\nSegregation of logging data to multiple disparate computer systems is counterproductive and makes log analysis and log event alarming difficult to implement and manage, particularly when the system or application has multiple logging components written to different locations or systems.\n\nAutomated mechanisms for centralized reviews and analyses include, for example, Security Information Management products.","check":"Review system documentation and interview application administrator for details regarding application architecture and logging configuration.  Identify the application components, the logs that are associated with the components and the locations of the logs.\n\nIf the application utilizes a centralized logging system that provides the capability to review the log files from one central location, this requirement is not applicable.\n\nAccess the application's log management utility and review the log files.  Ensure all of the applications logs are reviewable from within the centralized log management function and access to other systems in order to review application logs are not required.\n\nIf all of the application logs are not reviewable from a central location, this is a finding.","fix":"Configure the application so all of the applications logs are available for review from one centralized location."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24157r493369_chk","severity":"medium","gid":"V-222487","rid":"SV-222487r879572_rule","stig_id":"APSC-DV-001130","gtitle":"SRG-APP-000111","fix_id":"F-24146r493370_fix","documentable":null,"legacy":["SV-84079","V-69457"],"cci":["CCI-000154"],"nist":["AU-6 (4)"]}},{"id":"SV-222488","code":"control 'SV-222488' do\n  title 'The application must provide the capability to filter audit records for events of interest based upon organization-defined criteria.'\n  desc 'The ability to specify the event criteria that are of interest provides the persons reviewing the logs with the ability to quickly isolate and identify these events without having to review entries that are of little or no consequence to the investigation. Without this capability, forensic investigations are impeded.\n\nEvents of interest can be identified by the content of specific audit record fields including, for example, identities of individuals, event types, event locations, event times, event dates, system resources involved, IP addresses involved, or information objects accessed. Organizations may define audit event criteria to any degree of granularity required, for example, locations selectable by general networking location (e.g., by network or subnetwork) or selectable by specific information system component. This requires applications to provide the capability to customize audit record reports based on organization-defined criteria.'\n  desc 'check', 'Review the system documentation and interview the application administrator for details regarding application architecture and logging configuration.\n\nIdentify the application components and the logs associated with the components as well as the locations of the logs.\n\nIf the application utilizes a centralized logging system that provides the capability to filter log events based upon the following events, this requirement is not applicable.\n\nReview the application log management utility.\n\nEnsure the application provides the ability to filter on audit events based upon the following minimum criteria:\n\nUsers: e.g., specific users or groups\nEvent types:\nEvent dates and time:\nSystem resources involved: e.g., application components or modules.\nIP addresses:\nInformation objects accessed:\nEvent level categories: e.g., high, critical, warning, error\nKey words: e.g., a specific search string\n\nAdditional details may be logged as needed or prescribed by operational requirements.\n\nIf the application does not provide the ability to filter audit events, this is a finding.'\n  desc 'fix', 'Configure the application filters to search event logs based on defined criteria.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24158r493372_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222488'\n  tag rid: 'SV-222488r879574_rule'\n  tag stig_id: 'APSC-DV-001140'\n  tag gtitle: 'SRG-APP-000115'\n  tag fix_id: 'F-24147r493373_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84081', 'V-69459']\n  tag cci: ['CCI-000158']\n  tag nist: ['AU-7 (1)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222488.rb"},"title":"The application must provide the capability to filter audit records for events of interest based upon organization-defined criteria.","desc":"The ability to specify the event criteria that are of interest provides the persons reviewing the logs with the ability to quickly isolate and identify these events without having to review entries that are of little or no consequence to the investigation. Without this capability, forensic investigations are impeded.\n\nEvents of interest can be identified by the content of specific audit record fields including, for example, identities of individuals, event types, event locations, event times, event dates, system resources involved, IP addresses involved, or information objects accessed. Organizations may define audit event criteria to any degree of granularity required, for example, locations selectable by general networking location (e.g., by network or subnetwork) or selectable by specific information system component. This requires applications to provide the capability to customize audit record reports based on organization-defined criteria.","descriptions":{"default":"The ability to specify the event criteria that are of interest provides the persons reviewing the logs with the ability to quickly isolate and identify these events without having to review entries that are of little or no consequence to the investigation. Without this capability, forensic investigations are impeded.\n\nEvents of interest can be identified by the content of specific audit record fields including, for example, identities of individuals, event types, event locations, event times, event dates, system resources involved, IP addresses involved, or information objects accessed. Organizations may define audit event criteria to any degree of granularity required, for example, locations selectable by general networking location (e.g., by network or subnetwork) or selectable by specific information system component. This requires applications to provide the capability to customize audit record reports based on organization-defined criteria.","check":"Review the system documentation and interview the application administrator for details regarding application architecture and logging configuration.\n\nIdentify the application components and the logs associated with the components as well as the locations of the logs.\n\nIf the application utilizes a centralized logging system that provides the capability to filter log events based upon the following events, this requirement is not applicable.\n\nReview the application log management utility.\n\nEnsure the application provides the ability to filter on audit events based upon the following minimum criteria:\n\nUsers: e.g., specific users or groups\nEvent types:\nEvent dates and time:\nSystem resources involved: e.g., application components or modules.\nIP addresses:\nInformation objects accessed:\nEvent level categories: e.g., high, critical, warning, error\nKey words: e.g., a specific search string\n\nAdditional details may be logged as needed or prescribed by operational requirements.\n\nIf the application does not provide the ability to filter audit events, this is a finding.","fix":"Configure the application filters to search event logs based on defined criteria."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24158r493372_chk","severity":"medium","gid":"V-222488","rid":"SV-222488r879574_rule","stig_id":"APSC-DV-001140","gtitle":"SRG-APP-000115","fix_id":"F-24147r493373_fix","documentable":null,"legacy":["SV-84081","V-69459"],"cci":["CCI-000158"],"nist":["AU-7 (1)"]}},{"id":"SV-222489","code":"control 'SV-222489' do\n  title 'The application must provide an audit reduction capability that supports on-demand reporting requirements.'\n  desc \"The ability to generate on-demand reports, including after the audit data has been subjected to audit reduction, greatly facilitates the organization's ability to generate incident reports as needed to better handle larger-scale or more complex security incidents.\n\nAudit reduction is a process that manipulates collected audit information and organizes such information in a summary format that is more meaningful to analysts. The report generation capability provided by the application must support on-demand (i.e., customizable, ad-hoc, and as-needed) reports.\n\nThis requirement is specific to applications with audit reduction capabilities; however, applications need to support on-demand audit review and analysis.\"\n  desc 'check', 'Review the system documentation and interview the application administrator for details regarding application architecture and logging configuration.\n\nIdentify the application components and the logs associated with the components.\n\nIf the application utilizes a centralized logging system that provides the capability to generate reports based on filtered log events, this requirement is not applicable.\n\nUsing the relevant application features for generating reports and/or searching application data, (this is usually executed directly within a logging utility or within a reports feature or function) configure a filter based on any of the security criteria provided below.\n\nAlternatively, you can use security-oriented criteria provided by the application administrator.\n\nOnce the data filter has been selected, filter the audit event data so only filtered data is displayed and generate the report.\n\nThe report can be any combination of screen-based, soft copy, or a printed report.\n\nCriteria:\nUsers: e.g., specific users or groups\nEvent types:\nEvent dates and time:\nSystem resources involved: e.g., application components or modules.\nIP addresses:\nInformation objects accessed:\nEvent level categories: e.g., high, critical, warning, error\n\nIf the application does not provide on demand reports based on the filtered audit event data, this is a finding.'\n  desc 'fix', 'Configure the application to generate soft copy, hard copy and/or screen-based reports based on the selected filtered event data.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24159r493375_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222489'\n  tag rid: 'SV-222489r879618_rule'\n  tag stig_id: 'APSC-DV-001150'\n  tag gtitle: 'SRG-APP-000181'\n  tag fix_id: 'F-24148r493376_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84083', 'V-69461']\n  tag cci: ['CCI-001876']\n  tag nist: ['AU-7 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222489.rb"},"title":"The application must provide an audit reduction capability that supports on-demand reporting requirements.","desc":"The ability to generate on-demand reports, including after the audit data has been subjected to audit reduction, greatly facilitates the organization's ability to generate incident reports as needed to better handle larger-scale or more complex security incidents.\n\nAudit reduction is a process that manipulates collected audit information and organizes such information in a summary format that is more meaningful to analysts. The report generation capability provided by the application must support on-demand (i.e., customizable, ad-hoc, and as-needed) reports.\n\nThis requirement is specific to applications with audit reduction capabilities; however, applications need to support on-demand audit review and analysis.","descriptions":{"default":"The ability to generate on-demand reports, including after the audit data has been subjected to audit reduction, greatly facilitates the organization's ability to generate incident reports as needed to better handle larger-scale or more complex security incidents.\n\nAudit reduction is a process that manipulates collected audit information and organizes such information in a summary format that is more meaningful to analysts. The report generation capability provided by the application must support on-demand (i.e., customizable, ad-hoc, and as-needed) reports.\n\nThis requirement is specific to applications with audit reduction capabilities; however, applications need to support on-demand audit review and analysis.","check":"Review the system documentation and interview the application administrator for details regarding application architecture and logging configuration.\n\nIdentify the application components and the logs associated with the components.\n\nIf the application utilizes a centralized logging system that provides the capability to generate reports based on filtered log events, this requirement is not applicable.\n\nUsing the relevant application features for generating reports and/or searching application data, (this is usually executed directly within a logging utility or within a reports feature or function) configure a filter based on any of the security criteria provided below.\n\nAlternatively, you can use security-oriented criteria provided by the application administrator.\n\nOnce the data filter has been selected, filter the audit event data so only filtered data is displayed and generate the report.\n\nThe report can be any combination of screen-based, soft copy, or a printed report.\n\nCriteria:\nUsers: e.g., specific users or groups\nEvent types:\nEvent dates and time:\nSystem resources involved: e.g., application components or modules.\nIP addresses:\nInformation objects accessed:\nEvent level categories: e.g., high, critical, warning, error\n\nIf the application does not provide on demand reports based on the filtered audit event data, this is a finding.","fix":"Configure the application to generate soft copy, hard copy and/or screen-based reports based on the selected filtered event data."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24159r493375_chk","severity":"medium","gid":"V-222489","rid":"SV-222489r879618_rule","stig_id":"APSC-DV-001150","gtitle":"SRG-APP-000181","fix_id":"F-24148r493376_fix","documentable":null,"legacy":["SV-84083","V-69461"],"cci":["CCI-001876"],"nist":["AU-7 a"]}},{"id":"SV-222490","code":"control 'SV-222490' do\n  title 'The application must provide an audit reduction capability that supports on-demand audit review and analysis.'\n  desc \"The ability to perform on-demand audit review and analysis, including after the audit data has been subjected to audit reduction, greatly facilitates the organization's ability to generate incident reports as needed to better handle larger-scale or more complex security incidents.\n\nAudit reduction is a technique used to reduce the volume of audit records in order to facilitate a manual review. Audit reduction does not alter original audit records. The report generation capability provided by the application must support on-demand (i.e., customizable, ad-hoc, and as-needed) reports.\n\nThis requirement is specific to applications with audit reduction capabilities; however, applications need to support on-demand audit review and analysis.\"\n  desc 'check', 'Review the system documentation and interview the application administrator for details regarding application architecture and logging configuration.\n\nIdentify the application components and the logs associated with the components.\n\nIf the application utilizes a centralized logging system that provides the capability to generate reports based on filtered log events, this requirement is not applicable.\n\nUsing the relevant application features for generating reports and/or searching application data, (this is usually executed directly within a logging utility or within a reports feature or function) configure a filter based on any of the security criteria provided below.\n\nAlternatively, you can use security-oriented criteria provided by the application administrator.\n\nOnce the data filter has been selected, filter the audit event data so only filtered data is displayed and generate the report.\n\nThe report can be any combination of screen-based, soft copy, or a printed report.\n\nCriteria:\nUsers: e.g., specific users or groups\nEvent types:\nEvent dates and time:\nSystem resources involved: e.g., application components or modules.\nIP addresses:\nInformation objects accessed:\nEvent level categories: e.g., high, critical, warning, error\n\nIf the application does not provide an audit reduction capability that supports on-demand reports based on the filtered audit event data, this is a finding.'\n  desc 'fix', 'Configure the application to log to a centralized auditing capability that provides on-demand reports based on the filtered audit event data or design or configure the application to meet the requirement.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24160r493378_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222490'\n  tag rid: 'SV-222490r879737_rule'\n  tag stig_id: 'APSC-DV-001160'\n  tag gtitle: 'SRG-APP-000364'\n  tag fix_id: 'F-24149r493379_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84085', 'V-69463']\n  tag cci: ['CCI-001875']\n  tag nist: ['AU-7 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222490.rb"},"title":"The application must provide an audit reduction capability that supports on-demand audit review and analysis.","desc":"The ability to perform on-demand audit review and analysis, including after the audit data has been subjected to audit reduction, greatly facilitates the organization's ability to generate incident reports as needed to better handle larger-scale or more complex security incidents.\n\nAudit reduction is a technique used to reduce the volume of audit records in order to facilitate a manual review. Audit reduction does not alter original audit records. The report generation capability provided by the application must support on-demand (i.e., customizable, ad-hoc, and as-needed) reports.\n\nThis requirement is specific to applications with audit reduction capabilities; however, applications need to support on-demand audit review and analysis.","descriptions":{"default":"The ability to perform on-demand audit review and analysis, including after the audit data has been subjected to audit reduction, greatly facilitates the organization's ability to generate incident reports as needed to better handle larger-scale or more complex security incidents.\n\nAudit reduction is a technique used to reduce the volume of audit records in order to facilitate a manual review. Audit reduction does not alter original audit records. The report generation capability provided by the application must support on-demand (i.e., customizable, ad-hoc, and as-needed) reports.\n\nThis requirement is specific to applications with audit reduction capabilities; however, applications need to support on-demand audit review and analysis.","check":"Review the system documentation and interview the application administrator for details regarding application architecture and logging configuration.\n\nIdentify the application components and the logs associated with the components.\n\nIf the application utilizes a centralized logging system that provides the capability to generate reports based on filtered log events, this requirement is not applicable.\n\nUsing the relevant application features for generating reports and/or searching application data, (this is usually executed directly within a logging utility or within a reports feature or function) configure a filter based on any of the security criteria provided below.\n\nAlternatively, you can use security-oriented criteria provided by the application administrator.\n\nOnce the data filter has been selected, filter the audit event data so only filtered data is displayed and generate the report.\n\nThe report can be any combination of screen-based, soft copy, or a printed report.\n\nCriteria:\nUsers: e.g., specific users or groups\nEvent types:\nEvent dates and time:\nSystem resources involved: e.g., application components or modules.\nIP addresses:\nInformation objects accessed:\nEvent level categories: e.g., high, critical, warning, error\n\nIf the application does not provide an audit reduction capability that supports on-demand reports based on the filtered audit event data, this is a finding.","fix":"Configure the application to log to a centralized auditing capability that provides on-demand reports based on the filtered audit event data or design or configure the application to meet the requirement."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24160r493378_chk","severity":"medium","gid":"V-222490","rid":"SV-222490r879737_rule","stig_id":"APSC-DV-001160","gtitle":"SRG-APP-000364","fix_id":"F-24149r493379_fix","documentable":null,"legacy":["SV-84085","V-69463"],"cci":["CCI-001875"],"nist":["AU-7 a"]}},{"id":"SV-222491","code":"control 'SV-222491' do\n  title 'The application must provide an audit reduction capability that supports after-the-fact investigations of security incidents.'\n  desc 'If the audit reduction capability does not support after-the-fact investigations, it is difficult to establish, correlate, and investigate the events leading up to an outage or attack, or identify those responses for one. This capability is also required to comply with applicable Federal laws and DoD policies.\n\nAudit reduction capability must support after-the-fact investigations of security incidents either natively or through the use of third-party tools.\n\nThis requirement is specific to applications with audit reduction capabilities.'\n  desc 'check', 'Review application documentation and interview application administrator for details regarding audit reduction (log record event filtering).\n\nAccess the application with user rights sufficient to read and filter audit records.\n\nNavigate the application user interface and select the application functionality that provides access and interface to audit records and audit reduction (event filtering).\n\nIf the application uses a centralized logging solution that performs the audit reduction (event filtering) functions, the requirement is not applicable.\n\nExamine the log files; take note of dates and times of events such as logon events.\n\nNote: dates and times as well as the original content and any unique record identifiers.\n\nRecord the identifying information as well as the dates and times and content of the audit records.\n\nApply filters to reduce the amount of audit records displayed to just the logon events for the day.\n\nReview the records and ensure the application provides the ability to filter on audit events.\n\nIf the application does not provide an audit reduction (event filtering) capability, this is a finding.'\n  desc 'fix', 'Configure the application to provide an audit reduction capability that supports forensic investigations.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24161r493381_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222491'\n  tag rid: 'SV-222491r879738_rule'\n  tag stig_id: 'APSC-DV-001170'\n  tag gtitle: 'SRG-APP-000365'\n  tag fix_id: 'F-24150r493382_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84087', 'V-69465']\n  tag cci: ['CCI-001877']\n  tag nist: ['AU-7 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222491.rb"},"title":"The application must provide an audit reduction capability that supports after-the-fact investigations of security incidents.","desc":"If the audit reduction capability does not support after-the-fact investigations, it is difficult to establish, correlate, and investigate the events leading up to an outage or attack, or identify those responses for one. This capability is also required to comply with applicable Federal laws and DoD policies.\n\nAudit reduction capability must support after-the-fact investigations of security incidents either natively or through the use of third-party tools.\n\nThis requirement is specific to applications with audit reduction capabilities.","descriptions":{"default":"If the audit reduction capability does not support after-the-fact investigations, it is difficult to establish, correlate, and investigate the events leading up to an outage or attack, or identify those responses for one. This capability is also required to comply with applicable Federal laws and DoD policies.\n\nAudit reduction capability must support after-the-fact investigations of security incidents either natively or through the use of third-party tools.\n\nThis requirement is specific to applications with audit reduction capabilities.","check":"Review application documentation and interview application administrator for details regarding audit reduction (log record event filtering).\n\nAccess the application with user rights sufficient to read and filter audit records.\n\nNavigate the application user interface and select the application functionality that provides access and interface to audit records and audit reduction (event filtering).\n\nIf the application uses a centralized logging solution that performs the audit reduction (event filtering) functions, the requirement is not applicable.\n\nExamine the log files; take note of dates and times of events such as logon events.\n\nNote: dates and times as well as the original content and any unique record identifiers.\n\nRecord the identifying information as well as the dates and times and content of the audit records.\n\nApply filters to reduce the amount of audit records displayed to just the logon events for the day.\n\nReview the records and ensure the application provides the ability to filter on audit events.\n\nIf the application does not provide an audit reduction (event filtering) capability, this is a finding.","fix":"Configure the application to provide an audit reduction capability that supports forensic investigations."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24161r493381_chk","severity":"medium","gid":"V-222491","rid":"SV-222491r879738_rule","stig_id":"APSC-DV-001170","gtitle":"SRG-APP-000365","fix_id":"F-24150r493382_fix","documentable":null,"legacy":["SV-84087","V-69465"],"cci":["CCI-001877"],"nist":["AU-7 a"]}},{"id":"SV-222492","code":"control 'SV-222492' do\n  title 'The application must provide a report generation capability that supports on-demand audit review and analysis.'\n  desc \"The report generation capability must support on-demand review and analysis in order to facilitate the organization's ability to generate incident reports as needed to better handle larger-scale or more complex security incidents.\n\nReport generation must be capable of generating on-demand (i.e., customizable, ad-hoc, and as-needed) reports. On-demand reporting allows personnel to report issues more rapidly to more effectively meet reporting requirements. Collecting log data and aggregating it to present the data in a single, consolidated report achieves this objective.\n\nAudit reduction and report generation capabilities do not always reside on the same information system or within the same organizational entities conducting auditing activities. The audit reduction capability can include, for example, modern data mining techniques with advanced data filters to identify anomalous behavior in audit records. The report generation capability provided by the information system can generate customizable reports. Time ordering of audit records can be a significant issue if the granularity of the time stamp in the record is insufficient.\n\nThis requirement is specific to applications with report generation capabilities; however, applications need to support on-demand audit review and analysis.\"\n  desc 'check', 'Review the application documentation and interview the application administrator for details regarding audit reduction (log record event filtering).\n\nAccess the application with user rights sufficient to read and filter audit records.\n\nNavigate the application user interface and select the application functionality that provides access and interface to audit records and audit reporting.\n\nIf the application uses a centralized logging solution that provides immediate, customizable audit review and analysis functions, the requirement is not applicable.\n\nCreate an event report. Report data can be based on date ranges, times or events, or other criteria that could be used in an investigation. Use of data from previous checks for audit reduction is encouraged.\n\nReview the report and ensure the data in the report coincides with event filters used to create the report.\n\nIf the application does not provide an immediate, ad-hoc audit review and analysis capability, this is a finding.'\n  desc 'fix', 'Design or configure the application to provide an immediate audit review capability or utilize a centralized utility designed for the purpose of on-demand log management and reporting.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24162r493384_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222492'\n  tag rid: 'SV-222492r879739_rule'\n  tag stig_id: 'APSC-DV-001180'\n  tag gtitle: 'SRG-APP-000366'\n  tag fix_id: 'F-24151r493385_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84089', 'V-69467']\n  tag cci: ['CCI-001878']\n  tag nist: ['AU-7 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222492.rb"},"title":"The application must provide a report generation capability that supports on-demand audit review and analysis.","desc":"The report generation capability must support on-demand review and analysis in order to facilitate the organization's ability to generate incident reports as needed to better handle larger-scale or more complex security incidents.\n\nReport generation must be capable of generating on-demand (i.e., customizable, ad-hoc, and as-needed) reports. On-demand reporting allows personnel to report issues more rapidly to more effectively meet reporting requirements. Collecting log data and aggregating it to present the data in a single, consolidated report achieves this objective.\n\nAudit reduction and report generation capabilities do not always reside on the same information system or within the same organizational entities conducting auditing activities. The audit reduction capability can include, for example, modern data mining techniques with advanced data filters to identify anomalous behavior in audit records. The report generation capability provided by the information system can generate customizable reports. Time ordering of audit records can be a significant issue if the granularity of the time stamp in the record is insufficient.\n\nThis requirement is specific to applications with report generation capabilities; however, applications need to support on-demand audit review and analysis.","descriptions":{"default":"The report generation capability must support on-demand review and analysis in order to facilitate the organization's ability to generate incident reports as needed to better handle larger-scale or more complex security incidents.\n\nReport generation must be capable of generating on-demand (i.e., customizable, ad-hoc, and as-needed) reports. On-demand reporting allows personnel to report issues more rapidly to more effectively meet reporting requirements. Collecting log data and aggregating it to present the data in a single, consolidated report achieves this objective.\n\nAudit reduction and report generation capabilities do not always reside on the same information system or within the same organizational entities conducting auditing activities. The audit reduction capability can include, for example, modern data mining techniques with advanced data filters to identify anomalous behavior in audit records. The report generation capability provided by the information system can generate customizable reports. Time ordering of audit records can be a significant issue if the granularity of the time stamp in the record is insufficient.\n\nThis requirement is specific to applications with report generation capabilities; however, applications need to support on-demand audit review and analysis.","check":"Review the application documentation and interview the application administrator for details regarding audit reduction (log record event filtering).\n\nAccess the application with user rights sufficient to read and filter audit records.\n\nNavigate the application user interface and select the application functionality that provides access and interface to audit records and audit reporting.\n\nIf the application uses a centralized logging solution that provides immediate, customizable audit review and analysis functions, the requirement is not applicable.\n\nCreate an event report. Report data can be based on date ranges, times or events, or other criteria that could be used in an investigation. Use of data from previous checks for audit reduction is encouraged.\n\nReview the report and ensure the data in the report coincides with event filters used to create the report.\n\nIf the application does not provide an immediate, ad-hoc audit review and analysis capability, this is a finding.","fix":"Design or configure the application to provide an immediate audit review capability or utilize a centralized utility designed for the purpose of on-demand log management and reporting."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24162r493384_chk","severity":"medium","gid":"V-222492","rid":"SV-222492r879739_rule","stig_id":"APSC-DV-001180","gtitle":"SRG-APP-000366","fix_id":"F-24151r493385_fix","documentable":null,"legacy":["SV-84089","V-69467"],"cci":["CCI-001878"],"nist":["AU-7 a"]}},{"id":"SV-222493","code":"control 'SV-222493' do\n  title 'The application must provide a report generation capability that supports on-demand reporting requirements.'\n  desc \"The report generation capability must support on-demand reporting in order to facilitate the organization's ability to generate incident reports as needed to better handle larger-scale or more complex security incidents.\n\nThe report generation capability provided by the application must be capable of generating on-demand (i.e., customizable, ad-hoc, and as-needed) reports. On-demand reporting allows personnel to report issues more rapidly to more effectively meet reporting requirements. Collecting log data and aggregating it to present the data in a single, consolidated report achieves this objective.\n\nThis requirement is specific to applications with report generation capabilities; however, applications need to support on-demand reporting requirements.\"\n  desc 'check', 'Review the application documentation and interview the application administrator for details regarding audit reduction (log record event filtering).\n\nAccess the application with user rights sufficient to read and filter audit records.\n\nNavigate the application user interface and select the application functionality that provides access and interface to audit records and audit reduction (event filtering).\n\nIf the application uses a centralized logging solution that provides immediate, customizable, ad-hoc report generation functions, the requirement is not applicable.\n\nCreate an event report. Report data can be based on date ranges, times or events, or other criteria that could be used in an investigation. Use of data from previous checks for audit reduction is encouraged.\n\nReview the report and ensure the data in the report coincides with event filters used to create the report.\n\nIf the application does not provide customizable, immediate, ad-hoc audit log reporting, this is a finding.'\n  desc 'fix', 'Design or configure the application to provide an on-demand report generation capability or utilize a centralized utility designed for the purpose of on-demand log management and reporting.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24163r493387_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222493'\n  tag rid: 'SV-222493r879740_rule'\n  tag stig_id: 'APSC-DV-001190'\n  tag gtitle: 'SRG-APP-000367'\n  tag fix_id: 'F-24152r493388_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84091', 'V-69469']\n  tag cci: ['CCI-001879']\n  tag nist: ['AU-7 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222493.rb"},"title":"The application must provide a report generation capability that supports on-demand reporting requirements.","desc":"The report generation capability must support on-demand reporting in order to facilitate the organization's ability to generate incident reports as needed to better handle larger-scale or more complex security incidents.\n\nThe report generation capability provided by the application must be capable of generating on-demand (i.e., customizable, ad-hoc, and as-needed) reports. On-demand reporting allows personnel to report issues more rapidly to more effectively meet reporting requirements. Collecting log data and aggregating it to present the data in a single, consolidated report achieves this objective.\n\nThis requirement is specific to applications with report generation capabilities; however, applications need to support on-demand reporting requirements.","descriptions":{"default":"The report generation capability must support on-demand reporting in order to facilitate the organization's ability to generate incident reports as needed to better handle larger-scale or more complex security incidents.\n\nThe report generation capability provided by the application must be capable of generating on-demand (i.e., customizable, ad-hoc, and as-needed) reports. On-demand reporting allows personnel to report issues more rapidly to more effectively meet reporting requirements. Collecting log data and aggregating it to present the data in a single, consolidated report achieves this objective.\n\nThis requirement is specific to applications with report generation capabilities; however, applications need to support on-demand reporting requirements.","check":"Review the application documentation and interview the application administrator for details regarding audit reduction (log record event filtering).\n\nAccess the application with user rights sufficient to read and filter audit records.\n\nNavigate the application user interface and select the application functionality that provides access and interface to audit records and audit reduction (event filtering).\n\nIf the application uses a centralized logging solution that provides immediate, customizable, ad-hoc report generation functions, the requirement is not applicable.\n\nCreate an event report. Report data can be based on date ranges, times or events, or other criteria that could be used in an investigation. Use of data from previous checks for audit reduction is encouraged.\n\nReview the report and ensure the data in the report coincides with event filters used to create the report.\n\nIf the application does not provide customizable, immediate, ad-hoc audit log reporting, this is a finding.","fix":"Design or configure the application to provide an on-demand report generation capability or utilize a centralized utility designed for the purpose of on-demand log management and reporting."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24163r493387_chk","severity":"medium","gid":"V-222493","rid":"SV-222493r879740_rule","stig_id":"APSC-DV-001190","gtitle":"SRG-APP-000367","fix_id":"F-24152r493388_fix","documentable":null,"legacy":["SV-84091","V-69469"],"cci":["CCI-001879"],"nist":["AU-7 a"]}},{"id":"SV-222494","code":"control 'SV-222494' do\n  title 'The application must provide a report generation capability that supports after-the-fact investigations of security incidents.'\n  desc 'If the report generation capability does not support after-the-fact investigations, it is difficult to establish, correlate, and investigate the events leading up to an outage or attack, or identify those responses for one. This capability is also required to comply with applicable Federal laws and DoD policies.\n\nThe report generation capability must support after-the-fact investigations of security incidents either natively or through the use of third-party tools.\n\nThis requirement is specific to applications with report generation capabilities; however, applications need to support on-demand reporting requirements.'\n  desc 'check', 'Review the application documentation and interview the application administrator for details regarding audit reduction (log record event filtering).\n\nAccess the application with user rights sufficient to read and filter audit records.\n\nNavigate the application user interface and select the application functionality that provides access and interface to audit records and audit reduction (event filtering).\n\nIf the application uses a centralized logging solution that performs the report generation functions, the requirement is not applicable.\n\nCreate an event report. Report data can be based on date ranges, times or events, or other criteria that could be used in an investigation. Use of data from previous checks for audit reduction is encouraged.\n\nReview the report and ensure the data in the report coincides with event filters used to create the report.\n\nIf the application does not have a report generation capability that supports after the fact security investigations, this is a finding.'\n  desc 'fix', 'Design or configure the application to provide after-the-fact report generation capability or utilize a centralized utility designed for the purpose of log management and reporting.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24164r493390_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222494'\n  tag rid: 'SV-222494r879741_rule'\n  tag stig_id: 'APSC-DV-001200'\n  tag gtitle: 'SRG-APP-000368'\n  tag fix_id: 'F-24153r493391_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84093', 'V-69471']\n  tag cci: ['CCI-001880']\n  tag nist: ['AU-7 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222494.rb"},"title":"The application must provide a report generation capability that supports after-the-fact investigations of security incidents.","desc":"If the report generation capability does not support after-the-fact investigations, it is difficult to establish, correlate, and investigate the events leading up to an outage or attack, or identify those responses for one. This capability is also required to comply with applicable Federal laws and DoD policies.\n\nThe report generation capability must support after-the-fact investigations of security incidents either natively or through the use of third-party tools.\n\nThis requirement is specific to applications with report generation capabilities; however, applications need to support on-demand reporting requirements.","descriptions":{"default":"If the report generation capability does not support after-the-fact investigations, it is difficult to establish, correlate, and investigate the events leading up to an outage or attack, or identify those responses for one. This capability is also required to comply with applicable Federal laws and DoD policies.\n\nThe report generation capability must support after-the-fact investigations of security incidents either natively or through the use of third-party tools.\n\nThis requirement is specific to applications with report generation capabilities; however, applications need to support on-demand reporting requirements.","check":"Review the application documentation and interview the application administrator for details regarding audit reduction (log record event filtering).\n\nAccess the application with user rights sufficient to read and filter audit records.\n\nNavigate the application user interface and select the application functionality that provides access and interface to audit records and audit reduction (event filtering).\n\nIf the application uses a centralized logging solution that performs the report generation functions, the requirement is not applicable.\n\nCreate an event report. Report data can be based on date ranges, times or events, or other criteria that could be used in an investigation. Use of data from previous checks for audit reduction is encouraged.\n\nReview the report and ensure the data in the report coincides with event filters used to create the report.\n\nIf the application does not have a report generation capability that supports after the fact security investigations, this is a finding.","fix":"Design or configure the application to provide after-the-fact report generation capability or utilize a centralized utility designed for the purpose of log management and reporting."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24164r493390_chk","severity":"medium","gid":"V-222494","rid":"SV-222494r879741_rule","stig_id":"APSC-DV-001200","gtitle":"SRG-APP-000368","fix_id":"F-24153r493391_fix","documentable":null,"legacy":["SV-84093","V-69471"],"cci":["CCI-001880"],"nist":["AU-7 a"]}},{"id":"SV-222495","code":"control 'SV-222495' do\n  title 'The application must provide an audit reduction capability that does not alter original content or time ordering of audit records.'\n  desc 'If the audit reduction capability alters the content or time ordering of audit records, the integrity of the audit records is compromised, and the records are no longer usable for forensic analysis. Time ordering refers to the chronological organization of records based on time stamps. The degree of time stamp precision can affect this.\n\nAudit reduction is a process that manipulates collected audit information and organizes such information in a summary format that is more meaningful to analysts.\n\nThis requirement is specific to applications with audit reduction capabilities; however, applications need to support on-demand audit review and analysis.'\n  desc 'check', 'Review the application documentation and interview the application administrator for details regarding audit reduction (log record event filtering).\n\nAccess the application with user rights sufficient to read and filter audit records.\n\nNavigate the application user interface and select the application functionality that provides access and interface to audit records and audit reduction (event filtering).\n\nIf the application uses a centralized logging solution that performs the audit reduction (event filtering) functions, the requirement is not applicable.\n\nExamine the log files; take note of dates and times of events such as logon events.\n\nNote: dates and times as well as the original content and any unique record identifiers.\n\nRecord the identifying information as well as the dates and times and content of the audit records.\n\nApply filters to reduce the amount of audit records displayed to just the logon events for the day.\n\nReview the records and ensure nothing in the records has changed. Once validated, clear the filter and review the records again to validate nothing changed within the audit record itself.\n\nIf the application of event filters modifies the original log records, this is a finding.'\n  desc 'fix', 'Configure the application to not alter original log content or time ordering of audit records.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24165r493393_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222495'\n  tag rid: 'SV-222495r879742_rule'\n  tag stig_id: 'APSC-DV-001210'\n  tag gtitle: 'SRG-APP-000369'\n  tag fix_id: 'F-24154r493394_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84095', 'V-69473']\n  tag cci: ['CCI-001881']\n  tag nist: ['AU-7 b']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222495.rb"},"title":"The application must provide an audit reduction capability that does not alter original content or time ordering of audit records.","desc":"If the audit reduction capability alters the content or time ordering of audit records, the integrity of the audit records is compromised, and the records are no longer usable for forensic analysis. Time ordering refers to the chronological organization of records based on time stamps. The degree of time stamp precision can affect this.\n\nAudit reduction is a process that manipulates collected audit information and organizes such information in a summary format that is more meaningful to analysts.\n\nThis requirement is specific to applications with audit reduction capabilities; however, applications need to support on-demand audit review and analysis.","descriptions":{"default":"If the audit reduction capability alters the content or time ordering of audit records, the integrity of the audit records is compromised, and the records are no longer usable for forensic analysis. Time ordering refers to the chronological organization of records based on time stamps. The degree of time stamp precision can affect this.\n\nAudit reduction is a process that manipulates collected audit information and organizes such information in a summary format that is more meaningful to analysts.\n\nThis requirement is specific to applications with audit reduction capabilities; however, applications need to support on-demand audit review and analysis.","check":"Review the application documentation and interview the application administrator for details regarding audit reduction (log record event filtering).\n\nAccess the application with user rights sufficient to read and filter audit records.\n\nNavigate the application user interface and select the application functionality that provides access and interface to audit records and audit reduction (event filtering).\n\nIf the application uses a centralized logging solution that performs the audit reduction (event filtering) functions, the requirement is not applicable.\n\nExamine the log files; take note of dates and times of events such as logon events.\n\nNote: dates and times as well as the original content and any unique record identifiers.\n\nRecord the identifying information as well as the dates and times and content of the audit records.\n\nApply filters to reduce the amount of audit records displayed to just the logon events for the day.\n\nReview the records and ensure nothing in the records has changed. Once validated, clear the filter and review the records again to validate nothing changed within the audit record itself.\n\nIf the application of event filters modifies the original log records, this is a finding.","fix":"Configure the application to not alter original log content or time ordering of audit records."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24165r493393_chk","severity":"medium","gid":"V-222495","rid":"SV-222495r879742_rule","stig_id":"APSC-DV-001210","gtitle":"SRG-APP-000369","fix_id":"F-24154r493394_fix","documentable":null,"legacy":["SV-84095","V-69473"],"cci":["CCI-001881"],"nist":["AU-7 b"]}},{"id":"SV-222496","code":"control 'SV-222496' do\n  title 'The application must provide a report generation capability that does not alter original content or time ordering of audit records.'\n  desc 'If the audit report generation capability alters the original content or time ordering of audit records, the integrity of the audit records is compromised, and the records are no longer usable for forensic analysis. Time ordering refers to the chronological organization of records based on time stamps. The degree of time stamp precision can affect this.\n\nThe report generation capability provided by the application can generate customizable reports.\n\nThis requirement is specific to applications with audit reduction capabilities; however, applications need to support on-demand audit review and analysis.'\n  desc 'check', 'Review the application documentation and interview the application administrator for details regarding audit reduction (log record event filtering).\n\nAccess the application with user rights sufficient to read and filter audit records.\n\nNavigate the application user interface and select the application functionality that provides access and interface to audit records and audit reduction (event filtering).\n\nIf the application does not provide a report generation capability, the requirement is not applicable.\n\nExamine the log files; take note of dates and times of events such as logon events.\n\nNote: dates and times as well as the original content and any unique record identifiers.\n\nRecord the identifying information as well as the dates and times and content of the audit records.\n\nApply filters to reduce the amount of audit records displayed to just the logon events for the day.\n\nReview the records and ensure nothing in the records has changed. Once validated, clear the filter and review the records again to validate nothing changed within the audit record itself.\n\nIf the application of event filters modifies the original log records, this is a finding.'\n  desc 'fix', 'Configure and design the application to not modify source logs when filtering events.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24166r493396_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222496'\n  tag rid: 'SV-222496r879743_rule'\n  tag stig_id: 'APSC-DV-001220'\n  tag gtitle: 'SRG-APP-000370'\n  tag fix_id: 'F-24155r493397_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84097', 'V-69475']\n  tag cci: ['CCI-001882']\n  tag nist: ['AU-7 b']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222496.rb"},"title":"The application must provide a report generation capability that does not alter original content or time ordering of audit records.","desc":"If the audit report generation capability alters the original content or time ordering of audit records, the integrity of the audit records is compromised, and the records are no longer usable for forensic analysis. Time ordering refers to the chronological organization of records based on time stamps. The degree of time stamp precision can affect this.\n\nThe report generation capability provided by the application can generate customizable reports.\n\nThis requirement is specific to applications with audit reduction capabilities; however, applications need to support on-demand audit review and analysis.","descriptions":{"default":"If the audit report generation capability alters the original content or time ordering of audit records, the integrity of the audit records is compromised, and the records are no longer usable for forensic analysis. Time ordering refers to the chronological organization of records based on time stamps. The degree of time stamp precision can affect this.\n\nThe report generation capability provided by the application can generate customizable reports.\n\nThis requirement is specific to applications with audit reduction capabilities; however, applications need to support on-demand audit review and analysis.","check":"Review the application documentation and interview the application administrator for details regarding audit reduction (log record event filtering).\n\nAccess the application with user rights sufficient to read and filter audit records.\n\nNavigate the application user interface and select the application functionality that provides access and interface to audit records and audit reduction (event filtering).\n\nIf the application does not provide a report generation capability, the requirement is not applicable.\n\nExamine the log files; take note of dates and times of events such as logon events.\n\nNote: dates and times as well as the original content and any unique record identifiers.\n\nRecord the identifying information as well as the dates and times and content of the audit records.\n\nApply filters to reduce the amount of audit records displayed to just the logon events for the day.\n\nReview the records and ensure nothing in the records has changed. Once validated, clear the filter and review the records again to validate nothing changed within the audit record itself.\n\nIf the application of event filters modifies the original log records, this is a finding.","fix":"Configure and design the application to not modify source logs when filtering events."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24166r493396_chk","severity":"medium","gid":"V-222496","rid":"SV-222496r879743_rule","stig_id":"APSC-DV-001220","gtitle":"SRG-APP-000370","fix_id":"F-24155r493397_fix","documentable":null,"legacy":["SV-84097","V-69475"],"cci":["CCI-001882"],"nist":["AU-7 b"]}},{"id":"SV-222497","code":"control 'SV-222497' do\n  title 'The applications must use internal system clocks to generate time stamps for audit records.'\n  desc 'Without an internal clock used as the reference for the time stored on each event to provide a trusted common reference for the time, forensic analysis would be impeded. Determining the correct time a particular event occurred on a system is critical when conducting forensic analysis and investigating system events.\n\nIf the internal clock is not used, the system may not be able to provide time stamps for log messages. Additionally, externally generated time stamps may not be accurate. Applications can use the capability of an operating system or purpose-built module for this purpose.'\n  desc 'check', \"Review the system documentation and interview the application administrator for details regarding application architecture and logging configuration.\n\nIdentify the application components and the logs associated with the components.\n\nEnsure the time written into the logs coincides with the OS timeclock.\n\nAccess random audit records and review the most recent logs.\n \nAccess the system OS hosting the application and use the related OS commands to determine the time of the system.\n\nPerform an action in the application that causes a log event to be written and review the log to ensure the system times and the application log times correlate; compensating for any time delays that may have occurred between running the OS time command and running the application action.\n\nIf the application doesn't use the internal system clocks to generate time stamps for the audit event logs, this is a finding.\"\n  desc 'fix', 'Configure the application to use the hosting systems internal clock for audit record generation.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24167r493399_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222497'\n  tag rid: 'SV-222497r879575_rule'\n  tag stig_id: 'APSC-DV-001250'\n  tag gtitle: 'SRG-APP-000116'\n  tag fix_id: 'F-24156r493400_fix'\n  tag 'documentable'\n  tag legacy: ['V-69477', 'SV-84099']\n  tag cci: ['CCI-000159']\n  tag nist: ['AU-8 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222497.rb"},"title":"The applications must use internal system clocks to generate time stamps for audit records.","desc":"Without an internal clock used as the reference for the time stored on each event to provide a trusted common reference for the time, forensic analysis would be impeded. Determining the correct time a particular event occurred on a system is critical when conducting forensic analysis and investigating system events.\n\nIf the internal clock is not used, the system may not be able to provide time stamps for log messages. Additionally, externally generated time stamps may not be accurate. Applications can use the capability of an operating system or purpose-built module for this purpose.","descriptions":{"default":"Without an internal clock used as the reference for the time stored on each event to provide a trusted common reference for the time, forensic analysis would be impeded. Determining the correct time a particular event occurred on a system is critical when conducting forensic analysis and investigating system events.\n\nIf the internal clock is not used, the system may not be able to provide time stamps for log messages. Additionally, externally generated time stamps may not be accurate. Applications can use the capability of an operating system or purpose-built module for this purpose.","check":"Review the system documentation and interview the application administrator for details regarding application architecture and logging configuration.\n\nIdentify the application components and the logs associated with the components.\n\nEnsure the time written into the logs coincides with the OS timeclock.\n\nAccess random audit records and review the most recent logs.\n \nAccess the system OS hosting the application and use the related OS commands to determine the time of the system.\n\nPerform an action in the application that causes a log event to be written and review the log to ensure the system times and the application log times correlate; compensating for any time delays that may have occurred between running the OS time command and running the application action.\n\nIf the application doesn't use the internal system clocks to generate time stamps for the audit event logs, this is a finding.","fix":"Configure the application to use the hosting systems internal clock for audit record generation."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24167r493399_chk","severity":"medium","gid":"V-222497","rid":"SV-222497r879575_rule","stig_id":"APSC-DV-001250","gtitle":"SRG-APP-000116","fix_id":"F-24156r493400_fix","documentable":null,"legacy":["V-69477","SV-84099"],"cci":["CCI-000159"],"nist":["AU-8 a"]}},{"id":"SV-222498","code":"control 'SV-222498' do\n  title 'The application must record time stamps for audit records that can be mapped to Coordinated Universal Time (UTC) or Greenwich Mean Time (GMT).'\n  desc 'If time stamps are not consistently applied and there is no common time reference, it is difficult to perform forensic analysis.\n\nTime stamps generated by the application include date and time. Time is commonly expressed in Coordinated Universal Time (UTC), a modern continuation of Greenwich Mean Time (GMT), or local time with an offset from UTC.'\n  desc 'check', 'Review the system documentation and interview the application administrator for details regarding application architecture and logging configuration.\n\nIdentify the application components and the logs associated with the components. \n\nIf the application utilizes the underlying OS system clock, and the system clock is mapped to UTC or GMT, this is not a finding.\n\nIdentify where clock settings are configured within the application.\n\nAccess the configuration settings and determine if the application is configured to set the time stamps for audit records according to UTC or GMT (e.g., East coast standard time is represented as GMT -5, east coast daylight savings time is represented as GMT-4).\n\nIf the application is not configured to map to UTC or GMT, this is a finding.'\n  desc 'fix', 'Configure the application to use the underlying system clock that maps to relevant UTC or GMT timezone.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24168r493402_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222498'\n  tag rid: 'SV-222498r879747_rule'\n  tag stig_id: 'APSC-DV-001260'\n  tag gtitle: 'SRG-APP-000374'\n  tag fix_id: 'F-24157r493403_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84101', 'V-69479']\n  tag cci: ['CCI-001890']\n  tag nist: ['AU-8 b']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222498.rb"},"title":"The application must record time stamps for audit records that can be mapped to Coordinated Universal Time (UTC) or Greenwich Mean Time (GMT).","desc":"If time stamps are not consistently applied and there is no common time reference, it is difficult to perform forensic analysis.\n\nTime stamps generated by the application include date and time. Time is commonly expressed in Coordinated Universal Time (UTC), a modern continuation of Greenwich Mean Time (GMT), or local time with an offset from UTC.","descriptions":{"default":"If time stamps are not consistently applied and there is no common time reference, it is difficult to perform forensic analysis.\n\nTime stamps generated by the application include date and time. Time is commonly expressed in Coordinated Universal Time (UTC), a modern continuation of Greenwich Mean Time (GMT), or local time with an offset from UTC.","check":"Review the system documentation and interview the application administrator for details regarding application architecture and logging configuration.\n\nIdentify the application components and the logs associated with the components. \n\nIf the application utilizes the underlying OS system clock, and the system clock is mapped to UTC or GMT, this is not a finding.\n\nIdentify where clock settings are configured within the application.\n\nAccess the configuration settings and determine if the application is configured to set the time stamps for audit records according to UTC or GMT (e.g., East coast standard time is represented as GMT -5, east coast daylight savings time is represented as GMT-4).\n\nIf the application is not configured to map to UTC or GMT, this is a finding.","fix":"Configure the application to use the underlying system clock that maps to relevant UTC or GMT timezone."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24168r493402_chk","severity":"medium","gid":"V-222498","rid":"SV-222498r879747_rule","stig_id":"APSC-DV-001260","gtitle":"SRG-APP-000374","fix_id":"F-24157r493403_fix","documentable":null,"legacy":["SV-84101","V-69479"],"cci":["CCI-001890"],"nist":["AU-8 b"]}},{"id":"SV-222499","code":"control 'SV-222499' do\n  title 'The application must record time stamps for audit records that meet a granularity of one second for a minimum degree of precision.'\n  desc 'Without sufficient granularity of time stamps, it is not possible to adequately determine the chronological order of records.\n\nTime stamps generated by the application include date and time. Granularity of time measurements refers to the degree of synchronization between information system clocks and reference clocks.'\n  desc 'check', 'Review the system documentation and interview the application administrator to determine where application audit logs are written and how time stamps are recorded.\n\nIf the application utilizes the underlying OS for time stamping and time synchronization when writing the audit logs, this requirement is not applicable.\n\nAccess and review log files over a period of at least 10 minutes; compare time stamps written in the application log to the system clock to ensure time is synchronized to within 1 second of precision.\n\nIf the application audit log time stamps differ from the OS time source by more than one second, this is a finding.'\n  desc 'fix', 'Configure the application to leverage the underlying operating system as the time source when recording time stamps or design the application to ensure granularity of 1 second as the minimum degree of precision.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24169r493405_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222499'\n  tag rid: 'SV-222499r879748_rule'\n  tag stig_id: 'APSC-DV-001270'\n  tag gtitle: 'SRG-APP-000375'\n  tag fix_id: 'F-24158r493406_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84103', 'V-69481']\n  tag cci: ['CCI-001889']\n  tag nist: ['AU-8 b']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222499.rb"},"title":"The application must record time stamps for audit records that meet a granularity of one second for a minimum degree of precision.","desc":"Without sufficient granularity of time stamps, it is not possible to adequately determine the chronological order of records.\n\nTime stamps generated by the application include date and time. Granularity of time measurements refers to the degree of synchronization between information system clocks and reference clocks.","descriptions":{"default":"Without sufficient granularity of time stamps, it is not possible to adequately determine the chronological order of records.\n\nTime stamps generated by the application include date and time. Granularity of time measurements refers to the degree of synchronization between information system clocks and reference clocks.","check":"Review the system documentation and interview the application administrator to determine where application audit logs are written and how time stamps are recorded.\n\nIf the application utilizes the underlying OS for time stamping and time synchronization when writing the audit logs, this requirement is not applicable.\n\nAccess and review log files over a period of at least 10 minutes; compare time stamps written in the application log to the system clock to ensure time is synchronized to within 1 second of precision.\n\nIf the application audit log time stamps differ from the OS time source by more than one second, this is a finding.","fix":"Configure the application to leverage the underlying operating system as the time source when recording time stamps or design the application to ensure granularity of 1 second as the minimum degree of precision."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24169r493405_chk","severity":"medium","gid":"V-222499","rid":"SV-222499r879748_rule","stig_id":"APSC-DV-001270","gtitle":"SRG-APP-000375","fix_id":"F-24158r493406_fix","documentable":null,"legacy":["SV-84103","V-69481"],"cci":["CCI-001889"],"nist":["AU-8 b"]}},{"id":"SV-222500","code":"control 'SV-222500' do\n  title 'The application must protect audit information from any type of unauthorized read access.'\n  desc 'If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is difficult if not impossible to achieve. In addition, access to audit records provides information an attacker could potentially use to his or her advantage.\n\nTo ensure the veracity of audit data, the information system and/or the application must protect audit information from any and all unauthorized access. This includes read, write, and copy access.\n\nThis requirement can be achieved through multiple methods which will depend upon system architecture and design. Commonly employed methods for protecting audit information include least privilege permissions as well as restricting the location and number of log file repositories.\n\nAdditionally, applications with user interfaces to audit records should not allow for the unfettered manipulation of or access to those records via the application. If the application provides access to the audit data, the application becomes accountable for ensuring audit information is protected from unauthorized access.\n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.'\n  desc 'check', 'Review the system documentation and interview the application administrator for details regarding application architecture and logging configuration.\n\nIdentify the application components and the logs associated with the components.\n\nIdentify the roles and users allowed to access audit information and the circumstances in which they are allowed to read or otherwise access the data.\n\nIdentify the methods used to manage audit records and audit components. Typical methods are file system-based, via an application user interface via database access or a combination thereof.\n\nFor file system access: Review file system permissions to ensure the audit logs and the application audit components such as executable files and libraries are protected by adequate file permission restrictions.\n\nPermissions must be configured to limit access to only those who have been identified and whose access has been approved.\n\nIf file permissions are configured to allow unapproved access, this is a finding.\n\nFor application-oriented and database access: Identify the application module that provides access to audit settings and audit data. Attempt to access audit configuration features and logs by using a regular non-privileged application or database user account.\n\nIf a non-privileged user account is allowed to access the audit data or the audit configuration settings, this is a finding.'\n  desc 'fix', 'Configure the application to protect audit data from unauthorized access. Limit users to roles that are assigned the rights to view, edit or copy audit data, and establish permissions that control access to the audit logs and audit configuration settings.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24170r493408_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222500'\n  tag rid: 'SV-222500r879576_rule'\n  tag stig_id: 'APSC-DV-001280'\n  tag gtitle: 'SRG-APP-000118'\n  tag fix_id: 'F-24159r493409_fix'\n  tag 'documentable'\n  tag legacy: ['V-69483', 'SV-84105']\n  tag cci: ['CCI-000162']\n  tag nist: ['AU-9 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222500.rb"},"title":"The application must protect audit information from any type of unauthorized read access.","desc":"If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is difficult if not impossible to achieve. In addition, access to audit records provides information an attacker could potentially use to his or her advantage.\n\nTo ensure the veracity of audit data, the information system and/or the application must protect audit information from any and all unauthorized access. This includes read, write, and copy access.\n\nThis requirement can be achieved through multiple methods which will depend upon system architecture and design. Commonly employed methods for protecting audit information include least privilege permissions as well as restricting the location and number of log file repositories.\n\nAdditionally, applications with user interfaces to audit records should not allow for the unfettered manipulation of or access to those records via the application. If the application provides access to the audit data, the application becomes accountable for ensuring audit information is protected from unauthorized access.\n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.","descriptions":{"default":"If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is difficult if not impossible to achieve. In addition, access to audit records provides information an attacker could potentially use to his or her advantage.\n\nTo ensure the veracity of audit data, the information system and/or the application must protect audit information from any and all unauthorized access. This includes read, write, and copy access.\n\nThis requirement can be achieved through multiple methods which will depend upon system architecture and design. Commonly employed methods for protecting audit information include least privilege permissions as well as restricting the location and number of log file repositories.\n\nAdditionally, applications with user interfaces to audit records should not allow for the unfettered manipulation of or access to those records via the application. If the application provides access to the audit data, the application becomes accountable for ensuring audit information is protected from unauthorized access.\n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.","check":"Review the system documentation and interview the application administrator for details regarding application architecture and logging configuration.\n\nIdentify the application components and the logs associated with the components.\n\nIdentify the roles and users allowed to access audit information and the circumstances in which they are allowed to read or otherwise access the data.\n\nIdentify the methods used to manage audit records and audit components. Typical methods are file system-based, via an application user interface via database access or a combination thereof.\n\nFor file system access: Review file system permissions to ensure the audit logs and the application audit components such as executable files and libraries are protected by adequate file permission restrictions.\n\nPermissions must be configured to limit access to only those who have been identified and whose access has been approved.\n\nIf file permissions are configured to allow unapproved access, this is a finding.\n\nFor application-oriented and database access: Identify the application module that provides access to audit settings and audit data. Attempt to access audit configuration features and logs by using a regular non-privileged application or database user account.\n\nIf a non-privileged user account is allowed to access the audit data or the audit configuration settings, this is a finding.","fix":"Configure the application to protect audit data from unauthorized access. Limit users to roles that are assigned the rights to view, edit or copy audit data, and establish permissions that control access to the audit logs and audit configuration settings."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24170r493408_chk","severity":"medium","gid":"V-222500","rid":"SV-222500r879576_rule","stig_id":"APSC-DV-001280","gtitle":"SRG-APP-000118","fix_id":"F-24159r493409_fix","documentable":null,"legacy":["V-69483","SV-84105"],"cci":["CCI-000162"],"nist":["AU-9 a"]}},{"id":"SV-222501","code":"control 'SV-222501' do\n  title 'The application must protect audit information from unauthorized modification.'\n  desc 'If audit data were to become compromised, then forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.\n\nTo ensure the veracity of audit data, the information system and/or the application must protect audit information from unauthorized modification.\n\nThis requirement can be achieved through multiple methods, which will depend upon system architecture and design. Some commonly employed methods include ensuring log files receive the proper file system permissions, and limiting log data locations.\n\nApplications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights that the user enjoys in order to make access decisions regarding the modification of audit data.\n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.'\n  desc 'check', 'Review the system documentation and interview the application administrator for details regarding application architecture and logging configuration.\n\nIdentify the application components and the logs associated with the components.\n\nIdentify the roles and users allowed to modify audit information and the circumstances in which they are allowed to modify the data.\n\nIdentify the methods used to manage audit records and audit components. Typical methods are file system-based, via an application user interface via database access or a combination thereof.\n\nFor file system access: Review file system permissions to ensure the audit logs and the application audit components such as executable files and libraries are protected by adequate file permission restrictions.\n\nPermissions must be configured to limit write/modify access to only those who have been identified and whose access has been approved.\n\nIf file permissions are configured to allow unapproved write/modify access, this is a finding.\n\nFor application oriented and database access: Identify the application module that provides access to audit settings and audit data. Attempt to access audit configuration features and logs by using a regular non-privileged application or database user account. Once access has been established, attempt to modify an audit record and attempt to modify the audit settings.\n\nIf a non-privileged user account is allowed to modify the audit data or the audit configuration settings, this is a finding.'\n  desc 'fix', 'Configure the application to protect audit data from unauthorized modification and changes. Limit users to roles that are assigned the rights to edit audit data and establish permissions that control access to the audit logs and audit configuration settings.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-36240r602285_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222501'\n  tag rid: 'SV-222501r879577_rule'\n  tag stig_id: 'APSC-DV-001290'\n  tag gtitle: 'SRG-APP-000119'\n  tag fix_id: 'F-36206r602286_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84107', 'V-69485']\n  tag cci: ['CCI-000163']\n  tag nist: ['AU-9 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222501.rb"},"title":"The application must protect audit information from unauthorized modification.","desc":"If audit data were to become compromised, then forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.\n\nTo ensure the veracity of audit data, the information system and/or the application must protect audit information from unauthorized modification.\n\nThis requirement can be achieved through multiple methods, which will depend upon system architecture and design. Some commonly employed methods include ensuring log files receive the proper file system permissions, and limiting log data locations.\n\nApplications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights that the user enjoys in order to make access decisions regarding the modification of audit data.\n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.","descriptions":{"default":"If audit data were to become compromised, then forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.\n\nTo ensure the veracity of audit data, the information system and/or the application must protect audit information from unauthorized modification.\n\nThis requirement can be achieved through multiple methods, which will depend upon system architecture and design. Some commonly employed methods include ensuring log files receive the proper file system permissions, and limiting log data locations.\n\nApplications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights that the user enjoys in order to make access decisions regarding the modification of audit data.\n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.","check":"Review the system documentation and interview the application administrator for details regarding application architecture and logging configuration.\n\nIdentify the application components and the logs associated with the components.\n\nIdentify the roles and users allowed to modify audit information and the circumstances in which they are allowed to modify the data.\n\nIdentify the methods used to manage audit records and audit components. Typical methods are file system-based, via an application user interface via database access or a combination thereof.\n\nFor file system access: Review file system permissions to ensure the audit logs and the application audit components such as executable files and libraries are protected by adequate file permission restrictions.\n\nPermissions must be configured to limit write/modify access to only those who have been identified and whose access has been approved.\n\nIf file permissions are configured to allow unapproved write/modify access, this is a finding.\n\nFor application oriented and database access: Identify the application module that provides access to audit settings and audit data. Attempt to access audit configuration features and logs by using a regular non-privileged application or database user account. Once access has been established, attempt to modify an audit record and attempt to modify the audit settings.\n\nIf a non-privileged user account is allowed to modify the audit data or the audit configuration settings, this is a finding.","fix":"Configure the application to protect audit data from unauthorized modification and changes. Limit users to roles that are assigned the rights to edit audit data and establish permissions that control access to the audit logs and audit configuration settings."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-36240r602285_chk","severity":"medium","gid":"V-222501","rid":"SV-222501r879577_rule","stig_id":"APSC-DV-001290","gtitle":"SRG-APP-000119","fix_id":"F-36206r602286_fix","documentable":null,"legacy":["SV-84107","V-69485"],"cci":["CCI-000163"],"nist":["AU-9 a"]}},{"id":"SV-222502","code":"control 'SV-222502' do\n  title 'The application must protect audit information from unauthorized deletion.'\n  desc 'If audit data were to become compromised, then forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.\n\nTo ensure the veracity of audit data, the information system and/or the application must protect audit information from unauthorized deletion. This requirement can be achieved through multiple methods, which will depend upon system architecture and design.\n\nSome commonly employed methods include: ensuring log files receive the proper file system permissions utilizing file system protections, restricting access, and backing up log data to ensure log data is retained.\n\nApplications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights the user enjoys in order make access decisions regarding the deletion of audit data.\n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity. Audit information may include data from other applications or be included with the audit application itself.'\n  desc 'check', 'Review the system documentation and interview the application administrator for details regarding application architecture and logging configuration.\n\nIdentify the application components and the logs associated with the components.\n\nIdentify the roles and users allowed to delete audit information and the circumstances in which they are allowed to delete the data.\n\nIdentify the methods used to manage audit records and audit components. Typical methods are file system-based, via an application user interface via database access or a combination thereof.\n\nFor file system access: Review file system permissions to ensure the audit logs and the application audit components such as executable files and libraries are protected by adequate file permission restrictions.\n\nPermissions must be configured to limit deletions to only those who have been identified and whose rights to delete audit data and audit configurations has been approved.\n\nIf file permissions are configured to allow unapproved deletions of audit settings and data, this is a finding.\n\nFor application oriented and database access: Identify the application module that provides access to audit settings and audit data. Attempt to access audit configuration features and logs by using a regular non-privileged application or database user account. Once access has been established, attempt to delete a test audit record and attempt to delete a test audit settings.\n\nIf a non-privileged user account is allowed to delete the audit data or the audit configuration settings, this is a finding.'\n  desc 'fix', 'Configure the application to protect audit data from unauthorized deletion. Limit users to roles that are assigned the rights to delete audit data and establish permissions that control access to the audit logs and audit configuration settings.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24172r493414_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222502'\n  tag rid: 'SV-222502r879578_rule'\n  tag stig_id: 'APSC-DV-001300'\n  tag gtitle: 'SRG-APP-000120'\n  tag fix_id: 'F-24161r493415_fix'\n  tag 'documentable'\n  tag legacy: ['V-69487', 'SV-84109']\n  tag cci: ['CCI-000164']\n  tag nist: ['AU-9 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222502.rb"},"title":"The application must protect audit information from unauthorized deletion.","desc":"If audit data were to become compromised, then forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.\n\nTo ensure the veracity of audit data, the information system and/or the application must protect audit information from unauthorized deletion. This requirement can be achieved through multiple methods, which will depend upon system architecture and design.\n\nSome commonly employed methods include: ensuring log files receive the proper file system permissions utilizing file system protections, restricting access, and backing up log data to ensure log data is retained.\n\nApplications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights the user enjoys in order make access decisions regarding the deletion of audit data.\n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity. Audit information may include data from other applications or be included with the audit application itself.","descriptions":{"default":"If audit data were to become compromised, then forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.\n\nTo ensure the veracity of audit data, the information system and/or the application must protect audit information from unauthorized deletion. This requirement can be achieved through multiple methods, which will depend upon system architecture and design.\n\nSome commonly employed methods include: ensuring log files receive the proper file system permissions utilizing file system protections, restricting access, and backing up log data to ensure log data is retained.\n\nApplications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights the user enjoys in order make access decisions regarding the deletion of audit data.\n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity. Audit information may include data from other applications or be included with the audit application itself.","check":"Review the system documentation and interview the application administrator for details regarding application architecture and logging configuration.\n\nIdentify the application components and the logs associated with the components.\n\nIdentify the roles and users allowed to delete audit information and the circumstances in which they are allowed to delete the data.\n\nIdentify the methods used to manage audit records and audit components. Typical methods are file system-based, via an application user interface via database access or a combination thereof.\n\nFor file system access: Review file system permissions to ensure the audit logs and the application audit components such as executable files and libraries are protected by adequate file permission restrictions.\n\nPermissions must be configured to limit deletions to only those who have been identified and whose rights to delete audit data and audit configurations has been approved.\n\nIf file permissions are configured to allow unapproved deletions of audit settings and data, this is a finding.\n\nFor application oriented and database access: Identify the application module that provides access to audit settings and audit data. Attempt to access audit configuration features and logs by using a regular non-privileged application or database user account. Once access has been established, attempt to delete a test audit record and attempt to delete a test audit settings.\n\nIf a non-privileged user account is allowed to delete the audit data or the audit configuration settings, this is a finding.","fix":"Configure the application to protect audit data from unauthorized deletion. Limit users to roles that are assigned the rights to delete audit data and establish permissions that control access to the audit logs and audit configuration settings."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24172r493414_chk","severity":"medium","gid":"V-222502","rid":"SV-222502r879578_rule","stig_id":"APSC-DV-001300","gtitle":"SRG-APP-000120","fix_id":"F-24161r493415_fix","documentable":null,"legacy":["V-69487","SV-84109"],"cci":["CCI-000164"],"nist":["AU-9 a"]}},{"id":"SV-222503","code":"control 'SV-222503' do\n  title 'The application must protect audit tools from unauthorized access.'\n  desc 'Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data. Therefore, protecting audit tools is necessary to prevent unauthorized operation on audit data.\n\nApplications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the access to audit tools.\n\nAudit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators.'\n  desc 'check', 'Review the system documentation and interview the application administrator for details regarding application architecture, audit methods, and audit tools.\n\nIdentify the application audit tools and their locations.\n\nIf the application does not provide a distinct audit tool oriented functionality that is a separate tool with an ability to view and manipulate log data, this requirement is not applicable.\n\nIdentify the methods used for implementing the audit tool functionality within the application. Typical methods are file system-based, e.g., a separate executable file that when invoked provides audit functionality, an application user interface to an audit module, or a combination thereof.\n\nFor file system access: Review file system permissions to ensure the application audit components such as executable files and libraries are protected by adequate file permission restrictions.\n\nPermissions must be configured to limit access to only those who have been identified and whose access has been approved.\n\nIf file permissions are configured to allow unapproved access, this is a finding.\n\nFor circumstances where audit tools are accessed via application sub-modules or menus: Identify the application module that provides access to audit settings and audit data. Attempt to access audit configuration features and logs by using a regular non-privileged application or database user account.\n\nIf a non-privileged user account is allowed to access the audit data or the audit configuration settings, this is a finding.'\n  desc 'fix', 'Configure the application to protect audit data from unauthorized access. Limit users to roles that are assigned the rights to view, edit or copy audit data, and establish file permissions that control access to the audit tools and audit tool capabilities and configuration settings.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-36241r602288_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222503'\n  tag rid: 'SV-222503r879579_rule'\n  tag stig_id: 'APSC-DV-001310'\n  tag gtitle: 'SRG-APP-000121'\n  tag fix_id: 'F-36207r602289_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84111', 'V-69489']\n  tag cci: ['CCI-001493']\n  tag nist: ['AU-9 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222503.rb"},"title":"The application must protect audit tools from unauthorized access.","desc":"Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data. Therefore, protecting audit tools is necessary to prevent unauthorized operation on audit data.\n\nApplications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the access to audit tools.\n\nAudit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators.","descriptions":{"default":"Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data. Therefore, protecting audit tools is necessary to prevent unauthorized operation on audit data.\n\nApplications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the access to audit tools.\n\nAudit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators.","check":"Review the system documentation and interview the application administrator for details regarding application architecture, audit methods, and audit tools.\n\nIdentify the application audit tools and their locations.\n\nIf the application does not provide a distinct audit tool oriented functionality that is a separate tool with an ability to view and manipulate log data, this requirement is not applicable.\n\nIdentify the methods used for implementing the audit tool functionality within the application. Typical methods are file system-based, e.g., a separate executable file that when invoked provides audit functionality, an application user interface to an audit module, or a combination thereof.\n\nFor file system access: Review file system permissions to ensure the application audit components such as executable files and libraries are protected by adequate file permission restrictions.\n\nPermissions must be configured to limit access to only those who have been identified and whose access has been approved.\n\nIf file permissions are configured to allow unapproved access, this is a finding.\n\nFor circumstances where audit tools are accessed via application sub-modules or menus: Identify the application module that provides access to audit settings and audit data. Attempt to access audit configuration features and logs by using a regular non-privileged application or database user account.\n\nIf a non-privileged user account is allowed to access the audit data or the audit configuration settings, this is a finding.","fix":"Configure the application to protect audit data from unauthorized access. Limit users to roles that are assigned the rights to view, edit or copy audit data, and establish file permissions that control access to the audit tools and audit tool capabilities and configuration settings."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-36241r602288_chk","severity":"medium","gid":"V-222503","rid":"SV-222503r879579_rule","stig_id":"APSC-DV-001310","gtitle":"SRG-APP-000121","fix_id":"F-36207r602289_fix","documentable":null,"legacy":["SV-84111","V-69489"],"cci":["CCI-001493"],"nist":["AU-9 a"]}},{"id":"SV-222504","code":"control 'SV-222504' do\n  title 'The application must protect audit tools from unauthorized modification.'\n  desc 'Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data. Therefore, protecting audit tools is necessary to prevent unauthorized operation on audit data.\n\nApplications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the modification of audit tools.\n\nAudit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators.'\n  desc 'check', 'Review the system documentation and interview the application administrator for details regarding application architecture, audit methods, and provided audit tools.\n\nIdentify the application audit tools and their locations.\n\nIf the application does not provide a distinct audit tool oriented functionality that is a separate tool with an ability to view and manipulate log data, this requirement is not applicable.\n\nIdentify the methods used for implementing an audit tool functionality that is separate from the application. Typical methods are file-oriented in nature, e.g., the application includes a separate executable file or library that when invoked allows users to view and manipulate logs.\n\nIdentify the users with the rights to modify the audit tools. This capability will usually be reserved for admin staff.\n\nReview file system permissions to ensure the application audit components such as executable files and libraries are protected by adequate file permission restrictions.\n\nFile permissions must be configured to limit access to only those users who have been identified and whose access has been approved.\n\nIf file permissions are configured so as to allow unapproved modifications to the audit tools, this is a finding.'\n  desc 'fix', 'Configure the application to protect audit tools from unauthorized modifications. Limit users to roles that are assigned the rights to edit or update audit tools and establish file permissions that control access to the audit tools and audit tool capabilities and configuration settings.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-36242r602291_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222504'\n  tag rid: 'SV-222504r879580_rule'\n  tag stig_id: 'APSC-DV-001320'\n  tag gtitle: 'SRG-APP-000122'\n  tag fix_id: 'F-36208r602292_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84113', 'V-69491']\n  tag cci: ['CCI-001494']\n  tag nist: ['AU-9']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222504.rb"},"title":"The application must protect audit tools from unauthorized modification.","desc":"Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data. Therefore, protecting audit tools is necessary to prevent unauthorized operation on audit data.\n\nApplications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the modification of audit tools.\n\nAudit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators.","descriptions":{"default":"Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data. Therefore, protecting audit tools is necessary to prevent unauthorized operation on audit data.\n\nApplications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the modification of audit tools.\n\nAudit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators.","check":"Review the system documentation and interview the application administrator for details regarding application architecture, audit methods, and provided audit tools.\n\nIdentify the application audit tools and their locations.\n\nIf the application does not provide a distinct audit tool oriented functionality that is a separate tool with an ability to view and manipulate log data, this requirement is not applicable.\n\nIdentify the methods used for implementing an audit tool functionality that is separate from the application. Typical methods are file-oriented in nature, e.g., the application includes a separate executable file or library that when invoked allows users to view and manipulate logs.\n\nIdentify the users with the rights to modify the audit tools. This capability will usually be reserved for admin staff.\n\nReview file system permissions to ensure the application audit components such as executable files and libraries are protected by adequate file permission restrictions.\n\nFile permissions must be configured to limit access to only those users who have been identified and whose access has been approved.\n\nIf file permissions are configured so as to allow unapproved modifications to the audit tools, this is a finding.","fix":"Configure the application to protect audit tools from unauthorized modifications. Limit users to roles that are assigned the rights to edit or update audit tools and establish file permissions that control access to the audit tools and audit tool capabilities and configuration settings."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-36242r602291_chk","severity":"medium","gid":"V-222504","rid":"SV-222504r879580_rule","stig_id":"APSC-DV-001320","gtitle":"SRG-APP-000122","fix_id":"F-36208r602292_fix","documentable":null,"legacy":["SV-84113","V-69491"],"cci":["CCI-001494"],"nist":["AU-9"]}},{"id":"SV-222505","code":"control 'SV-222505' do\n  title 'The application must protect audit tools from unauthorized deletion.'\n  desc 'Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data. Therefore, protecting audit tools is necessary to prevent unauthorized operation on audit data.\n\nApplications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the deletion of audit tools.\n\nAudit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators.'\n  desc 'check', 'Review the system documentation and interview the application administrator for details regarding application architecture, audit methods and provided audit tools.\n\nIdentify the application audit tools and their locations.\n\nIf the application does not provide a distinct audit tool oriented functionality that is a separate tool with an ability to view and manipulate log data, this requirement is not applicable.\n\nIdentify the methods used for implementing an audit tool functionality that is separate from the application. Typical methods are file-oriented in nature, e.g., the application includes a separate executable file or library that when invoked allows users to view and manipulate logs.\n\nIdentify the users with the rights to delete the audit tools. This capability is normally reserved for admin staff.\n\nReview file system permissions to ensure the application audit components such as executable files and libraries are protected by adequate file permission restrictions.\n\nFile permissions must be configured to limit access to only those users who have been identified and whose access has been approved.\n\nIf file permissions are configured to allow unapproved deletions of the audit tools, this is a finding.'\n  desc 'fix', 'Configure the application to protect audit tools from unauthorized deletions. Limit users to roles that are assigned the rights to edit or delete audit tools and establish file permissions that control access to the audit tools and audit tool capabilities and configuration settings.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-36243r602294_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222505'\n  tag rid: 'SV-222505r879581_rule'\n  tag stig_id: 'APSC-DV-001330'\n  tag gtitle: 'SRG-APP-000123'\n  tag fix_id: 'F-36209r602295_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84115', 'V-69493']\n  tag cci: ['CCI-001495']\n  tag nist: ['AU-9']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222505.rb"},"title":"The application must protect audit tools from unauthorized deletion.","desc":"Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data. Therefore, protecting audit tools is necessary to prevent unauthorized operation on audit data.\n\nApplications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the deletion of audit tools.\n\nAudit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators.","descriptions":{"default":"Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data. Therefore, protecting audit tools is necessary to prevent unauthorized operation on audit data.\n\nApplications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the deletion of audit tools.\n\nAudit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators.","check":"Review the system documentation and interview the application administrator for details regarding application architecture, audit methods and provided audit tools.\n\nIdentify the application audit tools and their locations.\n\nIf the application does not provide a distinct audit tool oriented functionality that is a separate tool with an ability to view and manipulate log data, this requirement is not applicable.\n\nIdentify the methods used for implementing an audit tool functionality that is separate from the application. Typical methods are file-oriented in nature, e.g., the application includes a separate executable file or library that when invoked allows users to view and manipulate logs.\n\nIdentify the users with the rights to delete the audit tools. This capability is normally reserved for admin staff.\n\nReview file system permissions to ensure the application audit components such as executable files and libraries are protected by adequate file permission restrictions.\n\nFile permissions must be configured to limit access to only those users who have been identified and whose access has been approved.\n\nIf file permissions are configured to allow unapproved deletions of the audit tools, this is a finding.","fix":"Configure the application to protect audit tools from unauthorized deletions. Limit users to roles that are assigned the rights to edit or delete audit tools and establish file permissions that control access to the audit tools and audit tool capabilities and configuration settings."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-36243r602294_chk","severity":"medium","gid":"V-222505","rid":"SV-222505r879581_rule","stig_id":"APSC-DV-001330","gtitle":"SRG-APP-000123","fix_id":"F-36209r602295_fix","documentable":null,"legacy":["SV-84115","V-69493"],"cci":["CCI-001495"],"nist":["AU-9"]}},{"id":"SV-222506","code":"control 'SV-222506' do\n  title 'The application must back up audit records at least every seven days onto a different system or system component than the system or component being audited.'\n  desc 'Protection of log data includes assuring log data is not accidentally lost or deleted. Backing up audit records to a different system or onto separate media than the system being audited on an organizationally defined frequency helps to assure in the event of a catastrophic system failure, the audit records will be retained.\n\nThis helps to ensure a compromise of the information system being audited does not also result in a compromise of the audit records.\n\nThis requirement only applies to applications that have a native backup capability for audit records. Operating system backup requirements cover applications that do not provide native backup functions.'\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nIdentify log functionality and locations of log files.\n\nIf the application does not include a built-in backup capability for backing up its own audit records, this requirement is not applicable.\n\nAccess the management interface for configuring application audit logs and review the backup settings.\n\nIf the application backup settings are not configured to backup application audit records every 7 days, this is a finding.'\n  desc 'fix', 'Configure application backup settings to backup application audit logs every 7 days.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24176r493426_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222506'\n  tag rid: 'SV-222506r879582_rule'\n  tag stig_id: 'APSC-DV-001340'\n  tag gtitle: 'SRG-APP-000125'\n  tag fix_id: 'F-24165r493427_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84117', 'V-69495']\n  tag cci: ['CCI-001348']\n  tag nist: ['AU-9 (2)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222506.rb"},"title":"The application must back up audit records at least every seven days onto a different system or system component than the system or component being audited.","desc":"Protection of log data includes assuring log data is not accidentally lost or deleted. Backing up audit records to a different system or onto separate media than the system being audited on an organizationally defined frequency helps to assure in the event of a catastrophic system failure, the audit records will be retained.\n\nThis helps to ensure a compromise of the information system being audited does not also result in a compromise of the audit records.\n\nThis requirement only applies to applications that have a native backup capability for audit records. Operating system backup requirements cover applications that do not provide native backup functions.","descriptions":{"default":"Protection of log data includes assuring log data is not accidentally lost or deleted. Backing up audit records to a different system or onto separate media than the system being audited on an organizationally defined frequency helps to assure in the event of a catastrophic system failure, the audit records will be retained.\n\nThis helps to ensure a compromise of the information system being audited does not also result in a compromise of the audit records.\n\nThis requirement only applies to applications that have a native backup capability for audit records. Operating system backup requirements cover applications that do not provide native backup functions.","check":"Review the application documentation and interview the application administrator.\n\nIdentify log functionality and locations of log files.\n\nIf the application does not include a built-in backup capability for backing up its own audit records, this requirement is not applicable.\n\nAccess the management interface for configuring application audit logs and review the backup settings.\n\nIf the application backup settings are not configured to backup application audit records every 7 days, this is a finding.","fix":"Configure application backup settings to backup application audit logs every 7 days."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24176r493426_chk","severity":"medium","gid":"V-222506","rid":"SV-222506r879582_rule","stig_id":"APSC-DV-001340","gtitle":"SRG-APP-000125","fix_id":"F-24165r493427_fix","documentable":null,"legacy":["SV-84117","V-69495"],"cci":["CCI-001348"],"nist":["AU-9 (2)"]}},{"id":"SV-222507","code":"control 'SV-222507' do\n  title 'The application must use cryptographic mechanisms to protect the integrity of audit information.'\n  desc 'Audit records may be tampered with; if the integrity of audit data were to become compromised, then forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.\n\nProtection of audit records and audit data is of critical importance. Cryptographic mechanisms are the industry established standard used to protect the integrity of audit data. An example of a cryptographic mechanism is the computation and application of a cryptographic-signed hash using asymmetric cryptography.\n\nThis requirement applies to applications that generate, process or manage audit records and is applied once audit processing has completed and the audit record is being stored.'\n  desc 'check', 'Review the system documentation and interview the application administrator for details regarding application architecture, audit methods, and provided audit tools.\n\nIdentify the location of the application audit information.\n\nIf the application is configured to utilize a centralized audit log solution that uses cryptographic methods that meet this requirement such as creating cryptographic hash values or message digests that can be used to validate integrity of audit files, the requirement is not applicable.\n\nAsk application administrator to demonstrate the cryptographic mechanisms used to protect the integrity of audit data.\n\nVerify when application logs are stored on the file system, a process that includes the creation of an integrity check of the audit file being stored is utilized. This integrity check can be the creation of a checksum, message digest or other one-way cryptographic hash of the audit file that is created.\n\nIf an integrity check is not created to protect the integrity of the audit information, this is a finding.'\n  desc 'fix', 'Configure the application to create an integrity check consisting of a cryptographic hash or one-way digest that can be used to establish the integrity when storing log files.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24177r493429_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222507'\n  tag rid: 'SV-222507r879583_rule'\n  tag stig_id: 'APSC-DV-001350'\n  tag gtitle: 'SRG-APP-000126'\n  tag fix_id: 'F-24166r493430_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84119', 'V-69497']\n  tag cci: ['CCI-001350']\n  tag nist: ['AU-9 (3)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222507.rb"},"title":"The application must use cryptographic mechanisms to protect the integrity of audit information.","desc":"Audit records may be tampered with; if the integrity of audit data were to become compromised, then forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.\n\nProtection of audit records and audit data is of critical importance. Cryptographic mechanisms are the industry established standard used to protect the integrity of audit data. An example of a cryptographic mechanism is the computation and application of a cryptographic-signed hash using asymmetric cryptography.\n\nThis requirement applies to applications that generate, process or manage audit records and is applied once audit processing has completed and the audit record is being stored.","descriptions":{"default":"Audit records may be tampered with; if the integrity of audit data were to become compromised, then forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.\n\nProtection of audit records and audit data is of critical importance. Cryptographic mechanisms are the industry established standard used to protect the integrity of audit data. An example of a cryptographic mechanism is the computation and application of a cryptographic-signed hash using asymmetric cryptography.\n\nThis requirement applies to applications that generate, process or manage audit records and is applied once audit processing has completed and the audit record is being stored.","check":"Review the system documentation and interview the application administrator for details regarding application architecture, audit methods, and provided audit tools.\n\nIdentify the location of the application audit information.\n\nIf the application is configured to utilize a centralized audit log solution that uses cryptographic methods that meet this requirement such as creating cryptographic hash values or message digests that can be used to validate integrity of audit files, the requirement is not applicable.\n\nAsk application administrator to demonstrate the cryptographic mechanisms used to protect the integrity of audit data.\n\nVerify when application logs are stored on the file system, a process that includes the creation of an integrity check of the audit file being stored is utilized. This integrity check can be the creation of a checksum, message digest or other one-way cryptographic hash of the audit file that is created.\n\nIf an integrity check is not created to protect the integrity of the audit information, this is a finding.","fix":"Configure the application to create an integrity check consisting of a cryptographic hash or one-way digest that can be used to establish the integrity when storing log files."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24177r493429_chk","severity":"medium","gid":"V-222507","rid":"SV-222507r879583_rule","stig_id":"APSC-DV-001350","gtitle":"SRG-APP-000126","fix_id":"F-24166r493430_fix","documentable":null,"legacy":["SV-84119","V-69497"],"cci":["CCI-001350"],"nist":["AU-9 (3)"]}},{"id":"SV-222508","code":"control 'SV-222508' do\n  title 'Application audit tools must be cryptographically hashed.'\n  desc 'Protecting the integrity of the tools used for auditing purposes is a critical step to ensuring the integrity of audit data. Audit data includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.\n\nAudit tools include, but are not limited to, vendor provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators.\n\nIt is not uncommon for attackers to replace the audit tools or inject code into the existing tools with the purpose of providing the capability to hide or erase system activity from the audit logs.\n\nTo address this risk, audit tools must be cryptographically signed/hashed and the resulting value securely stored in order to provide the capability to identify when the audit tools have been modified, manipulated or replaced.\n\nSome OSs provide a native command line tool capable of extracting or creating a hash value. Care must be taken to ensure any hashing algorithm strength used is acceptable.  An example is UNIX OS variants that provide the \"shasum\" utility with SHA256 capabilities.  Windows is not known to provide a native cryptographic tool that utilizes an acceptable hashing algorithm.  The Windows fciv.exe checksum tool currently only utilizes MD5 and SHA1 which are not acceptable hashing algorithms.'\n  desc 'check', 'Review the system documentation and interview the application administrator for details regarding application architecture, audit methods, and provided audit tools.\n\nIdentify the location of the application audit tools.\n\nSeparate audit tools will be file-oriented in nature, e.g., the application includes a separate executable file or library that when invoked allows users to view and manipulate logs.\n\nIf the application does not provide a separate tool in the form of a file which provides an ability to view and manipulate application log data, query data, or generate reports, this requirement is not applicable.\n\nIf the system hosting the application has a separate file monitoring utility installed that is configured to identify changes to audit tools and alarm on changes to audit tools, this is not applicable.\n\nAsk application administrator to demonstrate the cryptographic hashing mechanisms used to create the one way hashes that can be used to validate the integrity of audit tools.\n\nFor example, \"shasum /path/to/file > checksum.filename\".\n\nAsk the application administrator to provide the list of checksum values and the associated file names of the audit tools.\n\nIf a cryptographic checksum or hash value of the audit tool file is not created for future reference, this is a finding.'\n  desc 'fix', 'Cryptographically hash the audit tool files used by the application. Store and protect the generated hash values for future reference.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24178r493432_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222508'\n  tag rid: 'SV-222508r879668_rule'\n  tag stig_id: 'APSC-DV-001360'\n  tag gtitle: 'SRG-APP-000290'\n  tag fix_id: 'F-24167r493433_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84121', 'V-69499']\n  tag cci: ['CCI-001496']\n  tag nist: ['AU-9 (3)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222508.rb"},"title":"Application audit tools must be cryptographically hashed.","desc":"Protecting the integrity of the tools used for auditing purposes is a critical step to ensuring the integrity of audit data. Audit data includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.\n\nAudit tools include, but are not limited to, vendor provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators.\n\nIt is not uncommon for attackers to replace the audit tools or inject code into the existing tools with the purpose of providing the capability to hide or erase system activity from the audit logs.\n\nTo address this risk, audit tools must be cryptographically signed/hashed and the resulting value securely stored in order to provide the capability to identify when the audit tools have been modified, manipulated or replaced.\n\nSome OSs provide a native command line tool capable of extracting or creating a hash value. Care must be taken to ensure any hashing algorithm strength used is acceptable.  An example is UNIX OS variants that provide the \"shasum\" utility with SHA256 capabilities.  Windows is not known to provide a native cryptographic tool that utilizes an acceptable hashing algorithm.  The Windows fciv.exe checksum tool currently only utilizes MD5 and SHA1 which are not acceptable hashing algorithms.","descriptions":{"default":"Protecting the integrity of the tools used for auditing purposes is a critical step to ensuring the integrity of audit data. Audit data includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.\n\nAudit tools include, but are not limited to, vendor provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators.\n\nIt is not uncommon for attackers to replace the audit tools or inject code into the existing tools with the purpose of providing the capability to hide or erase system activity from the audit logs.\n\nTo address this risk, audit tools must be cryptographically signed/hashed and the resulting value securely stored in order to provide the capability to identify when the audit tools have been modified, manipulated or replaced.\n\nSome OSs provide a native command line tool capable of extracting or creating a hash value. Care must be taken to ensure any hashing algorithm strength used is acceptable.  An example is UNIX OS variants that provide the \"shasum\" utility with SHA256 capabilities.  Windows is not known to provide a native cryptographic tool that utilizes an acceptable hashing algorithm.  The Windows fciv.exe checksum tool currently only utilizes MD5 and SHA1 which are not acceptable hashing algorithms.","check":"Review the system documentation and interview the application administrator for details regarding application architecture, audit methods, and provided audit tools.\n\nIdentify the location of the application audit tools.\n\nSeparate audit tools will be file-oriented in nature, e.g., the application includes a separate executable file or library that when invoked allows users to view and manipulate logs.\n\nIf the application does not provide a separate tool in the form of a file which provides an ability to view and manipulate application log data, query data, or generate reports, this requirement is not applicable.\n\nIf the system hosting the application has a separate file monitoring utility installed that is configured to identify changes to audit tools and alarm on changes to audit tools, this is not applicable.\n\nAsk application administrator to demonstrate the cryptographic hashing mechanisms used to create the one way hashes that can be used to validate the integrity of audit tools.\n\nFor example, \"shasum /path/to/file > checksum.filename\".\n\nAsk the application administrator to provide the list of checksum values and the associated file names of the audit tools.\n\nIf a cryptographic checksum or hash value of the audit tool file is not created for future reference, this is a finding.","fix":"Cryptographically hash the audit tool files used by the application. Store and protect the generated hash values for future reference."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24178r493432_chk","severity":"medium","gid":"V-222508","rid":"SV-222508r879668_rule","stig_id":"APSC-DV-001360","gtitle":"SRG-APP-000290","fix_id":"F-24167r493433_fix","documentable":null,"legacy":["SV-84121","V-69499"],"cci":["CCI-001496"],"nist":["AU-9 (3)"]}},{"id":"SV-222509","code":"control 'SV-222509' do\n  title 'The integrity of the audit tools must be validated by checking the files for changes in the cryptographic hash value.'\n  desc 'Protecting the integrity of the tools used for auditing purposes is a critical step to ensuring the integrity of audit data. Audit data includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.\n\nAudit tools include, but are not limited to, vendor provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators.\n\nIt is not uncommon for attackers to replace the audit tools or inject code into the existing tools with the purpose of providing the capability to hide or erase system activity from the audit logs. \n\nTo address this risk, audit tools must be cryptographically signed/hashed in order to provide the capability to identify when the audit tools have been modified, manipulated or replaced. An example is a checksum hash of the file or files.'\n  desc 'check', 'Review the system documentation and interview the application administrator for details regarding application architecture, audit methods, and provided audit tools.\n\nIdentify the location of the application audit tools.\n\nSeparate audit tools will be file-oriented in nature, e.g., the application includes a separate executable file or library that when invoked allows users to view and manipulate logs.\n\nIf the application does not provide a separate tool in the form of a file which provides an ability to view and manipulate application log data, query data or generate reports, this requirement is not applicable.\n\nIf the system hosting the application has a separate file monitoring utility installed that is configured to identify changes to audit tools and alarm on changes to audit tools, this is not applicable.\n\nAsk the application administrator to provide their process for periodically checking the list of checksum values against the associated file names of the audit tools to ensure none of the audit tools have been tampered with.\n\nIf a cryptographic checksum or hash value of the audit tool file is not periodically checked to ensure the integrity of audit tools, this is a finding.'\n  desc 'fix', 'Establish a process to periodically check the audit tool cryptographic hashes to ensure the audit tools have not been tampered with.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24179r493435_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222509'\n  tag rid: 'SV-222509r879668_rule'\n  tag stig_id: 'APSC-DV-001370'\n  tag gtitle: 'SRG-APP-000290'\n  tag fix_id: 'F-24168r493436_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84123', 'V-69501']\n  tag cci: ['CCI-001496']\n  tag nist: ['AU-9 (3)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222509.rb"},"title":"The integrity of the audit tools must be validated by checking the files for changes in the cryptographic hash value.","desc":"Protecting the integrity of the tools used for auditing purposes is a critical step to ensuring the integrity of audit data. Audit data includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.\n\nAudit tools include, but are not limited to, vendor provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators.\n\nIt is not uncommon for attackers to replace the audit tools or inject code into the existing tools with the purpose of providing the capability to hide or erase system activity from the audit logs. \n\nTo address this risk, audit tools must be cryptographically signed/hashed in order to provide the capability to identify when the audit tools have been modified, manipulated or replaced. An example is a checksum hash of the file or files.","descriptions":{"default":"Protecting the integrity of the tools used for auditing purposes is a critical step to ensuring the integrity of audit data. Audit data includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.\n\nAudit tools include, but are not limited to, vendor provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators.\n\nIt is not uncommon for attackers to replace the audit tools or inject code into the existing tools with the purpose of providing the capability to hide or erase system activity from the audit logs. \n\nTo address this risk, audit tools must be cryptographically signed/hashed in order to provide the capability to identify when the audit tools have been modified, manipulated or replaced. An example is a checksum hash of the file or files.","check":"Review the system documentation and interview the application administrator for details regarding application architecture, audit methods, and provided audit tools.\n\nIdentify the location of the application audit tools.\n\nSeparate audit tools will be file-oriented in nature, e.g., the application includes a separate executable file or library that when invoked allows users to view and manipulate logs.\n\nIf the application does not provide a separate tool in the form of a file which provides an ability to view and manipulate application log data, query data or generate reports, this requirement is not applicable.\n\nIf the system hosting the application has a separate file monitoring utility installed that is configured to identify changes to audit tools and alarm on changes to audit tools, this is not applicable.\n\nAsk the application administrator to provide their process for periodically checking the list of checksum values against the associated file names of the audit tools to ensure none of the audit tools have been tampered with.\n\nIf a cryptographic checksum or hash value of the audit tool file is not periodically checked to ensure the integrity of audit tools, this is a finding.","fix":"Establish a process to periodically check the audit tool cryptographic hashes to ensure the audit tools have not been tampered with."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24179r493435_chk","severity":"medium","gid":"V-222509","rid":"SV-222509r879668_rule","stig_id":"APSC-DV-001370","gtitle":"SRG-APP-000290","fix_id":"F-24168r493436_fix","documentable":null,"legacy":["SV-84123","V-69501"],"cci":["CCI-001496"],"nist":["AU-9 (3)"]}},{"id":"SV-222510","code":"control 'SV-222510' do\n  title 'The application must prohibit user installation of software without explicit privileged status.'\n  desc 'Allowing regular users to install software, without explicit privileges, creates the risk that untested or potentially malicious software will be installed on the system. Explicit privileges (escalated or administrative privileges) provide the regular user with explicit capabilities and control that exceeds the rights of a regular user.\n\nApplication functionality will vary, and while users are not permitted to install unapproved applications, there may be instances where the organization allows the user to install approved software packages such as from an approved software repository.\n\nThe application must enforce software installation by users based upon what types of software installations are permitted (e.g., updates and security patches to existing software) and what types of installations are prohibited (e.g., software whose pedigree with regard to being potentially malicious is unknown or suspect) by the organization.\n\nThis requirement applies, for example, to applications that provide the ability to extend application functionality (e.g., plug-ins, add-ons) and software management applications.'\n  desc 'check', 'Review the application documentation and interview the application administrator to determine the capabilities of the application as it relates to software installation or product function extension.\n\nIdentify any software configuration change capabilities which are allowed by design and incorporated into the user interface. An example is utilizing a known software repository of tested and approved extensions, plugins or modules which can be used by application users to extend application features or functions.\n\nIf the application does not provide the ability to install software components, modules, plugins, or extensions, the requirement is not applicable.\n\nAccess the application user interface as a regular user, navigate to the application screen that provides the software installation function and attempt to install software components, modules, extensions, or plugins.\n\nIf the application utilizes an approved repository of approved software that has been tested and approved for all application users to install, this is not a finding.\n\nIf the application allows regular users to install untested or unapproved software components, extensions, modules, or plugins without explicit authorization, this is a finding.'\n  desc 'fix', 'Configure the application to prohibit user installation of software without explicit permission.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24180r493438_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222510'\n  tag rid: 'SV-222510r879751_rule'\n  tag stig_id: 'APSC-DV-001390'\n  tag gtitle: 'SRG-APP-000378'\n  tag fix_id: 'F-24169r493439_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84125', 'V-69503']\n  tag cci: ['CCI-001812']\n  tag nist: ['CM-11 (2)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222510.rb"},"title":"The application must prohibit user installation of software without explicit privileged status.","desc":"Allowing regular users to install software, without explicit privileges, creates the risk that untested or potentially malicious software will be installed on the system. Explicit privileges (escalated or administrative privileges) provide the regular user with explicit capabilities and control that exceeds the rights of a regular user.\n\nApplication functionality will vary, and while users are not permitted to install unapproved applications, there may be instances where the organization allows the user to install approved software packages such as from an approved software repository.\n\nThe application must enforce software installation by users based upon what types of software installations are permitted (e.g., updates and security patches to existing software) and what types of installations are prohibited (e.g., software whose pedigree with regard to being potentially malicious is unknown or suspect) by the organization.\n\nThis requirement applies, for example, to applications that provide the ability to extend application functionality (e.g., plug-ins, add-ons) and software management applications.","descriptions":{"default":"Allowing regular users to install software, without explicit privileges, creates the risk that untested or potentially malicious software will be installed on the system. Explicit privileges (escalated or administrative privileges) provide the regular user with explicit capabilities and control that exceeds the rights of a regular user.\n\nApplication functionality will vary, and while users are not permitted to install unapproved applications, there may be instances where the organization allows the user to install approved software packages such as from an approved software repository.\n\nThe application must enforce software installation by users based upon what types of software installations are permitted (e.g., updates and security patches to existing software) and what types of installations are prohibited (e.g., software whose pedigree with regard to being potentially malicious is unknown or suspect) by the organization.\n\nThis requirement applies, for example, to applications that provide the ability to extend application functionality (e.g., plug-ins, add-ons) and software management applications.","check":"Review the application documentation and interview the application administrator to determine the capabilities of the application as it relates to software installation or product function extension.\n\nIdentify any software configuration change capabilities which are allowed by design and incorporated into the user interface. An example is utilizing a known software repository of tested and approved extensions, plugins or modules which can be used by application users to extend application features or functions.\n\nIf the application does not provide the ability to install software components, modules, plugins, or extensions, the requirement is not applicable.\n\nAccess the application user interface as a regular user, navigate to the application screen that provides the software installation function and attempt to install software components, modules, extensions, or plugins.\n\nIf the application utilizes an approved repository of approved software that has been tested and approved for all application users to install, this is not a finding.\n\nIf the application allows regular users to install untested or unapproved software components, extensions, modules, or plugins without explicit authorization, this is a finding.","fix":"Configure the application to prohibit user installation of software without explicit permission."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24180r493438_chk","severity":"medium","gid":"V-222510","rid":"SV-222510r879751_rule","stig_id":"APSC-DV-001390","gtitle":"SRG-APP-000378","fix_id":"F-24169r493439_fix","documentable":null,"legacy":["SV-84125","V-69503"],"cci":["CCI-001812"],"nist":["CM-11 (2)"]}},{"id":"SV-222511","code":"control 'SV-222511' do\n  title 'The application must enforce access restrictions associated with changes to application configuration.'\n  desc 'Failure to provide logical access restrictions associated with changes to application configuration may have significant effects on the overall security of the system.\n\nWhen dealing with access restrictions pertaining to change control, it should be noted that any changes to the hardware, software, and/or firmware components of the information system and/or application can potentially have significant effects on the overall security of the system.\n\nAccordingly, only qualified and authorized individuals should be allowed to obtain access to application components for the purposes of initiating changes, including upgrades and modifications.\n\nLogical access restrictions include, for example, controls that restrict access to workflow automation, media libraries, abstract layers (e.g., changes implemented into third-party interfaces rather than directly into information systems), and change windows (e.g., changes occur only during specified times, making unauthorized changes easy to discover).'\n  desc 'check', 'Review the application documentation and configuration settings.\n\nAccess the application configuration settings interface as a regular non-privileged user. Attempt to make configuration changes to the application.\n\nIf configuration changes can be made by regular non-privileged users, this is a finding.\n\nReview the locations of all configuration files used by the application.\n\nExamine the file permission settings and determine who has access to the configuration files.\n\nIf access permissions to configuration files are not restricted to application administrators, this is a finding.'\n  desc 'fix', 'Configure the application to limit access to configuration settings to only authorized users.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24181r493441_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222511'\n  tag rid: 'SV-222511r879753_rule'\n  tag stig_id: 'APSC-DV-001410'\n  tag gtitle: 'SRG-APP-000380'\n  tag fix_id: 'F-24170r493442_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84127', 'V-69505']\n  tag cci: ['CCI-001813']\n  tag nist: ['CM-5 (1) (a)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222511.rb"},"title":"The application must enforce access restrictions associated with changes to application configuration.","desc":"Failure to provide logical access restrictions associated with changes to application configuration may have significant effects on the overall security of the system.\n\nWhen dealing with access restrictions pertaining to change control, it should be noted that any changes to the hardware, software, and/or firmware components of the information system and/or application can potentially have significant effects on the overall security of the system.\n\nAccordingly, only qualified and authorized individuals should be allowed to obtain access to application components for the purposes of initiating changes, including upgrades and modifications.\n\nLogical access restrictions include, for example, controls that restrict access to workflow automation, media libraries, abstract layers (e.g., changes implemented into third-party interfaces rather than directly into information systems), and change windows (e.g., changes occur only during specified times, making unauthorized changes easy to discover).","descriptions":{"default":"Failure to provide logical access restrictions associated with changes to application configuration may have significant effects on the overall security of the system.\n\nWhen dealing with access restrictions pertaining to change control, it should be noted that any changes to the hardware, software, and/or firmware components of the information system and/or application can potentially have significant effects on the overall security of the system.\n\nAccordingly, only qualified and authorized individuals should be allowed to obtain access to application components for the purposes of initiating changes, including upgrades and modifications.\n\nLogical access restrictions include, for example, controls that restrict access to workflow automation, media libraries, abstract layers (e.g., changes implemented into third-party interfaces rather than directly into information systems), and change windows (e.g., changes occur only during specified times, making unauthorized changes easy to discover).","check":"Review the application documentation and configuration settings.\n\nAccess the application configuration settings interface as a regular non-privileged user. Attempt to make configuration changes to the application.\n\nIf configuration changes can be made by regular non-privileged users, this is a finding.\n\nReview the locations of all configuration files used by the application.\n\nExamine the file permission settings and determine who has access to the configuration files.\n\nIf access permissions to configuration files are not restricted to application administrators, this is a finding.","fix":"Configure the application to limit access to configuration settings to only authorized users."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24181r493441_chk","severity":"medium","gid":"V-222511","rid":"SV-222511r879753_rule","stig_id":"APSC-DV-001410","gtitle":"SRG-APP-000380","fix_id":"F-24170r493442_fix","documentable":null,"legacy":["SV-84127","V-69505"],"cci":["CCI-001813"],"nist":["CM-5 (1) (a)"]}},{"id":"SV-222512","code":"control 'SV-222512' do\n  title 'The application must audit who makes configuration changes to the application.'\n  desc 'Without auditing the enforcement of access restrictions against changes to the application configuration, it will be difficult to identify attempted attacks and an audit trail will not be available for forensic investigation for after-the-fact actions.\n\nEnforcement actions are the methods or mechanisms used to prevent unauthorized changes to configuration settings. Enforcement action methods may be as simple as denying access to a file based on the application of file permissions (access restriction). Audit items may consist of lists of actions blocked by access restrictions or changes identified after-the-fact.\n\nIf application configuration is maintained by using a text editor to modify a configuration file, this function may be delegated to an operating system file monitoring/auditing capability.'\n  desc 'check', 'Review the application documentation and configuration settings.\n\nAccess the application configuration settings interface as a privileged user.\n\nMake configuration changes to the application.\n\nReview the application audit logs and ensure a log entry is made identifying the privileged user account that was used to make the changes.\n\nIf application configuration is maintained by using a text editor to modify a configuration file, modify the configuration file with a text editor. Review the system logs and ensure a log entry is made for the file modification that identifies the user that was used to make the changes.\n\nIf the user account is not logged, or is a group account such as \"root\", this is a finding.\n\nIf the user account used to make the changes is not logged in the audit records, this is a finding.'\n  desc 'fix', 'Configure the application to create log entries that can be used to identify the user accounts that make application configuration changes.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24182r493444_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222512'\n  tag rid: 'SV-222512r879754_rule'\n  tag stig_id: 'APSC-DV-001420'\n  tag gtitle: 'SRG-APP-000381'\n  tag fix_id: 'F-24171r493445_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84129', 'V-69507']\n  tag cci: ['CCI-001814']\n  tag nist: ['CM-5 (1)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222512.rb"},"title":"The application must audit who makes configuration changes to the application.","desc":"Without auditing the enforcement of access restrictions against changes to the application configuration, it will be difficult to identify attempted attacks and an audit trail will not be available for forensic investigation for after-the-fact actions.\n\nEnforcement actions are the methods or mechanisms used to prevent unauthorized changes to configuration settings. Enforcement action methods may be as simple as denying access to a file based on the application of file permissions (access restriction). Audit items may consist of lists of actions blocked by access restrictions or changes identified after-the-fact.\n\nIf application configuration is maintained by using a text editor to modify a configuration file, this function may be delegated to an operating system file monitoring/auditing capability.","descriptions":{"default":"Without auditing the enforcement of access restrictions against changes to the application configuration, it will be difficult to identify attempted attacks and an audit trail will not be available for forensic investigation for after-the-fact actions.\n\nEnforcement actions are the methods or mechanisms used to prevent unauthorized changes to configuration settings. Enforcement action methods may be as simple as denying access to a file based on the application of file permissions (access restriction). Audit items may consist of lists of actions blocked by access restrictions or changes identified after-the-fact.\n\nIf application configuration is maintained by using a text editor to modify a configuration file, this function may be delegated to an operating system file monitoring/auditing capability.","check":"Review the application documentation and configuration settings.\n\nAccess the application configuration settings interface as a privileged user.\n\nMake configuration changes to the application.\n\nReview the application audit logs and ensure a log entry is made identifying the privileged user account that was used to make the changes.\n\nIf application configuration is maintained by using a text editor to modify a configuration file, modify the configuration file with a text editor. Review the system logs and ensure a log entry is made for the file modification that identifies the user that was used to make the changes.\n\nIf the user account is not logged, or is a group account such as \"root\", this is a finding.\n\nIf the user account used to make the changes is not logged in the audit records, this is a finding.","fix":"Configure the application to create log entries that can be used to identify the user accounts that make application configuration changes."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24182r493444_chk","severity":"medium","gid":"V-222512","rid":"SV-222512r879754_rule","stig_id":"APSC-DV-001420","gtitle":"SRG-APP-000381","fix_id":"F-24171r493445_fix","documentable":null,"legacy":["SV-84129","V-69507"],"cci":["CCI-001814"],"nist":["CM-5 (1)"]}},{"id":"SV-222513","code":"control 'SV-222513' do\n  title 'The application must have the capability to prevent the installation of patches, service packs, or application components without verification the software component has been digitally signed using a certificate that is recognized and approved by the organization.'\n  desc 'Changes to any software components can have significant effects on the overall security of the application. Verifying software components have been digitally signed using a certificate that is recognized and approved by the organization ensures the software has not been tampered with and that it has been provided by a trusted vendor.\n\nAccordingly, patches, service packs, or application components must be signed with a certificate recognized and approved by the organization.\n\nVerifying the authenticity of the software prior to installation validates the integrity of the patch or upgrade received from a vendor. This ensures the software has not been tampered with and that it has been provided by a trusted vendor. Self-signed certificates are disallowed by this requirement. The application should not have to verify the software again. This requirement does not mandate DoD certificates for this purpose; however, the certificate used to verify the software must be from an approved CA.\n\nIf this capability is not present, the vendor must provide a cryptographic hash value that can be verified by a system administrator prior to installation.'\n  desc 'check', 'Review the application documentation and interview the application administrator to determine the process and commands used for patching the application.\n\nAccess application configuration settings.\n\nReview commands and procedures used to patch the application and ensure a capability exists to prevent unsigned patches from being applied.\n\nIf the application is not capable of preventing installation of patches and packages that are not signed, or if the vendor does not provide a cryptographic hash value that can be manually checked prior to installation, this is a finding.'\n  desc 'fix', 'Design and configure the application to have the capability to prevent unsigned patches and packages from being installed.\n\nProvide a cryptographic hash value that can be verified by a system administrator prior to installation.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-36244r602297_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222513'\n  tag rid: 'SV-222513r879584_rule'\n  tag stig_id: 'APSC-DV-001430'\n  tag gtitle: 'SRG-APP-000131'\n  tag fix_id: 'F-36210r602298_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84131', 'V-69509']\n  tag cci: ['CCI-001749']\n  tag nist: ['CM-5 (3)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222513.rb"},"title":"The application must have the capability to prevent the installation of patches, service packs, or application components without verification the software component has been digitally signed using a certificate that is recognized and approved by the organization.","desc":"Changes to any software components can have significant effects on the overall security of the application. Verifying software components have been digitally signed using a certificate that is recognized and approved by the organization ensures the software has not been tampered with and that it has been provided by a trusted vendor.\n\nAccordingly, patches, service packs, or application components must be signed with a certificate recognized and approved by the organization.\n\nVerifying the authenticity of the software prior to installation validates the integrity of the patch or upgrade received from a vendor. This ensures the software has not been tampered with and that it has been provided by a trusted vendor. Self-signed certificates are disallowed by this requirement. The application should not have to verify the software again. This requirement does not mandate DoD certificates for this purpose; however, the certificate used to verify the software must be from an approved CA.\n\nIf this capability is not present, the vendor must provide a cryptographic hash value that can be verified by a system administrator prior to installation.","descriptions":{"default":"Changes to any software components can have significant effects on the overall security of the application. Verifying software components have been digitally signed using a certificate that is recognized and approved by the organization ensures the software has not been tampered with and that it has been provided by a trusted vendor.\n\nAccordingly, patches, service packs, or application components must be signed with a certificate recognized and approved by the organization.\n\nVerifying the authenticity of the software prior to installation validates the integrity of the patch or upgrade received from a vendor. This ensures the software has not been tampered with and that it has been provided by a trusted vendor. Self-signed certificates are disallowed by this requirement. The application should not have to verify the software again. This requirement does not mandate DoD certificates for this purpose; however, the certificate used to verify the software must be from an approved CA.\n\nIf this capability is not present, the vendor must provide a cryptographic hash value that can be verified by a system administrator prior to installation.","check":"Review the application documentation and interview the application administrator to determine the process and commands used for patching the application.\n\nAccess application configuration settings.\n\nReview commands and procedures used to patch the application and ensure a capability exists to prevent unsigned patches from being applied.\n\nIf the application is not capable of preventing installation of patches and packages that are not signed, or if the vendor does not provide a cryptographic hash value that can be manually checked prior to installation, this is a finding.","fix":"Design and configure the application to have the capability to prevent unsigned patches and packages from being installed.\n\nProvide a cryptographic hash value that can be verified by a system administrator prior to installation."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-36244r602297_chk","severity":"medium","gid":"V-222513","rid":"SV-222513r879584_rule","stig_id":"APSC-DV-001430","gtitle":"SRG-APP-000131","fix_id":"F-36210r602298_fix","documentable":null,"legacy":["SV-84131","V-69509"],"cci":["CCI-001749"],"nist":["CM-5 (3)"]}},{"id":"SV-222514","code":"control 'SV-222514' do\n  title 'The applications must limit privileges to change the software resident within software libraries.'\n  desc 'If the application were to allow any user to make changes to software libraries, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.\n\nThis requirement applies to applications with software libraries that are accessible and configurable, as in the case of interpreted languages. Software libraries also include privileged programs which execute with escalated privileges. Only qualified and authorized individuals will be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications.'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify the application architecture.\n\nIdentify application folders where application libraries are stored.\n\nReview permissions of application folders and library files contained with the folders to ensure file permissions restrict access to authorized users or processes.\n\nAccess application configuration settings.\n\nExamine settings for capability to update software libraries or extend application functionality via the application.\n\nReview user roles and access rights within the application to determine if access to this capability is restricted to authorized users.\n\nIf file restrictions do not limit write access to library files and if the application does not restrict access to library update functionality, this is a finding.'\n  desc 'fix', 'Configure the application OS file permissions to restrict access to software libraries and configure the application to restrict user access regarding software library update functionality to only authorized users or processes.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24184r493450_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222514'\n  tag rid: 'SV-222514r879586_rule'\n  tag stig_id: 'APSC-DV-001440'\n  tag gtitle: 'SRG-APP-000133'\n  tag fix_id: 'F-24173r493451_fix'\n  tag 'documentable'\n  tag legacy: ['V-69511', 'SV-84133']\n  tag cci: ['CCI-001499']\n  tag nist: ['CM-5 (6)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222514.rb"},"title":"The applications must limit privileges to change the software resident within software libraries.","desc":"If the application were to allow any user to make changes to software libraries, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.\n\nThis requirement applies to applications with software libraries that are accessible and configurable, as in the case of interpreted languages. Software libraries also include privileged programs which execute with escalated privileges. Only qualified and authorized individuals will be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications.","descriptions":{"default":"If the application were to allow any user to make changes to software libraries, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.\n\nThis requirement applies to applications with software libraries that are accessible and configurable, as in the case of interpreted languages. Software libraries also include privileged programs which execute with escalated privileges. Only qualified and authorized individuals will be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications.","check":"Review the application documentation and interview the application administrator to identify the application architecture.\n\nIdentify application folders where application libraries are stored.\n\nReview permissions of application folders and library files contained with the folders to ensure file permissions restrict access to authorized users or processes.\n\nAccess application configuration settings.\n\nExamine settings for capability to update software libraries or extend application functionality via the application.\n\nReview user roles and access rights within the application to determine if access to this capability is restricted to authorized users.\n\nIf file restrictions do not limit write access to library files and if the application does not restrict access to library update functionality, this is a finding.","fix":"Configure the application OS file permissions to restrict access to software libraries and configure the application to restrict user access regarding software library update functionality to only authorized users or processes."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24184r493450_chk","severity":"medium","gid":"V-222514","rid":"SV-222514r879586_rule","stig_id":"APSC-DV-001440","gtitle":"SRG-APP-000133","fix_id":"F-24173r493451_fix","documentable":null,"legacy":["V-69511","SV-84133"],"cci":["CCI-001499"],"nist":["CM-5 (6)"]}},{"id":"SV-222515","code":"control 'SV-222515' do\n  title 'An application vulnerability assessment must be conducted.'\n  desc 'An application vulnerability assessment is a test conducted in order to identify weaknesses and security vulnerabilities that may exist within an application.  The testing must cover all aspects and components of the application architecture.  If an application consists of a web server and a database, then both components must be tested for vulnerabilities to the fullest extent possible.\n\nVulnerability assessment tests normally utilize a combination of specialized software called application vulnerability scanners as well as custom scripts and manual tests.  In some instances, multiple tools are required in order to test all aspects of application features, functions and architecture.  The vulnerability scanner is typically configured to communicate with the application through the user interface or via an applications communication port.  In addition to using automated tools, manual tests conducted from the OS console such as executing custom scripts or reviewing configuration settings for known vulnerabilities may also be included as part of the test.\n\nTesters will typically utilize application user test accounts in order to test application features and functionality such as adding content, executing queries and completing transactions. The vulnerability testing software utilizes user actions and access as well as a list of known security vulnerabilities in order to detect and identify weak security controls or misconfigurations that could potentially be manipulated by the user or create a security vulnerability.\n\nThe Open Web Application Security Project (OWASP) top 10 for 2013 includes the following top issues that should be tested.  The site is available by pointing your browser to https://www.owasp.org. \n\nA1 Injection\nA2 Weak authentication and session management\nA3 XSS\nA4 Insecure Direct Object References\nA5 Security Misconfiguration\nA6 Sensitive Data Exposure\nA7 Missing Function Level Access Control\nA8 Cross Site Request Forgery\nA9 Using Components with Known Vulnerabilities\nA10 Unvalidated Redirects and Forwards\n\nThe OWASP top 10 are categories of tests that can be applied to most but not necessarily all applications and are provided as an example of what to test for.  Scanning tools include a multitude of tests that fall under these categories but may refer to these tests by a different name.\n\nTesting must be conducted on a periodic basis while the application is in production and subsequent to system changes to ensure any changes made to the system do not introduce new security vulnerabilities.'\n  desc 'check', 'Review the application documentation to understand application architecture.\n\nInterview the application administrator, obtain and review their application vulnerability scanning process.\n\nRequest the latest scan results including scan configuration settings.\n\nReview scan configurations and ensure coverage of all application architecture has been tested.  The proper scanning tool or combination of tools must be utilized in order to ensure the full range of application features and functionality is tested. \n\nFor example, if the application includes a web interface and a SQL database, then ensure test results for web and SQL vulnerabilities are provided.  Although web and SQL applications are included as examples and are the prevalent types of applications, this requirement is not intended to be limited to just the aforementioned application architectures.   Ensure test results are provided from all testing tools employed during vulnerability testing.\n\nIf high risk security vulnerabilities are identified in the scan results, request subsequent test results that indicate the issues have been fixed or mitigated.\n\nIf the high risk issues identified in the report have not been fixed or mitigated to a level accepted by the ISSO and the ISSM, or if the application administrator cannot produce vulnerability security testing results that cover the range of application functionality, this is a finding.'\n  desc 'fix', 'Configure the application vulnerability scanners to test all components of the application, conduct vulnerability scans on a regular basis and remediate identified issues.  Retain scan results for compliance verification.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24185r493453_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222515'\n  tag rid: 'SV-222515r879887_rule'\n  tag stig_id: 'APSC-DV-001460'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24174r493454_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84135', 'V-69513']\n  tag cci: ['CCI-000366']\n  tag nist: ['CM-6 b']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222515.rb"},"title":"An application vulnerability assessment must be conducted.","desc":"An application vulnerability assessment is a test conducted in order to identify weaknesses and security vulnerabilities that may exist within an application.  The testing must cover all aspects and components of the application architecture.  If an application consists of a web server and a database, then both components must be tested for vulnerabilities to the fullest extent possible.\n\nVulnerability assessment tests normally utilize a combination of specialized software called application vulnerability scanners as well as custom scripts and manual tests.  In some instances, multiple tools are required in order to test all aspects of application features, functions and architecture.  The vulnerability scanner is typically configured to communicate with the application through the user interface or via an applications communication port.  In addition to using automated tools, manual tests conducted from the OS console such as executing custom scripts or reviewing configuration settings for known vulnerabilities may also be included as part of the test.\n\nTesters will typically utilize application user test accounts in order to test application features and functionality such as adding content, executing queries and completing transactions. The vulnerability testing software utilizes user actions and access as well as a list of known security vulnerabilities in order to detect and identify weak security controls or misconfigurations that could potentially be manipulated by the user or create a security vulnerability.\n\nThe Open Web Application Security Project (OWASP) top 10 for 2013 includes the following top issues that should be tested.  The site is available by pointing your browser to https://www.owasp.org. \n\nA1 Injection\nA2 Weak authentication and session management\nA3 XSS\nA4 Insecure Direct Object References\nA5 Security Misconfiguration\nA6 Sensitive Data Exposure\nA7 Missing Function Level Access Control\nA8 Cross Site Request Forgery\nA9 Using Components with Known Vulnerabilities\nA10 Unvalidated Redirects and Forwards\n\nThe OWASP top 10 are categories of tests that can be applied to most but not necessarily all applications and are provided as an example of what to test for.  Scanning tools include a multitude of tests that fall under these categories but may refer to these tests by a different name.\n\nTesting must be conducted on a periodic basis while the application is in production and subsequent to system changes to ensure any changes made to the system do not introduce new security vulnerabilities.","descriptions":{"default":"An application vulnerability assessment is a test conducted in order to identify weaknesses and security vulnerabilities that may exist within an application.  The testing must cover all aspects and components of the application architecture.  If an application consists of a web server and a database, then both components must be tested for vulnerabilities to the fullest extent possible.\n\nVulnerability assessment tests normally utilize a combination of specialized software called application vulnerability scanners as well as custom scripts and manual tests.  In some instances, multiple tools are required in order to test all aspects of application features, functions and architecture.  The vulnerability scanner is typically configured to communicate with the application through the user interface or via an applications communication port.  In addition to using automated tools, manual tests conducted from the OS console such as executing custom scripts or reviewing configuration settings for known vulnerabilities may also be included as part of the test.\n\nTesters will typically utilize application user test accounts in order to test application features and functionality such as adding content, executing queries and completing transactions. The vulnerability testing software utilizes user actions and access as well as a list of known security vulnerabilities in order to detect and identify weak security controls or misconfigurations that could potentially be manipulated by the user or create a security vulnerability.\n\nThe Open Web Application Security Project (OWASP) top 10 for 2013 includes the following top issues that should be tested.  The site is available by pointing your browser to https://www.owasp.org. \n\nA1 Injection\nA2 Weak authentication and session management\nA3 XSS\nA4 Insecure Direct Object References\nA5 Security Misconfiguration\nA6 Sensitive Data Exposure\nA7 Missing Function Level Access Control\nA8 Cross Site Request Forgery\nA9 Using Components with Known Vulnerabilities\nA10 Unvalidated Redirects and Forwards\n\nThe OWASP top 10 are categories of tests that can be applied to most but not necessarily all applications and are provided as an example of what to test for.  Scanning tools include a multitude of tests that fall under these categories but may refer to these tests by a different name.\n\nTesting must be conducted on a periodic basis while the application is in production and subsequent to system changes to ensure any changes made to the system do not introduce new security vulnerabilities.","check":"Review the application documentation to understand application architecture.\n\nInterview the application administrator, obtain and review their application vulnerability scanning process.\n\nRequest the latest scan results including scan configuration settings.\n\nReview scan configurations and ensure coverage of all application architecture has been tested.  The proper scanning tool or combination of tools must be utilized in order to ensure the full range of application features and functionality is tested. \n\nFor example, if the application includes a web interface and a SQL database, then ensure test results for web and SQL vulnerabilities are provided.  Although web and SQL applications are included as examples and are the prevalent types of applications, this requirement is not intended to be limited to just the aforementioned application architectures.   Ensure test results are provided from all testing tools employed during vulnerability testing.\n\nIf high risk security vulnerabilities are identified in the scan results, request subsequent test results that indicate the issues have been fixed or mitigated.\n\nIf the high risk issues identified in the report have not been fixed or mitigated to a level accepted by the ISSO and the ISSM, or if the application administrator cannot produce vulnerability security testing results that cover the range of application functionality, this is a finding.","fix":"Configure the application vulnerability scanners to test all components of the application, conduct vulnerability scans on a regular basis and remediate identified issues.  Retain scan results for compliance verification."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24185r493453_chk","severity":"medium","gid":"V-222515","rid":"SV-222515r879887_rule","stig_id":"APSC-DV-001460","gtitle":"SRG-APP-000516","fix_id":"F-24174r493454_fix","documentable":null,"legacy":["SV-84135","V-69513"],"cci":["CCI-000366"],"nist":["CM-6 b"]}},{"id":"SV-222516","code":"control 'SV-222516' do\n  title 'The application must prevent program execution in accordance with organization-defined policies regarding software program usage and restrictions, and/or rules authorizing the terms and conditions of software program usage.'\n  desc 'Control of application execution is a mechanism used to prevent execution of unauthorized applications in order to follow the rules of least privilege. Some applications may provide a capability that runs counter to the mission or provides users with functionality that exceeds mission requirements.\n\nSome of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions). Removal of executable programs is not always possible; therefore, establishing a method of preventing program execution is critical to maintaining a secure system baseline.\n\nSoftware program restrictions include restricting execution of programs in certain environments, while preventing execution in other environments; or limiting execution of certain application functionality based on organization-defined criteria (e.g., privileges, subnets, sandboxed environments, security managers, roles).'\n  desc 'check', 'Review the application documentation and interview the application administrator to determine if policies, rules, or restrictions exist regarding application usage or terms which authorize the conditions of application use.\n\nIf the policy, terms, or conditions state there are no usage restrictions, this requirement is not applicable.\n\nInterview the application administrator, review policy, terms, and conditions documents to determine what the terms and conditions of application usage are.\n\nHave the application administrator demonstrate how the program execution is restricted in accordance with the policy terms and conditions. Typical methods include but are not limited to the use of Windows Group Policy, AppLocker, Software Restriction Policies, Java Security Manager, and Role-Based Access Control (RBAC).\n\nIf application requirements or policy documents specify application execution restriction requirements and the execution of the application or its subcomponents are not restricted in accordance with requirements or policy, this is a finding.'\n  desc 'fix', 'Restrict application execution in accordance with the policy, terms, and conditions specified.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24186r493456_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222516'\n  tag rid: 'SV-222516r879757_rule'\n  tag stig_id: 'APSC-DV-001480'\n  tag gtitle: 'SRG-APP-000384'\n  tag fix_id: 'F-24175r493457_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84137', 'V-69515']\n  tag cci: ['CCI-001764']\n  tag nist: ['CM-7 (2)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222516.rb"},"title":"The application must prevent program execution in accordance with organization-defined policies regarding software program usage and restrictions, and/or rules authorizing the terms and conditions of software program usage.","desc":"Control of application execution is a mechanism used to prevent execution of unauthorized applications in order to follow the rules of least privilege. Some applications may provide a capability that runs counter to the mission or provides users with functionality that exceeds mission requirements.\n\nSome of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions). Removal of executable programs is not always possible; therefore, establishing a method of preventing program execution is critical to maintaining a secure system baseline.\n\nSoftware program restrictions include restricting execution of programs in certain environments, while preventing execution in other environments; or limiting execution of certain application functionality based on organization-defined criteria (e.g., privileges, subnets, sandboxed environments, security managers, roles).","descriptions":{"default":"Control of application execution is a mechanism used to prevent execution of unauthorized applications in order to follow the rules of least privilege. Some applications may provide a capability that runs counter to the mission or provides users with functionality that exceeds mission requirements.\n\nSome of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions). Removal of executable programs is not always possible; therefore, establishing a method of preventing program execution is critical to maintaining a secure system baseline.\n\nSoftware program restrictions include restricting execution of programs in certain environments, while preventing execution in other environments; or limiting execution of certain application functionality based on organization-defined criteria (e.g., privileges, subnets, sandboxed environments, security managers, roles).","check":"Review the application documentation and interview the application administrator to determine if policies, rules, or restrictions exist regarding application usage or terms which authorize the conditions of application use.\n\nIf the policy, terms, or conditions state there are no usage restrictions, this requirement is not applicable.\n\nInterview the application administrator, review policy, terms, and conditions documents to determine what the terms and conditions of application usage are.\n\nHave the application administrator demonstrate how the program execution is restricted in accordance with the policy terms and conditions. Typical methods include but are not limited to the use of Windows Group Policy, AppLocker, Software Restriction Policies, Java Security Manager, and Role-Based Access Control (RBAC).\n\nIf application requirements or policy documents specify application execution restriction requirements and the execution of the application or its subcomponents are not restricted in accordance with requirements or policy, this is a finding.","fix":"Restrict application execution in accordance with the policy, terms, and conditions specified."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24186r493456_chk","severity":"medium","gid":"V-222516","rid":"SV-222516r879757_rule","stig_id":"APSC-DV-001480","gtitle":"SRG-APP-000384","fix_id":"F-24175r493457_fix","documentable":null,"legacy":["SV-84137","V-69515"],"cci":["CCI-001764"],"nist":["CM-7 (2)"]}},{"id":"SV-222517","code":"control 'SV-222517' do\n  title 'The application must employ a deny-all, permit-by-exception (whitelist) policy to allow the execution of authorized software programs.'\n  desc 'Utilizing a whitelist provides a configuration management method for allowing the execution of only authorized software. Using only authorized software decreases risk by limiting the number of potential vulnerabilities.\n\nThe organization must identify authorized software programs and permit execution of authorized software. The process used to identify software programs that are authorized to execute on organizational information systems is commonly referred to as whitelisting.\n\nVerification of whitelisted software can occur either prior to execution or at system startup.\n\nThis requirement applies to configuration management applications or similar types of applications designed to manage system processes and configurations (e.g., HBSS and software wrappers).'\n  desc 'check', 'If the application is not a configuration management or similar type of application designed to manage system processes and configurations, this requirement is not applicable.\n\nReview the application documentation and interview the application administrator to identify if application whitelisting specifying which applications or application subcomponents are allowed to execute is in use.\n\nCheck for the existence of policy settings or policy files that can be configured to restrict application execution. Have the application administrator demonstrate how the program execution is restricted. Look for a deny-all, permit-by-exception policy of restriction.\n\nSome methods for restricting execution include but are not limited to the use of custom capabilities built into the application or leveraging of Windows Group Policy, AppLocker, Software Restriction Policies, Java Security Manager or Role-Based Access Controls (RBAC).\n\nIf application whitelisting is not utilized or does not follow a deny-all, permit-by-exception (whitelist) policy, this is a finding.'\n  desc 'fix', 'Configure the application to utilize a deny-all, permit-by-exception policy when allowing the execution of authorized software.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24187r493459_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222517'\n  tag rid: 'SV-222517r879759_rule'\n  tag stig_id: 'APSC-DV-001490'\n  tag gtitle: 'SRG-APP-000386'\n  tag fix_id: 'F-24176r493460_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84139', 'V-69517']\n  tag cci: ['CCI-001774']\n  tag nist: ['CM-7 (5) (b)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222517.rb"},"title":"The application must employ a deny-all, permit-by-exception (whitelist) policy to allow the execution of authorized software programs.","desc":"Utilizing a whitelist provides a configuration management method for allowing the execution of only authorized software. Using only authorized software decreases risk by limiting the number of potential vulnerabilities.\n\nThe organization must identify authorized software programs and permit execution of authorized software. The process used to identify software programs that are authorized to execute on organizational information systems is commonly referred to as whitelisting.\n\nVerification of whitelisted software can occur either prior to execution or at system startup.\n\nThis requirement applies to configuration management applications or similar types of applications designed to manage system processes and configurations (e.g., HBSS and software wrappers).","descriptions":{"default":"Utilizing a whitelist provides a configuration management method for allowing the execution of only authorized software. Using only authorized software decreases risk by limiting the number of potential vulnerabilities.\n\nThe organization must identify authorized software programs and permit execution of authorized software. The process used to identify software programs that are authorized to execute on organizational information systems is commonly referred to as whitelisting.\n\nVerification of whitelisted software can occur either prior to execution or at system startup.\n\nThis requirement applies to configuration management applications or similar types of applications designed to manage system processes and configurations (e.g., HBSS and software wrappers).","check":"If the application is not a configuration management or similar type of application designed to manage system processes and configurations, this requirement is not applicable.\n\nReview the application documentation and interview the application administrator to identify if application whitelisting specifying which applications or application subcomponents are allowed to execute is in use.\n\nCheck for the existence of policy settings or policy files that can be configured to restrict application execution. Have the application administrator demonstrate how the program execution is restricted. Look for a deny-all, permit-by-exception policy of restriction.\n\nSome methods for restricting execution include but are not limited to the use of custom capabilities built into the application or leveraging of Windows Group Policy, AppLocker, Software Restriction Policies, Java Security Manager or Role-Based Access Controls (RBAC).\n\nIf application whitelisting is not utilized or does not follow a deny-all, permit-by-exception (whitelist) policy, this is a finding.","fix":"Configure the application to utilize a deny-all, permit-by-exception policy when allowing the execution of authorized software."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24187r493459_chk","severity":"medium","gid":"V-222517","rid":"SV-222517r879759_rule","stig_id":"APSC-DV-001490","gtitle":"SRG-APP-000386","fix_id":"F-24176r493460_fix","documentable":null,"legacy":["SV-84139","V-69517"],"cci":["CCI-001774"],"nist":["CM-7 (5) (b)"]}},{"id":"SV-222518","code":"control 'SV-222518' do\n  title 'The application must be configured to disable non-essential capabilities.'\n  desc 'It is detrimental for applications to provide, or install by default, functionality exceeding requirements or mission objectives. These unnecessary capabilities or services are often overlooked and therefore may remain unsecured. They increase the risk to the platform by providing additional attack vectors.\n\nApplications are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).\n\nExamples of non-essential capabilities include, but are not limited to, advertising software or browser plug-ins not related to requirements or providing a wide array of functionality not required for every mission, but cannot be disabled.'\n  desc 'check', \"Review the application guidance, application requirements documentation, and interview the application administrator.\n\nIdentify the application's operational requirements and what services the application is intended to provide users.\n\nReview the overall application features and functionality via the user interface.\n\nReview and identify installed application software modules via configuration settings.\n\nUsing the relevant OS commands, identify services running on the system and have the application administrator identify the services related to the application.\n\nIf the application is operating with extraneous capabilities that have not been defined as required in order to meet mission objectives, this is a finding.\"\n  desc 'fix', \"Disable application extraneous application functionality that is not required in order to fulfill the application's mission.\"\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24188r493462_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222518'\n  tag rid: 'SV-222518r879587_rule'\n  tag stig_id: 'APSC-DV-001500'\n  tag gtitle: 'SRG-APP-000141'\n  tag fix_id: 'F-24177r493463_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84141', 'V-69519']\n  tag cci: ['CCI-000381']\n  tag nist: ['CM-7 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222518.rb"},"title":"The application must be configured to disable non-essential capabilities.","desc":"It is detrimental for applications to provide, or install by default, functionality exceeding requirements or mission objectives. These unnecessary capabilities or services are often overlooked and therefore may remain unsecured. They increase the risk to the platform by providing additional attack vectors.\n\nApplications are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).\n\nExamples of non-essential capabilities include, but are not limited to, advertising software or browser plug-ins not related to requirements or providing a wide array of functionality not required for every mission, but cannot be disabled.","descriptions":{"default":"It is detrimental for applications to provide, or install by default, functionality exceeding requirements or mission objectives. These unnecessary capabilities or services are often overlooked and therefore may remain unsecured. They increase the risk to the platform by providing additional attack vectors.\n\nApplications are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).\n\nExamples of non-essential capabilities include, but are not limited to, advertising software or browser plug-ins not related to requirements or providing a wide array of functionality not required for every mission, but cannot be disabled.","check":"Review the application guidance, application requirements documentation, and interview the application administrator.\n\nIdentify the application's operational requirements and what services the application is intended to provide users.\n\nReview the overall application features and functionality via the user interface.\n\nReview and identify installed application software modules via configuration settings.\n\nUsing the relevant OS commands, identify services running on the system and have the application administrator identify the services related to the application.\n\nIf the application is operating with extraneous capabilities that have not been defined as required in order to meet mission objectives, this is a finding.","fix":"Disable application extraneous application functionality that is not required in order to fulfill the application's mission."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24188r493462_chk","severity":"medium","gid":"V-222518","rid":"SV-222518r879587_rule","stig_id":"APSC-DV-001500","gtitle":"SRG-APP-000141","fix_id":"F-24177r493463_fix","documentable":null,"legacy":["SV-84141","V-69519"],"cci":["CCI-000381"],"nist":["CM-7 a"]}},{"id":"SV-222519","code":"control 'SV-222519' do\n  title 'The application must be configured to use only functions, ports, and protocols permitted to it in the PPSM CAL.'\n  desc 'In order to prevent unauthorized connection of devices, unauthorized transfer of information, or unauthorized tunneling (i.e., embedding of data types within data types), organizations must disable or restrict unused or unnecessary physical and logical ports/protocols on information systems.\n\nApplications are capable of providing a wide variety of functions and services. Some of the functions and services provided by default may not be necessary to support essential organizational operations. Additionally, it is sometimes convenient to provide multiple services from a single component (e.g., email and web services; however, doing so increases risk over limiting the services provided by any one component.\n\nTo support the requirements and principles of least functionality, the application must support the organizational requirements providing only essential capabilities and limiting the use of ports, protocols, and/or services to only those required, authorized, and approved to conduct official business or to address authorized quality of life issues.'\n  desc 'check', 'Review the application documentation and configuration.\n\nInterview the application administrator.\n\nIdentify the network ports and protocols that are utilized by the application.\n\nUsing a combination of relevant OS commands and application configuration utilities, identify the TCP/IP port numbers the application is configured to utilize and is utilizing.\n\nReview the PPSM Category Assurance List (CAL) at: \n\nhttps://cyber.mil/ppsm/cal/\n\nVerify the ports used by the application are approved by the PPSM CAL.\n\nIf the ports are not approved by the PPSM CAL, this is a finding.'\n  desc 'fix', 'Configure the application to utilize application ports approved by the PPSM CAL.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24189r918118_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222519'\n  tag rid: 'SV-222519r918119_rule'\n  tag stig_id: 'APSC-DV-001510'\n  tag gtitle: 'SRG-APP-000142'\n  tag fix_id: 'F-24178r493466_fix'\n  tag 'documentable'\n  tag legacy: ['V-69521', 'SV-84143']\n  tag cci: ['CCI-000382']\n  tag nist: ['CM-7 b']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222519.rb"},"title":"The application must be configured to use only functions, ports, and protocols permitted to it in the PPSM CAL.","desc":"In order to prevent unauthorized connection of devices, unauthorized transfer of information, or unauthorized tunneling (i.e., embedding of data types within data types), organizations must disable or restrict unused or unnecessary physical and logical ports/protocols on information systems.\n\nApplications are capable of providing a wide variety of functions and services. Some of the functions and services provided by default may not be necessary to support essential organizational operations. Additionally, it is sometimes convenient to provide multiple services from a single component (e.g., email and web services; however, doing so increases risk over limiting the services provided by any one component.\n\nTo support the requirements and principles of least functionality, the application must support the organizational requirements providing only essential capabilities and limiting the use of ports, protocols, and/or services to only those required, authorized, and approved to conduct official business or to address authorized quality of life issues.","descriptions":{"default":"In order to prevent unauthorized connection of devices, unauthorized transfer of information, or unauthorized tunneling (i.e., embedding of data types within data types), organizations must disable or restrict unused or unnecessary physical and logical ports/protocols on information systems.\n\nApplications are capable of providing a wide variety of functions and services. Some of the functions and services provided by default may not be necessary to support essential organizational operations. Additionally, it is sometimes convenient to provide multiple services from a single component (e.g., email and web services; however, doing so increases risk over limiting the services provided by any one component.\n\nTo support the requirements and principles of least functionality, the application must support the organizational requirements providing only essential capabilities and limiting the use of ports, protocols, and/or services to only those required, authorized, and approved to conduct official business or to address authorized quality of life issues.","check":"Review the application documentation and configuration.\n\nInterview the application administrator.\n\nIdentify the network ports and protocols that are utilized by the application.\n\nUsing a combination of relevant OS commands and application configuration utilities, identify the TCP/IP port numbers the application is configured to utilize and is utilizing.\n\nReview the PPSM Category Assurance List (CAL) at: \n\nhttps://cyber.mil/ppsm/cal/\n\nVerify the ports used by the application are approved by the PPSM CAL.\n\nIf the ports are not approved by the PPSM CAL, this is a finding.","fix":"Configure the application to utilize application ports approved by the PPSM CAL."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24189r918118_chk","severity":"medium","gid":"V-222519","rid":"SV-222519r918119_rule","stig_id":"APSC-DV-001510","gtitle":"SRG-APP-000142","fix_id":"F-24178r493466_fix","documentable":null,"legacy":["V-69521","SV-84143"],"cci":["CCI-000382"],"nist":["CM-7 b"]}},{"id":"SV-222520","code":"control 'SV-222520' do\n  title 'The application must require users to reauthenticate when organization-defined circumstances or situations require reauthentication.'\n  desc 'Without reauthentication, users may access resources or perform tasks for which they do not have authorization.\n\nWhen applications provide the capability to change security roles or escalate the functional capability of the application, it is critical the user reauthenticate.\n\nIn addition to the reauthentication requirements associated with session locks, organizations may require reauthentication of individuals and/or devices in other situations, including (but not limited to) the following circumstances:\n\n(i) When authenticators change;\n(ii) When roles change;\n(iii) When security categories of information systems change;\n(iv) When the execution of privileged functions occurs;\n(v) After a fixed period of time;\nor\n(vi) Periodically.\n\nWithin the DoD, the minimum circumstances requiring reauthentication are privilege escalation and role changes.'\n  desc 'check', 'Review the application guidance and interview the application administrator.\n\nIdentify the application user roles.\n\nIdentify the methods and manner in which an application user is allowed to escalate their privileges or change their role.\n\nCreate or utilize an account that has 2 roles within the application, both should be non-administrator.\nExample: User role and Report Creator role.\n\nAuthenticate to the application as the user in the User role.\n\nAccess the application functionality that allows the user to change their role and change from the User role to the Report Creator role.\n\nIf the user is not prompted to reauthenticate before the user’s role is changed, this is a finding.\n\nLog out of the application and log back in as the User role.\n\nAccess the application functionality that allows the user to escalate their privileges to an administrative user.\n\nAttempt to escalate the privileges of the user.\n\nIf the user is not prompted to reauthenticate before the user is allowed to proceed with escalated privileges, this is a finding.'\n  desc 'fix', 'Configure the application to require reauthentication before user privilege is escalated and user roles are changed.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24190r493468_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222520'\n  tag rid: 'SV-222520r879762_rule'\n  tag stig_id: 'APSC-DV-001520'\n  tag gtitle: 'SRG-APP-000389'\n  tag fix_id: 'F-24179r493469_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84145', 'V-69523']\n  tag cci: ['CCI-002038']\n  tag nist: ['IA-11']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222520.rb"},"title":"The application must require users to reauthenticate when organization-defined circumstances or situations require reauthentication.","desc":"Without reauthentication, users may access resources or perform tasks for which they do not have authorization.\n\nWhen applications provide the capability to change security roles or escalate the functional capability of the application, it is critical the user reauthenticate.\n\nIn addition to the reauthentication requirements associated with session locks, organizations may require reauthentication of individuals and/or devices in other situations, including (but not limited to) the following circumstances:\n\n(i) When authenticators change;\n(ii) When roles change;\n(iii) When security categories of information systems change;\n(iv) When the execution of privileged functions occurs;\n(v) After a fixed period of time;\nor\n(vi) Periodically.\n\nWithin the DoD, the minimum circumstances requiring reauthentication are privilege escalation and role changes.","descriptions":{"default":"Without reauthentication, users may access resources or perform tasks for which they do not have authorization.\n\nWhen applications provide the capability to change security roles or escalate the functional capability of the application, it is critical the user reauthenticate.\n\nIn addition to the reauthentication requirements associated with session locks, organizations may require reauthentication of individuals and/or devices in other situations, including (but not limited to) the following circumstances:\n\n(i) When authenticators change;\n(ii) When roles change;\n(iii) When security categories of information systems change;\n(iv) When the execution of privileged functions occurs;\n(v) After a fixed period of time;\nor\n(vi) Periodically.\n\nWithin the DoD, the minimum circumstances requiring reauthentication are privilege escalation and role changes.","check":"Review the application guidance and interview the application administrator.\n\nIdentify the application user roles.\n\nIdentify the methods and manner in which an application user is allowed to escalate their privileges or change their role.\n\nCreate or utilize an account that has 2 roles within the application, both should be non-administrator.\nExample: User role and Report Creator role.\n\nAuthenticate to the application as the user in the User role.\n\nAccess the application functionality that allows the user to change their role and change from the User role to the Report Creator role.\n\nIf the user is not prompted to reauthenticate before the user’s role is changed, this is a finding.\n\nLog out of the application and log back in as the User role.\n\nAccess the application functionality that allows the user to escalate their privileges to an administrative user.\n\nAttempt to escalate the privileges of the user.\n\nIf the user is not prompted to reauthenticate before the user is allowed to proceed with escalated privileges, this is a finding.","fix":"Configure the application to require reauthentication before user privilege is escalated and user roles are changed."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24190r493468_chk","severity":"medium","gid":"V-222520","rid":"SV-222520r879762_rule","stig_id":"APSC-DV-001520","gtitle":"SRG-APP-000389","fix_id":"F-24179r493469_fix","documentable":null,"legacy":["SV-84145","V-69523"],"cci":["CCI-002038"],"nist":["IA-11"]}},{"id":"SV-222521","code":"control 'SV-222521' do\n  title 'The application must require devices to reauthenticate when organization-defined circumstances or situations requiring reauthentication.'\n  desc 'Without reauthenticating devices, unidentified or unknown devices may be introduced; thereby facilitating malicious activity.\n\nIn addition to the reauthentication requirements associated with session locks, organizations may require reauthentication of devices, including (but not limited to), the following other situations:\n\n(i) When authenticators change;\n(ii) When roles change;\n(iii) When security categories of information systems change;\n(iv) After a fixed period of time;\nor\n(v) Periodically.\n\nFor distributed architectures (e.g., service-oriented architectures), the decisions regarding the validation of identification claims may be made by services separate from the services acting on those decisions. In such situations, it is necessary to provide the identification decisions (as opposed to the actual identifiers) to the services that need to act on those decisions.\n\nGateways and SOA applications are examples of where this requirement would apply.'\n  desc 'check', 'Review the application guidance and interview the application administrator.\n\nIdentify the methods and manner in which application devices such as an XML gateway, SOA application gateway, or application firewall is allowed to access the application. Most devices themselves will not change role or authenticators once they are established but will need to periodically re-authenticate.\n\nReview the configuration setting in the application where the time period is set to force the device to reauthenticate.\n\nReview local policy requirements to determine if reauthentication intervals are specified.\n\nIf the device is not forced to reauthenticate periodically, this is a finding.'\n  desc 'fix', 'Configure the application to require reauthentication periodically.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24191r493471_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222521'\n  tag rid: 'SV-222521r879763_rule'\n  tag stig_id: 'APSC-DV-001530'\n  tag gtitle: 'SRG-APP-000390'\n  tag fix_id: 'F-24180r493472_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84147', 'V-69525']\n  tag cci: ['CCI-002039']\n  tag nist: ['IA-11']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222521.rb"},"title":"The application must require devices to reauthenticate when organization-defined circumstances or situations requiring reauthentication.","desc":"Without reauthenticating devices, unidentified or unknown devices may be introduced; thereby facilitating malicious activity.\n\nIn addition to the reauthentication requirements associated with session locks, organizations may require reauthentication of devices, including (but not limited to), the following other situations:\n\n(i) When authenticators change;\n(ii) When roles change;\n(iii) When security categories of information systems change;\n(iv) After a fixed period of time;\nor\n(v) Periodically.\n\nFor distributed architectures (e.g., service-oriented architectures), the decisions regarding the validation of identification claims may be made by services separate from the services acting on those decisions. In such situations, it is necessary to provide the identification decisions (as opposed to the actual identifiers) to the services that need to act on those decisions.\n\nGateways and SOA applications are examples of where this requirement would apply.","descriptions":{"default":"Without reauthenticating devices, unidentified or unknown devices may be introduced; thereby facilitating malicious activity.\n\nIn addition to the reauthentication requirements associated with session locks, organizations may require reauthentication of devices, including (but not limited to), the following other situations:\n\n(i) When authenticators change;\n(ii) When roles change;\n(iii) When security categories of information systems change;\n(iv) After a fixed period of time;\nor\n(v) Periodically.\n\nFor distributed architectures (e.g., service-oriented architectures), the decisions regarding the validation of identification claims may be made by services separate from the services acting on those decisions. In such situations, it is necessary to provide the identification decisions (as opposed to the actual identifiers) to the services that need to act on those decisions.\n\nGateways and SOA applications are examples of where this requirement would apply.","check":"Review the application guidance and interview the application administrator.\n\nIdentify the methods and manner in which application devices such as an XML gateway, SOA application gateway, or application firewall is allowed to access the application. Most devices themselves will not change role or authenticators once they are established but will need to periodically re-authenticate.\n\nReview the configuration setting in the application where the time period is set to force the device to reauthenticate.\n\nReview local policy requirements to determine if reauthentication intervals are specified.\n\nIf the device is not forced to reauthenticate periodically, this is a finding.","fix":"Configure the application to require reauthentication periodically."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24191r493471_chk","severity":"medium","gid":"V-222521","rid":"SV-222521r879763_rule","stig_id":"APSC-DV-001530","gtitle":"SRG-APP-000390","fix_id":"F-24180r493472_fix","documentable":null,"legacy":["SV-84147","V-69525"],"cci":["CCI-002039"],"nist":["IA-11"]}},{"id":"SV-222522","code":"control 'SV-222522' do\n  title 'The application must uniquely identify and authenticate organizational users (or processes acting on behalf of organizational users).'\n  desc 'To assure accountability and prevent unauthenticated access, organizational users must be identified and authenticated to prevent potential misuse and compromise of the system.\n\nOrganizational users include organizational employees or individuals the organization deems to have equivalent status of employees (e.g., contractors). \n\nOrganizational users (and any processes acting on behalf of users) must be uniquely identified and authenticated for all accesses, except the following:\n\n(i) Accesses explicitly identified and documented by the organization. Organizations document specific user actions that can be performed on the information system without identification or authentication; and \n(ii) Accesses that occur through authorized use of group authenticators without individual authentication. Organizations may require unique identification of individuals in group accounts (e.g., shared privilege accounts) or for detailed accountability of individual activity.'\n  desc 'check', 'Review the application documentation and interview the application administrator to determine how organizational users access the application.\n\nIf the application is publicly available, providing access to publicly releasable data and the users are non-organizational users such as individuals who no longer have a CAC (e.g., retirees) or  members of the public with no requirement for DoD credentials, this requirement is not applicable.\n\nThe requirement still applies to DoD organizational users and admins when accessing the non-public data areas or system resources of the system.\n\nAttempt to access the application and confirm that a unique user account and password or CAC token and pin are required in order to access the application.\n\nIf the application does not uniquely identify and authenticate users, this is a finding.'\n  desc 'fix', 'Configure the application to uniquely identify and authenticate users and user processes.'\n  impact 0.7\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24192r493474_chk'\n  tag severity: 'high'\n  tag gid: 'V-222522'\n  tag rid: 'SV-222522r879589_rule'\n  tag stig_id: 'APSC-DV-001540'\n  tag gtitle: 'SRG-APP-000148'\n  tag fix_id: 'F-24181r493475_fix'\n  tag 'documentable'\n  tag legacy: ['V-69527', 'SV-84149']\n  tag cci: ['CCI-000764']\n  tag nist: ['IA-2']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222522.rb"},"title":"The application must uniquely identify and authenticate organizational users (or processes acting on behalf of organizational users).","desc":"To assure accountability and prevent unauthenticated access, organizational users must be identified and authenticated to prevent potential misuse and compromise of the system.\n\nOrganizational users include organizational employees or individuals the organization deems to have equivalent status of employees (e.g., contractors). \n\nOrganizational users (and any processes acting on behalf of users) must be uniquely identified and authenticated for all accesses, except the following:\n\n(i) Accesses explicitly identified and documented by the organization. Organizations document specific user actions that can be performed on the information system without identification or authentication; and \n(ii) Accesses that occur through authorized use of group authenticators without individual authentication. Organizations may require unique identification of individuals in group accounts (e.g., shared privilege accounts) or for detailed accountability of individual activity.","descriptions":{"default":"To assure accountability and prevent unauthenticated access, organizational users must be identified and authenticated to prevent potential misuse and compromise of the system.\n\nOrganizational users include organizational employees or individuals the organization deems to have equivalent status of employees (e.g., contractors). \n\nOrganizational users (and any processes acting on behalf of users) must be uniquely identified and authenticated for all accesses, except the following:\n\n(i) Accesses explicitly identified and documented by the organization. Organizations document specific user actions that can be performed on the information system without identification or authentication; and \n(ii) Accesses that occur through authorized use of group authenticators without individual authentication. Organizations may require unique identification of individuals in group accounts (e.g., shared privilege accounts) or for detailed accountability of individual activity.","check":"Review the application documentation and interview the application administrator to determine how organizational users access the application.\n\nIf the application is publicly available, providing access to publicly releasable data and the users are non-organizational users such as individuals who no longer have a CAC (e.g., retirees) or  members of the public with no requirement for DoD credentials, this requirement is not applicable.\n\nThe requirement still applies to DoD organizational users and admins when accessing the non-public data areas or system resources of the system.\n\nAttempt to access the application and confirm that a unique user account and password or CAC token and pin are required in order to access the application.\n\nIf the application does not uniquely identify and authenticate users, this is a finding.","fix":"Configure the application to uniquely identify and authenticate users and user processes."},"impact":0.7,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24192r493474_chk","severity":"high","gid":"V-222522","rid":"SV-222522r879589_rule","stig_id":"APSC-DV-001540","gtitle":"SRG-APP-000148","fix_id":"F-24181r493475_fix","documentable":null,"legacy":["V-69527","SV-84149"],"cci":["CCI-000764"],"nist":["IA-2"]}},{"id":"SV-222523","code":"control 'SV-222523' do\n  title 'The application must use multifactor (Alt. Token) authentication for network access to privileged accounts.'\n  desc \"Multifactor authentication requires using two or more factors to achieve authentication and access.\n\nFactors include:\n(i) something a user knows (e.g., password/PIN);\n(ii) something a user has (e.g., cryptographic identification device, token); or\n(iii) something a user is (e.g., biometric).\n\nMultifactor authentication decreases the attack surface by virtue of the fact that attackers must obtain two factors, a physical token or a biometric and a PIN, in order to authenticate.  It is not enough to simply steal a user's password to obtain access.  \n\nA privileged account is defined as an information system account with authorizations of a privileged user.  \n\nAn Alt. Token is a separate CAC like token used specifically for administrative account access and serves as a separate identifier much like a separate user account.\n\nNetwork access is defined as access to an information system by a user (or a process acting on behalf of a user) communicating through a network (e.g., local area network, wide area network, or the Internet).\"\n  desc 'check', 'Review the application documentation and interview the application administrator to identify application access methods.\n\nAsk the application administrator to present both their primary CAC and their Alt. Token.  Ask the application administrator to log on to the application using application relevant network based access methods.  Attempt to use both CAC and Alt. Tokens to authenticate to the application. \n\nValidate the application requests the user to input their CAC PIN and that they cannot perform administrative functions.\n\nHave user logoff and reauthenticate with their Alt. Token and that they can perform administrative functions.\n\nIf the application allows administrative access to the application without requiring an Alt. Token, this is a finding.'\n  desc 'fix', 'Configure the application to use an Alt. Token when providing network access to privileged application accounts.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24193r493477_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222523'\n  tag rid: 'SV-222523r879590_rule'\n  tag stig_id: 'APSC-DV-001550'\n  tag gtitle: 'SRG-APP-000149'\n  tag fix_id: 'F-24182r493478_fix'\n  tag 'documentable'\n  tag legacy: ['V-69529', 'SV-84151']\n  tag cci: ['CCI-000765']\n  tag nist: ['IA-2 (1)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222523.rb"},"title":"The application must use multifactor (Alt. Token) authentication for network access to privileged accounts.","desc":"Multifactor authentication requires using two or more factors to achieve authentication and access.\n\nFactors include:\n(i) something a user knows (e.g., password/PIN);\n(ii) something a user has (e.g., cryptographic identification device, token); or\n(iii) something a user is (e.g., biometric).\n\nMultifactor authentication decreases the attack surface by virtue of the fact that attackers must obtain two factors, a physical token or a biometric and a PIN, in order to authenticate.  It is not enough to simply steal a user's password to obtain access.  \n\nA privileged account is defined as an information system account with authorizations of a privileged user.  \n\nAn Alt. Token is a separate CAC like token used specifically for administrative account access and serves as a separate identifier much like a separate user account.\n\nNetwork access is defined as access to an information system by a user (or a process acting on behalf of a user) communicating through a network (e.g., local area network, wide area network, or the Internet).","descriptions":{"default":"Multifactor authentication requires using two or more factors to achieve authentication and access.\n\nFactors include:\n(i) something a user knows (e.g., password/PIN);\n(ii) something a user has (e.g., cryptographic identification device, token); or\n(iii) something a user is (e.g., biometric).\n\nMultifactor authentication decreases the attack surface by virtue of the fact that attackers must obtain two factors, a physical token or a biometric and a PIN, in order to authenticate.  It is not enough to simply steal a user's password to obtain access.  \n\nA privileged account is defined as an information system account with authorizations of a privileged user.  \n\nAn Alt. Token is a separate CAC like token used specifically for administrative account access and serves as a separate identifier much like a separate user account.\n\nNetwork access is defined as access to an information system by a user (or a process acting on behalf of a user) communicating through a network (e.g., local area network, wide area network, or the Internet).","check":"Review the application documentation and interview the application administrator to identify application access methods.\n\nAsk the application administrator to present both their primary CAC and their Alt. Token.  Ask the application administrator to log on to the application using application relevant network based access methods.  Attempt to use both CAC and Alt. Tokens to authenticate to the application. \n\nValidate the application requests the user to input their CAC PIN and that they cannot perform administrative functions.\n\nHave user logoff and reauthenticate with their Alt. Token and that they can perform administrative functions.\n\nIf the application allows administrative access to the application without requiring an Alt. Token, this is a finding.","fix":"Configure the application to use an Alt. Token when providing network access to privileged application accounts."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24193r493477_chk","severity":"medium","gid":"V-222523","rid":"SV-222523r879590_rule","stig_id":"APSC-DV-001550","gtitle":"SRG-APP-000149","fix_id":"F-24182r493478_fix","documentable":null,"legacy":["V-69529","SV-84151"],"cci":["CCI-000765"],"nist":["IA-2 (1)"]}},{"id":"SV-222524","code":"control 'SV-222524' do\n  title 'The application must accept Personal Identity Verification (PIV) credentials.'\n  desc 'The use of PIV credentials facilitates standardization and reduces the risk of unauthorized access.\n\nDoD has mandated the use of the CAC to support identity management and personal authentication for systems covered under HSPD 12, as well as a primary component of layered protection for national security systems.'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify application access methods.\n\nIf the application is not PK-enabled due to the hosted data being publicly releasable, this check is not applicable.\n\nAsk the application administrator to log on to the application. Have the application admin use their non-privileged credentials.\n\nValidate the application prompts the user to provide a certificate from the CAC.\n\nIf the application allows access without requiring a CAC, this is a finding.'\n  desc 'fix', 'Configure the application to require CAC authentication.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24194r493480_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222524'\n  tag rid: 'SV-222524r879764_rule'\n  tag stig_id: 'APSC-DV-001560'\n  tag gtitle: 'SRG-APP-000391'\n  tag fix_id: 'F-24183r493481_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84153', 'V-69531']\n  tag cci: ['CCI-001953']\n  tag nist: ['IA-2 (12)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222524.rb"},"title":"The application must accept Personal Identity Verification (PIV) credentials.","desc":"The use of PIV credentials facilitates standardization and reduces the risk of unauthorized access.\n\nDoD has mandated the use of the CAC to support identity management and personal authentication for systems covered under HSPD 12, as well as a primary component of layered protection for national security systems.","descriptions":{"default":"The use of PIV credentials facilitates standardization and reduces the risk of unauthorized access.\n\nDoD has mandated the use of the CAC to support identity management and personal authentication for systems covered under HSPD 12, as well as a primary component of layered protection for national security systems.","check":"Review the application documentation and interview the application administrator to identify application access methods.\n\nIf the application is not PK-enabled due to the hosted data being publicly releasable, this check is not applicable.\n\nAsk the application administrator to log on to the application. Have the application admin use their non-privileged credentials.\n\nValidate the application prompts the user to provide a certificate from the CAC.\n\nIf the application allows access without requiring a CAC, this is a finding.","fix":"Configure the application to require CAC authentication."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24194r493480_chk","severity":"medium","gid":"V-222524","rid":"SV-222524r879764_rule","stig_id":"APSC-DV-001560","gtitle":"SRG-APP-000391","fix_id":"F-24183r493481_fix","documentable":null,"legacy":["SV-84153","V-69531"],"cci":["CCI-001953"],"nist":["IA-2 (12)"]}},{"id":"SV-222525","code":"control 'SV-222525' do\n  title 'The application must electronically verify Personal Identity Verification (PIV) credentials.'\n  desc 'The use of PIV credentials facilitates standardization and reduces the risk of unauthorized access.\n\nDoD has mandated the use of the CAC to support identity management and personal authentication for systems covered under HSPD 12, as well as a primary component of layered protection for national security systems.\n\nIf the application does not verify the credentials provided, user authentication cannot be established which places the integrity and confidentiality of the application at risk.'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify application access methods.\n\nIf the application is not PK-enabled due to the hosted data being publicly releasable, this check is not applicable.\n\nAsk the application administrator to log on to the application.\n\nValidate the application prompts the user to provide a certificate from the CAC.\n\nValidate the application requests the user to input their CAC PIN.\n\nIf the application allows access without requiring a CAC, this is a finding.'\n  desc 'fix', 'Configure the application to require CAC authentication.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24195r493483_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222525'\n  tag rid: 'SV-222525r879765_rule'\n  tag stig_id: 'APSC-DV-001570'\n  tag gtitle: 'SRG-APP-000392'\n  tag fix_id: 'F-24184r493484_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84155', 'V-69533']\n  tag cci: ['CCI-001954']\n  tag nist: ['IA-2 (12)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222525.rb"},"title":"The application must electronically verify Personal Identity Verification (PIV) credentials.","desc":"The use of PIV credentials facilitates standardization and reduces the risk of unauthorized access.\n\nDoD has mandated the use of the CAC to support identity management and personal authentication for systems covered under HSPD 12, as well as a primary component of layered protection for national security systems.\n\nIf the application does not verify the credentials provided, user authentication cannot be established which places the integrity and confidentiality of the application at risk.","descriptions":{"default":"The use of PIV credentials facilitates standardization and reduces the risk of unauthorized access.\n\nDoD has mandated the use of the CAC to support identity management and personal authentication for systems covered under HSPD 12, as well as a primary component of layered protection for national security systems.\n\nIf the application does not verify the credentials provided, user authentication cannot be established which places the integrity and confidentiality of the application at risk.","check":"Review the application documentation and interview the application administrator to identify application access methods.\n\nIf the application is not PK-enabled due to the hosted data being publicly releasable, this check is not applicable.\n\nAsk the application administrator to log on to the application.\n\nValidate the application prompts the user to provide a certificate from the CAC.\n\nValidate the application requests the user to input their CAC PIN.\n\nIf the application allows access without requiring a CAC, this is a finding.","fix":"Configure the application to require CAC authentication."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24195r493483_chk","severity":"medium","gid":"V-222525","rid":"SV-222525r879765_rule","stig_id":"APSC-DV-001570","gtitle":"SRG-APP-000392","fix_id":"F-24184r493484_fix","documentable":null,"legacy":["SV-84155","V-69533"],"cci":["CCI-001954"],"nist":["IA-2 (12)"]}},{"id":"SV-222526","code":"control 'SV-222526' do\n  title 'The application must use multifactor (e.g., CAC, Alt. Token) authentication for network access to non-privileged accounts.'\n  desc 'To assure accountability and prevent unauthenticated access, non-privileged users must utilize multifactor authentication to prevent potential misuse and compromise of the system.\n\nMultifactor authentication uses two or more factors to achieve authentication.\n\nFactors include:\n\n(i) Something you know (e.g., password/PIN);\n(ii) Something you have (e.g., cryptographic identification device, CAC/SIPRNet token); or\n(iii) Something you are (e.g., biometric).\n\nA non-privileged account is any information system account with authorizations of a non-privileged user.\n\nNetwork access is any access to an application by a user (or process acting on behalf of a user) where said access is obtained through a network connection.\n\nApplications integrating with the DoD Active Directory and utilize the DoD CAC are an example of compliant multifactor authentication solutions.'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify application access methods.\n\nIf the application is not PK-enabled due to the hosted data being publicly releasable, this check is not applicable.\n\nAsk the application administrator to log on to the application. Have the application admin use their non-privileged credentials.\n\nValidate the application prompts the user to provide a certificate from the CAC.\n\nValidate the application requests the user to input their CAC PIN. \n\nIf the application allows access without requiring a CAC or Alt. Token, this is a finding.'\n  desc 'fix', 'Configure the application to require CAC or Alt. Token authentication for non-privileged network access to non-privileged accounts.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24196r493486_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222526'\n  tag rid: 'SV-222526r879591_rule'\n  tag stig_id: 'APSC-DV-001580'\n  tag gtitle: 'SRG-APP-000150'\n  tag fix_id: 'F-24185r493487_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84157', 'V-69535']\n  tag cci: ['CCI-000766']\n  tag nist: ['IA-2 (2)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222526.rb"},"title":"The application must use multifactor (e.g., CAC, Alt. Token) authentication for network access to non-privileged accounts.","desc":"To assure accountability and prevent unauthenticated access, non-privileged users must utilize multifactor authentication to prevent potential misuse and compromise of the system.\n\nMultifactor authentication uses two or more factors to achieve authentication.\n\nFactors include:\n\n(i) Something you know (e.g., password/PIN);\n(ii) Something you have (e.g., cryptographic identification device, CAC/SIPRNet token); or\n(iii) Something you are (e.g., biometric).\n\nA non-privileged account is any information system account with authorizations of a non-privileged user.\n\nNetwork access is any access to an application by a user (or process acting on behalf of a user) where said access is obtained through a network connection.\n\nApplications integrating with the DoD Active Directory and utilize the DoD CAC are an example of compliant multifactor authentication solutions.","descriptions":{"default":"To assure accountability and prevent unauthenticated access, non-privileged users must utilize multifactor authentication to prevent potential misuse and compromise of the system.\n\nMultifactor authentication uses two or more factors to achieve authentication.\n\nFactors include:\n\n(i) Something you know (e.g., password/PIN);\n(ii) Something you have (e.g., cryptographic identification device, CAC/SIPRNet token); or\n(iii) Something you are (e.g., biometric).\n\nA non-privileged account is any information system account with authorizations of a non-privileged user.\n\nNetwork access is any access to an application by a user (or process acting on behalf of a user) where said access is obtained through a network connection.\n\nApplications integrating with the DoD Active Directory and utilize the DoD CAC are an example of compliant multifactor authentication solutions.","check":"Review the application documentation and interview the application administrator to identify application access methods.\n\nIf the application is not PK-enabled due to the hosted data being publicly releasable, this check is not applicable.\n\nAsk the application administrator to log on to the application. Have the application admin use their non-privileged credentials.\n\nValidate the application prompts the user to provide a certificate from the CAC.\n\nValidate the application requests the user to input their CAC PIN. \n\nIf the application allows access without requiring a CAC or Alt. Token, this is a finding.","fix":"Configure the application to require CAC or Alt. Token authentication for non-privileged network access to non-privileged accounts."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24196r493486_chk","severity":"medium","gid":"V-222526","rid":"SV-222526r879591_rule","stig_id":"APSC-DV-001580","gtitle":"SRG-APP-000150","fix_id":"F-24185r493487_fix","documentable":null,"legacy":["SV-84157","V-69535"],"cci":["CCI-000766"],"nist":["IA-2 (2)"]}},{"id":"SV-222527","code":"control 'SV-222527' do\n  title 'The application must use multifactor (Alt. Token) authentication for local access to privileged accounts.'\n  desc \"Multifactor authentication requires using two or more factors to achieve authentication and access.\n\nFactors include:\n(i) something a user knows (e.g., password/PIN);\n(ii) something a user has (e.g., cryptographic identification device, token); or\n(iii) something a user is (e.g., biometric).\n\nMultifactor authentication decreases the attack surface by virtue of the fact that attackers must obtain two factors, a physical token or a biometric and a PIN, in order to authenticate.  It is not enough to simply steal a user's password to obtain access.  \n\nA privileged account is defined as an information system account with authorizations of a privileged user.  \n\nAn Alt. Token is a separate CAC or token used specifically for administrative account access and serves as a separate identifier much like a separate user account.\n\nLocal access is defined as access to an organizational information system by a user (or process acting on behalf of a user) communicating through a direct connection without the use of a network.\"\n  desc 'check', 'Review the application documentation and interview the application administrator to identify application access methods.\n\nAsk the application administrator to present both their primary CAC and their Alt. Token.  Ask the application administrator to log on to the application using the local application console.  \n\nAttempt to use both the CAC and Alt. Tokens to authenticate to the application. \n\nValidate the application requests the user to input their CAC PIN and that they cannot perform administrative functions.\n\nHave user logoff and reauthenticate with their Alt. Token and that they can perform administrative functions.\n\nIf the application allows administrative access to the application without requiring an Alt. Token, this is a finding.'\n  desc 'fix', 'Configure the application to only use Alt. Tokens when locally accessing privileged application accounts.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24197r493489_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222527'\n  tag rid: 'SV-222527r879592_rule'\n  tag stig_id: 'APSC-DV-001590'\n  tag gtitle: 'SRG-APP-000151'\n  tag fix_id: 'F-24186r493490_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84159', 'V-69537']\n  tag cci: ['CCI-000767']\n  tag nist: ['IA-2 (3)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222527.rb"},"title":"The application must use multifactor (Alt. Token) authentication for local access to privileged accounts.","desc":"Multifactor authentication requires using two or more factors to achieve authentication and access.\n\nFactors include:\n(i) something a user knows (e.g., password/PIN);\n(ii) something a user has (e.g., cryptographic identification device, token); or\n(iii) something a user is (e.g., biometric).\n\nMultifactor authentication decreases the attack surface by virtue of the fact that attackers must obtain two factors, a physical token or a biometric and a PIN, in order to authenticate.  It is not enough to simply steal a user's password to obtain access.  \n\nA privileged account is defined as an information system account with authorizations of a privileged user.  \n\nAn Alt. Token is a separate CAC or token used specifically for administrative account access and serves as a separate identifier much like a separate user account.\n\nLocal access is defined as access to an organizational information system by a user (or process acting on behalf of a user) communicating through a direct connection without the use of a network.","descriptions":{"default":"Multifactor authentication requires using two or more factors to achieve authentication and access.\n\nFactors include:\n(i) something a user knows (e.g., password/PIN);\n(ii) something a user has (e.g., cryptographic identification device, token); or\n(iii) something a user is (e.g., biometric).\n\nMultifactor authentication decreases the attack surface by virtue of the fact that attackers must obtain two factors, a physical token or a biometric and a PIN, in order to authenticate.  It is not enough to simply steal a user's password to obtain access.  \n\nA privileged account is defined as an information system account with authorizations of a privileged user.  \n\nAn Alt. Token is a separate CAC or token used specifically for administrative account access and serves as a separate identifier much like a separate user account.\n\nLocal access is defined as access to an organizational information system by a user (or process acting on behalf of a user) communicating through a direct connection without the use of a network.","check":"Review the application documentation and interview the application administrator to identify application access methods.\n\nAsk the application administrator to present both their primary CAC and their Alt. Token.  Ask the application administrator to log on to the application using the local application console.  \n\nAttempt to use both the CAC and Alt. Tokens to authenticate to the application. \n\nValidate the application requests the user to input their CAC PIN and that they cannot perform administrative functions.\n\nHave user logoff and reauthenticate with their Alt. Token and that they can perform administrative functions.\n\nIf the application allows administrative access to the application without requiring an Alt. Token, this is a finding.","fix":"Configure the application to only use Alt. Tokens when locally accessing privileged application accounts."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24197r493489_chk","severity":"medium","gid":"V-222527","rid":"SV-222527r879592_rule","stig_id":"APSC-DV-001590","gtitle":"SRG-APP-000151","fix_id":"F-24186r493490_fix","documentable":null,"legacy":["SV-84159","V-69537"],"cci":["CCI-000767"],"nist":["IA-2 (3)"]}},{"id":"SV-222528","code":"control 'SV-222528' do\n  title 'The application must use multifactor (e.g., CAC, Alt. Token) authentication for local access to non-privileged accounts.'\n  desc 'To assure accountability, prevent unauthenticated access, and prevent misuse of the system, privileged users must utilize multifactor authentication for local access.\n\nMultifactor authentication is defined as: using two or more factors to achieve authentication.\n\nFactors include:\n(i) Something a user knows (e.g., password/PIN);\n(ii) Something a user has (e.g., cryptographic identification device, token); or\n(iii) Something a user is (e.g., biometric).\n\nA non-privileged account is defined as an information system account with authorizations of a regular or non-privileged user.\n\nLocal access is defined as access to an organizational information system by a user (or process acting on behalf of a user) communicating through a direct connection without the use of a network.\n\nApplications integrating with the DoD Active Directory and utilize the DoD CAC are examples of compliant multifactor authentication solutions.'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify application access methods.\n\nIf the application is not PK-enabled due to the hosted data being publicly releasable, this check is not applicable.\n\nAsk the application administrator to log on to the application. Have the application admin use their non-privileged credentials.\n\nValidate the application prompts the user to provide a certificate from the CAC.\n\nValidate the application requests the user to input their CAC PIN.\n\nIf the application allows access without requiring a CAC or Alt. Token, this is a finding.'\n  desc 'fix', 'Configure the application to require CAC or Alt. Token authentication for non-privileged network access.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24198r493492_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222528'\n  tag rid: 'SV-222528r879593_rule'\n  tag stig_id: 'APSC-DV-001600'\n  tag gtitle: 'SRG-APP-000152'\n  tag fix_id: 'F-24187r493493_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84161', 'V-69539']\n  tag cci: ['CCI-000768']\n  tag nist: ['IA-2 (4)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222528.rb"},"title":"The application must use multifactor (e.g., CAC, Alt. Token) authentication for local access to non-privileged accounts.","desc":"To assure accountability, prevent unauthenticated access, and prevent misuse of the system, privileged users must utilize multifactor authentication for local access.\n\nMultifactor authentication is defined as: using two or more factors to achieve authentication.\n\nFactors include:\n(i) Something a user knows (e.g., password/PIN);\n(ii) Something a user has (e.g., cryptographic identification device, token); or\n(iii) Something a user is (e.g., biometric).\n\nA non-privileged account is defined as an information system account with authorizations of a regular or non-privileged user.\n\nLocal access is defined as access to an organizational information system by a user (or process acting on behalf of a user) communicating through a direct connection without the use of a network.\n\nApplications integrating with the DoD Active Directory and utilize the DoD CAC are examples of compliant multifactor authentication solutions.","descriptions":{"default":"To assure accountability, prevent unauthenticated access, and prevent misuse of the system, privileged users must utilize multifactor authentication for local access.\n\nMultifactor authentication is defined as: using two or more factors to achieve authentication.\n\nFactors include:\n(i) Something a user knows (e.g., password/PIN);\n(ii) Something a user has (e.g., cryptographic identification device, token); or\n(iii) Something a user is (e.g., biometric).\n\nA non-privileged account is defined as an information system account with authorizations of a regular or non-privileged user.\n\nLocal access is defined as access to an organizational information system by a user (or process acting on behalf of a user) communicating through a direct connection without the use of a network.\n\nApplications integrating with the DoD Active Directory and utilize the DoD CAC are examples of compliant multifactor authentication solutions.","check":"Review the application documentation and interview the application administrator to identify application access methods.\n\nIf the application is not PK-enabled due to the hosted data being publicly releasable, this check is not applicable.\n\nAsk the application administrator to log on to the application. Have the application admin use their non-privileged credentials.\n\nValidate the application prompts the user to provide a certificate from the CAC.\n\nValidate the application requests the user to input their CAC PIN.\n\nIf the application allows access without requiring a CAC or Alt. Token, this is a finding.","fix":"Configure the application to require CAC or Alt. Token authentication for non-privileged network access."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24198r493492_chk","severity":"medium","gid":"V-222528","rid":"SV-222528r879593_rule","stig_id":"APSC-DV-001600","gtitle":"SRG-APP-000152","fix_id":"F-24187r493493_fix","documentable":null,"legacy":["SV-84161","V-69539"],"cci":["CCI-000768"],"nist":["IA-2 (4)"]}},{"id":"SV-222529","code":"control 'SV-222529' do\n  title 'The application must ensure users are authenticated with an individual authenticator prior to using a group authenticator.'\n  desc 'To assure individual accountability and prevent unauthorized access, application users must be individually identified and authenticated. Individual accountability mandates that each user is uniquely identified.\n\nA group authenticator is a shared account or some other form of authentication that allows multiple unique individuals to access the application using a single account.\n\nIf an application allows or provides for group authenticators, it must first individually authenticate users prior to implementing group authenticator functionality.\n\nSome applications may not have the need to provide a group authenticator; this is considered a matter of application design. In those instances where the application design includes the use of a group authenticator, this requirement will apply.\n\nThere may also be instances when specific user actions need to be performed on the information system without unique user identification or authentication. An example of this type of access is a web server which contains publicly releasable information.'\n  desc 'check', 'Review the application documentation, examine user accounts, group membership and interview the application administrator to identify group or shared accounts. Document the group or shared account information.\n\nIf the application does not use group or shared accounts, this requirement is not applicable.\n\nCreate a test account or use an existing group member account.\n\nEnsure the test account is not authenticated to the application and attempt to access the application with the group account credentials.\n\nIf the application allows access without first requiring the group member to authenticate with their individual credentials, this is a finding.'\n  desc 'fix', 'Design and configure the application to individually authenticate group account members prior to allowing access.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24199r493495_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222529'\n  tag rid: 'SV-222529r879594_rule'\n  tag stig_id: 'APSC-DV-001610'\n  tag gtitle: 'SRG-APP-000153'\n  tag fix_id: 'F-24188r493496_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84163', 'V-69541']\n  tag cci: ['CCI-000770']\n  tag nist: ['IA-2 (5)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222529.rb"},"title":"The application must ensure users are authenticated with an individual authenticator prior to using a group authenticator.","desc":"To assure individual accountability and prevent unauthorized access, application users must be individually identified and authenticated. Individual accountability mandates that each user is uniquely identified.\n\nA group authenticator is a shared account or some other form of authentication that allows multiple unique individuals to access the application using a single account.\n\nIf an application allows or provides for group authenticators, it must first individually authenticate users prior to implementing group authenticator functionality.\n\nSome applications may not have the need to provide a group authenticator; this is considered a matter of application design. In those instances where the application design includes the use of a group authenticator, this requirement will apply.\n\nThere may also be instances when specific user actions need to be performed on the information system without unique user identification or authentication. An example of this type of access is a web server which contains publicly releasable information.","descriptions":{"default":"To assure individual accountability and prevent unauthorized access, application users must be individually identified and authenticated. Individual accountability mandates that each user is uniquely identified.\n\nA group authenticator is a shared account or some other form of authentication that allows multiple unique individuals to access the application using a single account.\n\nIf an application allows or provides for group authenticators, it must first individually authenticate users prior to implementing group authenticator functionality.\n\nSome applications may not have the need to provide a group authenticator; this is considered a matter of application design. In those instances where the application design includes the use of a group authenticator, this requirement will apply.\n\nThere may also be instances when specific user actions need to be performed on the information system without unique user identification or authentication. An example of this type of access is a web server which contains publicly releasable information.","check":"Review the application documentation, examine user accounts, group membership and interview the application administrator to identify group or shared accounts. Document the group or shared account information.\n\nIf the application does not use group or shared accounts, this requirement is not applicable.\n\nCreate a test account or use an existing group member account.\n\nEnsure the test account is not authenticated to the application and attempt to access the application with the group account credentials.\n\nIf the application allows access without first requiring the group member to authenticate with their individual credentials, this is a finding.","fix":"Design and configure the application to individually authenticate group account members prior to allowing access."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24199r493495_chk","severity":"medium","gid":"V-222529","rid":"SV-222529r879594_rule","stig_id":"APSC-DV-001610","gtitle":"SRG-APP-000153","fix_id":"F-24188r493496_fix","documentable":null,"legacy":["SV-84163","V-69541"],"cci":["CCI-000770"],"nist":["IA-2 (5)"]}},{"id":"SV-222530","code":"control 'SV-222530' do\n  title 'The application must implement replay-resistant authentication mechanisms for network access to privileged accounts.'\n  desc 'A replay attack may enable an unauthorized user to gain access to the application. Authentication sessions between the authenticator and the application validating the user credentials must not be vulnerable to a replay attack.\n\nAn authentication process resists replay attacks if it is impractical to achieve a successful authentication by recording and replaying a previous authentication message.\n\nA privileged account is any information system account with authorizations of a privileged user.\n\nTechniques used to address this include protocols using nonces (e.g., numbers generated for a specific one time use) or challenges (e.g., TLS, WS_Security). Additional techniques include time-synchronous or challenge-response one-time authenticators.'\n  desc 'check', 'Review application documentation and interview application administrator to identify what authentication mechanisms are used when accessing the application.\n\nIf the application is hosting publicly releasable information that does not require authentication, or if the application users are not eligible for a DoD CAC as per DoD 8520, this requirement is not applicable.\n\nReview to ensure the application is utilizing TLSV1.2 or greater to protect communication and privileged user authentication traffic.\n\nVerify the application utilizes a strong authentication mechanism such as Kerberos, IPSEC, or Secure Shell (SSH).\n\n- Cryptographically sign web services packets.\n- Time stamps and cryptographic hashes are used with web services packets.\n- Use WS_Security for web services.\n\nRequest the most recent vulnerability scan results and configuration settings.\n\nVerify the configuration is set to test for known replay vulnerabilities.\n\nRequest code review results (if available) and review for issues that have been identified as potential replay attack vulnerabilities.\n\nVerify identified issues have been remediated.\n\nIf the application is not implementing replay-resistant authentication methods applicable to the application architecture, this is a finding.'\n  desc 'fix', 'Design and configure the application to utilize replay-resistant mechanisms when authenticating privileged accounts.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-36245r602300_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222530'\n  tag rid: 'SV-222530r879597_rule'\n  tag stig_id: 'APSC-DV-001620'\n  tag gtitle: 'SRG-APP-000156'\n  tag fix_id: 'F-24189r493499_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84165', 'V-69543']\n  tag cci: ['CCI-001941']\n  tag nist: ['IA-2 (8)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222530.rb"},"title":"The application must implement replay-resistant authentication mechanisms for network access to privileged accounts.","desc":"A replay attack may enable an unauthorized user to gain access to the application. Authentication sessions between the authenticator and the application validating the user credentials must not be vulnerable to a replay attack.\n\nAn authentication process resists replay attacks if it is impractical to achieve a successful authentication by recording and replaying a previous authentication message.\n\nA privileged account is any information system account with authorizations of a privileged user.\n\nTechniques used to address this include protocols using nonces (e.g., numbers generated for a specific one time use) or challenges (e.g., TLS, WS_Security). Additional techniques include time-synchronous or challenge-response one-time authenticators.","descriptions":{"default":"A replay attack may enable an unauthorized user to gain access to the application. Authentication sessions between the authenticator and the application validating the user credentials must not be vulnerable to a replay attack.\n\nAn authentication process resists replay attacks if it is impractical to achieve a successful authentication by recording and replaying a previous authentication message.\n\nA privileged account is any information system account with authorizations of a privileged user.\n\nTechniques used to address this include protocols using nonces (e.g., numbers generated for a specific one time use) or challenges (e.g., TLS, WS_Security). Additional techniques include time-synchronous or challenge-response one-time authenticators.","check":"Review application documentation and interview application administrator to identify what authentication mechanisms are used when accessing the application.\n\nIf the application is hosting publicly releasable information that does not require authentication, or if the application users are not eligible for a DoD CAC as per DoD 8520, this requirement is not applicable.\n\nReview to ensure the application is utilizing TLSV1.2 or greater to protect communication and privileged user authentication traffic.\n\nVerify the application utilizes a strong authentication mechanism such as Kerberos, IPSEC, or Secure Shell (SSH).\n\n- Cryptographically sign web services packets.\n- Time stamps and cryptographic hashes are used with web services packets.\n- Use WS_Security for web services.\n\nRequest the most recent vulnerability scan results and configuration settings.\n\nVerify the configuration is set to test for known replay vulnerabilities.\n\nRequest code review results (if available) and review for issues that have been identified as potential replay attack vulnerabilities.\n\nVerify identified issues have been remediated.\n\nIf the application is not implementing replay-resistant authentication methods applicable to the application architecture, this is a finding.","fix":"Design and configure the application to utilize replay-resistant mechanisms when authenticating privileged accounts."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-36245r602300_chk","severity":"medium","gid":"V-222530","rid":"SV-222530r879597_rule","stig_id":"APSC-DV-001620","gtitle":"SRG-APP-000156","fix_id":"F-24189r493499_fix","documentable":null,"legacy":["SV-84165","V-69543"],"cci":["CCI-001941"],"nist":["IA-2 (8)"]}},{"id":"SV-222531","code":"control 'SV-222531' do\n  title 'The application must implement replay-resistant authentication mechanisms for network access to non-privileged accounts.'\n  desc 'A replay attack is a man-in-the-middle style attack which allows an attacker to repeat or alter a valid data transmission that may enable unauthorized access to the application. Authentication sessions between the authenticating client and the application server validating the user credentials must not be vulnerable to a replay attack.\n\nThe protection methods selected to protect against a replay attack will vary according to the application architecture.\n\nAn authentication process resists replay attacks if it is impractical to achieve a successful authentication by recording and replaying a previous authentication message.\n\nA non-privileged account is any operating system account with authorizations of a non-privileged user.\n\nTechniques used to address this include protocols using nonces (e.g., numbers generated for a specific one time use) or challenges (e.g., TLS, WS_Security) and PKI certificates. Additional techniques include time-synchronous or challenge-response one-time authenticators.'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify what authentication mechanisms are used when accessing the application.\n\nIf the application is hosting publicly releasable information that does not require authentication, or if the application users are not eligible for a DoD CAC as per DoD 8520, this requirement is not applicable.\n\nReview to ensure the application is utilizing TLSV1.2 or greater to protect communication and non-privileged user authentication traffic.\n\nVerify the application utilizes a strong authentication mechanism such as Kerberos, IPSEC, or Secure Shell (SSH).\n\n- Cryptographically sign web services packets.\n- Time stamps and cryptographic hashes are used with web services packets.\n- Use WS_Security for web services.\n\nRequest the most recent vulnerability scan results and configuration settings.\n\nVerify the configuration is set to test for known replay vulnerabilities.\n\nRequest code review results (if available) and review for issues that have been identified as potential replay attack vulnerabilities.\n\nVerify identified issues have been remediated.\n\nIf the application is not implementing replay-resistant authentication methods applicable to the application architecture, this is a finding.'\n  desc 'fix', 'Design and configure the application to utilize replay-resistant mechanisms when authenticating non-privileged accounts.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-36246r602302_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222531'\n  tag rid: 'SV-222531r879598_rule'\n  tag stig_id: 'APSC-DV-001630'\n  tag gtitle: 'SRG-APP-000157'\n  tag fix_id: 'F-24190r493502_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84167', 'V-69545']\n  tag cci: ['CCI-001942']\n  tag nist: ['IA-2 (9)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222531.rb"},"title":"The application must implement replay-resistant authentication mechanisms for network access to non-privileged accounts.","desc":"A replay attack is a man-in-the-middle style attack which allows an attacker to repeat or alter a valid data transmission that may enable unauthorized access to the application. Authentication sessions between the authenticating client and the application server validating the user credentials must not be vulnerable to a replay attack.\n\nThe protection methods selected to protect against a replay attack will vary according to the application architecture.\n\nAn authentication process resists replay attacks if it is impractical to achieve a successful authentication by recording and replaying a previous authentication message.\n\nA non-privileged account is any operating system account with authorizations of a non-privileged user.\n\nTechniques used to address this include protocols using nonces (e.g., numbers generated for a specific one time use) or challenges (e.g., TLS, WS_Security) and PKI certificates. Additional techniques include time-synchronous or challenge-response one-time authenticators.","descriptions":{"default":"A replay attack is a man-in-the-middle style attack which allows an attacker to repeat or alter a valid data transmission that may enable unauthorized access to the application. Authentication sessions between the authenticating client and the application server validating the user credentials must not be vulnerable to a replay attack.\n\nThe protection methods selected to protect against a replay attack will vary according to the application architecture.\n\nAn authentication process resists replay attacks if it is impractical to achieve a successful authentication by recording and replaying a previous authentication message.\n\nA non-privileged account is any operating system account with authorizations of a non-privileged user.\n\nTechniques used to address this include protocols using nonces (e.g., numbers generated for a specific one time use) or challenges (e.g., TLS, WS_Security) and PKI certificates. Additional techniques include time-synchronous or challenge-response one-time authenticators.","check":"Review the application documentation and interview the application administrator to identify what authentication mechanisms are used when accessing the application.\n\nIf the application is hosting publicly releasable information that does not require authentication, or if the application users are not eligible for a DoD CAC as per DoD 8520, this requirement is not applicable.\n\nReview to ensure the application is utilizing TLSV1.2 or greater to protect communication and non-privileged user authentication traffic.\n\nVerify the application utilizes a strong authentication mechanism such as Kerberos, IPSEC, or Secure Shell (SSH).\n\n- Cryptographically sign web services packets.\n- Time stamps and cryptographic hashes are used with web services packets.\n- Use WS_Security for web services.\n\nRequest the most recent vulnerability scan results and configuration settings.\n\nVerify the configuration is set to test for known replay vulnerabilities.\n\nRequest code review results (if available) and review for issues that have been identified as potential replay attack vulnerabilities.\n\nVerify identified issues have been remediated.\n\nIf the application is not implementing replay-resistant authentication methods applicable to the application architecture, this is a finding.","fix":"Design and configure the application to utilize replay-resistant mechanisms when authenticating non-privileged accounts."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-36246r602302_chk","severity":"medium","gid":"V-222531","rid":"SV-222531r879598_rule","stig_id":"APSC-DV-001630","gtitle":"SRG-APP-000157","fix_id":"F-24190r493502_fix","documentable":null,"legacy":["SV-84167","V-69545"],"cci":["CCI-001942"],"nist":["IA-2 (9)"]}},{"id":"SV-222532","code":"control 'SV-222532' do\n  title 'The application must utilize mutual authentication when endpoint device non-repudiation protections are required by DoD policy or by the data owner.'\n  desc \"Without identifying devices, unidentified or unknown devices may be introduced, thereby facilitating malicious activity.\n\nWith one way SSL authentication which is the typical form of SSL authentication done between a web browser client and a web server, the client requests the server certificate to validate the server's identity and establish a secure connection.\n\nWhen SSL mutual authentication is used, the server is configured to request the client’s certificate as well so the server can also identify the client.\n\nFor distributed architectures (e.g., service-oriented architectures), the decisions regarding the validation of identification claims may be made by services separate from the services acting on those decisions. In such situations, it is necessary to provide the identification decisions (as opposed to the actual identifiers) to the services that need to act on those decisions.\n\nThis requirement applies to applications that connect either locally, remotely, or through a network to an endpoint device (including but not limited to: workstations, printers, servers (outside a datacenter), VoIP Phones, VTC CODECs). Gateways and SOA applications are examples of where this requirement would apply.\"\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nDetermine if mutual authentication is mandated by the data owner or by mission data protection objectives and data type.\n\nReview application architecture and design documents.\n\nIdentify endpoint devices that interact with the application. These can be SOA gateways, VOIP phones, or other devices that are used to connect to and exchange data with the application.\n\nIf the design documentation specifies, this could potentially also include remote client workstations.\n\nIn order for two way SSL/mutual authentication to work properly, the server must be configured to request client certificates.\n\nAccess the applications management console.\n\nNavigate to the SSL management utility or web page that is used to configure two way mutual authentication.\n\nVerify endpoints are configured for client authentication (mutual authentication).\n\nSome application architectures such as Java configure their settings in text/xml formatted files; in that case, have the application administrator identify the configuration files used by the application.\nE.g., web.xml stored in WEB-INF/ sub directory of the application root folder.\n\nOpen the web.xml file using a text editor.\n\nVerify the application deployment descriptor for the application and the resource requiring protection under the \"login-config\" element is set to CLIENT-CERT.\n\nIf SSL mutual authentication is required and is not being utilized, this is a finding.'\n  desc 'fix', 'Configure the application to utilize mutual authentication when specified by data protection requirements.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24202r493504_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222532'\n  tag rid: 'SV-222532r879599_rule'\n  tag stig_id: 'APSC-DV-001640'\n  tag gtitle: 'SRG-APP-000158'\n  tag fix_id: 'F-24191r493505_fix'\n  tag 'documentable'\n  tag legacy: ['V-69547', 'SV-84169']\n  tag cci: ['CCI-000778']\n  tag nist: ['IA-3']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222532.rb"},"title":"The application must utilize mutual authentication when endpoint device non-repudiation protections are required by DoD policy or by the data owner.","desc":"Without identifying devices, unidentified or unknown devices may be introduced, thereby facilitating malicious activity.\n\nWith one way SSL authentication which is the typical form of SSL authentication done between a web browser client and a web server, the client requests the server certificate to validate the server's identity and establish a secure connection.\n\nWhen SSL mutual authentication is used, the server is configured to request the client’s certificate as well so the server can also identify the client.\n\nFor distributed architectures (e.g., service-oriented architectures), the decisions regarding the validation of identification claims may be made by services separate from the services acting on those decisions. In such situations, it is necessary to provide the identification decisions (as opposed to the actual identifiers) to the services that need to act on those decisions.\n\nThis requirement applies to applications that connect either locally, remotely, or through a network to an endpoint device (including but not limited to: workstations, printers, servers (outside a datacenter), VoIP Phones, VTC CODECs). Gateways and SOA applications are examples of where this requirement would apply.","descriptions":{"default":"Without identifying devices, unidentified or unknown devices may be introduced, thereby facilitating malicious activity.\n\nWith one way SSL authentication which is the typical form of SSL authentication done between a web browser client and a web server, the client requests the server certificate to validate the server's identity and establish a secure connection.\n\nWhen SSL mutual authentication is used, the server is configured to request the client’s certificate as well so the server can also identify the client.\n\nFor distributed architectures (e.g., service-oriented architectures), the decisions regarding the validation of identification claims may be made by services separate from the services acting on those decisions. In such situations, it is necessary to provide the identification decisions (as opposed to the actual identifiers) to the services that need to act on those decisions.\n\nThis requirement applies to applications that connect either locally, remotely, or through a network to an endpoint device (including but not limited to: workstations, printers, servers (outside a datacenter), VoIP Phones, VTC CODECs). Gateways and SOA applications are examples of where this requirement would apply.","check":"Review the application documentation and interview the application administrator.\n\nDetermine if mutual authentication is mandated by the data owner or by mission data protection objectives and data type.\n\nReview application architecture and design documents.\n\nIdentify endpoint devices that interact with the application. These can be SOA gateways, VOIP phones, or other devices that are used to connect to and exchange data with the application.\n\nIf the design documentation specifies, this could potentially also include remote client workstations.\n\nIn order for two way SSL/mutual authentication to work properly, the server must be configured to request client certificates.\n\nAccess the applications management console.\n\nNavigate to the SSL management utility or web page that is used to configure two way mutual authentication.\n\nVerify endpoints are configured for client authentication (mutual authentication).\n\nSome application architectures such as Java configure their settings in text/xml formatted files; in that case, have the application administrator identify the configuration files used by the application.\nE.g., web.xml stored in WEB-INF/ sub directory of the application root folder.\n\nOpen the web.xml file using a text editor.\n\nVerify the application deployment descriptor for the application and the resource requiring protection under the \"login-config\" element is set to CLIENT-CERT.\n\nIf SSL mutual authentication is required and is not being utilized, this is a finding.","fix":"Configure the application to utilize mutual authentication when specified by data protection requirements."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24202r493504_chk","severity":"medium","gid":"V-222532","rid":"SV-222532r879599_rule","stig_id":"APSC-DV-001640","gtitle":"SRG-APP-000158","fix_id":"F-24191r493505_fix","documentable":null,"legacy":["V-69547","SV-84169"],"cci":["CCI-000778"],"nist":["IA-3"]}},{"id":"SV-222533","code":"control 'SV-222533' do\n  title 'The application must authenticate all network connected endpoint devices before establishing any connection.'\n  desc 'Without authenticating devices, unidentified or unknown devices may be introduced, thereby facilitating malicious activity.\n\nFor distributed architectures (e.g., service-oriented architectures), the decisions regarding the validation of authentication claims may be made by services separate from the services acting on those decisions.\n\nIn such situations, it is necessary to provide authentication decisions (as opposed to the actual authenticators) to the services that need to act on those decisions.\n\nThis requirement applies to applications that connect either locally, remotely, or through a network to an endpoint device (including but not limited to: workstations, printers, servers (outside a datacenter), VoIP Phones, VTC CODECs).\n\nGateways and SOA applications are examples of where this requirement would apply.\n\nEnd point devices are not:\nClient desktop workstations only offer browser-based web application access where the user authenticates at the app layer.\n\nDevice authentication is a solution enabling an organization to manage devices. It is an additional layer of authentication ensuring only specific pre-authorized devices can access the system.'\n  desc 'check', 'Review the application documentation, implementation documentation and interview the application administrator.\n\nIdentify if the application utilizes Web Services/Service-Oriented Architecture (SOA). Using the web services framework that has been implemented, have the application administrator identify the remote devices allowed to communicate to the service provider.\n\nIf the application is designed to provide end-user, interactive application access only and does not use web services or allow connections from remote devices, this requirement is not applicable.\n\nIdentify the authentication mechanism used to authenticate the remote consumers/devices. Commonly available authentication methods are Client Certificate Authentication and Basic Authentication.\n\nThe Basic Authentication method provides insufficient protection for authentication sessions and is not allowed.\n\nIf no authentication mechanism is used to authenticate remote service consumers/devices, or if Basic Authentication is used to authentication remote service consumers/devices, this is a finding.'\n  desc 'fix', 'Configure the application to authenticate all network connected endpoint devices/service consumers before establishing connections.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24203r493507_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222533'\n  tag rid: 'SV-222533r879767_rule'\n  tag stig_id: 'APSC-DV-001650'\n  tag gtitle: 'SRG-APP-000394'\n  tag fix_id: 'F-24192r493508_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84171', 'V-69549']\n  tag cci: ['CCI-001958']\n  tag nist: ['IA-3']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222533.rb"},"title":"The application must authenticate all network connected endpoint devices before establishing any connection.","desc":"Without authenticating devices, unidentified or unknown devices may be introduced, thereby facilitating malicious activity.\n\nFor distributed architectures (e.g., service-oriented architectures), the decisions regarding the validation of authentication claims may be made by services separate from the services acting on those decisions.\n\nIn such situations, it is necessary to provide authentication decisions (as opposed to the actual authenticators) to the services that need to act on those decisions.\n\nThis requirement applies to applications that connect either locally, remotely, or through a network to an endpoint device (including but not limited to: workstations, printers, servers (outside a datacenter), VoIP Phones, VTC CODECs).\n\nGateways and SOA applications are examples of where this requirement would apply.\n\nEnd point devices are not:\nClient desktop workstations only offer browser-based web application access where the user authenticates at the app layer.\n\nDevice authentication is a solution enabling an organization to manage devices. It is an additional layer of authentication ensuring only specific pre-authorized devices can access the system.","descriptions":{"default":"Without authenticating devices, unidentified or unknown devices may be introduced, thereby facilitating malicious activity.\n\nFor distributed architectures (e.g., service-oriented architectures), the decisions regarding the validation of authentication claims may be made by services separate from the services acting on those decisions.\n\nIn such situations, it is necessary to provide authentication decisions (as opposed to the actual authenticators) to the services that need to act on those decisions.\n\nThis requirement applies to applications that connect either locally, remotely, or through a network to an endpoint device (including but not limited to: workstations, printers, servers (outside a datacenter), VoIP Phones, VTC CODECs).\n\nGateways and SOA applications are examples of where this requirement would apply.\n\nEnd point devices are not:\nClient desktop workstations only offer browser-based web application access where the user authenticates at the app layer.\n\nDevice authentication is a solution enabling an organization to manage devices. It is an additional layer of authentication ensuring only specific pre-authorized devices can access the system.","check":"Review the application documentation, implementation documentation and interview the application administrator.\n\nIdentify if the application utilizes Web Services/Service-Oriented Architecture (SOA). Using the web services framework that has been implemented, have the application administrator identify the remote devices allowed to communicate to the service provider.\n\nIf the application is designed to provide end-user, interactive application access only and does not use web services or allow connections from remote devices, this requirement is not applicable.\n\nIdentify the authentication mechanism used to authenticate the remote consumers/devices. Commonly available authentication methods are Client Certificate Authentication and Basic Authentication.\n\nThe Basic Authentication method provides insufficient protection for authentication sessions and is not allowed.\n\nIf no authentication mechanism is used to authenticate remote service consumers/devices, or if Basic Authentication is used to authentication remote service consumers/devices, this is a finding.","fix":"Configure the application to authenticate all network connected endpoint devices/service consumers before establishing connections."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24203r493507_chk","severity":"medium","gid":"V-222533","rid":"SV-222533r879767_rule","stig_id":"APSC-DV-001650","gtitle":"SRG-APP-000394","fix_id":"F-24192r493508_fix","documentable":null,"legacy":["SV-84171","V-69549"],"cci":["CCI-001958"],"nist":["IA-3"]}},{"id":"SV-222534","code":"control 'SV-222534' do\n  title 'Service-Oriented Applications handling non-releasable data must authenticate endpoint devices via mutual SSL/TLS.'\n  desc \"Without identifying devices, unidentified or unknown devices may be introduced, thereby facilitating malicious activity.\n\nOne way SSL/TLS authentication is the typical form of  authentication done between a web browser client and a web server. The client requests the server certificate to validate the server's identity and establish a secure connection.\n\nWhen SSL/TLS mutual authentication is used, the server is configured to request the client’s certificate as well so the server can also identify the client. This form of authentication is normally chosen for system to system communications that leverage HTTP as the transport.\n\nIt should be noted that SSL is being deprecated and replaced with TLS.\n\nFor distributed architectures (e.g., service-oriented architectures), the decisions regarding the validation of identification claims may be made by services separate from the services acting on those decisions. In such situations, it is necessary to provide the identification decisions (as opposed to the actual identifiers) to the services that need to act on those decisions.\n\nThis requirement applies to applications that connect either locally, remotely, or through a network to an endpoint device (including but not limited to: workstations, printers, servers (outside a datacenter), VoIP Phones, VTC CODECs). Gateways and SOA applications are examples of where this requirement would apply.\"\n  desc 'check', 'Review application documentation and interview application administrator.\n\nIdentify application data elements and determine if the application is handling/processing non-releasable data.\n\nReview the application architecture and design documents.\n\nIdentify endpoint devices that interact with the application. These can be SOA gateways, VOIP phones, or other devices that are used to connect to and exchange data with the application.\n\nIf the design documentation specifies it, this could also include remote client workstations. However, this requirement is usually reserved for system-oriented endpoints rather than client workstations.\n\nIn order for two way SSL/TLS mutual authentication to work properly, the server must be configured to request client certificates.\n\nAccess the applications management console and navigate to the SSL/TLS management utility or web page that is used to configure two-way mutual authentication.\n\nVerify endpoints are configured for client authentication (mutual authentication).\n\nSome application architectures configure their settings in text/xml formatted files; in that case, have the application administrator identify the configuration files used by the application (e.g., web.xml stored in WEB-INF/ sub directory of the application root folder).\n\nOpen the web.xml file using a text editor and verify the application deployment descriptor for the application and the resource requiring protection under the \"login-config\" element is set to CLIENT-CERT.\n\nIf SSL/TLS mutual authentication is required due to the application processing non-releasable data and SSL/TLS mutual authentication not being utilized, this is a finding.'\n  desc 'fix', 'Configure the application to utilize mutual authentication when the application is processing non-releasable data.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24204r493510_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222534'\n  tag rid: 'SV-222534r879768_rule'\n  tag stig_id: 'APSC-DV-001660'\n  tag gtitle: 'SRG-APP-000395'\n  tag fix_id: 'F-24193r493511_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84173', 'V-69551']\n  tag cci: ['CCI-001967']\n  tag nist: ['IA-3 (1)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222534.rb"},"title":"Service-Oriented Applications handling non-releasable data must authenticate endpoint devices via mutual SSL/TLS.","desc":"Without identifying devices, unidentified or unknown devices may be introduced, thereby facilitating malicious activity.\n\nOne way SSL/TLS authentication is the typical form of  authentication done between a web browser client and a web server. The client requests the server certificate to validate the server's identity and establish a secure connection.\n\nWhen SSL/TLS mutual authentication is used, the server is configured to request the client’s certificate as well so the server can also identify the client. This form of authentication is normally chosen for system to system communications that leverage HTTP as the transport.\n\nIt should be noted that SSL is being deprecated and replaced with TLS.\n\nFor distributed architectures (e.g., service-oriented architectures), the decisions regarding the validation of identification claims may be made by services separate from the services acting on those decisions. In such situations, it is necessary to provide the identification decisions (as opposed to the actual identifiers) to the services that need to act on those decisions.\n\nThis requirement applies to applications that connect either locally, remotely, or through a network to an endpoint device (including but not limited to: workstations, printers, servers (outside a datacenter), VoIP Phones, VTC CODECs). Gateways and SOA applications are examples of where this requirement would apply.","descriptions":{"default":"Without identifying devices, unidentified or unknown devices may be introduced, thereby facilitating malicious activity.\n\nOne way SSL/TLS authentication is the typical form of  authentication done between a web browser client and a web server. The client requests the server certificate to validate the server's identity and establish a secure connection.\n\nWhen SSL/TLS mutual authentication is used, the server is configured to request the client’s certificate as well so the server can also identify the client. This form of authentication is normally chosen for system to system communications that leverage HTTP as the transport.\n\nIt should be noted that SSL is being deprecated and replaced with TLS.\n\nFor distributed architectures (e.g., service-oriented architectures), the decisions regarding the validation of identification claims may be made by services separate from the services acting on those decisions. In such situations, it is necessary to provide the identification decisions (as opposed to the actual identifiers) to the services that need to act on those decisions.\n\nThis requirement applies to applications that connect either locally, remotely, or through a network to an endpoint device (including but not limited to: workstations, printers, servers (outside a datacenter), VoIP Phones, VTC CODECs). Gateways and SOA applications are examples of where this requirement would apply.","check":"Review application documentation and interview application administrator.\n\nIdentify application data elements and determine if the application is handling/processing non-releasable data.\n\nReview the application architecture and design documents.\n\nIdentify endpoint devices that interact with the application. These can be SOA gateways, VOIP phones, or other devices that are used to connect to and exchange data with the application.\n\nIf the design documentation specifies it, this could also include remote client workstations. However, this requirement is usually reserved for system-oriented endpoints rather than client workstations.\n\nIn order for two way SSL/TLS mutual authentication to work properly, the server must be configured to request client certificates.\n\nAccess the applications management console and navigate to the SSL/TLS management utility or web page that is used to configure two-way mutual authentication.\n\nVerify endpoints are configured for client authentication (mutual authentication).\n\nSome application architectures configure their settings in text/xml formatted files; in that case, have the application administrator identify the configuration files used by the application (e.g., web.xml stored in WEB-INF/ sub directory of the application root folder).\n\nOpen the web.xml file using a text editor and verify the application deployment descriptor for the application and the resource requiring protection under the \"login-config\" element is set to CLIENT-CERT.\n\nIf SSL/TLS mutual authentication is required due to the application processing non-releasable data and SSL/TLS mutual authentication not being utilized, this is a finding.","fix":"Configure the application to utilize mutual authentication when the application is processing non-releasable data."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24204r493510_chk","severity":"medium","gid":"V-222534","rid":"SV-222534r879768_rule","stig_id":"APSC-DV-001660","gtitle":"SRG-APP-000395","fix_id":"F-24193r493511_fix","documentable":null,"legacy":["SV-84173","V-69551"],"cci":["CCI-001967"],"nist":["IA-3 (1)"]}},{"id":"SV-222535","code":"control 'SV-222535' do\n  title 'The application must disable device identifiers after 35 days of inactivity unless a cryptographic certificate is used for authentication.'\n  desc 'Device identifiers are used to identify hardware devices that interact with the application much like a user account is used to identify an application user.  Examples of hardware devices include but are not limited to mobile phones, application gateways or other types of smart hardware.  \n\nThis requirement does not apply to individual application user accounts.  \n\nThis requirement is not applicable to shared information system accounts, application groups, roles (e.g., guest and anonymous accounts) that are used by the application itself in order to function.  Care must be taken to not disable identifiers that are used by the application in order to function.\n\nInactive device identifiers pose a risk to systems and applications. Attackers that are able to exploit an inactive identifier can potentially obtain and maintain undetected access to the application. \n\nApplications need to track periods of device inactivity and disable the device identifier after 35 days of inactivity.  This is usually accomplished by disabling the account used by the device to access the application.\n\nApplications that utilize cryptographic certificates for device authentication may use the expiration date assigned to the certificate to meet this requirement with the understanding that the certificate is created and managed in accordance with DoD PKI policy and can be revoked by a trusted CA.\n\nTo avoid having to build complex device management capabilities directly into their application, developers should leverage the underlying OS or other account management infrastructure (AD, LDAP) that is already in place within the organization and meets organizational user account management requirements.\n\nApplications are encouraged to utilize a centralized data store such as Active Directory or LDAP to offload device management requirements and ensure compliance with policy requirements.'\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nIf the application is not designed to authenticate devices (such as mobile phones, gateways or other smart devices), or uses DoD PKI certificates to authenticate these devices, this requirement is NA.\n\nAccess the user management interface for the application.\n\nIdentify application device IDs.\n\nIf the application utilizes approved certificates or a centralized authentication store (Active Directory or LDAP) as the authoritative source for application authentication, and the authentication store is configured to meet the requirement to disable device IDs after 35 days of inactivity, this is not a finding.\n\nAccounts such as guest and anonymous as well as roles and groups or other identities used to operate the application or to provide limited guest access are not applicable.\n\nAccess the application user management interface and review the account settings that pertain to devices.\n\nVerify the application is configured to disable device accounts that have not been active or logged into the application for the past 35 days.\n\nIf the application does not disable accounts used to authenticate devices after 35 days of inactivity, this is a finding.'\n  desc 'fix', 'Configure the application to disable device accounts after 35 days of inactivity or to utilize DoD PKI certificates that provide an expiration date.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24205r493513_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222535'\n  tag rid: 'SV-222535r879600_rule'\n  tag stig_id: 'APSC-DV-001670'\n  tag gtitle: 'SRG-APP-000163'\n  tag fix_id: 'F-24194r493514_fix'\n  tag 'documentable'\n  tag legacy: ['V-69553', 'SV-84175']\n  tag cci: ['CCI-000795']\n  tag nist: ['IA-4 e']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222535.rb"},"title":"The application must disable device identifiers after 35 days of inactivity unless a cryptographic certificate is used for authentication.","desc":"Device identifiers are used to identify hardware devices that interact with the application much like a user account is used to identify an application user.  Examples of hardware devices include but are not limited to mobile phones, application gateways or other types of smart hardware.  \n\nThis requirement does not apply to individual application user accounts.  \n\nThis requirement is not applicable to shared information system accounts, application groups, roles (e.g., guest and anonymous accounts) that are used by the application itself in order to function.  Care must be taken to not disable identifiers that are used by the application in order to function.\n\nInactive device identifiers pose a risk to systems and applications. Attackers that are able to exploit an inactive identifier can potentially obtain and maintain undetected access to the application. \n\nApplications need to track periods of device inactivity and disable the device identifier after 35 days of inactivity.  This is usually accomplished by disabling the account used by the device to access the application.\n\nApplications that utilize cryptographic certificates for device authentication may use the expiration date assigned to the certificate to meet this requirement with the understanding that the certificate is created and managed in accordance with DoD PKI policy and can be revoked by a trusted CA.\n\nTo avoid having to build complex device management capabilities directly into their application, developers should leverage the underlying OS or other account management infrastructure (AD, LDAP) that is already in place within the organization and meets organizational user account management requirements.\n\nApplications are encouraged to utilize a centralized data store such as Active Directory or LDAP to offload device management requirements and ensure compliance with policy requirements.","descriptions":{"default":"Device identifiers are used to identify hardware devices that interact with the application much like a user account is used to identify an application user.  Examples of hardware devices include but are not limited to mobile phones, application gateways or other types of smart hardware.  \n\nThis requirement does not apply to individual application user accounts.  \n\nThis requirement is not applicable to shared information system accounts, application groups, roles (e.g., guest and anonymous accounts) that are used by the application itself in order to function.  Care must be taken to not disable identifiers that are used by the application in order to function.\n\nInactive device identifiers pose a risk to systems and applications. Attackers that are able to exploit an inactive identifier can potentially obtain and maintain undetected access to the application. \n\nApplications need to track periods of device inactivity and disable the device identifier after 35 days of inactivity.  This is usually accomplished by disabling the account used by the device to access the application.\n\nApplications that utilize cryptographic certificates for device authentication may use the expiration date assigned to the certificate to meet this requirement with the understanding that the certificate is created and managed in accordance with DoD PKI policy and can be revoked by a trusted CA.\n\nTo avoid having to build complex device management capabilities directly into their application, developers should leverage the underlying OS or other account management infrastructure (AD, LDAP) that is already in place within the organization and meets organizational user account management requirements.\n\nApplications are encouraged to utilize a centralized data store such as Active Directory or LDAP to offload device management requirements and ensure compliance with policy requirements.","check":"Review the application documentation and interview the application administrator.\n\nIf the application is not designed to authenticate devices (such as mobile phones, gateways or other smart devices), or uses DoD PKI certificates to authenticate these devices, this requirement is NA.\n\nAccess the user management interface for the application.\n\nIdentify application device IDs.\n\nIf the application utilizes approved certificates or a centralized authentication store (Active Directory or LDAP) as the authoritative source for application authentication, and the authentication store is configured to meet the requirement to disable device IDs after 35 days of inactivity, this is not a finding.\n\nAccounts such as guest and anonymous as well as roles and groups or other identities used to operate the application or to provide limited guest access are not applicable.\n\nAccess the application user management interface and review the account settings that pertain to devices.\n\nVerify the application is configured to disable device accounts that have not been active or logged into the application for the past 35 days.\n\nIf the application does not disable accounts used to authenticate devices after 35 days of inactivity, this is a finding.","fix":"Configure the application to disable device accounts after 35 days of inactivity or to utilize DoD PKI certificates that provide an expiration date."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24205r493513_chk","severity":"medium","gid":"V-222535","rid":"SV-222535r879600_rule","stig_id":"APSC-DV-001670","gtitle":"SRG-APP-000163","fix_id":"F-24194r493514_fix","documentable":null,"legacy":["V-69553","SV-84175"],"cci":["CCI-000795"],"nist":["IA-4 e"]}},{"id":"SV-222536","code":"control 'SV-222536' do\n  title 'The application must enforce a minimum 15-character password length.'\n  desc 'The shorter the password, the lower the number of possible combinations that need to be tested before the password is compromised.\n\nUse of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nPassword complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks. Password length is one factor of several that helps to determine strength and how long it takes to crack a password. The shorter the password, the lower the number of possible combinations that need to be tested before the password is compromised.\n\nUse of more characters in a password helps to exponentially increase the time and/or resources required to compromise the password.'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.\n\nIf the application does not use passwords, the requirement is not applicable.\n\nAccess the application management interface and create a test user account or logon to the system with a test account and access the functionality that provides password change capabilities.\n\nWhen prompted to provide the password, attempt to create a password shorter than 15 characters in length.\n\nIf a password shorter than 15 characters can be created, this is a finding.'\n  desc 'fix', 'Configure the application to require 15 characters in the password.'\n  impact 0.7\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24206r493516_chk'\n  tag severity: 'high'\n  tag gid: 'V-222536'\n  tag rid: 'SV-222536r879601_rule'\n  tag stig_id: 'APSC-DV-001680'\n  tag gtitle: 'SRG-APP-000164'\n  tag fix_id: 'F-24195r493517_fix'\n  tag 'documentable'\n  tag legacy: ['V-69555', 'SV-84177']\n  tag cci: ['CCI-000205']\n  tag nist: ['IA-5 (1) (a)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222536.rb"},"title":"The application must enforce a minimum 15-character password length.","desc":"The shorter the password, the lower the number of possible combinations that need to be tested before the password is compromised.\n\nUse of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nPassword complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks. Password length is one factor of several that helps to determine strength and how long it takes to crack a password. The shorter the password, the lower the number of possible combinations that need to be tested before the password is compromised.\n\nUse of more characters in a password helps to exponentially increase the time and/or resources required to compromise the password.","descriptions":{"default":"The shorter the password, the lower the number of possible combinations that need to be tested before the password is compromised.\n\nUse of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nPassword complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks. Password length is one factor of several that helps to determine strength and how long it takes to crack a password. The shorter the password, the lower the number of possible combinations that need to be tested before the password is compromised.\n\nUse of more characters in a password helps to exponentially increase the time and/or resources required to compromise the password.","check":"Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.\n\nIf the application does not use passwords, the requirement is not applicable.\n\nAccess the application management interface and create a test user account or logon to the system with a test account and access the functionality that provides password change capabilities.\n\nWhen prompted to provide the password, attempt to create a password shorter than 15 characters in length.\n\nIf a password shorter than 15 characters can be created, this is a finding.","fix":"Configure the application to require 15 characters in the password."},"impact":0.7,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24206r493516_chk","severity":"high","gid":"V-222536","rid":"SV-222536r879601_rule","stig_id":"APSC-DV-001680","gtitle":"SRG-APP-000164","fix_id":"F-24195r493517_fix","documentable":null,"legacy":["V-69555","SV-84177"],"cci":["CCI-000205"],"nist":["IA-5 (1) (a)"]}},{"id":"SV-222537","code":"control 'SV-222537' do\n  title 'The application must enforce password complexity by requiring that at least one upper-case character be used.'\n  desc 'Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nUse of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks.\n\nPassword complexity is one factor of several that determine how long it takes to crack a password. The more complex the password is, the greater the number of possible combinations that need to be tested before the password is compromised.'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.\n\nIf the application does not use passwords, the requirement is not applicable.\n\nAccess the application management interface and create a test user account or logon to the system with a test account and access the functionality that provides password change capabilities.\n\nWhen prompted to provide the password, attempt to create a password that does not have one upper-case character.\n\nIf a password without at least one upper-case character can be created, this is a finding.'\n  desc 'fix', 'Configure the application to require at least one upper-case character in the password.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24207r493519_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222537'\n  tag rid: 'SV-222537r879603_rule'\n  tag stig_id: 'APSC-DV-001690'\n  tag gtitle: 'SRG-APP-000166'\n  tag fix_id: 'F-24196r493520_fix'\n  tag 'documentable'\n  tag legacy: ['V-69557', 'SV-84179']\n  tag cci: ['CCI-000192']\n  tag nist: ['IA-5 (1) (a)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222537.rb"},"title":"The application must enforce password complexity by requiring that at least one upper-case character be used.","desc":"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nUse of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks.\n\nPassword complexity is one factor of several that determine how long it takes to crack a password. The more complex the password is, the greater the number of possible combinations that need to be tested before the password is compromised.","descriptions":{"default":"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nUse of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks.\n\nPassword complexity is one factor of several that determine how long it takes to crack a password. The more complex the password is, the greater the number of possible combinations that need to be tested before the password is compromised.","check":"Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.\n\nIf the application does not use passwords, the requirement is not applicable.\n\nAccess the application management interface and create a test user account or logon to the system with a test account and access the functionality that provides password change capabilities.\n\nWhen prompted to provide the password, attempt to create a password that does not have one upper-case character.\n\nIf a password without at least one upper-case character can be created, this is a finding.","fix":"Configure the application to require at least one upper-case character in the password."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24207r493519_chk","severity":"medium","gid":"V-222537","rid":"SV-222537r879603_rule","stig_id":"APSC-DV-001690","gtitle":"SRG-APP-000166","fix_id":"F-24196r493520_fix","documentable":null,"legacy":["V-69557","SV-84179"],"cci":["CCI-000192"],"nist":["IA-5 (1) (a)"]}},{"id":"SV-222538","code":"control 'SV-222538' do\n  title 'The application must enforce password complexity by requiring that at least one lower-case character be used.'\n  desc 'Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nUse of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks.\n\nPassword complexity is one factor of several that determine how long it takes to crack a password. The more complex the password, the greater the number of possible combinations that need to be tested before the password is compromised.'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.\n\nIf the application does not use passwords, the requirement is not applicable.\n\nAccess the application management interface and create a test user account or logon to the system with a test account and access the functionality that provides password change capabilities.\n\nWhen prompted to provide the password, attempt to create a password that does not have one lower-case character.\n\nIf a password without at least one lower-case character can be created, this is a finding.'\n  desc 'fix', 'Configure the application to require at least one lower-case character in the password.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24208r493522_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222538'\n  tag rid: 'SV-222538r879604_rule'\n  tag stig_id: 'APSC-DV-001700'\n  tag gtitle: 'SRG-APP-000167'\n  tag fix_id: 'F-24197r493523_fix'\n  tag 'documentable'\n  tag legacy: ['V-69559', 'SV-84181']\n  tag cci: ['CCI-000193']\n  tag nist: ['IA-5 (1) (a)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222538.rb"},"title":"The application must enforce password complexity by requiring that at least one lower-case character be used.","desc":"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nUse of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks.\n\nPassword complexity is one factor of several that determine how long it takes to crack a password. The more complex the password, the greater the number of possible combinations that need to be tested before the password is compromised.","descriptions":{"default":"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nUse of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks.\n\nPassword complexity is one factor of several that determine how long it takes to crack a password. The more complex the password, the greater the number of possible combinations that need to be tested before the password is compromised.","check":"Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.\n\nIf the application does not use passwords, the requirement is not applicable.\n\nAccess the application management interface and create a test user account or logon to the system with a test account and access the functionality that provides password change capabilities.\n\nWhen prompted to provide the password, attempt to create a password that does not have one lower-case character.\n\nIf a password without at least one lower-case character can be created, this is a finding.","fix":"Configure the application to require at least one lower-case character in the password."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24208r493522_chk","severity":"medium","gid":"V-222538","rid":"SV-222538r879604_rule","stig_id":"APSC-DV-001700","gtitle":"SRG-APP-000167","fix_id":"F-24197r493523_fix","documentable":null,"legacy":["V-69559","SV-84181"],"cci":["CCI-000193"],"nist":["IA-5 (1) (a)"]}},{"id":"SV-222539","code":"control 'SV-222539' do\n  title 'The application must enforce password complexity by requiring that at least one numeric character be used.'\n  desc 'Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nUse of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks.\n\nPassword complexity is one factor of several that determine how long it takes to crack a password. The more complex the password, the greater the number of possible combinations that need to be tested before the password is compromised.'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.\n\nIf the application does not use passwords, the requirement is not applicable.\n\nAccess the application management interface and create a test user account or logon to the system with a test account and access the functionality that provides password change capabilities.\n\nWhen prompted to provide the password, attempt to create a password that does not have one numeric character.\n\nIf a password without at least one numeric character can be created, this is a finding.'\n  desc 'fix', 'Configure the application to require at least one numeric character in the password.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24209r493525_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222539'\n  tag rid: 'SV-222539r879605_rule'\n  tag stig_id: 'APSC-DV-001710'\n  tag gtitle: 'SRG-APP-000168'\n  tag fix_id: 'F-24198r493526_fix'\n  tag 'documentable'\n  tag legacy: ['V-69561', 'SV-84183']\n  tag cci: ['CCI-000194']\n  tag nist: ['IA-5 (1) (a)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222539.rb"},"title":"The application must enforce password complexity by requiring that at least one numeric character be used.","desc":"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nUse of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks.\n\nPassword complexity is one factor of several that determine how long it takes to crack a password. The more complex the password, the greater the number of possible combinations that need to be tested before the password is compromised.","descriptions":{"default":"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nUse of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks.\n\nPassword complexity is one factor of several that determine how long it takes to crack a password. The more complex the password, the greater the number of possible combinations that need to be tested before the password is compromised.","check":"Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.\n\nIf the application does not use passwords, the requirement is not applicable.\n\nAccess the application management interface and create a test user account or logon to the system with a test account and access the functionality that provides password change capabilities.\n\nWhen prompted to provide the password, attempt to create a password that does not have one numeric character.\n\nIf a password without at least one numeric character can be created, this is a finding.","fix":"Configure the application to require at least one numeric character in the password."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24209r493525_chk","severity":"medium","gid":"V-222539","rid":"SV-222539r879605_rule","stig_id":"APSC-DV-001710","gtitle":"SRG-APP-000168","fix_id":"F-24198r493526_fix","documentable":null,"legacy":["V-69561","SV-84183"],"cci":["CCI-000194"],"nist":["IA-5 (1) (a)"]}},{"id":"SV-222540","code":"control 'SV-222540' do\n  title 'The application must enforce password complexity by requiring that at least one special character be used.'\n  desc 'Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nUse of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks.\n\nPassword complexity is one factor of several that determine how long it takes to crack a password. The more complex the password, the greater the number of possible combinations that need to be tested before the password is compromised.'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.\n\nIf the application does not use passwords, the requirement is not applicable.\n\nAccess the application management interface and create a test user account or logon to the system with a test account and access the functionality that provides password change capabilities.\n\nWhen prompted to provide the password, attempt to create a password that does not have one special character.\n\nIf a password without at least one special character can be created, this is a finding.'\n  desc 'fix', 'Configure the application to require at least one special character in the password.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24210r493528_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222540'\n  tag rid: 'SV-222540r879606_rule'\n  tag stig_id: 'APSC-DV-001720'\n  tag gtitle: 'SRG-APP-000169'\n  tag fix_id: 'F-24199r493529_fix'\n  tag 'documentable'\n  tag legacy: ['V-69563', 'SV-84185']\n  tag cci: ['CCI-001619']\n  tag nist: ['IA-5 (1) (a)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222540.rb"},"title":"The application must enforce password complexity by requiring that at least one special character be used.","desc":"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nUse of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks.\n\nPassword complexity is one factor of several that determine how long it takes to crack a password. The more complex the password, the greater the number of possible combinations that need to be tested before the password is compromised.","descriptions":{"default":"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nUse of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks.\n\nPassword complexity is one factor of several that determine how long it takes to crack a password. The more complex the password, the greater the number of possible combinations that need to be tested before the password is compromised.","check":"Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.\n\nIf the application does not use passwords, the requirement is not applicable.\n\nAccess the application management interface and create a test user account or logon to the system with a test account and access the functionality that provides password change capabilities.\n\nWhen prompted to provide the password, attempt to create a password that does not have one special character.\n\nIf a password without at least one special character can be created, this is a finding.","fix":"Configure the application to require at least one special character in the password."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24210r493528_chk","severity":"medium","gid":"V-222540","rid":"SV-222540r879606_rule","stig_id":"APSC-DV-001720","gtitle":"SRG-APP-000169","fix_id":"F-24199r493529_fix","documentable":null,"legacy":["V-69563","SV-84185"],"cci":["CCI-001619"],"nist":["IA-5 (1) (a)"]}},{"id":"SV-222541","code":"control 'SV-222541' do\n  title 'The application must require the change of at least 8 of the total number of characters when passwords are changed.'\n  desc 'Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nUse of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks.\n\nPassword complexity is one factor of several that determine how long it takes to crack a password. The more complex the password, the greater the number of possible combinations that need to be tested before the password is compromised.'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.\n\nIf the application does not use passwords, the requirement is not applicable.\n\nAccess the application management interface and create a test user account or logon to the system with a test account and access the functionality that provides password change capabilities.\n\nWhen prompted to provide the password, attempt to change less than 8 characters of the total number of characters in the password.\n\nIf less than 8 characters of the password are changed, this is a finding.'\n  desc 'fix', 'Configure the application to require the change of at least 8 characters in the password when passwords are changed.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24211r493531_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222541'\n  tag rid: 'SV-222541r879607_rule'\n  tag stig_id: 'APSC-DV-001730'\n  tag gtitle: 'SRG-APP-000170'\n  tag fix_id: 'F-24200r493532_fix'\n  tag 'documentable'\n  tag legacy: ['V-69565', 'SV-84187']\n  tag cci: ['CCI-000195']\n  tag nist: ['IA-5 (1) (b)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222541.rb"},"title":"The application must require the change of at least 8 of the total number of characters when passwords are changed.","desc":"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nUse of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks.\n\nPassword complexity is one factor of several that determine how long it takes to crack a password. The more complex the password, the greater the number of possible combinations that need to be tested before the password is compromised.","descriptions":{"default":"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nUse of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks.\n\nPassword complexity is one factor of several that determine how long it takes to crack a password. The more complex the password, the greater the number of possible combinations that need to be tested before the password is compromised.","check":"Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.\n\nIf the application does not use passwords, the requirement is not applicable.\n\nAccess the application management interface and create a test user account or logon to the system with a test account and access the functionality that provides password change capabilities.\n\nWhen prompted to provide the password, attempt to change less than 8 characters of the total number of characters in the password.\n\nIf less than 8 characters of the password are changed, this is a finding.","fix":"Configure the application to require the change of at least 8 characters in the password when passwords are changed."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24211r493531_chk","severity":"medium","gid":"V-222541","rid":"SV-222541r879607_rule","stig_id":"APSC-DV-001730","gtitle":"SRG-APP-000170","fix_id":"F-24200r493532_fix","documentable":null,"legacy":["V-69565","SV-84187"],"cci":["CCI-000195"],"nist":["IA-5 (1) (b)"]}},{"id":"SV-222542","code":"control 'SV-222542' do\n  title 'The application must only store cryptographic representations of passwords.'\n  desc \"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nPasswords need to be protected at all times and using a strong one-way hashing encryption algorithm with a salt is the standard method for providing a means to validate a user's password without having to store the actual password.  \n\nPerformance and time required to access are factors that must be considered and the one way hash is the most feasible means of securing the password and providing an acceptable measure of password security.  If passwords are stored in clear text, they can be plainly read and easily compromised.\n\nIn many instances, verifying the user knows a password is performed using a password verifier. In its simplest form, a password verifier is a computational function that is capable of creating a hash of a password and determining if the value provided by the user matches the hash.  \n\nA more secure version of verifying a user knowing a password is to store the result of an iterating hash function and a large random SALT value as follows:\n\nH0 = H(pwd, H(salt))\nHn = H(Hn-1,H(salt))\n\nWhere n is a cryptographically-strong random [*3] number. Hn is stored, along with the salt. When the application wishes to verify that the user knows a password, it simply repeats the process and compares Hn with the stored Hn.\n\nA SALT is essentially a fixed-length cryptographically-strong random value.  \n\nAnother method used is utilizing a keyed hash message authentication code (HMAC).  HMAC calculates a message authentication code via a cryptographic hash function used in conjunction with an encryption key.  The key must be protected as with any private key.\n \nApplications must only store passwords that have been cryptographically protected.\"\n  desc 'check', \"Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.\n\nIf the application does not use passwords, the requirement is not applicable.\n\nHave the application administrator identify the application's password storage locations.  Potential locations include the local file system where the application is stored or in an application-related database table that should not be accessible to application users.\n\nReview application files and folders using a text editor or by using a database tool that allows you to view data stored in database tables.  Look for indications of stored user information and review that information.  Determine if password strings are readable/discernable.\n\nDetermine if the application uses the MD5 hashing algorithm to create password hashes.\n\nIf the passwords are readable or there is no indication the application utilizes cryptographic hashing to protect passwords, or if the MD5 hash algorithm is used to create password hashes, this is a finding.\"\n  desc 'fix', 'Use strong cryptographic hash functions when creating password hash values.\n\nUtilize random salt values when creating the password hash.\n\nEnsure strong access control permissions on data files containing authentication data.'\n  impact 0.7\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24212r493534_chk'\n  tag severity: 'high'\n  tag gid: 'V-222542'\n  tag rid: 'SV-222542r879608_rule'\n  tag stig_id: 'APSC-DV-001740'\n  tag gtitle: 'SRG-APP-000171'\n  tag fix_id: 'F-24201r493535_fix'\n  tag 'documentable'\n  tag legacy: ['V-69567', 'SV-84189']\n  tag cci: ['CCI-000196']\n  tag nist: ['IA-5 (1) (c)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222542.rb"},"title":"The application must only store cryptographic representations of passwords.","desc":"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nPasswords need to be protected at all times and using a strong one-way hashing encryption algorithm with a salt is the standard method for providing a means to validate a user's password without having to store the actual password.  \n\nPerformance and time required to access are factors that must be considered and the one way hash is the most feasible means of securing the password and providing an acceptable measure of password security.  If passwords are stored in clear text, they can be plainly read and easily compromised.\n\nIn many instances, verifying the user knows a password is performed using a password verifier. In its simplest form, a password verifier is a computational function that is capable of creating a hash of a password and determining if the value provided by the user matches the hash.  \n\nA more secure version of verifying a user knowing a password is to store the result of an iterating hash function and a large random SALT value as follows:\n\nH0 = H(pwd, H(salt))\nHn = H(Hn-1,H(salt))\n\nWhere n is a cryptographically-strong random [*3] number. Hn is stored, along with the salt. When the application wishes to verify that the user knows a password, it simply repeats the process and compares Hn with the stored Hn.\n\nA SALT is essentially a fixed-length cryptographically-strong random value.  \n\nAnother method used is utilizing a keyed hash message authentication code (HMAC).  HMAC calculates a message authentication code via a cryptographic hash function used in conjunction with an encryption key.  The key must be protected as with any private key.\n \nApplications must only store passwords that have been cryptographically protected.","descriptions":{"default":"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nPasswords need to be protected at all times and using a strong one-way hashing encryption algorithm with a salt is the standard method for providing a means to validate a user's password without having to store the actual password.  \n\nPerformance and time required to access are factors that must be considered and the one way hash is the most feasible means of securing the password and providing an acceptable measure of password security.  If passwords are stored in clear text, they can be plainly read and easily compromised.\n\nIn many instances, verifying the user knows a password is performed using a password verifier. In its simplest form, a password verifier is a computational function that is capable of creating a hash of a password and determining if the value provided by the user matches the hash.  \n\nA more secure version of verifying a user knowing a password is to store the result of an iterating hash function and a large random SALT value as follows:\n\nH0 = H(pwd, H(salt))\nHn = H(Hn-1,H(salt))\n\nWhere n is a cryptographically-strong random [*3] number. Hn is stored, along with the salt. When the application wishes to verify that the user knows a password, it simply repeats the process and compares Hn with the stored Hn.\n\nA SALT is essentially a fixed-length cryptographically-strong random value.  \n\nAnother method used is utilizing a keyed hash message authentication code (HMAC).  HMAC calculates a message authentication code via a cryptographic hash function used in conjunction with an encryption key.  The key must be protected as with any private key.\n \nApplications must only store passwords that have been cryptographically protected.","check":"Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.\n\nIf the application does not use passwords, the requirement is not applicable.\n\nHave the application administrator identify the application's password storage locations.  Potential locations include the local file system where the application is stored or in an application-related database table that should not be accessible to application users.\n\nReview application files and folders using a text editor or by using a database tool that allows you to view data stored in database tables.  Look for indications of stored user information and review that information.  Determine if password strings are readable/discernable.\n\nDetermine if the application uses the MD5 hashing algorithm to create password hashes.\n\nIf the passwords are readable or there is no indication the application utilizes cryptographic hashing to protect passwords, or if the MD5 hash algorithm is used to create password hashes, this is a finding.","fix":"Use strong cryptographic hash functions when creating password hash values.\n\nUtilize random salt values when creating the password hash.\n\nEnsure strong access control permissions on data files containing authentication data."},"impact":0.7,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24212r493534_chk","severity":"high","gid":"V-222542","rid":"SV-222542r879608_rule","stig_id":"APSC-DV-001740","gtitle":"SRG-APP-000171","fix_id":"F-24201r493535_fix","documentable":null,"legacy":["V-69567","SV-84189"],"cci":["CCI-000196"],"nist":["IA-5 (1) (c)"]}},{"id":"SV-222543","code":"control 'SV-222543' do\n  title 'The application must transmit only cryptographically-protected passwords.'\n  desc 'Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nPasswords need to be protected at all times and encryption is the standard method for protecting passwords. If passwords are not encrypted, they can be plainly read (i.e., clear text) and easily compromised.\n\nApplications can accomplish this by making direct function calls to encryption modules or by leveraging operating system encryption capabilities.'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.\n\nIf the application does not use passwords, the requirement is not applicable.\n\nIdentify when the application transmits passwords. This will most likely be when the user authenticates to the application or when the application authenticates to another resource.\n\nAccess the application management interface with a test account and access the functionality that requires a password be provided. If the interface is via a web browser, verify the web browser has gone secure prior to entering any password or authentication information.\n\nThis can be done by viewing the browser and observing a “lock” icon displayed somewhere in the browser as well as an https:// to indicate an SSL connection. Most browsers display this in the upper left hand corner.\n\nIf the application is transmitting the password rather than the user, obtain design documentation from the application admin that provides the details on how they are protecting the password during transmission. This will usually be via a TLS/SSL tunneled connection or VPN.\n\nIf the passwords are not encrypted when being transmitted, this is a finding.'\n  desc 'fix', 'Configure the application to encrypt passwords when they are being transmitted.'\n  impact 0.7\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24213r493537_chk'\n  tag severity: 'high'\n  tag gid: 'V-222543'\n  tag rid: 'SV-222543r879609_rule'\n  tag stig_id: 'APSC-DV-001750'\n  tag gtitle: 'SRG-APP-000172'\n  tag fix_id: 'F-24202r493538_fix'\n  tag 'documentable'\n  tag legacy: ['V-69569', 'SV-84191']\n  tag cci: ['CCI-000197']\n  tag nist: ['IA-5 (1) (c)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222543.rb"},"title":"The application must transmit only cryptographically-protected passwords.","desc":"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nPasswords need to be protected at all times and encryption is the standard method for protecting passwords. If passwords are not encrypted, they can be plainly read (i.e., clear text) and easily compromised.\n\nApplications can accomplish this by making direct function calls to encryption modules or by leveraging operating system encryption capabilities.","descriptions":{"default":"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nPasswords need to be protected at all times and encryption is the standard method for protecting passwords. If passwords are not encrypted, they can be plainly read (i.e., clear text) and easily compromised.\n\nApplications can accomplish this by making direct function calls to encryption modules or by leveraging operating system encryption capabilities.","check":"Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.\n\nIf the application does not use passwords, the requirement is not applicable.\n\nIdentify when the application transmits passwords. This will most likely be when the user authenticates to the application or when the application authenticates to another resource.\n\nAccess the application management interface with a test account and access the functionality that requires a password be provided. If the interface is via a web browser, verify the web browser has gone secure prior to entering any password or authentication information.\n\nThis can be done by viewing the browser and observing a “lock” icon displayed somewhere in the browser as well as an https:// to indicate an SSL connection. Most browsers display this in the upper left hand corner.\n\nIf the application is transmitting the password rather than the user, obtain design documentation from the application admin that provides the details on how they are protecting the password during transmission. This will usually be via a TLS/SSL tunneled connection or VPN.\n\nIf the passwords are not encrypted when being transmitted, this is a finding.","fix":"Configure the application to encrypt passwords when they are being transmitted."},"impact":0.7,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24213r493537_chk","severity":"high","gid":"V-222543","rid":"SV-222543r879609_rule","stig_id":"APSC-DV-001750","gtitle":"SRG-APP-000172","fix_id":"F-24202r493538_fix","documentable":null,"legacy":["V-69569","SV-84191"],"cci":["CCI-000197"],"nist":["IA-5 (1) (c)"]}},{"id":"SV-222544","code":"control 'SV-222544' do\n  title 'The application must enforce 24 hours/1 day as the minimum password lifetime.'\n  desc \"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nEnforcing a minimum password lifetime helps prevent repeated password changes to defeat the password reuse or history enforcement requirement.\n\nRestricting this setting limits the user's ability to change their password. Passwords need to be changed at specific policy-based intervals; however, if the application allows the user to immediately and continually change their password, then the password could be repeatedly changed in a short period of time to defeat the organization's policy regarding password reuse.\"\n  desc 'check', 'Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.\n\nIf the application does not use passwords, the requirement is not applicable.\n\nAccess the application management interface and create a test user account or logon to the system with a test account and access the functionality that provides password change capabilities.\n\nAttempt to change the password more than once.\n\nIf a password can be changed more than once within 24 hours, the minimum lifetime setting is not set and this is a finding.'\n  desc 'fix', 'Configure the application to have a minimum password lifetime of 24 hours.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24214r493540_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222544'\n  tag rid: 'SV-222544r879610_rule'\n  tag stig_id: 'APSC-DV-001760'\n  tag gtitle: 'SRG-APP-000173'\n  tag fix_id: 'F-24203r493541_fix'\n  tag 'documentable'\n  tag legacy: ['V-69571', 'SV-84193']\n  tag cci: ['CCI-000198']\n  tag nist: ['IA-5 (1) (d)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222544.rb"},"title":"The application must enforce 24 hours/1 day as the minimum password lifetime.","desc":"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nEnforcing a minimum password lifetime helps prevent repeated password changes to defeat the password reuse or history enforcement requirement.\n\nRestricting this setting limits the user's ability to change their password. Passwords need to be changed at specific policy-based intervals; however, if the application allows the user to immediately and continually change their password, then the password could be repeatedly changed in a short period of time to defeat the organization's policy regarding password reuse.","descriptions":{"default":"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nEnforcing a minimum password lifetime helps prevent repeated password changes to defeat the password reuse or history enforcement requirement.\n\nRestricting this setting limits the user's ability to change their password. Passwords need to be changed at specific policy-based intervals; however, if the application allows the user to immediately and continually change their password, then the password could be repeatedly changed in a short period of time to defeat the organization's policy regarding password reuse.","check":"Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.\n\nIf the application does not use passwords, the requirement is not applicable.\n\nAccess the application management interface and create a test user account or logon to the system with a test account and access the functionality that provides password change capabilities.\n\nAttempt to change the password more than once.\n\nIf a password can be changed more than once within 24 hours, the minimum lifetime setting is not set and this is a finding.","fix":"Configure the application to have a minimum password lifetime of 24 hours."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24214r493540_chk","severity":"medium","gid":"V-222544","rid":"SV-222544r879610_rule","stig_id":"APSC-DV-001760","gtitle":"SRG-APP-000173","fix_id":"F-24203r493541_fix","documentable":null,"legacy":["V-69571","SV-84193"],"cci":["CCI-000198"],"nist":["IA-5 (1) (d)"]}},{"id":"SV-222545","code":"control 'SV-222545' do\n  title 'The application must enforce a 60-day maximum password lifetime restriction.'\n  desc 'Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nAny password, no matter how complex, can eventually be cracked. Therefore, passwords need to be changed at specific intervals.\n\nOne method of minimizing this risk is to use complex passwords and periodically change them. If the application does not limit the lifetime of passwords and force users to change their passwords, there is the risk that the system and/or application passwords could be compromised.\n\nThis requirement does not include emergency administration accounts which are meant for access to the application in case of failure. These accounts are not required to have maximum password lifetime restrictions.'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.\n\nIf the application does not use passwords, the requirement is not applicable.\n\nAccess the application management interface and view the user password settings page.\n\nReview user password settings and validate the application is configured to expire and force a password change after 60 days.\n\nIf user passwords are not configured to expire after 60 days, or if the application does not have the ability to control this setting, this is a finding.'\n  desc 'fix', 'Configure the application to have a maximum password lifetime of 60 days.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24215r493543_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222545'\n  tag rid: 'SV-222545r879611_rule'\n  tag stig_id: 'APSC-DV-001770'\n  tag gtitle: 'SRG-APP-000174'\n  tag fix_id: 'F-24204r493544_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84195', 'V-69573']\n  tag cci: ['CCI-000199']\n  tag nist: ['IA-5 (1) (d)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222545.rb"},"title":"The application must enforce a 60-day maximum password lifetime restriction.","desc":"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nAny password, no matter how complex, can eventually be cracked. Therefore, passwords need to be changed at specific intervals.\n\nOne method of minimizing this risk is to use complex passwords and periodically change them. If the application does not limit the lifetime of passwords and force users to change their passwords, there is the risk that the system and/or application passwords could be compromised.\n\nThis requirement does not include emergency administration accounts which are meant for access to the application in case of failure. These accounts are not required to have maximum password lifetime restrictions.","descriptions":{"default":"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nAny password, no matter how complex, can eventually be cracked. Therefore, passwords need to be changed at specific intervals.\n\nOne method of minimizing this risk is to use complex passwords and periodically change them. If the application does not limit the lifetime of passwords and force users to change their passwords, there is the risk that the system and/or application passwords could be compromised.\n\nThis requirement does not include emergency administration accounts which are meant for access to the application in case of failure. These accounts are not required to have maximum password lifetime restrictions.","check":"Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.\n\nIf the application does not use passwords, the requirement is not applicable.\n\nAccess the application management interface and view the user password settings page.\n\nReview user password settings and validate the application is configured to expire and force a password change after 60 days.\n\nIf user passwords are not configured to expire after 60 days, or if the application does not have the ability to control this setting, this is a finding.","fix":"Configure the application to have a maximum password lifetime of 60 days."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24215r493543_chk","severity":"medium","gid":"V-222545","rid":"SV-222545r879611_rule","stig_id":"APSC-DV-001770","gtitle":"SRG-APP-000174","fix_id":"F-24204r493544_fix","documentable":null,"legacy":["SV-84195","V-69573"],"cci":["CCI-000199"],"nist":["IA-5 (1) (d)"]}},{"id":"SV-222546","code":"control 'SV-222546' do\n  title 'The application must prohibit password reuse for a minimum of five generations.'\n  desc 'Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nPassword complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks.\n\nTo meet password policy requirements, passwords need to be changed at specific policy-based intervals.\n\nIf the information system or application allows the user to consecutively reuse their password when that password has exceeded its defined lifetime, the end result is a password that is not changed as per policy requirements.'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.\n\nIf the application does not use passwords, the requirement is not applicable.\n\nAccess the application management interface and view the user password settings page.\n\nReview user password settings and validate the application is configured to prohibit password reuse for a minimum of 5 password generations.\n\nIf the application does not prevent users from reusing their previous 5 passwords, or if the application does not have the ability to control this setting, this is a finding.'\n  desc 'fix', 'Configure the application to prohibit password reuse for up to 5 passwords.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24216r493546_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222546'\n  tag rid: 'SV-222546r879602_rule'\n  tag stig_id: 'APSC-DV-001780'\n  tag gtitle: 'SRG-APP-000165'\n  tag fix_id: 'F-24205r493547_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84197', 'V-69575']\n  tag cci: ['CCI-000200']\n  tag nist: ['IA-5 (1) (e)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222546.rb"},"title":"The application must prohibit password reuse for a minimum of five generations.","desc":"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nPassword complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks.\n\nTo meet password policy requirements, passwords need to be changed at specific policy-based intervals.\n\nIf the information system or application allows the user to consecutively reuse their password when that password has exceeded its defined lifetime, the end result is a password that is not changed as per policy requirements.","descriptions":{"default":"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nPassword complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks.\n\nTo meet password policy requirements, passwords need to be changed at specific policy-based intervals.\n\nIf the information system or application allows the user to consecutively reuse their password when that password has exceeded its defined lifetime, the end result is a password that is not changed as per policy requirements.","check":"Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.\n\nIf the application does not use passwords, the requirement is not applicable.\n\nAccess the application management interface and view the user password settings page.\n\nReview user password settings and validate the application is configured to prohibit password reuse for a minimum of 5 password generations.\n\nIf the application does not prevent users from reusing their previous 5 passwords, or if the application does not have the ability to control this setting, this is a finding.","fix":"Configure the application to prohibit password reuse for up to 5 passwords."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24216r493546_chk","severity":"medium","gid":"V-222546","rid":"SV-222546r879602_rule","stig_id":"APSC-DV-001780","gtitle":"SRG-APP-000165","fix_id":"F-24205r493547_fix","documentable":null,"legacy":["SV-84197","V-69575"],"cci":["CCI-000200"],"nist":["IA-5 (1) (e)"]}},{"id":"SV-222547","code":"control 'SV-222547' do\n  title 'The application must allow the use of a temporary password for system logons with an immediate change to a permanent password.'\n  desc 'Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nWithout providing this capability, an account may be created without a password. Non-repudiation cannot be guaranteed once an account is created if a user is not forced to change the temporary password upon initial logon.\n\nTemporary passwords are typically used to allow access to applications when new accounts are created or passwords are changed. It is common practice for administrators to create temporary passwords for user accounts which allow the users to log on, yet force them to change the password once they have successfully authenticated.'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.\n\nIf the application does not use passwords, the requirement is not applicable.\n\nAccess the application management interface and view the user password settings page.\n\nReview user password settings and validate the application is configured to specify when a password is temporary and force a password change when the administrator either creates a new user account or changes a user’s password.\n\nIf the application can not specify a password as temporary and force the user to change the temporary password upon successful authentication, this is a finding.'\n  desc 'fix', 'Configure the application to specify when a password is temporary and change the temporary password on the first use.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24217r493549_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222547'\n  tag rid: 'SV-222547r879770_rule'\n  tag stig_id: 'APSC-DV-001790'\n  tag gtitle: 'SRG-APP-000397'\n  tag fix_id: 'F-24206r493550_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84199', 'V-69577']\n  tag cci: ['CCI-002041']\n  tag nist: ['IA-5 (1) (f)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222547.rb"},"title":"The application must allow the use of a temporary password for system logons with an immediate change to a permanent password.","desc":"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nWithout providing this capability, an account may be created without a password. Non-repudiation cannot be guaranteed once an account is created if a user is not forced to change the temporary password upon initial logon.\n\nTemporary passwords are typically used to allow access to applications when new accounts are created or passwords are changed. It is common practice for administrators to create temporary passwords for user accounts which allow the users to log on, yet force them to change the password once they have successfully authenticated.","descriptions":{"default":"Use of passwords for application authentication is intended only for limited situations and should not be used as a replacement for two-factor CAC-enabled authentication.\n\nExamples of situations where a user ID and password might be used include but are not limited to:\n\n- When the application user base does not have a CAC and is not a current DoD employee, member of the military, or a DoD contractor.\n\n- When an application user has been officially designated as a Temporary Exception User; one who is temporarily unable to present a CAC for some reason (lost, damaged, not yet issued, broken card reader) and to satisfy urgent organizational needs must be temporarily permitted to use user ID/password authentication until the problem with CAC use has been remedied.\n\nand\n\n- When the application is publicly available and or hosting publicly releasable data requiring some degree of need-to-know protection.\n\nWithout providing this capability, an account may be created without a password. Non-repudiation cannot be guaranteed once an account is created if a user is not forced to change the temporary password upon initial logon.\n\nTemporary passwords are typically used to allow access to applications when new accounts are created or passwords are changed. It is common practice for administrators to create temporary passwords for user accounts which allow the users to log on, yet force them to change the password once they have successfully authenticated.","check":"Review the application documentation and interview the application administrator to identify if the application uses passwords for user authentication.\n\nIf the application does not use passwords, the requirement is not applicable.\n\nAccess the application management interface and view the user password settings page.\n\nReview user password settings and validate the application is configured to specify when a password is temporary and force a password change when the administrator either creates a new user account or changes a user’s password.\n\nIf the application can not specify a password as temporary and force the user to change the temporary password upon successful authentication, this is a finding.","fix":"Configure the application to specify when a password is temporary and change the temporary password on the first use."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24217r493549_chk","severity":"medium","gid":"V-222547","rid":"SV-222547r879770_rule","stig_id":"APSC-DV-001790","gtitle":"SRG-APP-000397","fix_id":"F-24206r493550_fix","documentable":null,"legacy":["SV-84199","V-69577"],"cci":["CCI-002041"],"nist":["IA-5 (1) (f)"]}},{"id":"SV-222548","code":"control 'SV-222548' do\n  title 'The application password must not be changeable by users other than the administrator or the user with which the password is associated.'\n  desc \"If the application allows user A to change user B's password,  user B can be locked out of the application, and user A is provided the ability to grant themselves access to the application as user B.  This violates application integrity and availability principles.\n\nMany applications provide a password reset capability that allows the user to reset their password if they forget it.\n\nProtections must be utilized when establishing a password change or reset capability to prevent user A from changing user B's password.\n\nProtection is usually accomplished by having each user provide an out of bounds (OOB) communication address such as a separate email address or SMS/text address (mobile phone) that can be used to transmit password reset/change information.\n\nThis  OOB information is usually provided by the user when the user account is created.   The OOB information is validated as part of the user account creation process by sending an account validation request to the OOB address and having the user respond to the request.\n\nApplications must prevent users other than the administrator or the user associated with the account from changing the account password.\"\n  desc 'check', \"Review the application documentation and interview application administrator.\n\nDetermine if the application utilizes passwords. If the application does not utilize passwords, the requirement is NA.\n\nIdentify the processes, commands or web pages the application uses to allow application users to change their own passwords. This includes but is not limited to password resets.\n\nIf the application does not allow users to change or reset their passwords, the requirement is NA.\n\nObtain two application test accounts, referred to here as User A and User B. Access the application as User A. Utilize the application password reset or change processes and determine if User A is allowed to specify or otherwise force a password change for User B.\n\nIf User A is allowed to change or force a reset of User B's password, this is a finding.\"\n  desc 'fix', 'Use a CAC to authenticate users instead of using passwords. If application users are prohibited or prevented from obtaining a CAC due to DoD policy requirements and passwords are the only viable option, design the application to utilize a secure password change or password reset process.\n\nUtilize out of band (OOB) communication techniques to communicate password change requests to users.\n\nEnsure verification processes exist that allow users to validate the change request prior to implementing the password change.\n\nEnsure users are only allowed to change their own passwords.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-36247r602304_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222548'\n  tag rid: 'SV-222548r879887_rule'\n  tag stig_id: 'APSC-DV-001795'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-36211r865212_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84767', 'V-70145']\n  tag cci: ['CCI-000184']\n  tag nist: ['IA-5 h']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222548.rb"},"title":"The application password must not be changeable by users other than the administrator or the user with which the password is associated.","desc":"If the application allows user A to change user B's password,  user B can be locked out of the application, and user A is provided the ability to grant themselves access to the application as user B.  This violates application integrity and availability principles.\n\nMany applications provide a password reset capability that allows the user to reset their password if they forget it.\n\nProtections must be utilized when establishing a password change or reset capability to prevent user A from changing user B's password.\n\nProtection is usually accomplished by having each user provide an out of bounds (OOB) communication address such as a separate email address or SMS/text address (mobile phone) that can be used to transmit password reset/change information.\n\nThis  OOB information is usually provided by the user when the user account is created.   The OOB information is validated as part of the user account creation process by sending an account validation request to the OOB address and having the user respond to the request.\n\nApplications must prevent users other than the administrator or the user associated with the account from changing the account password.","descriptions":{"default":"If the application allows user A to change user B's password,  user B can be locked out of the application, and user A is provided the ability to grant themselves access to the application as user B.  This violates application integrity and availability principles.\n\nMany applications provide a password reset capability that allows the user to reset their password if they forget it.\n\nProtections must be utilized when establishing a password change or reset capability to prevent user A from changing user B's password.\n\nProtection is usually accomplished by having each user provide an out of bounds (OOB) communication address such as a separate email address or SMS/text address (mobile phone) that can be used to transmit password reset/change information.\n\nThis  OOB information is usually provided by the user when the user account is created.   The OOB information is validated as part of the user account creation process by sending an account validation request to the OOB address and having the user respond to the request.\n\nApplications must prevent users other than the administrator or the user associated with the account from changing the account password.","check":"Review the application documentation and interview application administrator.\n\nDetermine if the application utilizes passwords. If the application does not utilize passwords, the requirement is NA.\n\nIdentify the processes, commands or web pages the application uses to allow application users to change their own passwords. This includes but is not limited to password resets.\n\nIf the application does not allow users to change or reset their passwords, the requirement is NA.\n\nObtain two application test accounts, referred to here as User A and User B. Access the application as User A. Utilize the application password reset or change processes and determine if User A is allowed to specify or otherwise force a password change for User B.\n\nIf User A is allowed to change or force a reset of User B's password, this is a finding.","fix":"Use a CAC to authenticate users instead of using passwords. If application users are prohibited or prevented from obtaining a CAC due to DoD policy requirements and passwords are the only viable option, design the application to utilize a secure password change or password reset process.\n\nUtilize out of band (OOB) communication techniques to communicate password change requests to users.\n\nEnsure verification processes exist that allow users to validate the change request prior to implementing the password change.\n\nEnsure users are only allowed to change their own passwords."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-36247r602304_chk","severity":"medium","gid":"V-222548","rid":"SV-222548r879887_rule","stig_id":"APSC-DV-001795","gtitle":"SRG-APP-000516","fix_id":"F-36211r865212_fix","documentable":null,"legacy":["SV-84767","V-70145"],"cci":["CCI-000184"],"nist":["IA-5 h"]}},{"id":"SV-222549","code":"control 'SV-222549' do\n  title 'The application must terminate existing user sessions upon account deletion.'\n  desc %q(The application must ensure that a user does not retain any rights that may have been granted or retain access to the application after the user's authorization or role within the application has been deleted or modified.  This means once a user's role/account within the application has been modified, deleted or disabled, the changes must be enforced immediately within the application.  Any privileges or access the user had prior to the change must not be retained.  For example; any application sessions that the user may have already established prior to the configuration change must be terminated when the user account changes occur.\n\nSimply removing a user from a web application without terminating any existing application user sessions can introduce a scenario where the deleted user still has access to the application even though their account has been deleted from the authentication store. This can be attributed to browser caching and session management on the web server.\n\nTo address this, the web application must provide a means for ensuring this type of \"zombie\" access does not occur. Applications must provide a user management feature or function that will terminate any existing user sessions at the same time or just before the user account is terminated from the authoritative authentication source.)\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nIdentify the user management functions of the application and create a test user account.\n\nAccess the application and perform application functions as the test user.\n\nAccess the user management functions and delete the test account while the test user sessions are still active.\n\nVerify the test user application sessions are terminated by attempting to perform additional application functions.\n\nIf the test user retains access after the test account has been deleted, this is a finding.'\n  desc 'fix', 'Configure the application to terminate existing sessions of users whose accounts are deleted.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24219r493555_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222549'\n  tag rid: 'SV-222549r879773_rule'\n  tag stig_id: 'APSC-DV-001800'\n  tag gtitle: 'SRG-APP-000400'\n  tag fix_id: 'F-24208r493556_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84769', 'V-70147']\n  tag cci: ['CCI-002007']\n  tag nist: ['IA-5 (13)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222549.rb"},"title":"The application must terminate existing user sessions upon account deletion.","desc":"The application must ensure that a user does not retain any rights that may have been granted or retain access to the application after the user's authorization or role within the application has been deleted or modified.  This means once a user's role/account within the application has been modified, deleted or disabled, the changes must be enforced immediately within the application.  Any privileges or access the user had prior to the change must not be retained.  For example; any application sessions that the user may have already established prior to the configuration change must be terminated when the user account changes occur.\n\nSimply removing a user from a web application without terminating any existing application user sessions can introduce a scenario where the deleted user still has access to the application even though their account has been deleted from the authentication store. This can be attributed to browser caching and session management on the web server.\n\nTo address this, the web application must provide a means for ensuring this type of \"zombie\" access does not occur. Applications must provide a user management feature or function that will terminate any existing user sessions at the same time or just before the user account is terminated from the authoritative authentication source.","descriptions":{"default":"The application must ensure that a user does not retain any rights that may have been granted or retain access to the application after the user's authorization or role within the application has been deleted or modified.  This means once a user's role/account within the application has been modified, deleted or disabled, the changes must be enforced immediately within the application.  Any privileges or access the user had prior to the change must not be retained.  For example; any application sessions that the user may have already established prior to the configuration change must be terminated when the user account changes occur.\n\nSimply removing a user from a web application without terminating any existing application user sessions can introduce a scenario where the deleted user still has access to the application even though their account has been deleted from the authentication store. This can be attributed to browser caching and session management on the web server.\n\nTo address this, the web application must provide a means for ensuring this type of \"zombie\" access does not occur. Applications must provide a user management feature or function that will terminate any existing user sessions at the same time or just before the user account is terminated from the authoritative authentication source.","check":"Review the application documentation and interview the application administrator.\n\nIdentify the user management functions of the application and create a test user account.\n\nAccess the application and perform application functions as the test user.\n\nAccess the user management functions and delete the test account while the test user sessions are still active.\n\nVerify the test user application sessions are terminated by attempting to perform additional application functions.\n\nIf the test user retains access after the test account has been deleted, this is a finding.","fix":"Configure the application to terminate existing sessions of users whose accounts are deleted."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24219r493555_chk","severity":"medium","gid":"V-222549","rid":"SV-222549r879773_rule","stig_id":"APSC-DV-001800","gtitle":"SRG-APP-000400","fix_id":"F-24208r493556_fix","documentable":null,"legacy":["SV-84769","V-70147"],"cci":["CCI-002007"],"nist":["IA-5 (13)"]}},{"id":"SV-222550","code":"control 'SV-222550' do\n  title 'The application, when utilizing PKI-based authentication, must validate certificates by constructing a certification path (which includes status information) to an accepted trust anchor.'\n  desc 'Without path validation, an informed trust decision by the relying party cannot be made when presented with any certificate not already explicitly trusted.\n\nA trust anchor is an authoritative entity represented via a public key and associated data. It is used in the context of public key infrastructures, X.509 digital certificates, and DNSSEC.\n\nWhen there is a chain of trust, usually the top entity to be trusted becomes the trust anchor; it can be, for example, a Certification Authority (CA). A certification path starts with the subject certificate and proceeds through a number of intermediate certificates up to a trusted root certificate, typically issued by a trusted CA.\n\nThis requirement verifies that a certification path to an accepted trust anchor is used for certificate validation and that the path includes status information. Path validation is necessary for a relying party to make an informed trust decision when presented with any certificate not already explicitly trusted. Status information for certification paths includes certificate revocation lists or online certificate status protocol responses. Validation of the certificate status information is out of scope for this requirement.'\n  desc 'check', \"Review the application documentation, the application architecture and interview the application administrator to identify the method employed by the application for validating certificates.\n\nReview the method to determine if a certification path that includes status information is constructed when certificate validation occurs.\n\nSome applications may utilize underlying OS certificate validation and certificate path building capabilities while others may build the capability into the application itself.\n\nThe certification path will include the intermediary certificate CAs along with a status of the CA server's signing certificate and will end at the trusted root anchor.\n\nIf the application does not construct a certificate path to an accepted trust anchor, this is a finding.\"\n  desc 'fix', 'Design the application to construct a certification path to an accepted trust anchor when using PKI-based authentication.'\n  impact 0.7\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24220r493558_chk'\n  tag severity: 'high'\n  tag gid: 'V-222550'\n  tag rid: 'SV-222550r879612_rule'\n  tag stig_id: 'APSC-DV-001810'\n  tag gtitle: 'SRG-APP-000175'\n  tag fix_id: 'F-24209r493559_fix'\n  tag 'documentable'\n  tag legacy: ['V-70149', 'SV-84771']\n  tag cci: ['CCI-000185']\n  tag nist: ['IA-5 (2) (b) (1)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222550.rb"},"title":"The application, when utilizing PKI-based authentication, must validate certificates by constructing a certification path (which includes status information) to an accepted trust anchor.","desc":"Without path validation, an informed trust decision by the relying party cannot be made when presented with any certificate not already explicitly trusted.\n\nA trust anchor is an authoritative entity represented via a public key and associated data. It is used in the context of public key infrastructures, X.509 digital certificates, and DNSSEC.\n\nWhen there is a chain of trust, usually the top entity to be trusted becomes the trust anchor; it can be, for example, a Certification Authority (CA). A certification path starts with the subject certificate and proceeds through a number of intermediate certificates up to a trusted root certificate, typically issued by a trusted CA.\n\nThis requirement verifies that a certification path to an accepted trust anchor is used for certificate validation and that the path includes status information. Path validation is necessary for a relying party to make an informed trust decision when presented with any certificate not already explicitly trusted. Status information for certification paths includes certificate revocation lists or online certificate status protocol responses. Validation of the certificate status information is out of scope for this requirement.","descriptions":{"default":"Without path validation, an informed trust decision by the relying party cannot be made when presented with any certificate not already explicitly trusted.\n\nA trust anchor is an authoritative entity represented via a public key and associated data. It is used in the context of public key infrastructures, X.509 digital certificates, and DNSSEC.\n\nWhen there is a chain of trust, usually the top entity to be trusted becomes the trust anchor; it can be, for example, a Certification Authority (CA). A certification path starts with the subject certificate and proceeds through a number of intermediate certificates up to a trusted root certificate, typically issued by a trusted CA.\n\nThis requirement verifies that a certification path to an accepted trust anchor is used for certificate validation and that the path includes status information. Path validation is necessary for a relying party to make an informed trust decision when presented with any certificate not already explicitly trusted. Status information for certification paths includes certificate revocation lists or online certificate status protocol responses. Validation of the certificate status information is out of scope for this requirement.","check":"Review the application documentation, the application architecture and interview the application administrator to identify the method employed by the application for validating certificates.\n\nReview the method to determine if a certification path that includes status information is constructed when certificate validation occurs.\n\nSome applications may utilize underlying OS certificate validation and certificate path building capabilities while others may build the capability into the application itself.\n\nThe certification path will include the intermediary certificate CAs along with a status of the CA server's signing certificate and will end at the trusted root anchor.\n\nIf the application does not construct a certificate path to an accepted trust anchor, this is a finding.","fix":"Design the application to construct a certification path to an accepted trust anchor when using PKI-based authentication."},"impact":0.7,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24220r493558_chk","severity":"high","gid":"V-222550","rid":"SV-222550r879612_rule","stig_id":"APSC-DV-001810","gtitle":"SRG-APP-000175","fix_id":"F-24209r493559_fix","documentable":null,"legacy":["V-70149","SV-84771"],"cci":["CCI-000185"],"nist":["IA-5 (2) (b) (1)"]}},{"id":"SV-222551","code":"control 'SV-222551' do\n  title 'The application, when using PKI-based authentication, must enforce authorized access to the corresponding private key.'\n  desc 'If the private key is discovered, an attacker can use the key to authenticate as an authorized user and gain access to the network infrastructure.\n\nThe cornerstone of the PKI is the private key used to encrypt or digitally sign information.\n\nIf the private key is stolen, this will lead to the compromise of the authentication and non-repudiation gained through PKI because the attacker can use the private key to digitally sign documents and pretend to be the authorized user.\n\nBoth the holders of a digital certificate and the issuing authority must protect the computers, storage devices, or whatever they use to keep the private keys.'\n  desc 'check', \"Review the application documentation and interview the application administrator to identify where the application's private key is stored.\n\nIf the application does not perform code signing or other cryptographic tasks requiring a private key, this requirement is not applicable.\n\nAsk the administrator to demonstrate where the application private key(s) are stored. Examine access restrictions and ensure access controls are in place to restrict access to the private key(s).\n\nIf the key(s) are stored on the file system, ensure adequate file permissions are set so as to only allow authorized users and processes.\n\nIf the key(s) are maintained or available via an application interface, ensure the application provides access controls that limit access via the application interface to only authorized users and processes.\n\nReview access controls and attempt to use a relevant user account, group or application role that is not allowed access to the private key.\n\nVerify access to the keys is denied.\n\nIf unauthorized access is granted to the private key(s), this is a finding.\"\n  desc 'fix', 'Configure the application or relevant access control mechanism to enforce authorized access to the application private key(s).'\n  impact 0.7\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24221r493561_chk'\n  tag severity: 'high'\n  tag gid: 'V-222551'\n  tag rid: 'SV-222551r879613_rule'\n  tag stig_id: 'APSC-DV-001820'\n  tag gtitle: 'SRG-APP-000176'\n  tag fix_id: 'F-24210r493562_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84773', 'V-70151']\n  tag cci: ['CCI-000186']\n  tag nist: ['IA-5 (2) (a) (1)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222551.rb"},"title":"The application, when using PKI-based authentication, must enforce authorized access to the corresponding private key.","desc":"If the private key is discovered, an attacker can use the key to authenticate as an authorized user and gain access to the network infrastructure.\n\nThe cornerstone of the PKI is the private key used to encrypt or digitally sign information.\n\nIf the private key is stolen, this will lead to the compromise of the authentication and non-repudiation gained through PKI because the attacker can use the private key to digitally sign documents and pretend to be the authorized user.\n\nBoth the holders of a digital certificate and the issuing authority must protect the computers, storage devices, or whatever they use to keep the private keys.","descriptions":{"default":"If the private key is discovered, an attacker can use the key to authenticate as an authorized user and gain access to the network infrastructure.\n\nThe cornerstone of the PKI is the private key used to encrypt or digitally sign information.\n\nIf the private key is stolen, this will lead to the compromise of the authentication and non-repudiation gained through PKI because the attacker can use the private key to digitally sign documents and pretend to be the authorized user.\n\nBoth the holders of a digital certificate and the issuing authority must protect the computers, storage devices, or whatever they use to keep the private keys.","check":"Review the application documentation and interview the application administrator to identify where the application's private key is stored.\n\nIf the application does not perform code signing or other cryptographic tasks requiring a private key, this requirement is not applicable.\n\nAsk the administrator to demonstrate where the application private key(s) are stored. Examine access restrictions and ensure access controls are in place to restrict access to the private key(s).\n\nIf the key(s) are stored on the file system, ensure adequate file permissions are set so as to only allow authorized users and processes.\n\nIf the key(s) are maintained or available via an application interface, ensure the application provides access controls that limit access via the application interface to only authorized users and processes.\n\nReview access controls and attempt to use a relevant user account, group or application role that is not allowed access to the private key.\n\nVerify access to the keys is denied.\n\nIf unauthorized access is granted to the private key(s), this is a finding.","fix":"Configure the application or relevant access control mechanism to enforce authorized access to the application private key(s)."},"impact":0.7,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24221r493561_chk","severity":"high","gid":"V-222551","rid":"SV-222551r879613_rule","stig_id":"APSC-DV-001820","gtitle":"SRG-APP-000176","fix_id":"F-24210r493562_fix","documentable":null,"legacy":["SV-84773","V-70151"],"cci":["CCI-000186"],"nist":["IA-5 (2) (a) (1)"]}},{"id":"SV-222552","code":"control 'SV-222552' do\n  title 'The application must map the authenticated identity to the individual user or group account for PKI-based authentication.'\n  desc 'Without mapping the certificate used to authenticate to a corresponding user account, the ability to determine the identity of the individual user or group will not be available for forensic analysis.\n\nSome CAs will include identifying information like an email address within the certificate itself. When the email is assigned to an individual, this helps to identify the individual user who has been assigned the certificate. When identifying information is not available within the certificate itself, the application must provide a mapping that allows administrators to quickly determine who the owner of the certificate is. When responding to a security incident, particularly involving user access violations, time is of the essence so this information must be readily available to investigators.'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify how the application maps individual user certificates or group accounts to individual users.\n\nAccess the application as a regular user while reviewing the application logs to determine if the application records the individual name of the user or if the application only includes certificate information.\n\nIf the application only logs certificate information which contains no discernable user data, ask the system admin what their process is for mapping the certificate information to the user.\n\nIf the application does not map the certificate data to an individual user or group, or if the administrator has no automated process established for determining the identity of the user, this is a finding.'\n  desc 'fix', 'Configure the application to map certificate information to individual users or group accounts or create a process for automatically determining the individual user or group based on certificate information provided in the logs.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24222r493564_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222552'\n  tag rid: 'SV-222552r879614_rule'\n  tag stig_id: 'APSC-DV-001830'\n  tag gtitle: 'SRG-APP-000177'\n  tag fix_id: 'F-24211r493565_fix'\n  tag 'documentable'\n  tag legacy: ['V-70153', 'SV-84775']\n  tag cci: ['CCI-000187']\n  tag nist: ['IA-5 (2) (a) (2)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222552.rb"},"title":"The application must map the authenticated identity to the individual user or group account for PKI-based authentication.","desc":"Without mapping the certificate used to authenticate to a corresponding user account, the ability to determine the identity of the individual user or group will not be available for forensic analysis.\n\nSome CAs will include identifying information like an email address within the certificate itself. When the email is assigned to an individual, this helps to identify the individual user who has been assigned the certificate. When identifying information is not available within the certificate itself, the application must provide a mapping that allows administrators to quickly determine who the owner of the certificate is. When responding to a security incident, particularly involving user access violations, time is of the essence so this information must be readily available to investigators.","descriptions":{"default":"Without mapping the certificate used to authenticate to a corresponding user account, the ability to determine the identity of the individual user or group will not be available for forensic analysis.\n\nSome CAs will include identifying information like an email address within the certificate itself. When the email is assigned to an individual, this helps to identify the individual user who has been assigned the certificate. When identifying information is not available within the certificate itself, the application must provide a mapping that allows administrators to quickly determine who the owner of the certificate is. When responding to a security incident, particularly involving user access violations, time is of the essence so this information must be readily available to investigators.","check":"Review the application documentation and interview the application administrator to identify how the application maps individual user certificates or group accounts to individual users.\n\nAccess the application as a regular user while reviewing the application logs to determine if the application records the individual name of the user or if the application only includes certificate information.\n\nIf the application only logs certificate information which contains no discernable user data, ask the system admin what their process is for mapping the certificate information to the user.\n\nIf the application does not map the certificate data to an individual user or group, or if the administrator has no automated process established for determining the identity of the user, this is a finding.","fix":"Configure the application to map certificate information to individual users or group accounts or create a process for automatically determining the individual user or group based on certificate information provided in the logs."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24222r493564_chk","severity":"medium","gid":"V-222552","rid":"SV-222552r879614_rule","stig_id":"APSC-DV-001830","gtitle":"SRG-APP-000177","fix_id":"F-24211r493565_fix","documentable":null,"legacy":["V-70153","SV-84775"],"cci":["CCI-000187"],"nist":["IA-5 (2) (a) (2)"]}},{"id":"SV-222553","code":"control 'SV-222553' do\n  title 'The application, for PKI-based authentication, must implement a local cache of revocation data to support path discovery and validation in case of the inability to access revocation information via the network.'\n  desc 'A local cache of revocation data is also known as a CRL list. This list contains a list of revoked certificates and can be periodically downloaded to ensure certificates can still be checked for revocation when network access is not available or access to the Online Certificate Status Protocol OCSP server is not available.\n\nWithout configuring a local cache of revocation data, there is the potential to allow access to users who are no longer authorized (users with revoked certificates).'\n  desc 'check', 'Review the application documentation and interview the system administrator to identify how the application checks certificate revocation.\n\nIf the application resides on the SIPRNET and does not have access to the root CAs this requirement is not applicable.\n\nDifferent application frameworks may handle this requirement for the developer or the developer may have chosen to implement their own implementation for managing and implementing the CRL.\n\nHave the administrator demonstrate the process used for obtaining and importing the CRL. CAs may publish the CRL in an LDAP directory or it may be posted to an HTTP server.\n\nVerify the application is configured to import the CRL on a regular basis.\n\nHave the administrator demonstrate the configuration setting that enables CRL checking in the event the OCSP server is not available.\n\nIf the application is not configured to implement a CRL, this is a finding.'\n  desc 'fix', 'Implement a Certificate Revocation List (CRL) import process and configure the application to check the CRL if OCSP is not available.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24223r493567_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222553'\n  tag rid: 'SV-222553r879774_rule'\n  tag stig_id: 'APSC-DV-001840'\n  tag gtitle: 'SRG-APP-000401'\n  tag fix_id: 'F-24212r493568_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84777', 'V-70155']\n  tag cci: ['CCI-001991']\n  tag nist: ['IA-5 (2) (d)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222553.rb"},"title":"The application, for PKI-based authentication, must implement a local cache of revocation data to support path discovery and validation in case of the inability to access revocation information via the network.","desc":"A local cache of revocation data is also known as a CRL list. This list contains a list of revoked certificates and can be periodically downloaded to ensure certificates can still be checked for revocation when network access is not available or access to the Online Certificate Status Protocol OCSP server is not available.\n\nWithout configuring a local cache of revocation data, there is the potential to allow access to users who are no longer authorized (users with revoked certificates).","descriptions":{"default":"A local cache of revocation data is also known as a CRL list. This list contains a list of revoked certificates and can be periodically downloaded to ensure certificates can still be checked for revocation when network access is not available or access to the Online Certificate Status Protocol OCSP server is not available.\n\nWithout configuring a local cache of revocation data, there is the potential to allow access to users who are no longer authorized (users with revoked certificates).","check":"Review the application documentation and interview the system administrator to identify how the application checks certificate revocation.\n\nIf the application resides on the SIPRNET and does not have access to the root CAs this requirement is not applicable.\n\nDifferent application frameworks may handle this requirement for the developer or the developer may have chosen to implement their own implementation for managing and implementing the CRL.\n\nHave the administrator demonstrate the process used for obtaining and importing the CRL. CAs may publish the CRL in an LDAP directory or it may be posted to an HTTP server.\n\nVerify the application is configured to import the CRL on a regular basis.\n\nHave the administrator demonstrate the configuration setting that enables CRL checking in the event the OCSP server is not available.\n\nIf the application is not configured to implement a CRL, this is a finding.","fix":"Implement a Certificate Revocation List (CRL) import process and configure the application to check the CRL if OCSP is not available."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24223r493567_chk","severity":"medium","gid":"V-222553","rid":"SV-222553r879774_rule","stig_id":"APSC-DV-001840","gtitle":"SRG-APP-000401","fix_id":"F-24212r493568_fix","documentable":null,"legacy":["SV-84777","V-70155"],"cci":["CCI-001991"],"nist":["IA-5 (2) (d)"]}},{"id":"SV-222554","code":"control 'SV-222554' do\n  title 'The application must not display passwords/PINs as clear text.'\n  desc 'To prevent the compromise of authentication information such as passwords during the authentication process, the feedback from the information system must not provide any information that would allow an unauthorized user to compromise the authentication mechanism.\n\nObfuscation of user-provided information when typed into the system is a method used in addressing this risk.\n\nFor example, displaying asterisks when a user types in a password is an example of obscuring feedback of authentication information.\n\nAnother method is to display authentication feedback for a very limited time, usually in fractions of a second. This occurs during password character entry where the password characters are displayed for a very small window of time and then automatically obfuscated. This allows users with just enough time to confirm their password as they type it while limiting the ability of \"shoulder surfers\" to covertly witness the values.\n\nA common tactic employed to circumvent password obfuscation is to copy the obfuscated password and paste it to a text file.  Proper obfuscation techniques will not paste the clear text password.'\n  desc 'check', 'Ask the application admin to log on to the application.\n\nObserve the authentication process and verify any display feedback provided when the admin enters her/his password is obfuscated and not clear text.\n\nFor applications that display authentication feedback for a very limited time, ensure the feedback time the character is displayed is only momentary i.e., fractions of a second.\n\nUsing a text editor, copy the obfuscated password and paste to a text file.  Do not save the file.\n\nIf the application displays clear text when the password/PIN is entered, or if the time period for displayed feedback exceeds fractions of a second, or if the clear text password/PIN is displayed when pasted, this is a finding.'\n  desc 'fix', 'Configure the application to obfuscate passwords and PINs when they are being entered so they cannot be read.\n\nDesign the application so obfuscated passwords cannot be copied and then pasted as clear text.'\n  impact 0.7\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24224r493570_chk'\n  tag severity: 'high'\n  tag gid: 'V-222554'\n  tag rid: 'SV-222554r879615_rule'\n  tag stig_id: 'APSC-DV-001850'\n  tag gtitle: 'SRG-APP-000178'\n  tag fix_id: 'F-24213r493571_fix'\n  tag 'documentable'\n  tag legacy: ['V-70157', 'SV-84779']\n  tag cci: ['CCI-000206']\n  tag nist: ['IA-6']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222554.rb"},"title":"The application must not display passwords/PINs as clear text.","desc":"To prevent the compromise of authentication information such as passwords during the authentication process, the feedback from the information system must not provide any information that would allow an unauthorized user to compromise the authentication mechanism.\n\nObfuscation of user-provided information when typed into the system is a method used in addressing this risk.\n\nFor example, displaying asterisks when a user types in a password is an example of obscuring feedback of authentication information.\n\nAnother method is to display authentication feedback for a very limited time, usually in fractions of a second. This occurs during password character entry where the password characters are displayed for a very small window of time and then automatically obfuscated. This allows users with just enough time to confirm their password as they type it while limiting the ability of \"shoulder surfers\" to covertly witness the values.\n\nA common tactic employed to circumvent password obfuscation is to copy the obfuscated password and paste it to a text file.  Proper obfuscation techniques will not paste the clear text password.","descriptions":{"default":"To prevent the compromise of authentication information such as passwords during the authentication process, the feedback from the information system must not provide any information that would allow an unauthorized user to compromise the authentication mechanism.\n\nObfuscation of user-provided information when typed into the system is a method used in addressing this risk.\n\nFor example, displaying asterisks when a user types in a password is an example of obscuring feedback of authentication information.\n\nAnother method is to display authentication feedback for a very limited time, usually in fractions of a second. This occurs during password character entry where the password characters are displayed for a very small window of time and then automatically obfuscated. This allows users with just enough time to confirm their password as they type it while limiting the ability of \"shoulder surfers\" to covertly witness the values.\n\nA common tactic employed to circumvent password obfuscation is to copy the obfuscated password and paste it to a text file.  Proper obfuscation techniques will not paste the clear text password.","check":"Ask the application admin to log on to the application.\n\nObserve the authentication process and verify any display feedback provided when the admin enters her/his password is obfuscated and not clear text.\n\nFor applications that display authentication feedback for a very limited time, ensure the feedback time the character is displayed is only momentary i.e., fractions of a second.\n\nUsing a text editor, copy the obfuscated password and paste to a text file.  Do not save the file.\n\nIf the application displays clear text when the password/PIN is entered, or if the time period for displayed feedback exceeds fractions of a second, or if the clear text password/PIN is displayed when pasted, this is a finding.","fix":"Configure the application to obfuscate passwords and PINs when they are being entered so they cannot be read.\n\nDesign the application so obfuscated passwords cannot be copied and then pasted as clear text."},"impact":0.7,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24224r493570_chk","severity":"high","gid":"V-222554","rid":"SV-222554r879615_rule","stig_id":"APSC-DV-001850","gtitle":"SRG-APP-000178","fix_id":"F-24213r493571_fix","documentable":null,"legacy":["V-70157","SV-84779"],"cci":["CCI-000206"],"nist":["IA-6"]}},{"id":"SV-222555","code":"control 'SV-222555' do\n  title 'The application must use mechanisms meeting the requirements of applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance for authentication to a cryptographic module.'\n  desc 'A cryptographic module is a hardware or software device or component that performs cryptographic operations securely within a physical or logical boundary, using a hardware, software or hybrid cryptographic engine contained within the boundary, and cryptographic keys that do not leave the boundary.\nBased on the criticality of the application, system designers might choose to utilize a hardware based cryptographic module due to the protections and security benefits a hardware based solution provides over a software based solution. Due to various factors, including expense, hardware based encryption modules are usually relegated to only those applications where the system requirements specify it as a required protection. Examples include applications that handle extremely sensitive data or those used in life and death situations, e.g., weapons systems. \n\nGeneral purpose applications such as a web site will often opt to leverage an underlying software based encryption capability that is offered by the OS, database or application development framework.  Operating systems or database products often provide their own cryptographic modules that are FIPS 140-2 compliant and can meet the authentication to the crypto module requirement via their Role Based Access Controls (users and groups) built into the product.  \nIn all cases, user’s accessing the cryptographic module must be authenticated and granted the appropriate rights in order to access the encryption module.  Any encryption utilized by the access control mechanisms must be FIPS 140-2 compliant.'\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nIdentify if the application provides access to cryptographic modules and if access is required in order to manage cryptographic modules contained within the application.\n\nIf the application does not provide authenticated access to a cryptographic module, the requirement is not applicable.\n\nReview and identify the cryptographic module. Refer to the NIST website listing all FIPS-approved cryptographic modules.\n\nhttp://csrc.nist.gov/groups/STM/cmvp/documents/140-1/140val-all.htm\n\nIf the cryptographic module that requires authentication is not on the FIPS-approved module list, this is a finding.'\n  desc 'fix', 'Use FIPS-approved cryptographic modules.'\n  impact 0.7\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24225r493573_chk'\n  tag severity: 'high'\n  tag gid: 'V-222555'\n  tag rid: 'SV-222555r879616_rule'\n  tag stig_id: 'APSC-DV-001860'\n  tag gtitle: 'SRG-APP-000179'\n  tag fix_id: 'F-24214r493574_fix'\n  tag 'documentable'\n  tag legacy: ['V-70159', 'SV-84781']\n  tag cci: ['CCI-000803']\n  tag nist: ['IA-7']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222555.rb"},"title":"The application must use mechanisms meeting the requirements of applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance for authentication to a cryptographic module.","desc":"A cryptographic module is a hardware or software device or component that performs cryptographic operations securely within a physical or logical boundary, using a hardware, software or hybrid cryptographic engine contained within the boundary, and cryptographic keys that do not leave the boundary.\nBased on the criticality of the application, system designers might choose to utilize a hardware based cryptographic module due to the protections and security benefits a hardware based solution provides over a software based solution. Due to various factors, including expense, hardware based encryption modules are usually relegated to only those applications where the system requirements specify it as a required protection. Examples include applications that handle extremely sensitive data or those used in life and death situations, e.g., weapons systems. \n\nGeneral purpose applications such as a web site will often opt to leverage an underlying software based encryption capability that is offered by the OS, database or application development framework.  Operating systems or database products often provide their own cryptographic modules that are FIPS 140-2 compliant and can meet the authentication to the crypto module requirement via their Role Based Access Controls (users and groups) built into the product.  \nIn all cases, user’s accessing the cryptographic module must be authenticated and granted the appropriate rights in order to access the encryption module.  Any encryption utilized by the access control mechanisms must be FIPS 140-2 compliant.","descriptions":{"default":"A cryptographic module is a hardware or software device or component that performs cryptographic operations securely within a physical or logical boundary, using a hardware, software or hybrid cryptographic engine contained within the boundary, and cryptographic keys that do not leave the boundary.\nBased on the criticality of the application, system designers might choose to utilize a hardware based cryptographic module due to the protections and security benefits a hardware based solution provides over a software based solution. Due to various factors, including expense, hardware based encryption modules are usually relegated to only those applications where the system requirements specify it as a required protection. Examples include applications that handle extremely sensitive data or those used in life and death situations, e.g., weapons systems. \n\nGeneral purpose applications such as a web site will often opt to leverage an underlying software based encryption capability that is offered by the OS, database or application development framework.  Operating systems or database products often provide their own cryptographic modules that are FIPS 140-2 compliant and can meet the authentication to the crypto module requirement via their Role Based Access Controls (users and groups) built into the product.  \nIn all cases, user’s accessing the cryptographic module must be authenticated and granted the appropriate rights in order to access the encryption module.  Any encryption utilized by the access control mechanisms must be FIPS 140-2 compliant.","check":"Review the application documentation and interview the application administrator.\n\nIdentify if the application provides access to cryptographic modules and if access is required in order to manage cryptographic modules contained within the application.\n\nIf the application does not provide authenticated access to a cryptographic module, the requirement is not applicable.\n\nReview and identify the cryptographic module. Refer to the NIST website listing all FIPS-approved cryptographic modules.\n\nhttp://csrc.nist.gov/groups/STM/cmvp/documents/140-1/140val-all.htm\n\nIf the cryptographic module that requires authentication is not on the FIPS-approved module list, this is a finding.","fix":"Use FIPS-approved cryptographic modules."},"impact":0.7,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24225r493573_chk","severity":"high","gid":"V-222555","rid":"SV-222555r879616_rule","stig_id":"APSC-DV-001860","gtitle":"SRG-APP-000179","fix_id":"F-24214r493574_fix","documentable":null,"legacy":["V-70159","SV-84781"],"cci":["CCI-000803"],"nist":["IA-7"]}},{"id":"SV-222556","code":"control 'SV-222556' do\n  title 'The application must uniquely identify and authenticate non-organizational users (or processes acting on behalf of non-organizational users).'\n  desc 'Lack of authentication and identification enables non-organizational users to gain access to the application or possibly other information systems and provides an opportunity for intruders to compromise resources within the application or information system.\n\nNon-organizational users include all information system users other than organizational users which include organizational employees or individuals the organization deems to have equivalent status of employees (e.g., contractors and guest researchers).\n\nNon-organizational users must be uniquely identified and authenticated for all accesses other than those accesses explicitly identified and documented by the organization when related to the use of anonymous access, such as accessing a web server.'\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nIf the application does not host non-organizational users, this requirement is not applicable.\n\nReview the application and verify authentication is enabled and required in order for users to access the application.\n\nReview the application user base and determine if all user accounts are documented and assigned to a unique individual.\n\nReview risk acceptance documentation to determine if there are specific accesses identified that do not require authentication.\n\nIf the application does not identify and authenticate non-organizational users and there is no risk acceptance documentation approving the exception, this is a finding.'\n  desc 'fix', 'Configure the application to identify and authenticate all non-organizational users.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24226r493576_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222556'\n  tag rid: 'SV-222556r879617_rule'\n  tag stig_id: 'APSC-DV-001870'\n  tag gtitle: 'SRG-APP-000180'\n  tag fix_id: 'F-24215r493577_fix'\n  tag 'documentable'\n  tag legacy: ['V-70161', 'SV-84783']\n  tag cci: ['CCI-000804']\n  tag nist: ['IA-8']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222556.rb"},"title":"The application must uniquely identify and authenticate non-organizational users (or processes acting on behalf of non-organizational users).","desc":"Lack of authentication and identification enables non-organizational users to gain access to the application or possibly other information systems and provides an opportunity for intruders to compromise resources within the application or information system.\n\nNon-organizational users include all information system users other than organizational users which include organizational employees or individuals the organization deems to have equivalent status of employees (e.g., contractors and guest researchers).\n\nNon-organizational users must be uniquely identified and authenticated for all accesses other than those accesses explicitly identified and documented by the organization when related to the use of anonymous access, such as accessing a web server.","descriptions":{"default":"Lack of authentication and identification enables non-organizational users to gain access to the application or possibly other information systems and provides an opportunity for intruders to compromise resources within the application or information system.\n\nNon-organizational users include all information system users other than organizational users which include organizational employees or individuals the organization deems to have equivalent status of employees (e.g., contractors and guest researchers).\n\nNon-organizational users must be uniquely identified and authenticated for all accesses other than those accesses explicitly identified and documented by the organization when related to the use of anonymous access, such as accessing a web server.","check":"Review the application documentation and interview the application administrator.\n\nIf the application does not host non-organizational users, this requirement is not applicable.\n\nReview the application and verify authentication is enabled and required in order for users to access the application.\n\nReview the application user base and determine if all user accounts are documented and assigned to a unique individual.\n\nReview risk acceptance documentation to determine if there are specific accesses identified that do not require authentication.\n\nIf the application does not identify and authenticate non-organizational users and there is no risk acceptance documentation approving the exception, this is a finding.","fix":"Configure the application to identify and authenticate all non-organizational users."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24226r493576_chk","severity":"medium","gid":"V-222556","rid":"SV-222556r879617_rule","stig_id":"APSC-DV-001870","gtitle":"SRG-APP-000180","fix_id":"F-24215r493577_fix","documentable":null,"legacy":["V-70161","SV-84783"],"cci":["CCI-000804"],"nist":["IA-8"]}},{"id":"SV-222557","code":"control 'SV-222557' do\n  title 'The application must accept Personal Identity Verification (PIV) credentials from other federal agencies.'\n  desc 'Access may be denied to authorized users if federal agency PIV credentials are not accepted.\n\nPersonal Identity Verification (PIV) credentials are those credentials issued by federal agencies that conform to FIPS Publication 201 and supporting guidance documents. OMB Memorandum 11-11 requires federal agencies to continue implementing the requirements specified in HSPD-12 to enable agency-wide use of PIV credentials.'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify application access methods.\n\nIf the application is not PK-enabled due to the hosted data being publicly releasable, this check is not applicable.\n\nIf the application is only deployed to SIPRNet, this requirement is not applicable.\n\nIf the application is not intended to be available to Federal government (non-DoD) partners this requirement is not applicable.\n\nAsk the application administrator to demonstrate how the application is configured to allow the use of PIV credentials from other agencies.\n\nIf the application is required to provide authenticated access to Federal agencies and it does not accept a PIV, this is a finding.'\n  desc 'fix', 'Configure the application to accept PIV credentials when utilizing authentication provided by Federal (Non-DoD) agencies.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24227r493579_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222557'\n  tag rid: 'SV-222557r879775_rule'\n  tag stig_id: 'APSC-DV-001880'\n  tag gtitle: 'SRG-APP-000402'\n  tag fix_id: 'F-24216r493580_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84785', 'V-70163']\n  tag cci: ['CCI-002009']\n  tag nist: ['IA-8 (1)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222557.rb"},"title":"The application must accept Personal Identity Verification (PIV) credentials from other federal agencies.","desc":"Access may be denied to authorized users if federal agency PIV credentials are not accepted.\n\nPersonal Identity Verification (PIV) credentials are those credentials issued by federal agencies that conform to FIPS Publication 201 and supporting guidance documents. OMB Memorandum 11-11 requires federal agencies to continue implementing the requirements specified in HSPD-12 to enable agency-wide use of PIV credentials.","descriptions":{"default":"Access may be denied to authorized users if federal agency PIV credentials are not accepted.\n\nPersonal Identity Verification (PIV) credentials are those credentials issued by federal agencies that conform to FIPS Publication 201 and supporting guidance documents. OMB Memorandum 11-11 requires federal agencies to continue implementing the requirements specified in HSPD-12 to enable agency-wide use of PIV credentials.","check":"Review the application documentation and interview the application administrator to identify application access methods.\n\nIf the application is not PK-enabled due to the hosted data being publicly releasable, this check is not applicable.\n\nIf the application is only deployed to SIPRNet, this requirement is not applicable.\n\nIf the application is not intended to be available to Federal government (non-DoD) partners this requirement is not applicable.\n\nAsk the application administrator to demonstrate how the application is configured to allow the use of PIV credentials from other agencies.\n\nIf the application is required to provide authenticated access to Federal agencies and it does not accept a PIV, this is a finding.","fix":"Configure the application to accept PIV credentials when utilizing authentication provided by Federal (Non-DoD) agencies."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24227r493579_chk","severity":"medium","gid":"V-222557","rid":"SV-222557r879775_rule","stig_id":"APSC-DV-001880","gtitle":"SRG-APP-000402","fix_id":"F-24216r493580_fix","documentable":null,"legacy":["SV-84785","V-70163"],"cci":["CCI-002009"],"nist":["IA-8 (1)"]}},{"id":"SV-222558","code":"control 'SV-222558' do\n  title 'The application must electronically verify Personal Identity Verification (PIV) credentials from other federal agencies.'\n  desc 'Inappropriate access may be granted to unauthorized users if federal agency PIV credentials are not electronically verified.\n\nPersonal Identity Verification (PIV) credentials are those credentials issued by federal agencies that conform to FIPS Publication 201 and supporting guidance documents. OMB Memorandum 11-11 requires federal agencies to continue implementing the requirements specified in HSPD-12 to enable agency-wide use of PIV credentials.'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify application access methods.\n\nIf the application is not PK-enabled due to the hosted data being publicly releasable, this check is not applicable.\n\nIf the application is only deployed to SIPRNet, this requirement is not applicable.\n\nIf the application is not intended to be available to Federal government (non-DoD) partners this requirement is not applicable.\n\nAsk the application administrator to demonstrate how the application is configured to verify the PIV credentials from other agencies when they are presented as an authentication token.\n\nIf the application is required to provide authenticated access to Federal agencies and it does not verify the PIV, this is a finding.'\n  desc 'fix', 'Configure the application to verify the PIV credentials presented when utilizing authentication provided by Federal (Non-DoD) agencies.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24228r493582_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222558'\n  tag rid: 'SV-222558r879776_rule'\n  tag stig_id: 'APSC-DV-001890'\n  tag gtitle: 'SRG-APP-000403'\n  tag fix_id: 'F-24217r493583_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84787', 'V-70165']\n  tag cci: ['CCI-002010']\n  tag nist: ['IA-8 (1)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222558.rb"},"title":"The application must electronically verify Personal Identity Verification (PIV) credentials from other federal agencies.","desc":"Inappropriate access may be granted to unauthorized users if federal agency PIV credentials are not electronically verified.\n\nPersonal Identity Verification (PIV) credentials are those credentials issued by federal agencies that conform to FIPS Publication 201 and supporting guidance documents. OMB Memorandum 11-11 requires federal agencies to continue implementing the requirements specified in HSPD-12 to enable agency-wide use of PIV credentials.","descriptions":{"default":"Inappropriate access may be granted to unauthorized users if federal agency PIV credentials are not electronically verified.\n\nPersonal Identity Verification (PIV) credentials are those credentials issued by federal agencies that conform to FIPS Publication 201 and supporting guidance documents. OMB Memorandum 11-11 requires federal agencies to continue implementing the requirements specified in HSPD-12 to enable agency-wide use of PIV credentials.","check":"Review the application documentation and interview the application administrator to identify application access methods.\n\nIf the application is not PK-enabled due to the hosted data being publicly releasable, this check is not applicable.\n\nIf the application is only deployed to SIPRNet, this requirement is not applicable.\n\nIf the application is not intended to be available to Federal government (non-DoD) partners this requirement is not applicable.\n\nAsk the application administrator to demonstrate how the application is configured to verify the PIV credentials from other agencies when they are presented as an authentication token.\n\nIf the application is required to provide authenticated access to Federal agencies and it does not verify the PIV, this is a finding.","fix":"Configure the application to verify the PIV credentials presented when utilizing authentication provided by Federal (Non-DoD) agencies."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24228r493582_chk","severity":"medium","gid":"V-222558","rid":"SV-222558r879776_rule","stig_id":"APSC-DV-001890","gtitle":"SRG-APP-000403","fix_id":"F-24217r493583_fix","documentable":null,"legacy":["SV-84787","V-70165"],"cci":["CCI-002010"],"nist":["IA-8 (1)"]}},{"id":"SV-222559","code":"control 'SV-222559' do\n  title 'The application must accept FICAM-approved third-party credentials.'\n  desc \"FICAM establishes a federated identity framework for the Federal Government. FICAM provides Government-wide services for common Identity, Credential and Access Management (ICAM) requirements.  The FICAM Trust Framework Solutions (TFS) is the federated identity framework for the U.S. federal government.\n The TFS is a process by which Industry Trust Frameworks (The codification of requirements for credentials and their issuance, privacy and security requirements, as well as auditing qualifications and processes) are evaluated and assessed for potential use by the Government.  \n\nA Trust Framework that is comparable to federal standards is adopted through this process, which allows Federal Government Relying Parties (Federal Government web sites or RP's) to trust Credential Service Providers a.k.a. Identity Providers that have been assessed under that particular trust framework.  This allows federal government relying parties to trust such credentials at their approved assurance levels. \n\nThis requirement only applies to applications that are intended to be accessible to non-federal government agencies and other partners through FICAM. \n\nThird-party credentials are those credentials issued by non-federal government entities approved by the Federal Identity, Credential, and Access Management (FICAM) Trust Framework Solutions initiative.\"\n  desc 'check', 'Review the application documentation and interview the application administrator to identify application access methods.\n\nIf the application is not PK-enabled due to the hosted data being publicly releasable, this check is not applicable.\n\nIf the application is only deployed to SIPRNet, this requirement is not applicable.\n\nIf the application is not intended to be available to Federal government partners this requirement is not applicable.\n\nAsk the application administrator to demonstrate how the application is configured to allow the use of third-party credentials, verify the third-party credentials are FICAM approved.\n\nIf the application does not accept FICAM approved credentials when accepting third-party credentials, this is a finding.'\n  desc 'fix', 'Configure applications  intended to be accessible to non-federal government agencies to use FICAM-approved third-party credentials.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24229r493585_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222559'\n  tag rid: 'SV-222559r879777_rule'\n  tag stig_id: 'APSC-DV-001900'\n  tag gtitle: 'SRG-APP-000404'\n  tag fix_id: 'F-24218r493586_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84789', 'V-70167']\n  tag cci: ['CCI-002011']\n  tag nist: ['IA-8 (2)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222559.rb"},"title":"The application must accept FICAM-approved third-party credentials.","desc":"FICAM establishes a federated identity framework for the Federal Government. FICAM provides Government-wide services for common Identity, Credential and Access Management (ICAM) requirements.  The FICAM Trust Framework Solutions (TFS) is the federated identity framework for the U.S. federal government.\n The TFS is a process by which Industry Trust Frameworks (The codification of requirements for credentials and their issuance, privacy and security requirements, as well as auditing qualifications and processes) are evaluated and assessed for potential use by the Government.  \n\nA Trust Framework that is comparable to federal standards is adopted through this process, which allows Federal Government Relying Parties (Federal Government web sites or RP's) to trust Credential Service Providers a.k.a. Identity Providers that have been assessed under that particular trust framework.  This allows federal government relying parties to trust such credentials at their approved assurance levels. \n\nThis requirement only applies to applications that are intended to be accessible to non-federal government agencies and other partners through FICAM. \n\nThird-party credentials are those credentials issued by non-federal government entities approved by the Federal Identity, Credential, and Access Management (FICAM) Trust Framework Solutions initiative.","descriptions":{"default":"FICAM establishes a federated identity framework for the Federal Government. FICAM provides Government-wide services for common Identity, Credential and Access Management (ICAM) requirements.  The FICAM Trust Framework Solutions (TFS) is the federated identity framework for the U.S. federal government.\n The TFS is a process by which Industry Trust Frameworks (The codification of requirements for credentials and their issuance, privacy and security requirements, as well as auditing qualifications and processes) are evaluated and assessed for potential use by the Government.  \n\nA Trust Framework that is comparable to federal standards is adopted through this process, which allows Federal Government Relying Parties (Federal Government web sites or RP's) to trust Credential Service Providers a.k.a. Identity Providers that have been assessed under that particular trust framework.  This allows federal government relying parties to trust such credentials at their approved assurance levels. \n\nThis requirement only applies to applications that are intended to be accessible to non-federal government agencies and other partners through FICAM. \n\nThird-party credentials are those credentials issued by non-federal government entities approved by the Federal Identity, Credential, and Access Management (FICAM) Trust Framework Solutions initiative.","check":"Review the application documentation and interview the application administrator to identify application access methods.\n\nIf the application is not PK-enabled due to the hosted data being publicly releasable, this check is not applicable.\n\nIf the application is only deployed to SIPRNet, this requirement is not applicable.\n\nIf the application is not intended to be available to Federal government partners this requirement is not applicable.\n\nAsk the application administrator to demonstrate how the application is configured to allow the use of third-party credentials, verify the third-party credentials are FICAM approved.\n\nIf the application does not accept FICAM approved credentials when accepting third-party credentials, this is a finding.","fix":"Configure applications  intended to be accessible to non-federal government agencies to use FICAM-approved third-party credentials."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24229r493585_chk","severity":"medium","gid":"V-222559","rid":"SV-222559r879777_rule","stig_id":"APSC-DV-001900","gtitle":"SRG-APP-000404","fix_id":"F-24218r493586_fix","documentable":null,"legacy":["SV-84789","V-70167"],"cci":["CCI-002011"],"nist":["IA-8 (2)"]}},{"id":"SV-222560","code":"control 'SV-222560' do\n  title 'The application must conform to FICAM-issued profiles.'\n  desc 'FICAM establishes a federated identity framework for the Federal Government. FICAM provides Government-wide services for common Identity, Credential, and Access Management (ICAM) requirements.  The FICAM Trust Framework Solutions (TFS) is the federated identity framework for the U.S. federal government.\n The TFS is a process by which Industry Trust Frameworks (The codification of requirements for credentials and their issuance, privacy and security requirements, as well as auditing qualifications and processes) are evaluated and assessed for potential use by the Government.  \n\nThis requirement only applies to applications that are intended to be accessible to non-federal government agencies and other partners or non-organizational (non-DoD) users.\n\nWithout conforming to FICAM-issued profiles, the information system may not be interoperable with FICAM-authentication protocols, such as SAML 2.0, OpenID 2.0 or other protocols such as the FICAM backend Attribute Exchange.\n\nThis requirement addresses open identity management standards.  More information regarding these standards is available by pointing your web browser to: info.idmanagement.gov/2012/10/what-are-ficam-technical-profiles-and.html'\n  desc 'check', \"Review the application documentation and interview the application administrator to identify application access methods.\n\nIf the application is not PK-enabled due to the hosted data being publicly releasable, this check is not applicable.\n\nIf the application is only deployed to SIPRNet, this requirement is not applicable.\n\nIf the application is not intended to be available to Federal government partners this requirement is not applicable.\n\nThis requirement applies to DoD service providers who are relying parties of external (Federal Government) identity providers.\n \nAsk the application administrator to demonstrate how the application conforms to FICAM issued profiles such as SAML or OPENID.  \n\nIf the application is designed to be a service provider utilizing an external identify provider and doesn't conform to FICAM-issued profiles, this is a finding.\"\n  desc 'fix', 'Configure the application to conform to FICAM-issued technical profiles when providing services that rely on external (Federal Government) identity providers.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24230r493588_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222560'\n  tag rid: 'SV-222560r879778_rule'\n  tag stig_id: 'APSC-DV-001910'\n  tag gtitle: 'SRG-APP-000405'\n  tag fix_id: 'F-24219r493589_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84791', 'V-70169']\n  tag cci: ['CCI-002014']\n  tag nist: ['IA-8 (4)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222560.rb"},"title":"The application must conform to FICAM-issued profiles.","desc":"FICAM establishes a federated identity framework for the Federal Government. FICAM provides Government-wide services for common Identity, Credential, and Access Management (ICAM) requirements.  The FICAM Trust Framework Solutions (TFS) is the federated identity framework for the U.S. federal government.\n The TFS is a process by which Industry Trust Frameworks (The codification of requirements for credentials and their issuance, privacy and security requirements, as well as auditing qualifications and processes) are evaluated and assessed for potential use by the Government.  \n\nThis requirement only applies to applications that are intended to be accessible to non-federal government agencies and other partners or non-organizational (non-DoD) users.\n\nWithout conforming to FICAM-issued profiles, the information system may not be interoperable with FICAM-authentication protocols, such as SAML 2.0, OpenID 2.0 or other protocols such as the FICAM backend Attribute Exchange.\n\nThis requirement addresses open identity management standards.  More information regarding these standards is available by pointing your web browser to: info.idmanagement.gov/2012/10/what-are-ficam-technical-profiles-and.html","descriptions":{"default":"FICAM establishes a federated identity framework for the Federal Government. FICAM provides Government-wide services for common Identity, Credential, and Access Management (ICAM) requirements.  The FICAM Trust Framework Solutions (TFS) is the federated identity framework for the U.S. federal government.\n The TFS is a process by which Industry Trust Frameworks (The codification of requirements for credentials and their issuance, privacy and security requirements, as well as auditing qualifications and processes) are evaluated and assessed for potential use by the Government.  \n\nThis requirement only applies to applications that are intended to be accessible to non-federal government agencies and other partners or non-organizational (non-DoD) users.\n\nWithout conforming to FICAM-issued profiles, the information system may not be interoperable with FICAM-authentication protocols, such as SAML 2.0, OpenID 2.0 or other protocols such as the FICAM backend Attribute Exchange.\n\nThis requirement addresses open identity management standards.  More information regarding these standards is available by pointing your web browser to: info.idmanagement.gov/2012/10/what-are-ficam-technical-profiles-and.html","check":"Review the application documentation and interview the application administrator to identify application access methods.\n\nIf the application is not PK-enabled due to the hosted data being publicly releasable, this check is not applicable.\n\nIf the application is only deployed to SIPRNet, this requirement is not applicable.\n\nIf the application is not intended to be available to Federal government partners this requirement is not applicable.\n\nThis requirement applies to DoD service providers who are relying parties of external (Federal Government) identity providers.\n \nAsk the application administrator to demonstrate how the application conforms to FICAM issued profiles such as SAML or OPENID.  \n\nIf the application is designed to be a service provider utilizing an external identify provider and doesn't conform to FICAM-issued profiles, this is a finding.","fix":"Configure the application to conform to FICAM-issued technical profiles when providing services that rely on external (Federal Government) identity providers."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24230r493588_chk","severity":"medium","gid":"V-222560","rid":"SV-222560r879778_rule","stig_id":"APSC-DV-001910","gtitle":"SRG-APP-000405","fix_id":"F-24219r493589_fix","documentable":null,"legacy":["SV-84791","V-70169"],"cci":["CCI-002014"],"nist":["IA-8 (4)"]}},{"id":"SV-222561","code":"control 'SV-222561' do\n  title 'Applications used for non-local maintenance sessions must audit non-local maintenance and diagnostic sessions for organization-defined auditable events.'\n  desc 'Non-local maintenance and diagnostic activities are those activities conducted by individuals communicating through a network, either an external network (e.g., the Internet) or an internal network. Local maintenance and diagnostic activities are those activities carried out by individuals physically present at the information system or information system component and not communicating across a network connection.\n\nIf events associated with non-local administrative access or diagnostic sessions are not logged and audited, a major tool for assessing and investigating attacks would not be available.\n\nThis requirement addresses auditing-related issues associated with maintenance tools used specifically for diagnostic and repair actions on organizational information systems.\n\nThis requirement applies to hardware/software diagnostic test equipment or tools. This requirement does not cover hardware/software components that may support information system maintenance, yet are a part of the system (e.g., the software implementing \"ping,\" \"ls,\" \"ipconfig,\" or the hardware and software implementing the monitoring port of an Ethernet switch).'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify application maintenance functions.\n\nIf the application does not provide non-local maintenance and diagnostic capability, this requirement is not applicable.\n\nIdentify the maintenance functions/capabilities that are provided by the application and performed by an individual which can be performed remotely.\n\nFor example, the application may provide the ability to clean up a folder of temporary files, add users, remove users, restart processes, backup certain files, manage logs, or execute diagnostic sessions.\n\nIdentify and open the audit logs that capture maintenance actions performed by the application.\n\nAccessing the application in the appropriate role to execute maintenance tasks, perform several maintenance tasks and observe the logs.\n\nIf the application provides maintenance functions and capabilities and those functions are not logged when they are executed, this is a finding.'\n  desc 'fix', 'Configure the application to log when application maintenance functionality is executed remotely.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24231r493591_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222561'\n  tag rid: 'SV-222561r879782_rule'\n  tag stig_id: 'APSC-DV-001930'\n  tag gtitle: 'SRG-APP-000409'\n  tag fix_id: 'F-24220r493592_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84793', 'V-70171']\n  tag cci: ['CCI-002884']\n  tag nist: ['MA-4 (1) (a)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222561.rb"},"title":"Applications used for non-local maintenance sessions must audit non-local maintenance and diagnostic sessions for organization-defined auditable events.","desc":"Non-local maintenance and diagnostic activities are those activities conducted by individuals communicating through a network, either an external network (e.g., the Internet) or an internal network. Local maintenance and diagnostic activities are those activities carried out by individuals physically present at the information system or information system component and not communicating across a network connection.\n\nIf events associated with non-local administrative access or diagnostic sessions are not logged and audited, a major tool for assessing and investigating attacks would not be available.\n\nThis requirement addresses auditing-related issues associated with maintenance tools used specifically for diagnostic and repair actions on organizational information systems.\n\nThis requirement applies to hardware/software diagnostic test equipment or tools. This requirement does not cover hardware/software components that may support information system maintenance, yet are a part of the system (e.g., the software implementing \"ping,\" \"ls,\" \"ipconfig,\" or the hardware and software implementing the monitoring port of an Ethernet switch).","descriptions":{"default":"Non-local maintenance and diagnostic activities are those activities conducted by individuals communicating through a network, either an external network (e.g., the Internet) or an internal network. Local maintenance and diagnostic activities are those activities carried out by individuals physically present at the information system or information system component and not communicating across a network connection.\n\nIf events associated with non-local administrative access or diagnostic sessions are not logged and audited, a major tool for assessing and investigating attacks would not be available.\n\nThis requirement addresses auditing-related issues associated with maintenance tools used specifically for diagnostic and repair actions on organizational information systems.\n\nThis requirement applies to hardware/software diagnostic test equipment or tools. This requirement does not cover hardware/software components that may support information system maintenance, yet are a part of the system (e.g., the software implementing \"ping,\" \"ls,\" \"ipconfig,\" or the hardware and software implementing the monitoring port of an Ethernet switch).","check":"Review the application documentation and interview the application administrator to identify application maintenance functions.\n\nIf the application does not provide non-local maintenance and diagnostic capability, this requirement is not applicable.\n\nIdentify the maintenance functions/capabilities that are provided by the application and performed by an individual which can be performed remotely.\n\nFor example, the application may provide the ability to clean up a folder of temporary files, add users, remove users, restart processes, backup certain files, manage logs, or execute diagnostic sessions.\n\nIdentify and open the audit logs that capture maintenance actions performed by the application.\n\nAccessing the application in the appropriate role to execute maintenance tasks, perform several maintenance tasks and observe the logs.\n\nIf the application provides maintenance functions and capabilities and those functions are not logged when they are executed, this is a finding.","fix":"Configure the application to log when application maintenance functionality is executed remotely."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24231r493591_chk","severity":"medium","gid":"V-222561","rid":"SV-222561r879782_rule","stig_id":"APSC-DV-001930","gtitle":"SRG-APP-000409","fix_id":"F-24220r493592_fix","documentable":null,"legacy":["SV-84793","V-70171"],"cci":["CCI-002884"],"nist":["MA-4 (1) (a)"]}},{"id":"SV-222562","code":"control 'SV-222562' do\n  title 'Applications used for non-local maintenance sessions must implement cryptographic mechanisms to protect the integrity of non-local maintenance and diagnostic communications.'\n  desc 'Privileged access contains control and configuration information which is particularly sensitive, so additional protections are necessary. This is maintained by using cryptographic mechanisms to protect integrity.\n\nNon-local maintenance and diagnostic activities are those activities conducted by individuals communicating through a network, either an external network (e.g., the Internet) or an internal network. Local maintenance and diagnostic activities are those activities carried out by individuals physically present at the information system or information system component and not communicating across a network connection.\n\nThis requirement applies to hardware/software diagnostic test equipment or tools. This requirement does not cover hardware/software components that may support information system maintenance, yet are a part of the system (e.g., the software implementing \"ping,\" \"ls,\" \"ipconfig,\" or the hardware and software implementing the monitoring port of an Ethernet switch).\n\nThe application can meet this requirement through leveraging a cryptographic module.'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify application maintenance functions.\n\nIf the application does not provide non-local maintenance and diagnostic capability, this requirement is not applicable.\n\nIdentify the maintenance functions/capabilities that are provided by the application and performed by an individual which can be performed remotely.\n\nFor example, the application may provide the ability to clean up a folder of temporary files, add users, remove users, restart processes, backup certain files, manage logs, or execute diagnostic sessions.\n\nAccess the application in the appropriate role needed to execute maintenance tasks. Observe the manner in which the application is connecting and ensure the session is being encrypted.\n\nFor example, observe the browser to ensure the session is being encrypted with TLS/SSL.\n\nIf the application provides remote access to maintenance functions and capabilities and the remote access methods are not encrypted, this is a finding.'\n  desc 'fix', 'Configure the application to encrypt remote application maintenance sessions.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24232r493594_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222562'\n  tag rid: 'SV-222562r879784_rule'\n  tag stig_id: 'APSC-DV-001940'\n  tag gtitle: 'SRG-APP-000411'\n  tag fix_id: 'F-24221r493595_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84797', 'V-70175']\n  tag cci: ['CCI-002890']\n  tag nist: ['MA-4 (6)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222562.rb"},"title":"Applications used for non-local maintenance sessions must implement cryptographic mechanisms to protect the integrity of non-local maintenance and diagnostic communications.","desc":"Privileged access contains control and configuration information which is particularly sensitive, so additional protections are necessary. This is maintained by using cryptographic mechanisms to protect integrity.\n\nNon-local maintenance and diagnostic activities are those activities conducted by individuals communicating through a network, either an external network (e.g., the Internet) or an internal network. Local maintenance and diagnostic activities are those activities carried out by individuals physically present at the information system or information system component and not communicating across a network connection.\n\nThis requirement applies to hardware/software diagnostic test equipment or tools. This requirement does not cover hardware/software components that may support information system maintenance, yet are a part of the system (e.g., the software implementing \"ping,\" \"ls,\" \"ipconfig,\" or the hardware and software implementing the monitoring port of an Ethernet switch).\n\nThe application can meet this requirement through leveraging a cryptographic module.","descriptions":{"default":"Privileged access contains control and configuration information which is particularly sensitive, so additional protections are necessary. This is maintained by using cryptographic mechanisms to protect integrity.\n\nNon-local maintenance and diagnostic activities are those activities conducted by individuals communicating through a network, either an external network (e.g., the Internet) or an internal network. Local maintenance and diagnostic activities are those activities carried out by individuals physically present at the information system or information system component and not communicating across a network connection.\n\nThis requirement applies to hardware/software diagnostic test equipment or tools. This requirement does not cover hardware/software components that may support information system maintenance, yet are a part of the system (e.g., the software implementing \"ping,\" \"ls,\" \"ipconfig,\" or the hardware and software implementing the monitoring port of an Ethernet switch).\n\nThe application can meet this requirement through leveraging a cryptographic module.","check":"Review the application documentation and interview the application administrator to identify application maintenance functions.\n\nIf the application does not provide non-local maintenance and diagnostic capability, this requirement is not applicable.\n\nIdentify the maintenance functions/capabilities that are provided by the application and performed by an individual which can be performed remotely.\n\nFor example, the application may provide the ability to clean up a folder of temporary files, add users, remove users, restart processes, backup certain files, manage logs, or execute diagnostic sessions.\n\nAccess the application in the appropriate role needed to execute maintenance tasks. Observe the manner in which the application is connecting and ensure the session is being encrypted.\n\nFor example, observe the browser to ensure the session is being encrypted with TLS/SSL.\n\nIf the application provides remote access to maintenance functions and capabilities and the remote access methods are not encrypted, this is a finding.","fix":"Configure the application to encrypt remote application maintenance sessions."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24232r493594_chk","severity":"medium","gid":"V-222562","rid":"SV-222562r879784_rule","stig_id":"APSC-DV-001940","gtitle":"SRG-APP-000411","fix_id":"F-24221r493595_fix","documentable":null,"legacy":["SV-84797","V-70175"],"cci":["CCI-002890"],"nist":["MA-4 (6)"]}},{"id":"SV-222563","code":"control 'SV-222563' do\n  title 'Applications used for non-local maintenance sessions must implement cryptographic mechanisms to protect the confidentiality of non-local maintenance and diagnostic communications.'\n  desc 'Privileged access contains control and configuration information which is particularly sensitive, so additional protections are necessary. This is maintained by using cryptographic mechanisms to protect confidentiality.\n\nNon-local maintenance and diagnostic activities are those activities conducted by individuals communicating through a network, either an external network (e.g., the Internet) or an internal network. Local maintenance and diagnostic activities are those activities carried out by individuals physically present at the information system or information system component and not communicating across a network connection.\n\nThe application can meet this requirement through leveraging a cryptographic module.'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify application maintenance functions.\n\nIf the application does not provide non-local maintenance and diagnostic capability, this requirement is not applicable.\n\nIdentify the maintenance functions/capabilities that are provided by the application and performed by an individual which can be performed remotely.\n\nFor example, the application may provide the ability to clean up a folder of temporary files, add users, remove users, restart processes, backup certain files, manage logs, or execute diagnostic sessions.\n\nAccess the application in the appropriate role needed to execute maintenance tasks. Observe the manner in which the application is connecting and verify the session is being encrypted.\n\nFor example, observe the browser to ensure the session is being encrypted with TLS/SSL.\n\nIf the application provides remote access to maintenance functions and capabilities and the remote access methods are not encrypted, this is a finding.'\n  desc 'fix', 'Configure the application to encrypt remote application maintenance sessions.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24233r493597_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222563'\n  tag rid: 'SV-222563r879785_rule'\n  tag stig_id: 'APSC-DV-001950'\n  tag gtitle: 'SRG-APP-000412'\n  tag fix_id: 'F-24222r493598_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84799', 'V-70177']\n  tag cci: ['CCI-003123']\n  tag nist: ['MA-4 (6)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222563.rb"},"title":"Applications used for non-local maintenance sessions must implement cryptographic mechanisms to protect the confidentiality of non-local maintenance and diagnostic communications.","desc":"Privileged access contains control and configuration information which is particularly sensitive, so additional protections are necessary. This is maintained by using cryptographic mechanisms to protect confidentiality.\n\nNon-local maintenance and diagnostic activities are those activities conducted by individuals communicating through a network, either an external network (e.g., the Internet) or an internal network. Local maintenance and diagnostic activities are those activities carried out by individuals physically present at the information system or information system component and not communicating across a network connection.\n\nThe application can meet this requirement through leveraging a cryptographic module.","descriptions":{"default":"Privileged access contains control and configuration information which is particularly sensitive, so additional protections are necessary. This is maintained by using cryptographic mechanisms to protect confidentiality.\n\nNon-local maintenance and diagnostic activities are those activities conducted by individuals communicating through a network, either an external network (e.g., the Internet) or an internal network. Local maintenance and diagnostic activities are those activities carried out by individuals physically present at the information system or information system component and not communicating across a network connection.\n\nThe application can meet this requirement through leveraging a cryptographic module.","check":"Review the application documentation and interview the application administrator to identify application maintenance functions.\n\nIf the application does not provide non-local maintenance and diagnostic capability, this requirement is not applicable.\n\nIdentify the maintenance functions/capabilities that are provided by the application and performed by an individual which can be performed remotely.\n\nFor example, the application may provide the ability to clean up a folder of temporary files, add users, remove users, restart processes, backup certain files, manage logs, or execute diagnostic sessions.\n\nAccess the application in the appropriate role needed to execute maintenance tasks. Observe the manner in which the application is connecting and verify the session is being encrypted.\n\nFor example, observe the browser to ensure the session is being encrypted with TLS/SSL.\n\nIf the application provides remote access to maintenance functions and capabilities and the remote access methods are not encrypted, this is a finding.","fix":"Configure the application to encrypt remote application maintenance sessions."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24233r493597_chk","severity":"medium","gid":"V-222563","rid":"SV-222563r879785_rule","stig_id":"APSC-DV-001950","gtitle":"SRG-APP-000412","fix_id":"F-24222r493598_fix","documentable":null,"legacy":["SV-84799","V-70177"],"cci":["CCI-003123"],"nist":["MA-4 (6)"]}},{"id":"SV-222564","code":"control 'SV-222564' do\n  title 'Applications used for non-local maintenance sessions must verify remote disconnection at the termination of non-local maintenance and diagnostic sessions.'\n  desc 'Non-local maintenance and diagnostic activities are those activities conducted by individuals communicating through a network, either an external network (e.g., the Internet) or an internal network. Local maintenance and diagnostic activities are those activities carried out by individuals physically present at the information system or information system component and not communicating across a network connection.\n\nIf the remote connection is not closed and verified as closed, the session may remain open and be exploited by an attacker; this is referred to as a zombie session. Remote connections must be disconnected and verified as disconnected when non-local maintenance sessions have been terminated and are no longer available for use.'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify application maintenance functions.\n\nIf the application does not provide non-local maintenance and diagnostic capability, this requirement is not applicable.\n\nIdentify the maintenance functions/capabilities that are provided by the application, performed by an individual/admin and which can be performed remotely.\n\nExamples include but are not limited to:\n\nThe application may provide the ability to clean up a folder of temporary files, add users, remove users, restart processes, backup certain files, manage logs, or execute diagnostic sessions.\n\nIdentify the IP address of the source system used to originate testing traffic. The IP address will be used to identify sessions on the application host so verify traffic is not traversing a proxy connection in order to reach the application host.\n\nAccess the operating system of the application host and execute the relevant OS commands to identify active TCP/IP sessions on the application host.\n\nFor example, the \"netstat -a\" command will provide a status of all TCP/IP connections on both Windows and UNIX systems.\n\nNetstat output can be redirected to a file or the grep command can be used on UNIX systems to identify the specific application processes and network connections.\n\nnetstat -a |grep -i \"application process name\" > filename\nor\nnetstat  -a |grep -i source IP address > filename\n\nUtilizing the application, access using the appropriate role needed to execute maintenance tasks.\n\nExecute a maintenance task or tasks from within the application.\n\nRe-execute the netstat commands and identify what network connections and process IDs were created to handle the new application session.\n\nTerminate the application session via the application interface and then execute the netstat commands a third time. The network connections should terminate or change to a state that indicates the connections are closed or are in the process of closing. Continue to execute netstat command until it is verified that the application has terminated the process sessions and closed the network connections.\n\nReview the application logs to ensure the application has logged the disconnection event thereby verifying the disconnection.\n\nIf the application provides remote access to maintenance functions and capabilities and the remote access connections are not terminated and then verified, this is a finding.'\n  desc 'fix', 'Configure the application to verify termination of remote maintenance sessions.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24234r493600_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222564'\n  tag rid: 'SV-222564r879786_rule'\n  tag stig_id: 'APSC-DV-001960'\n  tag gtitle: 'SRG-APP-000413'\n  tag fix_id: 'F-24223r493601_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84801', 'V-70179']\n  tag cci: ['CCI-002891']\n  tag nist: ['MA-4 (7)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222564.rb"},"title":"Applications used for non-local maintenance sessions must verify remote disconnection at the termination of non-local maintenance and diagnostic sessions.","desc":"Non-local maintenance and diagnostic activities are those activities conducted by individuals communicating through a network, either an external network (e.g., the Internet) or an internal network. Local maintenance and diagnostic activities are those activities carried out by individuals physically present at the information system or information system component and not communicating across a network connection.\n\nIf the remote connection is not closed and verified as closed, the session may remain open and be exploited by an attacker; this is referred to as a zombie session. Remote connections must be disconnected and verified as disconnected when non-local maintenance sessions have been terminated and are no longer available for use.","descriptions":{"default":"Non-local maintenance and diagnostic activities are those activities conducted by individuals communicating through a network, either an external network (e.g., the Internet) or an internal network. Local maintenance and diagnostic activities are those activities carried out by individuals physically present at the information system or information system component and not communicating across a network connection.\n\nIf the remote connection is not closed and verified as closed, the session may remain open and be exploited by an attacker; this is referred to as a zombie session. Remote connections must be disconnected and verified as disconnected when non-local maintenance sessions have been terminated and are no longer available for use.","check":"Review the application documentation and interview the application administrator to identify application maintenance functions.\n\nIf the application does not provide non-local maintenance and diagnostic capability, this requirement is not applicable.\n\nIdentify the maintenance functions/capabilities that are provided by the application, performed by an individual/admin and which can be performed remotely.\n\nExamples include but are not limited to:\n\nThe application may provide the ability to clean up a folder of temporary files, add users, remove users, restart processes, backup certain files, manage logs, or execute diagnostic sessions.\n\nIdentify the IP address of the source system used to originate testing traffic. The IP address will be used to identify sessions on the application host so verify traffic is not traversing a proxy connection in order to reach the application host.\n\nAccess the operating system of the application host and execute the relevant OS commands to identify active TCP/IP sessions on the application host.\n\nFor example, the \"netstat -a\" command will provide a status of all TCP/IP connections on both Windows and UNIX systems.\n\nNetstat output can be redirected to a file or the grep command can be used on UNIX systems to identify the specific application processes and network connections.\n\nnetstat -a |grep -i \"application process name\" > filename\nor\nnetstat  -a |grep -i source IP address > filename\n\nUtilizing the application, access using the appropriate role needed to execute maintenance tasks.\n\nExecute a maintenance task or tasks from within the application.\n\nRe-execute the netstat commands and identify what network connections and process IDs were created to handle the new application session.\n\nTerminate the application session via the application interface and then execute the netstat commands a third time. The network connections should terminate or change to a state that indicates the connections are closed or are in the process of closing. Continue to execute netstat command until it is verified that the application has terminated the process sessions and closed the network connections.\n\nReview the application logs to ensure the application has logged the disconnection event thereby verifying the disconnection.\n\nIf the application provides remote access to maintenance functions and capabilities and the remote access connections are not terminated and then verified, this is a finding.","fix":"Configure the application to verify termination of remote maintenance sessions."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24234r493600_chk","severity":"medium","gid":"V-222564","rid":"SV-222564r879786_rule","stig_id":"APSC-DV-001960","gtitle":"SRG-APP-000413","fix_id":"F-24223r493601_fix","documentable":null,"legacy":["SV-84801","V-70179"],"cci":["CCI-002891"],"nist":["MA-4 (7)"]}},{"id":"SV-222565","code":"control 'SV-222565' do\n  title 'The application must employ strong authenticators in the establishment of non-local maintenance and diagnostic sessions.'\n  desc 'If maintenance tools are used by unauthorized personnel, they may accidentally or intentionally damage or compromise the system. The act of managing systems and applications includes the ability to access sensitive application information, such as, system configuration details, diagnostic information, user information, and potentially sensitive application data.\n\nNon-local maintenance and diagnostic activities are those activities conducted by individuals communicating through a network, either an external network (e.g., the Internet) or an internal network. Local maintenance and diagnostic activities are those activities carried out by individuals physically present at the information system or information system component and not communicating across a network connection.\n\nTypically, strong authentication requires authenticators that are resistant to replay attacks and employ multifactor authentication. Strong authenticators include, for example, PKI where certificates are stored on a token protected by a password, passphrase, or biometric.\n\nThis requirement applies to hardware/software diagnostic test equipment or tools. This requirement does not cover hardware/software components that may support information system maintenance, yet are a part of the system (e.g., the software implementing \"ping,\" \"ls,\" \"ipconfig,\" or the hardware and software implementing the monitoring port of an Ethernet switch).'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify application maintenance functions.\n\nIf the application does not provide non-local maintenance and diagnostic capability, this requirement is not applicable.\n\nIdentify the maintenance functions/capabilities that are provided by the application, performed by an individual/admin and which can be performed remotely.\n\nExamples include but are not limited to:\n\nThe application may provide the ability to clean up a folder of temporary files, add users, remove users, restart processes, backup certain files, manage logs, or execute diagnostic sessions.\n\nHave the application admin authenticate to the application in an administrative role and verify that strong credentials (CAC) are required to access when performing application maintenance.\n\nHave the application admin authenticate to the application host OS and verify that strong credentials (CAC) are required to access when performing application maintenance.\n\nIf the application administrator is prevented from accessing the OS by policy requirement or separation of duties requirements, this is not a finding.\n\nIf a CAC is not used when remotely accessing the application for maintenance or diagnostic sessions, this is a finding.'\n  desc 'fix', 'Configure the application to use strong authentication (CAC) when accessing the application for maintenance purposes.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24235r493603_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222565'\n  tag rid: 'SV-222565r879620_rule'\n  tag stig_id: 'APSC-DV-001970'\n  tag gtitle: 'SRG-APP-000185'\n  tag fix_id: 'F-24224r493604_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84803', 'V-70181']\n  tag cci: ['CCI-000877']\n  tag nist: ['MA-4 c']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222565.rb"},"title":"The application must employ strong authenticators in the establishment of non-local maintenance and diagnostic sessions.","desc":"If maintenance tools are used by unauthorized personnel, they may accidentally or intentionally damage or compromise the system. The act of managing systems and applications includes the ability to access sensitive application information, such as, system configuration details, diagnostic information, user information, and potentially sensitive application data.\n\nNon-local maintenance and diagnostic activities are those activities conducted by individuals communicating through a network, either an external network (e.g., the Internet) or an internal network. Local maintenance and diagnostic activities are those activities carried out by individuals physically present at the information system or information system component and not communicating across a network connection.\n\nTypically, strong authentication requires authenticators that are resistant to replay attacks and employ multifactor authentication. Strong authenticators include, for example, PKI where certificates are stored on a token protected by a password, passphrase, or biometric.\n\nThis requirement applies to hardware/software diagnostic test equipment or tools. This requirement does not cover hardware/software components that may support information system maintenance, yet are a part of the system (e.g., the software implementing \"ping,\" \"ls,\" \"ipconfig,\" or the hardware and software implementing the monitoring port of an Ethernet switch).","descriptions":{"default":"If maintenance tools are used by unauthorized personnel, they may accidentally or intentionally damage or compromise the system. The act of managing systems and applications includes the ability to access sensitive application information, such as, system configuration details, diagnostic information, user information, and potentially sensitive application data.\n\nNon-local maintenance and diagnostic activities are those activities conducted by individuals communicating through a network, either an external network (e.g., the Internet) or an internal network. Local maintenance and diagnostic activities are those activities carried out by individuals physically present at the information system or information system component and not communicating across a network connection.\n\nTypically, strong authentication requires authenticators that are resistant to replay attacks and employ multifactor authentication. Strong authenticators include, for example, PKI where certificates are stored on a token protected by a password, passphrase, or biometric.\n\nThis requirement applies to hardware/software diagnostic test equipment or tools. This requirement does not cover hardware/software components that may support information system maintenance, yet are a part of the system (e.g., the software implementing \"ping,\" \"ls,\" \"ipconfig,\" or the hardware and software implementing the monitoring port of an Ethernet switch).","check":"Review the application documentation and interview the application administrator to identify application maintenance functions.\n\nIf the application does not provide non-local maintenance and diagnostic capability, this requirement is not applicable.\n\nIdentify the maintenance functions/capabilities that are provided by the application, performed by an individual/admin and which can be performed remotely.\n\nExamples include but are not limited to:\n\nThe application may provide the ability to clean up a folder of temporary files, add users, remove users, restart processes, backup certain files, manage logs, or execute diagnostic sessions.\n\nHave the application admin authenticate to the application in an administrative role and verify that strong credentials (CAC) are required to access when performing application maintenance.\n\nHave the application admin authenticate to the application host OS and verify that strong credentials (CAC) are required to access when performing application maintenance.\n\nIf the application administrator is prevented from accessing the OS by policy requirement or separation of duties requirements, this is not a finding.\n\nIf a CAC is not used when remotely accessing the application for maintenance or diagnostic sessions, this is a finding.","fix":"Configure the application to use strong authentication (CAC) when accessing the application for maintenance purposes."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24235r493603_chk","severity":"medium","gid":"V-222565","rid":"SV-222565r879620_rule","stig_id":"APSC-DV-001970","gtitle":"SRG-APP-000185","fix_id":"F-24224r493604_fix","documentable":null,"legacy":["SV-84803","V-70181"],"cci":["CCI-000877"],"nist":["MA-4 c"]}},{"id":"SV-222566","code":"control 'SV-222566' do\n  title 'The application must terminate all sessions and network connections when non-local maintenance is completed.'\n  desc 'If a maintenance session or connection remains open after maintenance is completed, it may be hijacked by an attacker and used to compromise or damage the system.\n\nNon-local maintenance and diagnostic activities are those activities conducted by individuals communicating through a network, either an external network (e.g., the Internet) or an internal network. Local maintenance and diagnostic activities are those activities carried out by individuals physically present at the information system or information system component and not communicating across a network connection.\n\nThis requirement applies to hardware/software diagnostic test equipment or tools. This requirement does not cover hardware/software components that may support information system maintenance, yet are a part of the system (e.g., the software implementing \"ping,\" \"ls,\" \"ipconfig,\" or the hardware and software implementing the monitoring port of an Ethernet switch).'\n  desc 'check', 'Review the application documentation and interview the system administrator to determine how the application is configured to terminate network sessions after sessions have been idle for a period of time. Identify any documented exceptions.\n\nIf the application does not provide non-local maintenance and diagnostic capability, this requirement is not applicable.\n\nFor privileged management sessions the period of time is 10 minutes of inactivity.\n\nFor regular user or non-privileged sessions, the period of time is 15 minutes of inactivity.\n\nAuthenticate to the application using normal in-band access methods and as an application admin.\n\nPerform any operation to verify access and then leave the session idle for 10 minutes and perform no activity within the application.\n\nAccess the application after the period of inactivity has expired and determine if the application still allows access.\n\nIf necessary, logout of the application, clear the browser cache, and repeat the same test procedure using the account privileges of a regular user. Leave the session inactive for 15 minutes.\n\nIf the application does not deny access after each user session has exceeded the relevant idle timeout period and there is no documented risk exceptions needed to fulfill mission requirements, this is a finding.'\n  desc 'fix', 'Configure the application to expire idle user sessions after 10 minutes of inactivity for admin users and after 15 minutes of inactivity for regular users.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24236r493606_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222566'\n  tag rid: 'SV-222566r879621_rule'\n  tag stig_id: 'APSC-DV-001980'\n  tag gtitle: 'SRG-APP-000186'\n  tag fix_id: 'F-24225r493607_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84805', 'V-70183']\n  tag cci: ['CCI-000879']\n  tag nist: ['MA-4 e']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222566.rb"},"title":"The application must terminate all sessions and network connections when non-local maintenance is completed.","desc":"If a maintenance session or connection remains open after maintenance is completed, it may be hijacked by an attacker and used to compromise or damage the system.\n\nNon-local maintenance and diagnostic activities are those activities conducted by individuals communicating through a network, either an external network (e.g., the Internet) or an internal network. Local maintenance and diagnostic activities are those activities carried out by individuals physically present at the information system or information system component and not communicating across a network connection.\n\nThis requirement applies to hardware/software diagnostic test equipment or tools. This requirement does not cover hardware/software components that may support information system maintenance, yet are a part of the system (e.g., the software implementing \"ping,\" \"ls,\" \"ipconfig,\" or the hardware and software implementing the monitoring port of an Ethernet switch).","descriptions":{"default":"If a maintenance session or connection remains open after maintenance is completed, it may be hijacked by an attacker and used to compromise or damage the system.\n\nNon-local maintenance and diagnostic activities are those activities conducted by individuals communicating through a network, either an external network (e.g., the Internet) or an internal network. Local maintenance and diagnostic activities are those activities carried out by individuals physically present at the information system or information system component and not communicating across a network connection.\n\nThis requirement applies to hardware/software diagnostic test equipment or tools. This requirement does not cover hardware/software components that may support information system maintenance, yet are a part of the system (e.g., the software implementing \"ping,\" \"ls,\" \"ipconfig,\" or the hardware and software implementing the monitoring port of an Ethernet switch).","check":"Review the application documentation and interview the system administrator to determine how the application is configured to terminate network sessions after sessions have been idle for a period of time. Identify any documented exceptions.\n\nIf the application does not provide non-local maintenance and diagnostic capability, this requirement is not applicable.\n\nFor privileged management sessions the period of time is 10 minutes of inactivity.\n\nFor regular user or non-privileged sessions, the period of time is 15 minutes of inactivity.\n\nAuthenticate to the application using normal in-band access methods and as an application admin.\n\nPerform any operation to verify access and then leave the session idle for 10 minutes and perform no activity within the application.\n\nAccess the application after the period of inactivity has expired and determine if the application still allows access.\n\nIf necessary, logout of the application, clear the browser cache, and repeat the same test procedure using the account privileges of a regular user. Leave the session inactive for 15 minutes.\n\nIf the application does not deny access after each user session has exceeded the relevant idle timeout period and there is no documented risk exceptions needed to fulfill mission requirements, this is a finding.","fix":"Configure the application to expire idle user sessions after 10 minutes of inactivity for admin users and after 15 minutes of inactivity for regular users."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24236r493606_chk","severity":"medium","gid":"V-222566","rid":"SV-222566r879621_rule","stig_id":"APSC-DV-001980","gtitle":"SRG-APP-000186","fix_id":"F-24225r493607_fix","documentable":null,"legacy":["SV-84805","V-70183"],"cci":["CCI-000879"],"nist":["MA-4 e"]}},{"id":"SV-222567","code":"control 'SV-222567' do\n  title 'The application must not be vulnerable to race conditions.'\n  desc 'A race condition is a timing event within an application that can become a security vulnerability.  A race condition can occur when a pair of programming calls operating simultaneously do not work in a sequential or coordinated manner.  A race condition is a timing event within software that can become a security vulnerability if the calls are not performed in the correct order.  \n\nThere are different types of race conditions and they are dependent upon the action that the application is undertaking when the race condition occurs.  Some examples of race conditions include but are not limited to:\n\n- Time of check, time of use: the time in which a given resource is checked, and the time that resource is used.\n- Thread based: two threads of execution use a resource simultaneously, resource may be invalid when used.\n- Switch based: variable switches values while switch statement is in progress.\n\nDevelopers must be cognizant of programming sequence and use sanity checks to validate data prior to acting upon it.\n\nA code review or a static code analysis is the method used to identify race conditions.'\n  desc 'check', 'Review the application documentation and architecture.\n\nIf the application is a COTS application and the vendor will not provide code review test results that demonstrate the application has been tested and is not susceptible to race conditions, the requirement is NA.\n\nInterview the application admin and identify the most recent code testing and analysis that has been conducted.\n\nReview the test results; verify configuration of analysis tools are set to check for the existence of  race conditions.  \n\nIf race conditions are identified in the test results, verify the latest test results are being used, if not, ensure remediation has been completed.\n\nIf the test results show race conditions exist and no remediation evidence is presented, or if test results are not available, this is a finding.'\n  desc 'fix', 'Be aware of potential timing issues related to application programming calls when designing and building the application.\n\nValidate that variable values do not change while a switch event is occurring.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24237r493609_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222567'\n  tag rid: 'SV-222567r879887_rule'\n  tag stig_id: 'APSC-DV-001995'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24226r493610_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84807', 'V-70185']\n  tag cci: ['CCI-000366', 'CCI-003178']\n  tag nist: ['CM-6 b', 'SA-11 e']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222567.rb"},"title":"The application must not be vulnerable to race conditions.","desc":"A race condition is a timing event within an application that can become a security vulnerability.  A race condition can occur when a pair of programming calls operating simultaneously do not work in a sequential or coordinated manner.  A race condition is a timing event within software that can become a security vulnerability if the calls are not performed in the correct order.  \n\nThere are different types of race conditions and they are dependent upon the action that the application is undertaking when the race condition occurs.  Some examples of race conditions include but are not limited to:\n\n- Time of check, time of use: the time in which a given resource is checked, and the time that resource is used.\n- Thread based: two threads of execution use a resource simultaneously, resource may be invalid when used.\n- Switch based: variable switches values while switch statement is in progress.\n\nDevelopers must be cognizant of programming sequence and use sanity checks to validate data prior to acting upon it.\n\nA code review or a static code analysis is the method used to identify race conditions.","descriptions":{"default":"A race condition is a timing event within an application that can become a security vulnerability.  A race condition can occur when a pair of programming calls operating simultaneously do not work in a sequential or coordinated manner.  A race condition is a timing event within software that can become a security vulnerability if the calls are not performed in the correct order.  \n\nThere are different types of race conditions and they are dependent upon the action that the application is undertaking when the race condition occurs.  Some examples of race conditions include but are not limited to:\n\n- Time of check, time of use: the time in which a given resource is checked, and the time that resource is used.\n- Thread based: two threads of execution use a resource simultaneously, resource may be invalid when used.\n- Switch based: variable switches values while switch statement is in progress.\n\nDevelopers must be cognizant of programming sequence and use sanity checks to validate data prior to acting upon it.\n\nA code review or a static code analysis is the method used to identify race conditions.","check":"Review the application documentation and architecture.\n\nIf the application is a COTS application and the vendor will not provide code review test results that demonstrate the application has been tested and is not susceptible to race conditions, the requirement is NA.\n\nInterview the application admin and identify the most recent code testing and analysis that has been conducted.\n\nReview the test results; verify configuration of analysis tools are set to check for the existence of  race conditions.  \n\nIf race conditions are identified in the test results, verify the latest test results are being used, if not, ensure remediation has been completed.\n\nIf the test results show race conditions exist and no remediation evidence is presented, or if test results are not available, this is a finding.","fix":"Be aware of potential timing issues related to application programming calls when designing and building the application.\n\nValidate that variable values do not change while a switch event is occurring."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24237r493609_chk","severity":"medium","gid":"V-222567","rid":"SV-222567r879887_rule","stig_id":"APSC-DV-001995","gtitle":"SRG-APP-000516","fix_id":"F-24226r493610_fix","documentable":null,"legacy":["SV-84807","V-70185"],"cci":["CCI-000366","CCI-003178"],"nist":["CM-6 b","SA-11 e"]}},{"id":"SV-222568","code":"control 'SV-222568' do\n  title 'The application must terminate all network connections associated with a communications session at the end of the session.'\n  desc 'Networked applications routinely open connections to and from other systems as part of their design and function.  When connections are opened by the application, system resources are consumed.  Terminating the network connection at the end of the application session frees up these resources for later use and aids in maintaining system stability. \n\nTerminating network connections associated with communications sessions includes, for example, de-allocating associated TCP/IP address/port pairs at the operating system level, or de-allocating networking assignments at the application level if multiple application sessions are using a single, operating system level network connection. \n\nThis does not mean that the application terminates all sessions or network access; it only ends the inactive session and releases the resources associated with that session.\n\nMany applications rely on the underlying OS to control the network connection aspect of the application which is perfectly acceptable.\n\nAdditionally, application specific operational issues may occasionally be encountered which dictate exceptions be granted to this requirement in order to ensure continuity of operations and application availability.\n\nWhen the aforementioned type of situation occurs, the root cause of the issue as well as the mitigations implemented in order to prevent a loss of availability must be documented.   Common mitigation procedures include but are not limited to stopping and restarting application or system services in order to manually release system resources.'\n  desc 'check', %q(Review the application documentation and interview the system administrator to determine how the application is designed and configured to terminate network connections at the end of the application session.\n\nIdentify any documented exceptions to the requirement and review associated mitigations.\n\nIf the application provides a management interface for controlling or monitoring application network sessions, access that management interface.  Monitor application network activity.  \n\nIf the application utilizes the underlying OS to control network connections, access the command prompt of the OS.  Run the OS command for observing network connections at the OS.  For Windows and Unix OS's, use the \"netstat\" command.  Include command parameters that identify the application and/or process ID. netstat /? or -h provides the list of available parameters.\n\nObserve network activity and associate application processes with network connections.  Repeat use of the command to identify changing network state.\n\nDetermine if application session network connections are being terminated at the end of the session by observing the \"state\" column of the netstat command output with each iteration.\n\nIf the application does not terminate network connections when application sessions end, this is a finding.\n\nIf exceptions are documented with no mitigation this is a finding.)\n  desc 'fix', 'Configure or design the application to terminate application network sessions at the end of the session.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24238r493612_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222568'\n  tag rid: 'SV-222568r879622_rule'\n  tag stig_id: 'APSC-DV-002000'\n  tag gtitle: 'SRG-APP-000190'\n  tag fix_id: 'F-24227r493613_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84809', 'V-70187']\n  tag cci: ['CCI-001133']\n  tag nist: ['SC-10']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222568.rb"},"title":"The application must terminate all network connections associated with a communications session at the end of the session.","desc":"Networked applications routinely open connections to and from other systems as part of their design and function.  When connections are opened by the application, system resources are consumed.  Terminating the network connection at the end of the application session frees up these resources for later use and aids in maintaining system stability. \n\nTerminating network connections associated with communications sessions includes, for example, de-allocating associated TCP/IP address/port pairs at the operating system level, or de-allocating networking assignments at the application level if multiple application sessions are using a single, operating system level network connection. \n\nThis does not mean that the application terminates all sessions or network access; it only ends the inactive session and releases the resources associated with that session.\n\nMany applications rely on the underlying OS to control the network connection aspect of the application which is perfectly acceptable.\n\nAdditionally, application specific operational issues may occasionally be encountered which dictate exceptions be granted to this requirement in order to ensure continuity of operations and application availability.\n\nWhen the aforementioned type of situation occurs, the root cause of the issue as well as the mitigations implemented in order to prevent a loss of availability must be documented.   Common mitigation procedures include but are not limited to stopping and restarting application or system services in order to manually release system resources.","descriptions":{"default":"Networked applications routinely open connections to and from other systems as part of their design and function.  When connections are opened by the application, system resources are consumed.  Terminating the network connection at the end of the application session frees up these resources for later use and aids in maintaining system stability. \n\nTerminating network connections associated with communications sessions includes, for example, de-allocating associated TCP/IP address/port pairs at the operating system level, or de-allocating networking assignments at the application level if multiple application sessions are using a single, operating system level network connection. \n\nThis does not mean that the application terminates all sessions or network access; it only ends the inactive session and releases the resources associated with that session.\n\nMany applications rely on the underlying OS to control the network connection aspect of the application which is perfectly acceptable.\n\nAdditionally, application specific operational issues may occasionally be encountered which dictate exceptions be granted to this requirement in order to ensure continuity of operations and application availability.\n\nWhen the aforementioned type of situation occurs, the root cause of the issue as well as the mitigations implemented in order to prevent a loss of availability must be documented.   Common mitigation procedures include but are not limited to stopping and restarting application or system services in order to manually release system resources.","check":"Review the application documentation and interview the system administrator to determine how the application is designed and configured to terminate network connections at the end of the application session.\n\nIdentify any documented exceptions to the requirement and review associated mitigations.\n\nIf the application provides a management interface for controlling or monitoring application network sessions, access that management interface.  Monitor application network activity.  \n\nIf the application utilizes the underlying OS to control network connections, access the command prompt of the OS.  Run the OS command for observing network connections at the OS.  For Windows and Unix OS's, use the \"netstat\" command.  Include command parameters that identify the application and/or process ID. netstat /? or -h provides the list of available parameters.\n\nObserve network activity and associate application processes with network connections.  Repeat use of the command to identify changing network state.\n\nDetermine if application session network connections are being terminated at the end of the session by observing the \"state\" column of the netstat command output with each iteration.\n\nIf the application does not terminate network connections when application sessions end, this is a finding.\n\nIf exceptions are documented with no mitigation this is a finding.","fix":"Configure or design the application to terminate application network sessions at the end of the session."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24238r493612_chk","severity":"medium","gid":"V-222568","rid":"SV-222568r879622_rule","stig_id":"APSC-DV-002000","gtitle":"SRG-APP-000190","fix_id":"F-24227r493613_fix","documentable":null,"legacy":["SV-84809","V-70187"],"cci":["CCI-001133"],"nist":["SC-10"]}},{"id":"SV-222570","code":"control 'SV-222570' do\n  title 'The application must utilize FIPS-validated cryptographic modules when signing application components.'\n  desc 'Applications that distribute components of the application must sign the components to provide an identity assurance to consumers of the application component. Components can include application messages or application code.\n\nUse of weak or untested encryption algorithms undermines the purposes of utilizing encryption to validate the author of application components. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance the modules have been tested and validated.\n\nIf the application resides on a National Security System (NSS) it must not use algorithms weaker than SHA-384.'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify the cryptographic modules used by the application.\n\nReview the application components and application requirements. Interview application developers and application admins to determine if code signing is performed on distributable application components, files or packages.  \n\nFor example, a developer may sign application code components or an admin may sign application files or packages in order to provide application consumers with integrity assurances.\n\nIf signing has been identified in the application security plan as not being required and if a documented acceptance of risk is provided, this is not a finding.\n\nHave the application admin or the developer demonstrate how the signing algorithms are used and how signing of components including files, code and packages is performed.\n\nWhile SHA1 is currently FIPS-140-2 approved, due to known vulnerabilities with this algorithm, DoD PKI policy prohibits the use of SHA1 as of December 2016.  See DoD CIO Memo Subject: Revised Schedule to Update DoD Public Key Infrastructure Certificates to Secure Hash Algorithm-256. \n\nIf the application signing process does not use FIPS validated cryptographic modules, or if the signing process includes SHA1 or MD5 hashing algorithms, this is a finding.'\n  desc 'fix', 'Utilize FIPS-validated algorithms when signing application components.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24240r493618_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222570'\n  tag rid: 'SV-222570r879885_rule'\n  tag stig_id: 'APSC-DV-002020'\n  tag gtitle: 'SRG-APP-000514'\n  tag fix_id: 'F-24229r493619_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84813', 'V-70191']\n  tag cci: ['CCI-002450']\n  tag nist: ['SC-13 b']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222570.rb"},"title":"The application must utilize FIPS-validated cryptographic modules when signing application components.","desc":"Applications that distribute components of the application must sign the components to provide an identity assurance to consumers of the application component. Components can include application messages or application code.\n\nUse of weak or untested encryption algorithms undermines the purposes of utilizing encryption to validate the author of application components. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance the modules have been tested and validated.\n\nIf the application resides on a National Security System (NSS) it must not use algorithms weaker than SHA-384.","descriptions":{"default":"Applications that distribute components of the application must sign the components to provide an identity assurance to consumers of the application component. Components can include application messages or application code.\n\nUse of weak or untested encryption algorithms undermines the purposes of utilizing encryption to validate the author of application components. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance the modules have been tested and validated.\n\nIf the application resides on a National Security System (NSS) it must not use algorithms weaker than SHA-384.","check":"Review the application documentation and interview the application administrator to identify the cryptographic modules used by the application.\n\nReview the application components and application requirements. Interview application developers and application admins to determine if code signing is performed on distributable application components, files or packages.  \n\nFor example, a developer may sign application code components or an admin may sign application files or packages in order to provide application consumers with integrity assurances.\n\nIf signing has been identified in the application security plan as not being required and if a documented acceptance of risk is provided, this is not a finding.\n\nHave the application admin or the developer demonstrate how the signing algorithms are used and how signing of components including files, code and packages is performed.\n\nWhile SHA1 is currently FIPS-140-2 approved, due to known vulnerabilities with this algorithm, DoD PKI policy prohibits the use of SHA1 as of December 2016.  See DoD CIO Memo Subject: Revised Schedule to Update DoD Public Key Infrastructure Certificates to Secure Hash Algorithm-256. \n\nIf the application signing process does not use FIPS validated cryptographic modules, or if the signing process includes SHA1 or MD5 hashing algorithms, this is a finding.","fix":"Utilize FIPS-validated algorithms when signing application components."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24240r493618_chk","severity":"medium","gid":"V-222570","rid":"SV-222570r879885_rule","stig_id":"APSC-DV-002020","gtitle":"SRG-APP-000514","fix_id":"F-24229r493619_fix","documentable":null,"legacy":["SV-84813","V-70191"],"cci":["CCI-002450"],"nist":["SC-13 b"]}},{"id":"SV-222571","code":"control 'SV-222571' do\n  title 'The application must utilize FIPS-validated cryptographic modules when generating cryptographic hashes.'\n  desc 'Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.\n\nIf the application resides on a National Security System (NSS) it must not use a hashing algorithm weaker than SHA-384.'\n  desc 'check', 'Review the application components and the application requirements to determine if the application is capable of generating cryptographic hashes.\n\nReview the application documentation and interview the application developer or administrator to identify the cryptographic modules used by the application.\n\nIf hashing of application components has been identified in the application security plan as not being required and if a documented acceptance of risk is provided, this is not a finding.\n\nHave the application admin or the developer demonstrate how the application generates hashes and what hashing algorithms are used when generating a hash value.\n\nWhile SHA1 is currently FIPS-140-2 approved, due to known vulnerabilities with this algorithm, DoD PKI policy prohibits the use of SHA1 as of December 2016.  See DoD CIO Memo Subject: Revised Schedule to Update DoD Public Key Infrastructure Certificates to Secure Hash Algorithm-256. \n\nIf the application resides on a National Security System (NSS) and uses an algorithm weaker than SHA-384, this is a finding.\n\nIf FIPS-validated cryptographic modules are not used when generating hashes or if the application is configured to use the MD5 or SHA1 hashing algorithm, this is a finding.'\n  desc 'fix', 'Configure the application to use a FIPS-validated hashing algorithm when creating a cryptographic hash.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24241r493621_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222571'\n  tag rid: 'SV-222571r879885_rule'\n  tag stig_id: 'APSC-DV-002030'\n  tag gtitle: 'SRG-APP-000514'\n  tag fix_id: 'F-24230r493622_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84815', 'V-70193']\n  tag cci: ['CCI-002450']\n  tag nist: ['SC-13 b']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222571.rb"},"title":"The application must utilize FIPS-validated cryptographic modules when generating cryptographic hashes.","desc":"Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.\n\nIf the application resides on a National Security System (NSS) it must not use a hashing algorithm weaker than SHA-384.","descriptions":{"default":"Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.\n\nIf the application resides on a National Security System (NSS) it must not use a hashing algorithm weaker than SHA-384.","check":"Review the application components and the application requirements to determine if the application is capable of generating cryptographic hashes.\n\nReview the application documentation and interview the application developer or administrator to identify the cryptographic modules used by the application.\n\nIf hashing of application components has been identified in the application security plan as not being required and if a documented acceptance of risk is provided, this is not a finding.\n\nHave the application admin or the developer demonstrate how the application generates hashes and what hashing algorithms are used when generating a hash value.\n\nWhile SHA1 is currently FIPS-140-2 approved, due to known vulnerabilities with this algorithm, DoD PKI policy prohibits the use of SHA1 as of December 2016.  See DoD CIO Memo Subject: Revised Schedule to Update DoD Public Key Infrastructure Certificates to Secure Hash Algorithm-256. \n\nIf the application resides on a National Security System (NSS) and uses an algorithm weaker than SHA-384, this is a finding.\n\nIf FIPS-validated cryptographic modules are not used when generating hashes or if the application is configured to use the MD5 or SHA1 hashing algorithm, this is a finding.","fix":"Configure the application to use a FIPS-validated hashing algorithm when creating a cryptographic hash."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24241r493621_chk","severity":"medium","gid":"V-222571","rid":"SV-222571r879885_rule","stig_id":"APSC-DV-002030","gtitle":"SRG-APP-000514","fix_id":"F-24230r493622_fix","documentable":null,"legacy":["SV-84815","V-70193"],"cci":["CCI-002450"],"nist":["SC-13 b"]}},{"id":"SV-222572","code":"control 'SV-222572' do\n  title 'The application must utilize FIPS-validated cryptographic modules when protecting unclassified information that requires cryptographic protection.'\n  desc 'Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.'\n  desc 'check', 'Interview the system administrator, review the application components, and the application requirements to determine if the application processes data requiring cryptographic protection.\n\nReview the application documentation and interview the application administrator to identify the cryptographic modules used by the application.\n\nAccess the NIST site to determine if the cryptographic modules used by the application have been FIPS-validated.\n\nhttp://csrc.nist.gov/groups/STM/cmvp/documents/140-1/140val-all.htm\n\nIf the application is using cryptographic modules that are not FIPS-validated to protect unclassified data, this is a finding.'\n  desc 'fix', 'Configure the application to use a FIPS-validated cryptographic module.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24242r493624_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222572'\n  tag rid: 'SV-222572r879885_rule'\n  tag stig_id: 'APSC-DV-002040'\n  tag gtitle: 'SRG-APP-000514'\n  tag fix_id: 'F-24231r493625_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84817', 'V-70195']\n  tag cci: ['CCI-002450']\n  tag nist: ['SC-13 b']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222572.rb"},"title":"The application must utilize FIPS-validated cryptographic modules when protecting unclassified information that requires cryptographic protection.","desc":"Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.","descriptions":{"default":"Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.","check":"Interview the system administrator, review the application components, and the application requirements to determine if the application processes data requiring cryptographic protection.\n\nReview the application documentation and interview the application administrator to identify the cryptographic modules used by the application.\n\nAccess the NIST site to determine if the cryptographic modules used by the application have been FIPS-validated.\n\nhttp://csrc.nist.gov/groups/STM/cmvp/documents/140-1/140val-all.htm\n\nIf the application is using cryptographic modules that are not FIPS-validated to protect unclassified data, this is a finding.","fix":"Configure the application to use a FIPS-validated cryptographic module."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24242r493624_chk","severity":"medium","gid":"V-222572","rid":"SV-222572r879885_rule","stig_id":"APSC-DV-002040","gtitle":"SRG-APP-000514","fix_id":"F-24231r493625_fix","documentable":null,"legacy":["SV-84817","V-70195"],"cci":["CCI-002450"],"nist":["SC-13 b"]}},{"id":"SV-222573","code":"control 'SV-222573' do\n  title 'Applications making SAML assertions must use FIPS-approved random numbers in the generation of SessionIndex in the SAML element AuthnStatement.'\n  desc 'A predictable SessionIndex could lead to an attacker computing a future SessionIndex, thereby, possibly compromising the application.\n\nUse of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.'\n  desc 'check', 'Interview the system administrator, review the application components, and the application requirements to determine if the application uses SAML assertions.\n\nIf the application does not use SAML assertions, the requirement is not applicable.\n\nReview the application documentation and interview he application administrator to identify the cryptographic modules used by the application.\n\nAccess the NIST site to determine if the cryptographic modules used by the application have been FIPS-validated.\n\nhttp://csrc.nist.gov/groups/STM/cmvp/documents/140-1/140val-all.htm\n\nIf the application is using cryptographic modules that are not FIPS-validated when generating the SessionIndex in the SAML AuthnStatement, this is a finding.'\n  desc 'fix', 'Configure the application to use a FIPS-validated cryptographic module.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24243r493627_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222573'\n  tag rid: 'SV-222573r879885_rule'\n  tag stig_id: 'APSC-DV-002050'\n  tag gtitle: 'SRG-APP-000514'\n  tag fix_id: 'F-24232r493628_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84819', 'V-70197']\n  tag cci: ['CCI-002450']\n  tag nist: ['SC-13 b']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222573.rb"},"title":"Applications making SAML assertions must use FIPS-approved random numbers in the generation of SessionIndex in the SAML element AuthnStatement.","desc":"A predictable SessionIndex could lead to an attacker computing a future SessionIndex, thereby, possibly compromising the application.\n\nUse of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.","descriptions":{"default":"A predictable SessionIndex could lead to an attacker computing a future SessionIndex, thereby, possibly compromising the application.\n\nUse of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.","check":"Interview the system administrator, review the application components, and the application requirements to determine if the application uses SAML assertions.\n\nIf the application does not use SAML assertions, the requirement is not applicable.\n\nReview the application documentation and interview he application administrator to identify the cryptographic modules used by the application.\n\nAccess the NIST site to determine if the cryptographic modules used by the application have been FIPS-validated.\n\nhttp://csrc.nist.gov/groups/STM/cmvp/documents/140-1/140val-all.htm\n\nIf the application is using cryptographic modules that are not FIPS-validated when generating the SessionIndex in the SAML AuthnStatement, this is a finding.","fix":"Configure the application to use a FIPS-validated cryptographic module."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24243r493627_chk","severity":"medium","gid":"V-222573","rid":"SV-222573r879885_rule","stig_id":"APSC-DV-002050","gtitle":"SRG-APP-000514","fix_id":"F-24232r493628_fix","documentable":null,"legacy":["SV-84819","V-70197"],"cci":["CCI-002450"],"nist":["SC-13 b"]}},{"id":"SV-222574","code":"control 'SV-222574' do\n  title 'The application user interface must be either physically or logically separated from data storage and management interfaces.'\n  desc 'Application management functionality includes functions necessary for administration and requires privileged user access. Allowing non-privileged users to access application management functionality capabilities increases the risk that non-privileged users may obtain elevated privileges.\n\nThe separation of user functionality from information system management functionality is either physical or logical and is accomplished by using different computers, different central processing units, different instances of the operating system, different network addresses, different TCP/UDP ports, virtualization techniques, combinations of these methods, or other methods, as appropriate.\n\nAn example of this type of separation is observed in web administrative interfaces that use separate authentication methods for users of any other information system resources. This may include isolating the administrative interface on a different security domain and with additional access controls.'\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nReview the design documents and the interfaces used by the application.\n\nVerify that the application provides separate interfaces for user traffic and for management traffic. The separation may be virtual in nature (virtual host, virtual NIC, virtual network) or physically separate.\n\nIf the application user interface and the application management interface are shared, this is a finding.'\n  desc 'fix', 'Configure the application so user interface to the application and management interface to the application is separated.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24244r493630_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222574'\n  tag rid: 'SV-222574r879631_rule'\n  tag stig_id: 'APSC-DV-002150'\n  tag gtitle: 'SRG-APP-000211'\n  tag fix_id: 'F-24233r493631_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84821', 'V-70199']\n  tag cci: ['CCI-001082']\n  tag nist: ['SC-2']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222574.rb"},"title":"The application user interface must be either physically or logically separated from data storage and management interfaces.","desc":"Application management functionality includes functions necessary for administration and requires privileged user access. Allowing non-privileged users to access application management functionality capabilities increases the risk that non-privileged users may obtain elevated privileges.\n\nThe separation of user functionality from information system management functionality is either physical or logical and is accomplished by using different computers, different central processing units, different instances of the operating system, different network addresses, different TCP/UDP ports, virtualization techniques, combinations of these methods, or other methods, as appropriate.\n\nAn example of this type of separation is observed in web administrative interfaces that use separate authentication methods for users of any other information system resources. This may include isolating the administrative interface on a different security domain and with additional access controls.","descriptions":{"default":"Application management functionality includes functions necessary for administration and requires privileged user access. Allowing non-privileged users to access application management functionality capabilities increases the risk that non-privileged users may obtain elevated privileges.\n\nThe separation of user functionality from information system management functionality is either physical or logical and is accomplished by using different computers, different central processing units, different instances of the operating system, different network addresses, different TCP/UDP ports, virtualization techniques, combinations of these methods, or other methods, as appropriate.\n\nAn example of this type of separation is observed in web administrative interfaces that use separate authentication methods for users of any other information system resources. This may include isolating the administrative interface on a different security domain and with additional access controls.","check":"Review the application documentation and interview the application administrator.\n\nReview the design documents and the interfaces used by the application.\n\nVerify that the application provides separate interfaces for user traffic and for management traffic. The separation may be virtual in nature (virtual host, virtual NIC, virtual network) or physically separate.\n\nIf the application user interface and the application management interface are shared, this is a finding.","fix":"Configure the application so user interface to the application and management interface to the application is separated."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24244r493630_chk","severity":"medium","gid":"V-222574","rid":"SV-222574r879631_rule","stig_id":"APSC-DV-002150","gtitle":"SRG-APP-000211","fix_id":"F-24233r493631_fix","documentable":null,"legacy":["SV-84821","V-70199"],"cci":["CCI-001082"],"nist":["SC-2"]}},{"id":"SV-222575","code":"control 'SV-222575' do\n  title 'The application must set the HTTPOnly flag on session cookies.'\n  desc 'HTTPOnly is a flag included in a Set-Cookie HTTP response header. If the HTTPOnly flag is included in the HTTP response header, the cookie cannot be accessed through client side scripts like JavaScript.\n\nIf the HTTPOnly flag is set, even if a cross-site scripting (XSS) flaw in the application exists, and a user accidentally accesses a link that exploits this flaw, the browser will not reveal the cookie to a third party.\n\nThe HTTPOnly setting is browser dependent however most popular browsers support the feature. If a browser does not support HTTPOnly and a website attempts to set an HTTPOnly cookie, the HTTPOnly flag will be ignored by the browser, thus creating a traditional, script accessible cookie. As a result, the cookie (typically the session cookie) becomes vulnerable to theft or modification by a malicious script running on the client system.'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify when session cookies are created.\n\nIdentify any mitigating controls the application developer may have implemented. Examples include utilizing a separate Web Application Firewall that is configured to provide this capability or configuring the web server with Mod_Security or ESAPI WAF with the HTTPOnly flag directives enabled.\n\nReference the most recent vulnerability scan documentation.\n\nVerify the configuration settings for the scan include web application checks including HTTPOnly tests.\n\nReview the scan results and determine if vulnerabilities related to HTTPOnly flag not being set for session cookies have been identified.\n\nUtilize a web browser or other web application diagnostic tool to view the session cookies the application sets on the client.\n\nInternet Explorer versions 8, 9, and 10 includes a utility called Developer tools.\n\nAccess the application website and establish an application session.\n\nAccess the page that sets the session cookie.\n\nPress “F12” to open Developer Tools.\n\nSelect \"cache\" and then \"view cookie information\".\n\nIdentify the session cookies. An example of an HTTPOnly session cookie is as follows:\n\nSet-Cookie: SessionId=z5ymkk45aworjo2l31tlhqqv; path=/; HttpOnly\n\nIf the application does not set the HTTPOnly flag on session cookies or if the application administrator cannot demonstrate mitigating controls, this is a finding.'\n  desc 'fix', 'Configure the application to set the HTTPOnly flag on session cookies.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24245r493633_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222575'\n  tag rid: 'SV-222575r879636_rule'\n  tag stig_id: 'APSC-DV-002210'\n  tag gtitle: 'SRG-APP-000219'\n  tag fix_id: 'F-24234r493634_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84823', 'V-70201']\n  tag cci: ['CCI-001184']\n  tag nist: ['SC-23']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222575.rb"},"title":"The application must set the HTTPOnly flag on session cookies.","desc":"HTTPOnly is a flag included in a Set-Cookie HTTP response header. If the HTTPOnly flag is included in the HTTP response header, the cookie cannot be accessed through client side scripts like JavaScript.\n\nIf the HTTPOnly flag is set, even if a cross-site scripting (XSS) flaw in the application exists, and a user accidentally accesses a link that exploits this flaw, the browser will not reveal the cookie to a third party.\n\nThe HTTPOnly setting is browser dependent however most popular browsers support the feature. If a browser does not support HTTPOnly and a website attempts to set an HTTPOnly cookie, the HTTPOnly flag will be ignored by the browser, thus creating a traditional, script accessible cookie. As a result, the cookie (typically the session cookie) becomes vulnerable to theft or modification by a malicious script running on the client system.","descriptions":{"default":"HTTPOnly is a flag included in a Set-Cookie HTTP response header. If the HTTPOnly flag is included in the HTTP response header, the cookie cannot be accessed through client side scripts like JavaScript.\n\nIf the HTTPOnly flag is set, even if a cross-site scripting (XSS) flaw in the application exists, and a user accidentally accesses a link that exploits this flaw, the browser will not reveal the cookie to a third party.\n\nThe HTTPOnly setting is browser dependent however most popular browsers support the feature. If a browser does not support HTTPOnly and a website attempts to set an HTTPOnly cookie, the HTTPOnly flag will be ignored by the browser, thus creating a traditional, script accessible cookie. As a result, the cookie (typically the session cookie) becomes vulnerable to theft or modification by a malicious script running on the client system.","check":"Review the application documentation and interview the application administrator to identify when session cookies are created.\n\nIdentify any mitigating controls the application developer may have implemented. Examples include utilizing a separate Web Application Firewall that is configured to provide this capability or configuring the web server with Mod_Security or ESAPI WAF with the HTTPOnly flag directives enabled.\n\nReference the most recent vulnerability scan documentation.\n\nVerify the configuration settings for the scan include web application checks including HTTPOnly tests.\n\nReview the scan results and determine if vulnerabilities related to HTTPOnly flag not being set for session cookies have been identified.\n\nUtilize a web browser or other web application diagnostic tool to view the session cookies the application sets on the client.\n\nInternet Explorer versions 8, 9, and 10 includes a utility called Developer tools.\n\nAccess the application website and establish an application session.\n\nAccess the page that sets the session cookie.\n\nPress “F12” to open Developer Tools.\n\nSelect \"cache\" and then \"view cookie information\".\n\nIdentify the session cookies. An example of an HTTPOnly session cookie is as follows:\n\nSet-Cookie: SessionId=z5ymkk45aworjo2l31tlhqqv; path=/; HttpOnly\n\nIf the application does not set the HTTPOnly flag on session cookies or if the application administrator cannot demonstrate mitigating controls, this is a finding.","fix":"Configure the application to set the HTTPOnly flag on session cookies."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24245r493633_chk","severity":"medium","gid":"V-222575","rid":"SV-222575r879636_rule","stig_id":"APSC-DV-002210","gtitle":"SRG-APP-000219","fix_id":"F-24234r493634_fix","documentable":null,"legacy":["SV-84823","V-70201"],"cci":["CCI-001184"],"nist":["SC-23"]}},{"id":"SV-222576","code":"control 'SV-222576' do\n  title 'The application must set the secure flag on session cookies.'\n  desc 'Many web development frameworks such as PHP, .NET, ASP as well as application servers include their own mechanisms for session management. Whenever possible it is recommended to utilize the provided session management framework.\n\nSetting the secure bit on session cookie ensures the session cookie is only sent via TLS/SSL HTTPS connections.  This helps to ensure confidentiality as the session cookie is not able to be viewed by unauthorized parties as it transits the network.\n\nSetting the secure flag on all cookies may also be warranted depending upon application design but at a minimum, the session cookie must always be secured.'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify when session cookies are created.\n\nIf vulnerability scan results are available, reference the most recent vulnerability scan results.\n\nVerify that the scan configuration includes checks for the secure flag on session cookies.  If scan configuration settings are not available, follow the manual procedure provided below.\n\nReview the scan results and determine if the secure flag not being set was identified as a vulnerability.\n\nTo manually perform the check, open a web browser, logon to the web application and use the web browser to view the new session cookie.  \n\nThe procedures used for viewing and clearing browser cookies will vary based upon the web browser used.  Providing steps for every browser is outside the scope of the STIG.  There are numerous sites that document how to view cookies using various web browsers.\n\nFor IE11:\nAlt-X >> Internet options >> General >> Settings >> View Files\n\nA windows explorer box will open that contains the contents of the Temporary Internet Files.  Browse the folder and locate the application session cookie(s).  View the contents of the cookie(s).\n\nIf the \"secure\" flag is not set on the session cookie, or if the vulnerability scan results indicate the application does not set the secure flag on cookies, this is a finding.'\n  desc 'fix', 'Configure the application to ensure the secure flag is set on session cookies.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24246r493636_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222576'\n  tag rid: 'SV-222576r879636_rule'\n  tag stig_id: 'APSC-DV-002220'\n  tag gtitle: 'SRG-APP-000219'\n  tag fix_id: 'F-24235r493637_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84825', 'V-70203']\n  tag cci: ['CCI-001184']\n  tag nist: ['SC-23']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222576.rb"},"title":"The application must set the secure flag on session cookies.","desc":"Many web development frameworks such as PHP, .NET, ASP as well as application servers include their own mechanisms for session management. Whenever possible it is recommended to utilize the provided session management framework.\n\nSetting the secure bit on session cookie ensures the session cookie is only sent via TLS/SSL HTTPS connections.  This helps to ensure confidentiality as the session cookie is not able to be viewed by unauthorized parties as it transits the network.\n\nSetting the secure flag on all cookies may also be warranted depending upon application design but at a minimum, the session cookie must always be secured.","descriptions":{"default":"Many web development frameworks such as PHP, .NET, ASP as well as application servers include their own mechanisms for session management. Whenever possible it is recommended to utilize the provided session management framework.\n\nSetting the secure bit on session cookie ensures the session cookie is only sent via TLS/SSL HTTPS connections.  This helps to ensure confidentiality as the session cookie is not able to be viewed by unauthorized parties as it transits the network.\n\nSetting the secure flag on all cookies may also be warranted depending upon application design but at a minimum, the session cookie must always be secured.","check":"Review the application documentation and interview the application administrator to identify when session cookies are created.\n\nIf vulnerability scan results are available, reference the most recent vulnerability scan results.\n\nVerify that the scan configuration includes checks for the secure flag on session cookies.  If scan configuration settings are not available, follow the manual procedure provided below.\n\nReview the scan results and determine if the secure flag not being set was identified as a vulnerability.\n\nTo manually perform the check, open a web browser, logon to the web application and use the web browser to view the new session cookie.  \n\nThe procedures used for viewing and clearing browser cookies will vary based upon the web browser used.  Providing steps for every browser is outside the scope of the STIG.  There are numerous sites that document how to view cookies using various web browsers.\n\nFor IE11:\nAlt-X >> Internet options >> General >> Settings >> View Files\n\nA windows explorer box will open that contains the contents of the Temporary Internet Files.  Browse the folder and locate the application session cookie(s).  View the contents of the cookie(s).\n\nIf the \"secure\" flag is not set on the session cookie, or if the vulnerability scan results indicate the application does not set the secure flag on cookies, this is a finding.","fix":"Configure the application to ensure the secure flag is set on session cookies."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24246r493636_chk","severity":"medium","gid":"V-222576","rid":"SV-222576r879636_rule","stig_id":"APSC-DV-002220","gtitle":"SRG-APP-000219","fix_id":"F-24235r493637_fix","documentable":null,"legacy":["SV-84825","V-70203"],"cci":["CCI-001184"],"nist":["SC-23"]}},{"id":"SV-222577","code":"control 'SV-222577' do\n  title 'The application must not expose session IDs.'\n  desc 'Authenticity protection provides protection against man-in-the-middle attacks/session hijacking and the insertion of false information into sessions.\n\nApplication communication sessions are protected utilizing transport encryption protocols, such as SSL or TLS. SSL/TLS provides web applications with a means to be able to authenticate user sessions and encrypt application traffic. Session authentication can be single (one-way) or mutual (two-way) in nature. Single authentication authenticates the server for the client, whereas mutual authentication provides a means for both the client and the server to authenticate each other.\n\nThis requirement applies to applications that utilize communications sessions. This includes, but is not limited to, web-based applications and Service-Oriented Architectures (SOA).\n\nThis requirement addresses communications protection at the application session, versus the network packet, and establishes grounds for confidence at both ends of communications sessions in ongoing identities of other parties and in the validity of information transmitted. Depending on the required degree of confidentiality and integrity, web services/SOA will require the use of SSL/TLS mutual authentication (two-way/bidirectional).'\n  desc 'check', 'Review the application documentation and configuration.\n\nInterview the application administrator and obtain implementation documentation identifying system architecture.\n\nIdentify the application communication paths. This includes system to system communication and client to server communication that transmit session identifiers over the network.\n\nHave the application administrator identify the methods and mechanisms used to protect the application session ID traffic. Acceptable methods include SSL/TLS both one-way and two-way and VPN tunnel.\n\nThe protections must be implemented on a point-to-point basis based upon the architecture of the application.\n\nFor example; a web application hosting static data will provide SSL/TLS encryption from web client to the web server. More complex designs may encrypt from application server to application server (if applicable) and application server to database as well.\n\nIf the session IDs are unencrypted across network segments, this is a finding.'\n  desc 'fix', 'Configure the application to protect session IDs from interception or from manipulation.'\n  impact 0.7\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24247r493639_chk'\n  tag severity: 'high'\n  tag gid: 'V-222577'\n  tag rid: 'SV-222577r879636_rule'\n  tag stig_id: 'APSC-DV-002230'\n  tag gtitle: 'SRG-APP-000219'\n  tag fix_id: 'F-24236r493640_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84827', 'V-70205']\n  tag cci: ['CCI-001184']\n  tag nist: ['SC-23']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222577.rb"},"title":"The application must not expose session IDs.","desc":"Authenticity protection provides protection against man-in-the-middle attacks/session hijacking and the insertion of false information into sessions.\n\nApplication communication sessions are protected utilizing transport encryption protocols, such as SSL or TLS. SSL/TLS provides web applications with a means to be able to authenticate user sessions and encrypt application traffic. Session authentication can be single (one-way) or mutual (two-way) in nature. Single authentication authenticates the server for the client, whereas mutual authentication provides a means for both the client and the server to authenticate each other.\n\nThis requirement applies to applications that utilize communications sessions. This includes, but is not limited to, web-based applications and Service-Oriented Architectures (SOA).\n\nThis requirement addresses communications protection at the application session, versus the network packet, and establishes grounds for confidence at both ends of communications sessions in ongoing identities of other parties and in the validity of information transmitted. Depending on the required degree of confidentiality and integrity, web services/SOA will require the use of SSL/TLS mutual authentication (two-way/bidirectional).","descriptions":{"default":"Authenticity protection provides protection against man-in-the-middle attacks/session hijacking and the insertion of false information into sessions.\n\nApplication communication sessions are protected utilizing transport encryption protocols, such as SSL or TLS. SSL/TLS provides web applications with a means to be able to authenticate user sessions and encrypt application traffic. Session authentication can be single (one-way) or mutual (two-way) in nature. Single authentication authenticates the server for the client, whereas mutual authentication provides a means for both the client and the server to authenticate each other.\n\nThis requirement applies to applications that utilize communications sessions. This includes, but is not limited to, web-based applications and Service-Oriented Architectures (SOA).\n\nThis requirement addresses communications protection at the application session, versus the network packet, and establishes grounds for confidence at both ends of communications sessions in ongoing identities of other parties and in the validity of information transmitted. Depending on the required degree of confidentiality and integrity, web services/SOA will require the use of SSL/TLS mutual authentication (two-way/bidirectional).","check":"Review the application documentation and configuration.\n\nInterview the application administrator and obtain implementation documentation identifying system architecture.\n\nIdentify the application communication paths. This includes system to system communication and client to server communication that transmit session identifiers over the network.\n\nHave the application administrator identify the methods and mechanisms used to protect the application session ID traffic. Acceptable methods include SSL/TLS both one-way and two-way and VPN tunnel.\n\nThe protections must be implemented on a point-to-point basis based upon the architecture of the application.\n\nFor example; a web application hosting static data will provide SSL/TLS encryption from web client to the web server. More complex designs may encrypt from application server to application server (if applicable) and application server to database as well.\n\nIf the session IDs are unencrypted across network segments, this is a finding.","fix":"Configure the application to protect session IDs from interception or from manipulation."},"impact":0.7,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24247r493639_chk","severity":"high","gid":"V-222577","rid":"SV-222577r879636_rule","stig_id":"APSC-DV-002230","gtitle":"SRG-APP-000219","fix_id":"F-24236r493640_fix","documentable":null,"legacy":["SV-84827","V-70205"],"cci":["CCI-001184"],"nist":["SC-23"]}},{"id":"SV-222578","code":"control 'SV-222578' do\n  title 'The application must destroy the session ID value and/or cookie on logoff or browser close.'\n  desc \"Many web development frameworks such as PHP, .NET, and ASP include their own mechanisms for session management. Whenever possible it is recommended to utilize the provided session management framework.\n\nSession cookies contain application session information that can be used to impersonate the web application user or hijack their application session. Once the user's session has terminated, these session IDs must be destroyed and not reused.\"\n  desc 'check', \"Review the application documentation and interview the application administrator.\n\nIdentify how the application destroys session IDs.\n\nIf using a web development framework, ask the application administrator to provide details on the framework's session configuration.\n\nReview framework configuration setting to determine how the session identifiers are destroyed.\n\nReview the client system and using a browser or other tool capable of viewing client cookies, identify cookies set by the application and verify that application session ID cookies are destroyed once the user has logged off or the browser has closed.\n\nIf the session IDs and associated cookies are not destroyed on logoff or browser close, this is a finding.\"\n  desc 'fix', 'Configure the application to destroy session ID cookies once the application session has terminated.'\n  impact 0.7\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24248r493642_chk'\n  tag severity: 'high'\n  tag gid: 'V-222578'\n  tag rid: 'SV-222578r879637_rule'\n  tag stig_id: 'APSC-DV-002240'\n  tag gtitle: 'SRG-APP-000220'\n  tag fix_id: 'F-24237r493643_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84829', 'V-70207']\n  tag cci: ['CCI-001185']\n  tag nist: ['SC-23 (1)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222578.rb"},"title":"The application must destroy the session ID value and/or cookie on logoff or browser close.","desc":"Many web development frameworks such as PHP, .NET, and ASP include their own mechanisms for session management. Whenever possible it is recommended to utilize the provided session management framework.\n\nSession cookies contain application session information that can be used to impersonate the web application user or hijack their application session. Once the user's session has terminated, these session IDs must be destroyed and not reused.","descriptions":{"default":"Many web development frameworks such as PHP, .NET, and ASP include their own mechanisms for session management. Whenever possible it is recommended to utilize the provided session management framework.\n\nSession cookies contain application session information that can be used to impersonate the web application user or hijack their application session. Once the user's session has terminated, these session IDs must be destroyed and not reused.","check":"Review the application documentation and interview the application administrator.\n\nIdentify how the application destroys session IDs.\n\nIf using a web development framework, ask the application administrator to provide details on the framework's session configuration.\n\nReview framework configuration setting to determine how the session identifiers are destroyed.\n\nReview the client system and using a browser or other tool capable of viewing client cookies, identify cookies set by the application and verify that application session ID cookies are destroyed once the user has logged off or the browser has closed.\n\nIf the session IDs and associated cookies are not destroyed on logoff or browser close, this is a finding.","fix":"Configure the application to destroy session ID cookies once the application session has terminated."},"impact":0.7,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24248r493642_chk","severity":"high","gid":"V-222578","rid":"SV-222578r879637_rule","stig_id":"APSC-DV-002240","gtitle":"SRG-APP-000220","fix_id":"F-24237r493643_fix","documentable":null,"legacy":["SV-84829","V-70207"],"cci":["CCI-001185"],"nist":["SC-23 (1)"]}},{"id":"SV-222579","code":"control 'SV-222579' do\n  title 'Applications must use system-generated session identifiers that protect against session fixation.'\n  desc 'Session fixation allows an attacker to hijack a valid user’s application session. The attack focuses on the manner in which a web application manages the user’s session ID. Applications become vulnerable when they do not assign a new session ID when authenticating users thereby using the existing session ID.\n\nMany web development frameworks such as PHP, .NET, and ASP include their own mechanisms for session management. Whenever possible it is recommended to utilize the provided session management framework.\n\nIn many cases, creating a new session ID cookie containing a new unique value whenever authentication is performed will address the issue of session fixation.\n\nAllowing the user to submit a session ID also introduces the risk that the application could be subject to a session fixation attack.'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify how the application generates user session IDs.\n\nApplication session testing is required in order to verify this requirement.\n\nRequest the latest application vulnerability or penetration test results.\n\nVerify the test configuration includes session handling vulnerability tests.\n\nIf the application is re-using/copying the users existing session ID that was created on one system in order to maintain user state when traversing multiple application servers in the same domain, this is not a finding.\n\nIf the session testing results indicate application session IDs are re-used after the user has logged out, this is a finding.'\n  desc 'fix', 'Design the application to generate new session IDs with unique values when authenticating user sessions.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24249r493645_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222579'\n  tag rid: 'SV-222579r879638_rule'\n  tag stig_id: 'APSC-DV-002250'\n  tag gtitle: 'SRG-APP-000223'\n  tag fix_id: 'F-24238r493646_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84831', 'V-70209']\n  tag cci: ['CCI-001664']\n  tag nist: ['SC-23 (3)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222579.rb"},"title":"Applications must use system-generated session identifiers that protect against session fixation.","desc":"Session fixation allows an attacker to hijack a valid user’s application session. The attack focuses on the manner in which a web application manages the user’s session ID. Applications become vulnerable when they do not assign a new session ID when authenticating users thereby using the existing session ID.\n\nMany web development frameworks such as PHP, .NET, and ASP include their own mechanisms for session management. Whenever possible it is recommended to utilize the provided session management framework.\n\nIn many cases, creating a new session ID cookie containing a new unique value whenever authentication is performed will address the issue of session fixation.\n\nAllowing the user to submit a session ID also introduces the risk that the application could be subject to a session fixation attack.","descriptions":{"default":"Session fixation allows an attacker to hijack a valid user’s application session. The attack focuses on the manner in which a web application manages the user’s session ID. Applications become vulnerable when they do not assign a new session ID when authenticating users thereby using the existing session ID.\n\nMany web development frameworks such as PHP, .NET, and ASP include their own mechanisms for session management. Whenever possible it is recommended to utilize the provided session management framework.\n\nIn many cases, creating a new session ID cookie containing a new unique value whenever authentication is performed will address the issue of session fixation.\n\nAllowing the user to submit a session ID also introduces the risk that the application could be subject to a session fixation attack.","check":"Review the application documentation and interview the application administrator to identify how the application generates user session IDs.\n\nApplication session testing is required in order to verify this requirement.\n\nRequest the latest application vulnerability or penetration test results.\n\nVerify the test configuration includes session handling vulnerability tests.\n\nIf the application is re-using/copying the users existing session ID that was created on one system in order to maintain user state when traversing multiple application servers in the same domain, this is not a finding.\n\nIf the session testing results indicate application session IDs are re-used after the user has logged out, this is a finding.","fix":"Design the application to generate new session IDs with unique values when authenticating user sessions."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24249r493645_chk","severity":"medium","gid":"V-222579","rid":"SV-222579r879638_rule","stig_id":"APSC-DV-002250","gtitle":"SRG-APP-000223","fix_id":"F-24238r493646_fix","documentable":null,"legacy":["SV-84831","V-70209"],"cci":["CCI-001664"],"nist":["SC-23 (3)"]}},{"id":"SV-222580","code":"control 'SV-222580' do\n  title 'Applications must validate session identifiers.'\n  desc 'Many web development frameworks such as PHP, .NET, and ASP include their own mechanisms for session management. Whenever possible it is recommended to utilize the provided session management framework.'\n  desc 'check', \"Review the application documentation and interview the application administrator.\n\nIdentify how the application validates session IDs.\n\nIf using a web development framework, ask the application administrator to provide details on the framework's session configuration as it relates to session validation.\n\nIf the application is not configured to validate user session identifiers, this is a finding.\"\n  desc 'fix', 'Configure the application to configure user session identifiers.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24250r493648_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222580'\n  tag rid: 'SV-222580r879638_rule'\n  tag stig_id: 'APSC-DV-002260'\n  tag gtitle: 'SRG-APP-000223'\n  tag fix_id: 'F-24239r493649_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84833', 'V-70211']\n  tag cci: ['CCI-001664']\n  tag nist: ['SC-23 (3)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222580.rb"},"title":"Applications must validate session identifiers.","desc":"Many web development frameworks such as PHP, .NET, and ASP include their own mechanisms for session management. Whenever possible it is recommended to utilize the provided session management framework.","descriptions":{"default":"Many web development frameworks such as PHP, .NET, and ASP include their own mechanisms for session management. Whenever possible it is recommended to utilize the provided session management framework.","check":"Review the application documentation and interview the application administrator.\n\nIdentify how the application validates session IDs.\n\nIf using a web development framework, ask the application administrator to provide details on the framework's session configuration as it relates to session validation.\n\nIf the application is not configured to validate user session identifiers, this is a finding.","fix":"Configure the application to configure user session identifiers."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24250r493648_chk","severity":"medium","gid":"V-222580","rid":"SV-222580r879638_rule","stig_id":"APSC-DV-002260","gtitle":"SRG-APP-000223","fix_id":"F-24239r493649_fix","documentable":null,"legacy":["SV-84833","V-70211"],"cci":["CCI-001664"],"nist":["SC-23 (3)"]}},{"id":"SV-222581","code":"control 'SV-222581' do\n  title 'Applications must not use URL embedded session IDs.'\n  desc 'Many web development frameworks such as PHP, .NET, and ASP include their own mechanisms for session management. Whenever possible it is recommended to utilize the provided session management framework.\n\nUsing a session ID that is copied to the URL introduces the risks that the session ID information will be written to log files, made available in browser history files, or made publicly available within the URL.\n\nUsing cookies to establish session ID information is desired.'\n  desc 'check', \"Review the application documentation and interview the application administrator.\n\nIdentify how the application generates session IDs.\n\nIf using a web development framework, ask the application administrator to provide details on the framework's session configuration.\n\nReview the framework configuration setting to determine how the session identifiers are created.\n\nIdentify any compensating controls that may be leveraged to minimize risk to user sessions.\n\nIf the framework or the application is configured to transmit cookies within the URL or via URL rewriting, or if the session ID is created using a GET method and there are no compensating controls configured to address user session security, this is a finding.\"\n  desc 'fix', 'Configure the application to transmit session ID information via cookies.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24251r493651_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222581'\n  tag rid: 'SV-222581r879638_rule'\n  tag stig_id: 'APSC-DV-002270'\n  tag gtitle: 'SRG-APP-000223'\n  tag fix_id: 'F-24240r493652_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84835', 'V-70213']\n  tag cci: ['CCI-001664']\n  tag nist: ['SC-23 (3)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222581.rb"},"title":"Applications must not use URL embedded session IDs.","desc":"Many web development frameworks such as PHP, .NET, and ASP include their own mechanisms for session management. Whenever possible it is recommended to utilize the provided session management framework.\n\nUsing a session ID that is copied to the URL introduces the risks that the session ID information will be written to log files, made available in browser history files, or made publicly available within the URL.\n\nUsing cookies to establish session ID information is desired.","descriptions":{"default":"Many web development frameworks such as PHP, .NET, and ASP include their own mechanisms for session management. Whenever possible it is recommended to utilize the provided session management framework.\n\nUsing a session ID that is copied to the URL introduces the risks that the session ID information will be written to log files, made available in browser history files, or made publicly available within the URL.\n\nUsing cookies to establish session ID information is desired.","check":"Review the application documentation and interview the application administrator.\n\nIdentify how the application generates session IDs.\n\nIf using a web development framework, ask the application administrator to provide details on the framework's session configuration.\n\nReview the framework configuration setting to determine how the session identifiers are created.\n\nIdentify any compensating controls that may be leveraged to minimize risk to user sessions.\n\nIf the framework or the application is configured to transmit cookies within the URL or via URL rewriting, or if the session ID is created using a GET method and there are no compensating controls configured to address user session security, this is a finding.","fix":"Configure the application to transmit session ID information via cookies."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24251r493651_chk","severity":"medium","gid":"V-222581","rid":"SV-222581r879638_rule","stig_id":"APSC-DV-002270","gtitle":"SRG-APP-000223","fix_id":"F-24240r493652_fix","documentable":null,"legacy":["SV-84835","V-70213"],"cci":["CCI-001664"],"nist":["SC-23 (3)"]}},{"id":"SV-222582","code":"control 'SV-222582' do\n  title 'The application must not re-use or recycle session IDs.'\n  desc 'Many web development frameworks such as PHP, .NET, and ASP include their own mechanisms for session management. Whenever possible it is recommended to utilize the provided session management framework.\n\nSession identifiers are assigned to application users so they can be uniquely identified. This allows the user to customize their web application experience and also allows the developer to differentiate between users thereby providing the opportunity to customize the user’s features and functions.\n\nOnce a user has logged out of the application or had their session terminated, their session IDs should not be re-used. Session IDs should also not be used for other purposes such as creating unique file names and they should also not be re-assigned to other users once the original user has logged out or otherwise quit the application.\n\nAllowing session ID reuse increases the risk of replay attacks.\n\nSession testing is a detailed undertaking and is usually done in the course of a web application vulnerability or penetration assessment.'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify how the application generates user session IDs.\n\nApplication session testing is required in order to verify this requirement.\n\nRequest the latest application vulnerability or penetration test results.\n\nVerify the test configuration includes session handling vulnerability tests.\n\nIf the application is re-using/copying the users existing session ID that was created on one system in order to maintain user state when traversing multiple application servers in the same domain, this is not a finding.\n\nIf the session testing results indicate application session IDs are re-used after the user has logged out, this is a finding.'\n  desc 'fix', 'Design the application to not re-use session IDs.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24252r493654_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222582'\n  tag rid: 'SV-222582r879638_rule'\n  tag stig_id: 'APSC-DV-002280'\n  tag gtitle: 'SRG-APP-000223'\n  tag fix_id: 'F-24241r493655_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84837', 'V-70215']\n  tag cci: ['CCI-001664']\n  tag nist: ['SC-23 (3)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222582.rb"},"title":"The application must not re-use or recycle session IDs.","desc":"Many web development frameworks such as PHP, .NET, and ASP include their own mechanisms for session management. Whenever possible it is recommended to utilize the provided session management framework.\n\nSession identifiers are assigned to application users so they can be uniquely identified. This allows the user to customize their web application experience and also allows the developer to differentiate between users thereby providing the opportunity to customize the user’s features and functions.\n\nOnce a user has logged out of the application or had their session terminated, their session IDs should not be re-used. Session IDs should also not be used for other purposes such as creating unique file names and they should also not be re-assigned to other users once the original user has logged out or otherwise quit the application.\n\nAllowing session ID reuse increases the risk of replay attacks.\n\nSession testing is a detailed undertaking and is usually done in the course of a web application vulnerability or penetration assessment.","descriptions":{"default":"Many web development frameworks such as PHP, .NET, and ASP include their own mechanisms for session management. Whenever possible it is recommended to utilize the provided session management framework.\n\nSession identifiers are assigned to application users so they can be uniquely identified. This allows the user to customize their web application experience and also allows the developer to differentiate between users thereby providing the opportunity to customize the user’s features and functions.\n\nOnce a user has logged out of the application or had their session terminated, their session IDs should not be re-used. Session IDs should also not be used for other purposes such as creating unique file names and they should also not be re-assigned to other users once the original user has logged out or otherwise quit the application.\n\nAllowing session ID reuse increases the risk of replay attacks.\n\nSession testing is a detailed undertaking and is usually done in the course of a web application vulnerability or penetration assessment.","check":"Review the application documentation and interview the application administrator to identify how the application generates user session IDs.\n\nApplication session testing is required in order to verify this requirement.\n\nRequest the latest application vulnerability or penetration test results.\n\nVerify the test configuration includes session handling vulnerability tests.\n\nIf the application is re-using/copying the users existing session ID that was created on one system in order to maintain user state when traversing multiple application servers in the same domain, this is not a finding.\n\nIf the session testing results indicate application session IDs are re-used after the user has logged out, this is a finding.","fix":"Design the application to not re-use session IDs."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24252r493654_chk","severity":"medium","gid":"V-222582","rid":"SV-222582r879638_rule","stig_id":"APSC-DV-002280","gtitle":"SRG-APP-000223","fix_id":"F-24241r493655_fix","documentable":null,"legacy":["SV-84837","V-70215"],"cci":["CCI-001664"],"nist":["SC-23 (3)"]}},{"id":"SV-222583","code":"control 'SV-222583' do\n  title 'The application must use the Federal Information Processing Standard (FIPS) 140-2-validated cryptographic modules and random number generator if the application implements encryption, key exchange, digital signature, and hash functionality.'\n  desc 'Sequentially generated session IDs can be easily guessed by an attacker. Employing the concept of randomness in the generation of unique session identifiers helps to protect against brute-force attacks to determine future session identifiers.\n\nUnique session IDs address man-in-the-middle attacks, including session hijacking or insertion of false information into a session. If the attacker is unable to identify or guess the session information related to pending application traffic, they will have more difficulty in hijacking the session or otherwise manipulating valid sessions.\n\nThis requirement focuses on communications protection for the application session rather than for the network packet.\n\nThis requirement applies to applications that utilize communications sessions. This includes, but is not limited to, web-based applications and Service-Oriented Architectures (SOA).'\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nIdentify if the application implements encryption, key exchange, digital signature, or hash functionality.\n\nIdentify the cryptographic modules utilized by the application for these functions. The application may be designed to use the crypto functionality of the underlying OS or it may be a product of the application itself.\n\nIdentify the cryptographic service provider utilized by the application and reference the NIST validation website to ensure the algorithms utilized are approved.\n\nhttp://csrc.nist.gov/groups/STM/cmvp/documents/140-1/140val-all.htm\n\nIf the application does not use FIPS 140-2-approved encryption algorithms, this is a finding.'\n  desc 'fix', 'Configure the application to use FIPS 140-2-validated cryptographic modules when the application implements encryption, key exchange, digital signatures, random number generators, and hash functionality.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24253r493657_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222583'\n  tag rid: 'SV-222583r879639_rule'\n  tag stig_id: 'APSC-DV-002290'\n  tag gtitle: 'SRG-APP-000224'\n  tag fix_id: 'F-24242r493658_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84839', 'V-70217']\n  tag cci: ['CCI-001188']\n  tag nist: ['SC-23 (3)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222583.rb"},"title":"The application must use the Federal Information Processing Standard (FIPS) 140-2-validated cryptographic modules and random number generator if the application implements encryption, key exchange, digital signature, and hash functionality.","desc":"Sequentially generated session IDs can be easily guessed by an attacker. Employing the concept of randomness in the generation of unique session identifiers helps to protect against brute-force attacks to determine future session identifiers.\n\nUnique session IDs address man-in-the-middle attacks, including session hijacking or insertion of false information into a session. If the attacker is unable to identify or guess the session information related to pending application traffic, they will have more difficulty in hijacking the session or otherwise manipulating valid sessions.\n\nThis requirement focuses on communications protection for the application session rather than for the network packet.\n\nThis requirement applies to applications that utilize communications sessions. This includes, but is not limited to, web-based applications and Service-Oriented Architectures (SOA).","descriptions":{"default":"Sequentially generated session IDs can be easily guessed by an attacker. Employing the concept of randomness in the generation of unique session identifiers helps to protect against brute-force attacks to determine future session identifiers.\n\nUnique session IDs address man-in-the-middle attacks, including session hijacking or insertion of false information into a session. If the attacker is unable to identify or guess the session information related to pending application traffic, they will have more difficulty in hijacking the session or otherwise manipulating valid sessions.\n\nThis requirement focuses on communications protection for the application session rather than for the network packet.\n\nThis requirement applies to applications that utilize communications sessions. This includes, but is not limited to, web-based applications and Service-Oriented Architectures (SOA).","check":"Review the application documentation and interview the application administrator.\n\nIdentify if the application implements encryption, key exchange, digital signature, or hash functionality.\n\nIdentify the cryptographic modules utilized by the application for these functions. The application may be designed to use the crypto functionality of the underlying OS or it may be a product of the application itself.\n\nIdentify the cryptographic service provider utilized by the application and reference the NIST validation website to ensure the algorithms utilized are approved.\n\nhttp://csrc.nist.gov/groups/STM/cmvp/documents/140-1/140val-all.htm\n\nIf the application does not use FIPS 140-2-approved encryption algorithms, this is a finding.","fix":"Configure the application to use FIPS 140-2-validated cryptographic modules when the application implements encryption, key exchange, digital signatures, random number generators, and hash functionality."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24253r493657_chk","severity":"medium","gid":"V-222583","rid":"SV-222583r879639_rule","stig_id":"APSC-DV-002290","gtitle":"SRG-APP-000224","fix_id":"F-24242r493658_fix","documentable":null,"legacy":["SV-84839","V-70217"],"cci":["CCI-001188"],"nist":["SC-23 (3)"]}},{"id":"SV-222584","code":"control 'SV-222584' do\n  title 'The application must only allow the use of DoD-approved certificate authorities for verification of the establishment of protected sessions.'\n  desc 'Untrusted Certificate Authorities (CA) can issue certificates, but they may be issued by organizations or individuals that seek to compromise DoD systems or by organizations with insufficient security controls. If the CA used for verifying the certificate is not a DoD-approved CA, trust of this CA has not been established.\n\nThe DoD will only accept PKI certificates obtained from a DoD-approved internal or external certificate authority. Reliance on CAs for the establishment of secure sessions includes, for example, the use of SSL/TLS certificates.\n\nThis requirement focuses on communications protection for the application session rather than for the network packet.\n\nThis requirement applies to applications that utilize communications sessions. This includes, but is not limited to, web-based applications and Service-Oriented Architectures (SOA).'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify certificate location.\n\nInternet Explorer can be used to view certificate information:\n\nSelect “Tools”\nSelect “Internet Options”\nSelect “Content” tab\nSelect “Certificates”\nSelect the certificate used for authentication:\n\nClick “View”\nSelect “Details” tab\nSelect “Issuer”\n\nIf the application utilizes PKI certificates other than DoD-approved PKI and ECA certificates, this is a finding.'\n  desc 'fix', 'Configure the application to utilize DoD-approved PKI established CAs when verifying DoD-signed certificates.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24254r493660_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222584'\n  tag rid: 'SV-222584r879798_rule'\n  tag stig_id: 'APSC-DV-002300'\n  tag gtitle: 'SRG-APP-000427'\n  tag fix_id: 'F-24243r493661_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84841', 'V-70219']\n  tag cci: ['CCI-002470']\n  tag nist: ['SC-23 (5)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222584.rb"},"title":"The application must only allow the use of DoD-approved certificate authorities for verification of the establishment of protected sessions.","desc":"Untrusted Certificate Authorities (CA) can issue certificates, but they may be issued by organizations or individuals that seek to compromise DoD systems or by organizations with insufficient security controls. If the CA used for verifying the certificate is not a DoD-approved CA, trust of this CA has not been established.\n\nThe DoD will only accept PKI certificates obtained from a DoD-approved internal or external certificate authority. Reliance on CAs for the establishment of secure sessions includes, for example, the use of SSL/TLS certificates.\n\nThis requirement focuses on communications protection for the application session rather than for the network packet.\n\nThis requirement applies to applications that utilize communications sessions. This includes, but is not limited to, web-based applications and Service-Oriented Architectures (SOA).","descriptions":{"default":"Untrusted Certificate Authorities (CA) can issue certificates, but they may be issued by organizations or individuals that seek to compromise DoD systems or by organizations with insufficient security controls. If the CA used for verifying the certificate is not a DoD-approved CA, trust of this CA has not been established.\n\nThe DoD will only accept PKI certificates obtained from a DoD-approved internal or external certificate authority. Reliance on CAs for the establishment of secure sessions includes, for example, the use of SSL/TLS certificates.\n\nThis requirement focuses on communications protection for the application session rather than for the network packet.\n\nThis requirement applies to applications that utilize communications sessions. This includes, but is not limited to, web-based applications and Service-Oriented Architectures (SOA).","check":"Review the application documentation and interview the application administrator to identify certificate location.\n\nInternet Explorer can be used to view certificate information:\n\nSelect “Tools”\nSelect “Internet Options”\nSelect “Content” tab\nSelect “Certificates”\nSelect the certificate used for authentication:\n\nClick “View”\nSelect “Details” tab\nSelect “Issuer”\n\nIf the application utilizes PKI certificates other than DoD-approved PKI and ECA certificates, this is a finding.","fix":"Configure the application to utilize DoD-approved PKI established CAs when verifying DoD-signed certificates."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24254r493660_chk","severity":"medium","gid":"V-222584","rid":"SV-222584r879798_rule","stig_id":"APSC-DV-002300","gtitle":"SRG-APP-000427","fix_id":"F-24243r493661_fix","documentable":null,"legacy":["SV-84841","V-70219"],"cci":["CCI-002470"],"nist":["SC-23 (5)"]}},{"id":"SV-222585","code":"control 'SV-222585' do\n  title 'The application must fail to a secure state if system initialization fails, shutdown fails, or aborts fail.'\n  desc 'Failure to a known safe state helps prevent systems from failing to a state that may cause loss of data or unauthorized access to system resources. Applications or systems that fail suddenly and with no incorporated failure state planning may leave the hosting system available but with a reduced security protection capability. Preserving information system state information also facilitates system restart and return to the operational mode of the organization with less disruption of mission-essential processes.\n\nIn general, application security mechanisms should be designed so that a failure will follow the same execution path as disallowing the operation. For example, security methods, such as isAuthorized(), isAuthenticated(), and validate(), should all return false if there is an exception during processing. If security controls can throw exceptions, they must be very clear about exactly what that condition means.\n\nAbort refers to stopping a program or function before it has finished naturally. The term abort refers to both requested and unexpected terminations.'\n  desc 'check', 'Review application design documentation, vulnerability scanner reports and interview application administrator to identify application components.\n\nThe design of the application should account for the following:\n\n- Connections to databases are left open\n- Access control mechanisms are disabled\n- Data left in temporary locations\n\nTesting application failure will require taking down parts of the application.\n\nReview the vulnerability assessment configuration settings included in vulnerability report.\n\nExamine the application test plans and procedures to determine if this type of failure was previously tested.\n\nIf test plans exist, validate the tests by performing a subset of the checks.\n\nIf test plans do not exist, an application failure must be simulated.\n\nSimulate a failure. This can be accomplished by stopping the web server service and/or the database service. Also, for applications using web services stop the web service and/or the database.\n\nCheck to ensure that application data is still protected. Some examples of tests follow:\n\n- Try to submit SQL queries to the database. Verify that the database requires authentication before returning data.\n- Try to read the application source files; access should not be granted to these files because the application is not operating.\n- Try to open database files; data should not be available because the application is not operational.\n\nIf the application fails in such a way that the application security controls are rendered inoperable, this is a finding.'\n  desc 'fix', 'Fix any vulnerability found when the application is an insecure state (initialization, shutdown and aborts).'\n  impact 0.7\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24255r493663_chk'\n  tag severity: 'high'\n  tag gid: 'V-222585'\n  tag rid: 'SV-222585r879640_rule'\n  tag stig_id: 'APSC-DV-002310'\n  tag gtitle: 'SRG-APP-000225'\n  tag fix_id: 'F-24244r493664_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84843', 'V-70221']\n  tag cci: ['CCI-001190']\n  tag nist: ['SC-24']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222585.rb"},"title":"The application must fail to a secure state if system initialization fails, shutdown fails, or aborts fail.","desc":"Failure to a known safe state helps prevent systems from failing to a state that may cause loss of data or unauthorized access to system resources. Applications or systems that fail suddenly and with no incorporated failure state planning may leave the hosting system available but with a reduced security protection capability. Preserving information system state information also facilitates system restart and return to the operational mode of the organization with less disruption of mission-essential processes.\n\nIn general, application security mechanisms should be designed so that a failure will follow the same execution path as disallowing the operation. For example, security methods, such as isAuthorized(), isAuthenticated(), and validate(), should all return false if there is an exception during processing. If security controls can throw exceptions, they must be very clear about exactly what that condition means.\n\nAbort refers to stopping a program or function before it has finished naturally. The term abort refers to both requested and unexpected terminations.","descriptions":{"default":"Failure to a known safe state helps prevent systems from failing to a state that may cause loss of data or unauthorized access to system resources. Applications or systems that fail suddenly and with no incorporated failure state planning may leave the hosting system available but with a reduced security protection capability. Preserving information system state information also facilitates system restart and return to the operational mode of the organization with less disruption of mission-essential processes.\n\nIn general, application security mechanisms should be designed so that a failure will follow the same execution path as disallowing the operation. For example, security methods, such as isAuthorized(), isAuthenticated(), and validate(), should all return false if there is an exception during processing. If security controls can throw exceptions, they must be very clear about exactly what that condition means.\n\nAbort refers to stopping a program or function before it has finished naturally. The term abort refers to both requested and unexpected terminations.","check":"Review application design documentation, vulnerability scanner reports and interview application administrator to identify application components.\n\nThe design of the application should account for the following:\n\n- Connections to databases are left open\n- Access control mechanisms are disabled\n- Data left in temporary locations\n\nTesting application failure will require taking down parts of the application.\n\nReview the vulnerability assessment configuration settings included in vulnerability report.\n\nExamine the application test plans and procedures to determine if this type of failure was previously tested.\n\nIf test plans exist, validate the tests by performing a subset of the checks.\n\nIf test plans do not exist, an application failure must be simulated.\n\nSimulate a failure. This can be accomplished by stopping the web server service and/or the database service. Also, for applications using web services stop the web service and/or the database.\n\nCheck to ensure that application data is still protected. Some examples of tests follow:\n\n- Try to submit SQL queries to the database. Verify that the database requires authentication before returning data.\n- Try to read the application source files; access should not be granted to these files because the application is not operating.\n- Try to open database files; data should not be available because the application is not operational.\n\nIf the application fails in such a way that the application security controls are rendered inoperable, this is a finding.","fix":"Fix any vulnerability found when the application is an insecure state (initialization, shutdown and aborts)."},"impact":0.7,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24255r493663_chk","severity":"high","gid":"V-222585","rid":"SV-222585r879640_rule","stig_id":"APSC-DV-002310","gtitle":"SRG-APP-000225","fix_id":"F-24244r493664_fix","documentable":null,"legacy":["SV-84843","V-70221"],"cci":["CCI-001190"],"nist":["SC-24"]}},{"id":"SV-222586","code":"control 'SV-222586' do\n  title 'In the event of a system failure, applications must preserve any information necessary to determine cause of failure and any information necessary to return to operations with least disruption to mission processes.'\n  desc 'Failure to a known state can address safety or security in accordance with the mission/business needs of the organization. Failure to a known secure state helps prevent a loss of confidentiality, integrity, or availability in the event of a failure of the information system or a component of the system. Preserving application state information helps to facilitate application restart and return to the operational mode of the organization with less disruption to mission-essential processes.'\n  desc 'check', 'Review application documentation, interview application administrator to identify how the application logs error events.\n\nThe application operational requirements documentation should provide the specific information that must be preserved in order to return the application back into operation as quickly and efficiently as possible. The application administrator will need to identify and provide the information based upon operational requirements documents.\n\nApplication diagnostic information should be kept in logs for evaluation and investigation into root cause.\n\nIf documentation is provided stating that no particular information needs to be retained in order to expediently bring the application back online, this is not a finding.\n\nIf the application does not log the data required to determine root cause of application failure, or if information specified as required in order to expediently bring the application back online is not retained, this is a finding.'\n  desc 'fix', 'Create operational configuration documentation that identifies information needed for the application to return back into service or specify no such data is required, and retain data required to determine root cause of application failures.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24256r493666_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222586'\n  tag rid: 'SV-222586r879641_rule'\n  tag stig_id: 'APSC-DV-002320'\n  tag gtitle: 'SRG-APP-000226'\n  tag fix_id: 'F-24245r493667_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84845', 'V-70223']\n  tag cci: ['CCI-001665']\n  tag nist: ['SC-24']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222586.rb"},"title":"In the event of a system failure, applications must preserve any information necessary to determine cause of failure and any information necessary to return to operations with least disruption to mission processes.","desc":"Failure to a known state can address safety or security in accordance with the mission/business needs of the organization. Failure to a known secure state helps prevent a loss of confidentiality, integrity, or availability in the event of a failure of the information system or a component of the system. Preserving application state information helps to facilitate application restart and return to the operational mode of the organization with less disruption to mission-essential processes.","descriptions":{"default":"Failure to a known state can address safety or security in accordance with the mission/business needs of the organization. Failure to a known secure state helps prevent a loss of confidentiality, integrity, or availability in the event of a failure of the information system or a component of the system. Preserving application state information helps to facilitate application restart and return to the operational mode of the organization with less disruption to mission-essential processes.","check":"Review application documentation, interview application administrator to identify how the application logs error events.\n\nThe application operational requirements documentation should provide the specific information that must be preserved in order to return the application back into operation as quickly and efficiently as possible. The application administrator will need to identify and provide the information based upon operational requirements documents.\n\nApplication diagnostic information should be kept in logs for evaluation and investigation into root cause.\n\nIf documentation is provided stating that no particular information needs to be retained in order to expediently bring the application back online, this is not a finding.\n\nIf the application does not log the data required to determine root cause of application failure, or if information specified as required in order to expediently bring the application back online is not retained, this is a finding.","fix":"Create operational configuration documentation that identifies information needed for the application to return back into service or specify no such data is required, and retain data required to determine root cause of application failures."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24256r493666_chk","severity":"medium","gid":"V-222586","rid":"SV-222586r879641_rule","stig_id":"APSC-DV-002320","gtitle":"SRG-APP-000226","fix_id":"F-24245r493667_fix","documentable":null,"legacy":["SV-84845","V-70223"],"cci":["CCI-001665"],"nist":["SC-24"]}},{"id":"SV-222587","code":"control 'SV-222587' do\n  title 'The application must protect the confidentiality and integrity of stored information when required by DoD policy or the information owner.'\n  desc 'Information at rest refers to the state of information when it is located on a secondary storage device (e.g., disk drive and tape drive) within an organizational information system. Mobile devices, laptops, desktops, and storage devices can be either lost or stolen, and the contents of their data storage (e.g., hard drives and non-volatile memory) can be read, copied, or altered. \n\nApplications and application users generate information throughout the course of their application use, including data that is stored in areas of volatile memory.  Volatile memory must not be overlooked when assigning protections.\n\nThis requirement addresses protection of user-generated data, as well as, operating system-specific configuration data. \n\nApplications must employ mechanisms to achieve confidentiality and integrity protections, as appropriate, in accordance with the security category and/or classification of the information.\n\nThis can include segmenting and controlling access to the data such as utilizing file permissions to restrict access, using role based controls to restrict access or applying a cryptographic hash to the data and evaluating hash values for changes made to data.'\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nIdentify the data processed by the application and the accompanying data protection requirements.\n\nDetermine if the data owner has specified stored data protection requirements.\n\nDetermine if the application is processing publicly releasable, FOUO or classified stored data.\n\nDetermine if the application configuration information contains sensitive information.\n\nAccess the data repository and have the application administrator, application developer or designer identify the data integrity and confidentiality protections utilized to protect stored data.\n\nIf the application processes classified data or if the data owner has specified data protection requirements and the application administrator is unable to demonstrate how the data is protected, this is a finding.'\n  desc 'fix', 'Identify data elements that require protection. Document the data types and specify protection requirements and methods used.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24257r493669_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222587'\n  tag rid: 'SV-222587r879642_rule'\n  tag stig_id: 'APSC-DV-002330'\n  tag gtitle: 'SRG-APP-000231'\n  tag fix_id: 'F-24246r493670_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84847', 'V-70225']\n  tag cci: ['CCI-001199']\n  tag nist: ['SC-28']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222587.rb"},"title":"The application must protect the confidentiality and integrity of stored information when required by DoD policy or the information owner.","desc":"Information at rest refers to the state of information when it is located on a secondary storage device (e.g., disk drive and tape drive) within an organizational information system. Mobile devices, laptops, desktops, and storage devices can be either lost or stolen, and the contents of their data storage (e.g., hard drives and non-volatile memory) can be read, copied, or altered. \n\nApplications and application users generate information throughout the course of their application use, including data that is stored in areas of volatile memory.  Volatile memory must not be overlooked when assigning protections.\n\nThis requirement addresses protection of user-generated data, as well as, operating system-specific configuration data. \n\nApplications must employ mechanisms to achieve confidentiality and integrity protections, as appropriate, in accordance with the security category and/or classification of the information.\n\nThis can include segmenting and controlling access to the data such as utilizing file permissions to restrict access, using role based controls to restrict access or applying a cryptographic hash to the data and evaluating hash values for changes made to data.","descriptions":{"default":"Information at rest refers to the state of information when it is located on a secondary storage device (e.g., disk drive and tape drive) within an organizational information system. Mobile devices, laptops, desktops, and storage devices can be either lost or stolen, and the contents of their data storage (e.g., hard drives and non-volatile memory) can be read, copied, or altered. \n\nApplications and application users generate information throughout the course of their application use, including data that is stored in areas of volatile memory.  Volatile memory must not be overlooked when assigning protections.\n\nThis requirement addresses protection of user-generated data, as well as, operating system-specific configuration data. \n\nApplications must employ mechanisms to achieve confidentiality and integrity protections, as appropriate, in accordance with the security category and/or classification of the information.\n\nThis can include segmenting and controlling access to the data such as utilizing file permissions to restrict access, using role based controls to restrict access or applying a cryptographic hash to the data and evaluating hash values for changes made to data.","check":"Review the application documentation and interview the application administrator.\n\nIdentify the data processed by the application and the accompanying data protection requirements.\n\nDetermine if the data owner has specified stored data protection requirements.\n\nDetermine if the application is processing publicly releasable, FOUO or classified stored data.\n\nDetermine if the application configuration information contains sensitive information.\n\nAccess the data repository and have the application administrator, application developer or designer identify the data integrity and confidentiality protections utilized to protect stored data.\n\nIf the application processes classified data or if the data owner has specified data protection requirements and the application administrator is unable to demonstrate how the data is protected, this is a finding.","fix":"Identify data elements that require protection. Document the data types and specify protection requirements and methods used."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24257r493669_chk","severity":"medium","gid":"V-222587","rid":"SV-222587r879642_rule","stig_id":"APSC-DV-002330","gtitle":"SRG-APP-000231","fix_id":"F-24246r493670_fix","documentable":null,"legacy":["SV-84847","V-70225"],"cci":["CCI-001199"],"nist":["SC-28"]}},{"id":"SV-222588","code":"control 'SV-222588' do\n  title 'The application must implement approved cryptographic mechanisms to prevent unauthorized modification of organization-defined information at rest on organization-defined information system components.'\n  desc 'Applications handling data requiring \"data at rest\" protections must employ cryptographic mechanisms to prevent unauthorized disclosure and modification of the information at rest.\n\nSelection of a cryptographic mechanism is based on the need to protect the integrity of organizational information. The strength of the mechanism is commensurate with the security category and/or classification of the information. Organizations have the flexibility to either encrypt all information on storage devices (i.e., full disk encryption) or encrypt specific data structures (e.g., files, records, or fields).'\n  desc 'check', 'Review the documentation and interview the application administrator.\n\nIdentify the data processed by the application and the accompanying data protection requirements.\n\nDetermine if the data owner has specified data protection encryption requirements regarding modification of data.\n\nDetermine if the application is processing publicly releasable, FOUO or classified data.\n\nDetermine if the application configuration information contains sensitive information.\n\nIf the data is strictly publicly releasable information and system documentation specifies no data encryption is required for any hosted application data, this is not applicable.\n\nAccess the data repository and have the application administrator identify the encryption protections that are utilized.\n\nIf the application processes classified data or if the data owner has specified encryption requirements and the application administrator is unable to demonstrate how the data is encrypted, this is a finding.'\n  desc 'fix', 'Identify data elements that require protection.\n\nDocument the data types and specify encryption requirements.\n\nEncrypt data according to DoD policy or data owner requirements.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24258r493672_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222588'\n  tag rid: 'SV-222588r879799_rule'\n  tag stig_id: 'APSC-DV-002340'\n  tag gtitle: 'SRG-APP-000428'\n  tag fix_id: 'F-24247r493673_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84849', 'V-70227']\n  tag cci: ['CCI-002475']\n  tag nist: ['SC-28 (1)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222588.rb"},"title":"The application must implement approved cryptographic mechanisms to prevent unauthorized modification of organization-defined information at rest on organization-defined information system components.","desc":"Applications handling data requiring \"data at rest\" protections must employ cryptographic mechanisms to prevent unauthorized disclosure and modification of the information at rest.\n\nSelection of a cryptographic mechanism is based on the need to protect the integrity of organizational information. The strength of the mechanism is commensurate with the security category and/or classification of the information. Organizations have the flexibility to either encrypt all information on storage devices (i.e., full disk encryption) or encrypt specific data structures (e.g., files, records, or fields).","descriptions":{"default":"Applications handling data requiring \"data at rest\" protections must employ cryptographic mechanisms to prevent unauthorized disclosure and modification of the information at rest.\n\nSelection of a cryptographic mechanism is based on the need to protect the integrity of organizational information. The strength of the mechanism is commensurate with the security category and/or classification of the information. Organizations have the flexibility to either encrypt all information on storage devices (i.e., full disk encryption) or encrypt specific data structures (e.g., files, records, or fields).","check":"Review the documentation and interview the application administrator.\n\nIdentify the data processed by the application and the accompanying data protection requirements.\n\nDetermine if the data owner has specified data protection encryption requirements regarding modification of data.\n\nDetermine if the application is processing publicly releasable, FOUO or classified data.\n\nDetermine if the application configuration information contains sensitive information.\n\nIf the data is strictly publicly releasable information and system documentation specifies no data encryption is required for any hosted application data, this is not applicable.\n\nAccess the data repository and have the application administrator identify the encryption protections that are utilized.\n\nIf the application processes classified data or if the data owner has specified encryption requirements and the application administrator is unable to demonstrate how the data is encrypted, this is a finding.","fix":"Identify data elements that require protection.\n\nDocument the data types and specify encryption requirements.\n\nEncrypt data according to DoD policy or data owner requirements."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24258r493672_chk","severity":"medium","gid":"V-222588","rid":"SV-222588r879799_rule","stig_id":"APSC-DV-002340","gtitle":"SRG-APP-000428","fix_id":"F-24247r493673_fix","documentable":null,"legacy":["SV-84849","V-70227"],"cci":["CCI-002475"],"nist":["SC-28 (1)"]}},{"id":"SV-222589","code":"control 'SV-222589' do\n  title 'The application must use appropriate cryptography in order to protect stored DoD information when required by the information owner or DoD policy.'\n  desc 'Applications handling data requiring \"data at rest\" protections must employ cryptographic mechanisms to prevent unauthorized disclosure and modification of the information at rest.\n\nSelection of a cryptographic mechanism is based on the need to protect the confidentiality of organizational information. The strength of mechanism is commensurate with the security category and/or classification of the information. Organizations have the flexibility to either encrypt all information on storage devices (i.e., full disk encryption) or encrypt specific data structures (e.g., files, records, or fields).\n\nSpecial care must be taken to cryptographically protect classified data.'\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nIdentify the data processed by the application and the accompanying data protection requirements.\n\nDetermine if the application is processing publicly releasable, SBU, FOUO, or classified data.\n\nIf the data is strictly publicly releasable information with no SBU, FOUO, or classified and system documentation specifies no data encryption is required for any hosted application data, this requirement is not applicable.\n\nHave the application administrator identify the encryption protections that are utilized.\n\nValidate the application is using encryption protections that are commensurate with the data being protected.\n\nIf the application is processing classified data, type 1, suite B cryptography, or hardware-based encryption solutions; meeting NSA encryption requirements for classified data processing and storage is required.\n\nIf the application processes classified data or if the data owner has specified encryption requirements and the application administrator is unable to demonstrate the type of encryption used or if the application processes classified and does not use type 1, suite B, or NSA-approved hardware-based encryption, this is a finding.'\n  desc 'fix', 'Identify data elements that require protection.\n\nDocument the data types and specify encryption requirements.\n\nEncrypt classified data using Type 1, Suite B, or other NSA-approved encryption solutions.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24259r493675_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222589'\n  tag rid: 'SV-222589r879800_rule'\n  tag stig_id: 'APSC-DV-002350'\n  tag gtitle: 'SRG-APP-000429'\n  tag fix_id: 'F-24248r493676_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84851', 'V-70229']\n  tag cci: ['CCI-002476']\n  tag nist: ['SC-28 (1)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222589.rb"},"title":"The application must use appropriate cryptography in order to protect stored DoD information when required by the information owner or DoD policy.","desc":"Applications handling data requiring \"data at rest\" protections must employ cryptographic mechanisms to prevent unauthorized disclosure and modification of the information at rest.\n\nSelection of a cryptographic mechanism is based on the need to protect the confidentiality of organizational information. The strength of mechanism is commensurate with the security category and/or classification of the information. Organizations have the flexibility to either encrypt all information on storage devices (i.e., full disk encryption) or encrypt specific data structures (e.g., files, records, or fields).\n\nSpecial care must be taken to cryptographically protect classified data.","descriptions":{"default":"Applications handling data requiring \"data at rest\" protections must employ cryptographic mechanisms to prevent unauthorized disclosure and modification of the information at rest.\n\nSelection of a cryptographic mechanism is based on the need to protect the confidentiality of organizational information. The strength of mechanism is commensurate with the security category and/or classification of the information. Organizations have the flexibility to either encrypt all information on storage devices (i.e., full disk encryption) or encrypt specific data structures (e.g., files, records, or fields).\n\nSpecial care must be taken to cryptographically protect classified data.","check":"Review the application documentation and interview the application administrator.\n\nIdentify the data processed by the application and the accompanying data protection requirements.\n\nDetermine if the application is processing publicly releasable, SBU, FOUO, or classified data.\n\nIf the data is strictly publicly releasable information with no SBU, FOUO, or classified and system documentation specifies no data encryption is required for any hosted application data, this requirement is not applicable.\n\nHave the application administrator identify the encryption protections that are utilized.\n\nValidate the application is using encryption protections that are commensurate with the data being protected.\n\nIf the application is processing classified data, type 1, suite B cryptography, or hardware-based encryption solutions; meeting NSA encryption requirements for classified data processing and storage is required.\n\nIf the application processes classified data or if the data owner has specified encryption requirements and the application administrator is unable to demonstrate the type of encryption used or if the application processes classified and does not use type 1, suite B, or NSA-approved hardware-based encryption, this is a finding.","fix":"Identify data elements that require protection.\n\nDocument the data types and specify encryption requirements.\n\nEncrypt classified data using Type 1, Suite B, or other NSA-approved encryption solutions."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24259r493675_chk","severity":"medium","gid":"V-222589","rid":"SV-222589r879800_rule","stig_id":"APSC-DV-002350","gtitle":"SRG-APP-000429","fix_id":"F-24248r493676_fix","documentable":null,"legacy":["SV-84851","V-70229"],"cci":["CCI-002476"],"nist":["SC-28 (1)"]}},{"id":"SV-222590","code":"control 'SV-222590' do\n  title 'The application must isolate security functions from non-security functions.'\n  desc 'An isolation boundary provides access control and protects the integrity of the hardware, software, and firmware that perform security functions.\n\nSecurity functions are the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based.\n\nDevelopers and implementers can increase the assurance in security functions by employing well-defined security policy models; structured, disciplined, and rigorous hardware and software development techniques; and sound system/security engineering principles. Implementation may include isolation of memory space and libraries. Applications restrict access to security functions through the use of access control mechanisms and by implementing least privilege capabilities.'\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nIdentify if the application utilizes access controls.\n\nCommonly employed access controls include Role-Based Access Controls (RBAC), Access Control Lists (ACL) and Mandatory Access Controls (MAC).\n\nEnsure the application utilizes a control structure that is capable of protecting security assets such as policy and configuration settings from unauthorized modification.\n\nIf the application does not protect security functions that enforce security policy and protect security configuration settings, this is a finding.'\n  desc 'fix', 'Implement controls within the application that limits access to security configuration functionality and isolates regular application function from security-oriented function.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24260r493678_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222590'\n  tag rid: 'SV-222590r879643_rule'\n  tag stig_id: 'APSC-DV-002360'\n  tag gtitle: 'SRG-APP-000233'\n  tag fix_id: 'F-24249r493679_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84853', 'V-70231']\n  tag cci: ['CCI-001084']\n  tag nist: ['SC-3']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222590.rb"},"title":"The application must isolate security functions from non-security functions.","desc":"An isolation boundary provides access control and protects the integrity of the hardware, software, and firmware that perform security functions.\n\nSecurity functions are the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based.\n\nDevelopers and implementers can increase the assurance in security functions by employing well-defined security policy models; structured, disciplined, and rigorous hardware and software development techniques; and sound system/security engineering principles. Implementation may include isolation of memory space and libraries. Applications restrict access to security functions through the use of access control mechanisms and by implementing least privilege capabilities.","descriptions":{"default":"An isolation boundary provides access control and protects the integrity of the hardware, software, and firmware that perform security functions.\n\nSecurity functions are the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based.\n\nDevelopers and implementers can increase the assurance in security functions by employing well-defined security policy models; structured, disciplined, and rigorous hardware and software development techniques; and sound system/security engineering principles. Implementation may include isolation of memory space and libraries. Applications restrict access to security functions through the use of access control mechanisms and by implementing least privilege capabilities.","check":"Review the application documentation and interview the application administrator.\n\nIdentify if the application utilizes access controls.\n\nCommonly employed access controls include Role-Based Access Controls (RBAC), Access Control Lists (ACL) and Mandatory Access Controls (MAC).\n\nEnsure the application utilizes a control structure that is capable of protecting security assets such as policy and configuration settings from unauthorized modification.\n\nIf the application does not protect security functions that enforce security policy and protect security configuration settings, this is a finding.","fix":"Implement controls within the application that limits access to security configuration functionality and isolates regular application function from security-oriented function."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24260r493678_chk","severity":"medium","gid":"V-222590","rid":"SV-222590r879643_rule","stig_id":"APSC-DV-002360","gtitle":"SRG-APP-000233","fix_id":"F-24249r493679_fix","documentable":null,"legacy":["SV-84853","V-70231"],"cci":["CCI-001084"],"nist":["SC-3"]}},{"id":"SV-222591","code":"control 'SV-222591' do\n  title 'The application must maintain a separate execution domain for each executing process.'\n  desc 'Applications can maintain separate execution domains for each executing process by assigning each process a separate address space. Each process has a distinct address space so that communication between processes is performed in a manner controlled through the security functions, and one process cannot modify the executing code of another process. Maintaining separate execution domains for executing processes can be achieved, for example, by implementing separate address spaces.\n\nAn example is a web browser with process isolation that provides tabs that are separate processes using separate address spaces to prevent one tab crashing the entire browser.'\n  desc 'check', 'Review the application documentation, the architecture documentation and interview the application administrator.\n\nIdentify if the application architecture provides the capability to sandbox executing processes so as to prevent a process in one application domain from sharing another application domain.\n\nAsk the application administrator to demonstrate how the application processes are separated. This may be demonstrated by examining the OS processes running on the system and identifying the separate application processes.\n\nIf the application does not maintain a separate execution domain for each executing process, this is a finding.'\n  desc 'fix', 'Design and configure applications to maintain a separate execution domain for each executing process.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24261r493681_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222591'\n  tag rid: 'SV-222591r879802_rule'\n  tag stig_id: 'APSC-DV-002370'\n  tag gtitle: 'SRG-APP-000431'\n  tag fix_id: 'F-24250r493682_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84855', 'V-70233']\n  tag cci: ['CCI-002530']\n  tag nist: ['SC-39']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222591.rb"},"title":"The application must maintain a separate execution domain for each executing process.","desc":"Applications can maintain separate execution domains for each executing process by assigning each process a separate address space. Each process has a distinct address space so that communication between processes is performed in a manner controlled through the security functions, and one process cannot modify the executing code of another process. Maintaining separate execution domains for executing processes can be achieved, for example, by implementing separate address spaces.\n\nAn example is a web browser with process isolation that provides tabs that are separate processes using separate address spaces to prevent one tab crashing the entire browser.","descriptions":{"default":"Applications can maintain separate execution domains for each executing process by assigning each process a separate address space. Each process has a distinct address space so that communication between processes is performed in a manner controlled through the security functions, and one process cannot modify the executing code of another process. Maintaining separate execution domains for executing processes can be achieved, for example, by implementing separate address spaces.\n\nAn example is a web browser with process isolation that provides tabs that are separate processes using separate address spaces to prevent one tab crashing the entire browser.","check":"Review the application documentation, the architecture documentation and interview the application administrator.\n\nIdentify if the application architecture provides the capability to sandbox executing processes so as to prevent a process in one application domain from sharing another application domain.\n\nAsk the application administrator to demonstrate how the application processes are separated. This may be demonstrated by examining the OS processes running on the system and identifying the separate application processes.\n\nIf the application does not maintain a separate execution domain for each executing process, this is a finding.","fix":"Design and configure applications to maintain a separate execution domain for each executing process."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24261r493681_chk","severity":"medium","gid":"V-222591","rid":"SV-222591r879802_rule","stig_id":"APSC-DV-002370","gtitle":"SRG-APP-000431","fix_id":"F-24250r493682_fix","documentable":null,"legacy":["SV-84855","V-70233"],"cci":["CCI-002530"],"nist":["SC-39"]}},{"id":"SV-222592","code":"control 'SV-222592' do\n  title 'Applications must prevent unauthorized and unintended information transfer via shared system resources.'\n  desc 'Preventing unauthorized information transfers mitigates the risk of information, including encrypted representations of information, produced by the actions of prior users/roles (or the actions of processes acting on behalf of prior users/roles) from being available to any current users/roles (or current processes) that obtain access to shared system resources (e.g., registers, main memory, hard disks) after those resources have been released back to information systems. The control of information in shared resources is also commonly referred to as object reuse and residual information protection.\n\nThis requirement generally applies to the design of an information technology product, but it can also apply to the configuration of particular information system components that are, or use, such products. This can be verified by acceptance/validation processes in DoD or other government agencies.\n\nThere may be shared resources with configurable protections (e.g., files on storage) that may be assessed on specific information system components.'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify if the application shares information resources via file sharing protocol or if the application includes configuration settings that provide access to data files on the hard drive.\n\nAlso determine if the application transfers data via shared system resources.\n\nIf the application shares system resources with other applications, verify that a security boundary exists which controls and prevents other applications, processes, or users from accessing application data. The control mechanism will vary based upon the resource that is being shared. Hard disk sharing could possibly utilize file permissions restrictions, whereas shared overall system resources could implement virtualization or containers that restrict access.\n\nIf the application does not prevent unauthorized and unintended information transfer via shared system resources, this is a finding.'\n  desc 'fix', 'Configure or design the application to utilize a security control that will implement a boundary that will prevent unauthorized and unintended information transfer via shared system resources.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24262r493684_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222592'\n  tag rid: 'SV-222592r879649_rule'\n  tag stig_id: 'APSC-DV-002380'\n  tag gtitle: 'SRG-APP-000243'\n  tag fix_id: 'F-24251r493685_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84857', 'V-70235']\n  tag cci: ['CCI-001090']\n  tag nist: ['SC-4']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222592.rb"},"title":"Applications must prevent unauthorized and unintended information transfer via shared system resources.","desc":"Preventing unauthorized information transfers mitigates the risk of information, including encrypted representations of information, produced by the actions of prior users/roles (or the actions of processes acting on behalf of prior users/roles) from being available to any current users/roles (or current processes) that obtain access to shared system resources (e.g., registers, main memory, hard disks) after those resources have been released back to information systems. The control of information in shared resources is also commonly referred to as object reuse and residual information protection.\n\nThis requirement generally applies to the design of an information technology product, but it can also apply to the configuration of particular information system components that are, or use, such products. This can be verified by acceptance/validation processes in DoD or other government agencies.\n\nThere may be shared resources with configurable protections (e.g., files on storage) that may be assessed on specific information system components.","descriptions":{"default":"Preventing unauthorized information transfers mitigates the risk of information, including encrypted representations of information, produced by the actions of prior users/roles (or the actions of processes acting on behalf of prior users/roles) from being available to any current users/roles (or current processes) that obtain access to shared system resources (e.g., registers, main memory, hard disks) after those resources have been released back to information systems. The control of information in shared resources is also commonly referred to as object reuse and residual information protection.\n\nThis requirement generally applies to the design of an information technology product, but it can also apply to the configuration of particular information system components that are, or use, such products. This can be verified by acceptance/validation processes in DoD or other government agencies.\n\nThere may be shared resources with configurable protections (e.g., files on storage) that may be assessed on specific information system components.","check":"Review the application documentation and interview the application administrator to identify if the application shares information resources via file sharing protocol or if the application includes configuration settings that provide access to data files on the hard drive.\n\nAlso determine if the application transfers data via shared system resources.\n\nIf the application shares system resources with other applications, verify that a security boundary exists which controls and prevents other applications, processes, or users from accessing application data. The control mechanism will vary based upon the resource that is being shared. Hard disk sharing could possibly utilize file permissions restrictions, whereas shared overall system resources could implement virtualization or containers that restrict access.\n\nIf the application does not prevent unauthorized and unintended information transfer via shared system resources, this is a finding.","fix":"Configure or design the application to utilize a security control that will implement a boundary that will prevent unauthorized and unintended information transfer via shared system resources."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24262r493684_chk","severity":"medium","gid":"V-222592","rid":"SV-222592r879649_rule","stig_id":"APSC-DV-002380","gtitle":"SRG-APP-000243","fix_id":"F-24251r493685_fix","documentable":null,"legacy":["SV-84857","V-70235"],"cci":["CCI-001090"],"nist":["SC-4"]}},{"id":"SV-222593","code":"control 'SV-222593' do\n  title 'XML-based applications must mitigate DoS attacks by using XML filters, parser options, or gateways.'\n  desc 'DoS is a condition when a resource is not available for legitimate users. When this occurs, the organization either cannot accomplish its mission or must operate at degraded capacity.\n\nXML-based applications are susceptible to DoS attacks due to the nature of XML parsing being processor intensive and complicated.\n\nBest practice for parsing XML to avoid DoS include:\n\n- Using a proven XML parser\n- Using an XML gateway that provides DoS protection\n- Using parser options that provide limits on recursive payloads, oversized payloads, and entity expansion.\n\nThis requirement addresses the configuration of applications to mitigate the impact of DoS attacks that have occurred or are ongoing on application availability. For each application, known and potential DoS attacks must be identified and solutions for each type implemented. A variety of technologies exist to limit or, in some cases, eliminate the effects of DoS attacks (e.g., limiting processes or restricting the number of sessions the application opens at one time). Employing increased capacity and bandwidth, combined with service redundancy, may reduce the susceptibility to some DoS attacks.'\n  desc 'check', 'Review the application architecture documentation and interview the application administrator to identify what steps have been taken to protect the XML aspect of the application from DoS attacks.\n\nIf the application does not contain or utilize XML, the requirement is not applicable.\n\nAsk the application administrator to demonstrate how the application is configured to provide the following protections:\n\n- Validation against recursive payloads\n- Validation against oversized payloads\n- Protection against XML entity expansion\n- Validation against overlong element names\n- Optimized configuration for maximum message throughput\n\nIf the application administrator cannot demonstrate how these protections are implemented either within the application itself or by third-party tools or utilities like an XML gateway, this is a finding.'\n  desc 'fix', 'Implement:\n\n- Validation against recursive payloads\n- Validation against oversized payloads\n- Protection against XML entity expansion\n- Validation against overlong element names\n- Optimized configuration for maximum message throughput in order to ensure DoS attacks against web services are limited.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-36248r602307_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222593'\n  tag rid: 'SV-222593r879806_rule'\n  tag stig_id: 'APSC-DV-002390'\n  tag gtitle: 'SRG-APP-000435'\n  tag fix_id: 'F-36212r864576_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84859', 'V-70237']\n  tag cci: ['CCI-002385']\n  tag nist: ['SC-5 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222593.rb"},"title":"XML-based applications must mitigate DoS attacks by using XML filters, parser options, or gateways.","desc":"DoS is a condition when a resource is not available for legitimate users. When this occurs, the organization either cannot accomplish its mission or must operate at degraded capacity.\n\nXML-based applications are susceptible to DoS attacks due to the nature of XML parsing being processor intensive and complicated.\n\nBest practice for parsing XML to avoid DoS include:\n\n- Using a proven XML parser\n- Using an XML gateway that provides DoS protection\n- Using parser options that provide limits on recursive payloads, oversized payloads, and entity expansion.\n\nThis requirement addresses the configuration of applications to mitigate the impact of DoS attacks that have occurred or are ongoing on application availability. For each application, known and potential DoS attacks must be identified and solutions for each type implemented. A variety of technologies exist to limit or, in some cases, eliminate the effects of DoS attacks (e.g., limiting processes or restricting the number of sessions the application opens at one time). Employing increased capacity and bandwidth, combined with service redundancy, may reduce the susceptibility to some DoS attacks.","descriptions":{"default":"DoS is a condition when a resource is not available for legitimate users. When this occurs, the organization either cannot accomplish its mission or must operate at degraded capacity.\n\nXML-based applications are susceptible to DoS attacks due to the nature of XML parsing being processor intensive and complicated.\n\nBest practice for parsing XML to avoid DoS include:\n\n- Using a proven XML parser\n- Using an XML gateway that provides DoS protection\n- Using parser options that provide limits on recursive payloads, oversized payloads, and entity expansion.\n\nThis requirement addresses the configuration of applications to mitigate the impact of DoS attacks that have occurred or are ongoing on application availability. For each application, known and potential DoS attacks must be identified and solutions for each type implemented. A variety of technologies exist to limit or, in some cases, eliminate the effects of DoS attacks (e.g., limiting processes or restricting the number of sessions the application opens at one time). Employing increased capacity and bandwidth, combined with service redundancy, may reduce the susceptibility to some DoS attacks.","check":"Review the application architecture documentation and interview the application administrator to identify what steps have been taken to protect the XML aspect of the application from DoS attacks.\n\nIf the application does not contain or utilize XML, the requirement is not applicable.\n\nAsk the application administrator to demonstrate how the application is configured to provide the following protections:\n\n- Validation against recursive payloads\n- Validation against oversized payloads\n- Protection against XML entity expansion\n- Validation against overlong element names\n- Optimized configuration for maximum message throughput\n\nIf the application administrator cannot demonstrate how these protections are implemented either within the application itself or by third-party tools or utilities like an XML gateway, this is a finding.","fix":"Implement:\n\n- Validation against recursive payloads\n- Validation against oversized payloads\n- Protection against XML entity expansion\n- Validation against overlong element names\n- Optimized configuration for maximum message throughput in order to ensure DoS attacks against web services are limited."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-36248r602307_chk","severity":"medium","gid":"V-222593","rid":"SV-222593r879806_rule","stig_id":"APSC-DV-002390","gtitle":"SRG-APP-000435","fix_id":"F-36212r864576_fix","documentable":null,"legacy":["SV-84859","V-70237"],"cci":["CCI-002385"],"nist":["SC-5 a"]}},{"id":"SV-222594","code":"control 'SV-222594' do\n  title 'The application must restrict the ability to launch Denial of Service (DoS) attacks against itself or other information systems.'\n  desc 'Denial of Service (DoS) is a condition where a resource is not available for legitimate users. When this occurs, the organization either cannot accomplish its mission or must operate at degraded capacity.\n\nIndividuals of concern can include hostile insiders or external adversaries that have access or have successfully breached the information system and are using the system as a platform to launch cyber attacks on the application, the application host or other third-parties.\n\nApplication developers and application administrators must take the steps needed to ensure an application cannot be used to launch DoS attacks against the application itself, the application host or other systems and networks. \n\nApplication developers should be cognizant that many attackers using DoS techniques will attempt to identify resource intensive processes and functions within the application.  For web applications, this can be application objects that perform database queries or other resource intensive tasks.  Improper application memory management can also lead to memory leaks which can exhaust system resources forcing a system or application restart.  \n\nLimiting attempts to repeatedly execute application processes by validating the requests also reduces the ability to launch some DoS attacks.\n\nFor application administrators, ensuring network access controls are in place to protect the application host.\n\nThe methods employed to counter DoS risks are dependent upon the application layer methods that can be used to exploit it.'\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nAsk the application administrator if any anti-DoS technology or anti-DoS emergency response services are deployed to protect the application.\n\nCheck for code review, penetration or vulnerability test results that attempt to DoS the application or use the application as a DoS tool.\n\nExamine test results and testing configuration to ensure that the application was tested and the application was not reported as being susceptible to DoS attacks either from external sources or from the application itself. Also verify the testing results show that the application cannot be weaponized to attack other systems.\n\nIf the test results indicate the application is susceptible to DoS attacks or can be weaponized to attack other applications or systems, this is a finding.'\n  desc 'fix', 'Design and deploy the application to utilize controls that will prevent the application from being affected by DoS attacks or being used to attack other systems. This includes but is not limited to utilizing throttling techniques for application traffic such as QoS or implementing logic controls within the application code itself that prevents application use that results in network or system capabilities being exceeded.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-36249r602310_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222594'\n  tag rid: 'SV-222594r879650_rule'\n  tag stig_id: 'APSC-DV-002400'\n  tag gtitle: 'SRG-APP-000246'\n  tag fix_id: 'F-36213r602311_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84861', 'V-70239']\n  tag cci: ['CCI-001094']\n  tag nist: ['SC-5 (1)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222594.rb"},"title":"The application must restrict the ability to launch Denial of Service (DoS) attacks against itself or other information systems.","desc":"Denial of Service (DoS) is a condition where a resource is not available for legitimate users. When this occurs, the organization either cannot accomplish its mission or must operate at degraded capacity.\n\nIndividuals of concern can include hostile insiders or external adversaries that have access or have successfully breached the information system and are using the system as a platform to launch cyber attacks on the application, the application host or other third-parties.\n\nApplication developers and application administrators must take the steps needed to ensure an application cannot be used to launch DoS attacks against the application itself, the application host or other systems and networks. \n\nApplication developers should be cognizant that many attackers using DoS techniques will attempt to identify resource intensive processes and functions within the application.  For web applications, this can be application objects that perform database queries or other resource intensive tasks.  Improper application memory management can also lead to memory leaks which can exhaust system resources forcing a system or application restart.  \n\nLimiting attempts to repeatedly execute application processes by validating the requests also reduces the ability to launch some DoS attacks.\n\nFor application administrators, ensuring network access controls are in place to protect the application host.\n\nThe methods employed to counter DoS risks are dependent upon the application layer methods that can be used to exploit it.","descriptions":{"default":"Denial of Service (DoS) is a condition where a resource is not available for legitimate users. When this occurs, the organization either cannot accomplish its mission or must operate at degraded capacity.\n\nIndividuals of concern can include hostile insiders or external adversaries that have access or have successfully breached the information system and are using the system as a platform to launch cyber attacks on the application, the application host or other third-parties.\n\nApplication developers and application administrators must take the steps needed to ensure an application cannot be used to launch DoS attacks against the application itself, the application host or other systems and networks. \n\nApplication developers should be cognizant that many attackers using DoS techniques will attempt to identify resource intensive processes and functions within the application.  For web applications, this can be application objects that perform database queries or other resource intensive tasks.  Improper application memory management can also lead to memory leaks which can exhaust system resources forcing a system or application restart.  \n\nLimiting attempts to repeatedly execute application processes by validating the requests also reduces the ability to launch some DoS attacks.\n\nFor application administrators, ensuring network access controls are in place to protect the application host.\n\nThe methods employed to counter DoS risks are dependent upon the application layer methods that can be used to exploit it.","check":"Review the application documentation and interview the application administrator.\n\nAsk the application administrator if any anti-DoS technology or anti-DoS emergency response services are deployed to protect the application.\n\nCheck for code review, penetration or vulnerability test results that attempt to DoS the application or use the application as a DoS tool.\n\nExamine test results and testing configuration to ensure that the application was tested and the application was not reported as being susceptible to DoS attacks either from external sources or from the application itself. Also verify the testing results show that the application cannot be weaponized to attack other systems.\n\nIf the test results indicate the application is susceptible to DoS attacks or can be weaponized to attack other applications or systems, this is a finding.","fix":"Design and deploy the application to utilize controls that will prevent the application from being affected by DoS attacks or being used to attack other systems. This includes but is not limited to utilizing throttling techniques for application traffic such as QoS or implementing logic controls within the application code itself that prevents application use that results in network or system capabilities being exceeded."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-36249r602310_chk","severity":"medium","gid":"V-222594","rid":"SV-222594r879650_rule","stig_id":"APSC-DV-002400","gtitle":"SRG-APP-000246","fix_id":"F-36213r602311_fix","documentable":null,"legacy":["SV-84861","V-70239"],"cci":["CCI-001094"],"nist":["SC-5 (1)"]}},{"id":"SV-222595","code":"control 'SV-222595' do\n  title 'The web service design must include redundancy mechanisms when used with high-availability systems.'\n  desc 'DoS is a condition when a resource is not available for legitimate users. When this occurs, the organization either cannot accomplish its mission or must operate at degraded capacity.\n\nIn the case of application DoS attacks, care must be taken when designing the application to ensure the application makes the best use of system resources. SQL queries have the potential to consume large amounts of CPU cycles if they are not tuned for optimal performance. Web services containing complex calculations requiring large amounts of time to complete can bog down if too many requests for the service are encountered within a short period of time.\n\nThe methods employed to meet this requirement will vary depending upon the technology the application utilizes. However, a variety of technologies exist to limit or, in some cases, eliminate the effects of application related DoS attacks. Employing increased capacity and bandwidth combined with specialized application layer protection devices and service redundancy may reduce the susceptibility to some DoS attacks.'\n  desc 'check', 'Interview the application administrator and review the system documentation to determine if the application has been designated as a high availability system and if the application is designed to operate in a high availability environment.\n\nIf the application has not been designated as a high availability system, this requirement is not applicable.\n\nReview the application architecture documentation and identify solutions that provide application DoS protections. \n\nVerify the application has been built to work in a clustered or otherwise high availability environment in accordance with documented availability requirements.\n\nThis includes:\n\n- load balancers\n- redundant systems such as multiple web, application servers or DB servers\n- high bandwidth or redundant data circuits\n- multiple data centers (geographic dispersal)\n- server clusters\n\nIf the application has been designated as high availability but the architecture is not built to high availability standards, this is a finding.'\n  desc 'fix', 'Build the application to address issues that are found in a redundant environment and utilize redundancy mechanisms to provide high availability.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24265r493693_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222595'\n  tag rid: 'SV-222595r879651_rule'\n  tag stig_id: 'APSC-DV-002410'\n  tag gtitle: 'SRG-APP-000247'\n  tag fix_id: 'F-24254r493694_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84863', 'V-70241']\n  tag cci: ['CCI-001095']\n  tag nist: ['SC-5 (2)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222595.rb"},"title":"The web service design must include redundancy mechanisms when used with high-availability systems.","desc":"DoS is a condition when a resource is not available for legitimate users. When this occurs, the organization either cannot accomplish its mission or must operate at degraded capacity.\n\nIn the case of application DoS attacks, care must be taken when designing the application to ensure the application makes the best use of system resources. SQL queries have the potential to consume large amounts of CPU cycles if they are not tuned for optimal performance. Web services containing complex calculations requiring large amounts of time to complete can bog down if too many requests for the service are encountered within a short period of time.\n\nThe methods employed to meet this requirement will vary depending upon the technology the application utilizes. However, a variety of technologies exist to limit or, in some cases, eliminate the effects of application related DoS attacks. Employing increased capacity and bandwidth combined with specialized application layer protection devices and service redundancy may reduce the susceptibility to some DoS attacks.","descriptions":{"default":"DoS is a condition when a resource is not available for legitimate users. When this occurs, the organization either cannot accomplish its mission or must operate at degraded capacity.\n\nIn the case of application DoS attacks, care must be taken when designing the application to ensure the application makes the best use of system resources. SQL queries have the potential to consume large amounts of CPU cycles if they are not tuned for optimal performance. Web services containing complex calculations requiring large amounts of time to complete can bog down if too many requests for the service are encountered within a short period of time.\n\nThe methods employed to meet this requirement will vary depending upon the technology the application utilizes. However, a variety of technologies exist to limit or, in some cases, eliminate the effects of application related DoS attacks. Employing increased capacity and bandwidth combined with specialized application layer protection devices and service redundancy may reduce the susceptibility to some DoS attacks.","check":"Interview the application administrator and review the system documentation to determine if the application has been designated as a high availability system and if the application is designed to operate in a high availability environment.\n\nIf the application has not been designated as a high availability system, this requirement is not applicable.\n\nReview the application architecture documentation and identify solutions that provide application DoS protections. \n\nVerify the application has been built to work in a clustered or otherwise high availability environment in accordance with documented availability requirements.\n\nThis includes:\n\n- load balancers\n- redundant systems such as multiple web, application servers or DB servers\n- high bandwidth or redundant data circuits\n- multiple data centers (geographic dispersal)\n- server clusters\n\nIf the application has been designated as high availability but the architecture is not built to high availability standards, this is a finding.","fix":"Build the application to address issues that are found in a redundant environment and utilize redundancy mechanisms to provide high availability."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24265r493693_chk","severity":"medium","gid":"V-222595","rid":"SV-222595r879651_rule","stig_id":"APSC-DV-002410","gtitle":"SRG-APP-000247","fix_id":"F-24254r493694_fix","documentable":null,"legacy":["SV-84863","V-70241"],"cci":["CCI-001095"],"nist":["SC-5 (2)"]}},{"id":"SV-222596","code":"control 'SV-222596' do\n  title 'The application must protect the confidentiality and integrity of transmitted information.'\n  desc \"Without protection of the transmitted information, confidentiality and integrity may be compromised since unprotected communications can be intercepted and either read or altered.\n\nThis requirement applies  to those applications that transmit data, or allow access to data non-locally. Application and data owners have a responsibility for ensuring data integrity and confidentiality is maintained at every step of the data transfer and handling process. \n\nApplication and data owners need to identify the data that requires cryptographic protection. If no data protection requirements are defined as to what specific data must be encrypted and what data is non-sensitive and doesn't require encryption, all data must be encrypted.\n \nWhen transmitting data, applications need to leverage transmission protection mechanisms, such as TLS, SSL VPNs, or IPSEC.\n\nCommunication paths outside the physical protection of a controlled boundary are exposed to the possibility of interception and modification. Protecting the confidentiality and integrity of organizational information can be accomplished by physical means (e.g., employing physical distribution systems) or by logical means (e.g., employing cryptographic techniques). If physical means of protection are employed, then logical means (cryptography) do not have to be employed, and vice versa.\"\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nIdentify application clients, servers and associated network connections including application networking ports.  \n\nIdentify the types of data processed by the application and review any documented data protection requirements.\n\nIdentify the application communication protocols.\n\nReview application documents for instructions or guidance on configuring application encryption settings.\n\nVerify the application is configured to enable encryption protections for data in accordance with the data protection requirements. If no data protection requirements exist, ensure all application data is encrypted.\n\nIf the application does not utilize TLS, IPsec or other approved encryption mechanism to protect the confidentiality and integrity of transmitted information, this is a finding.'\n  desc 'fix', 'Configure all of the application systems to require TLS encryption in accordance with data protection requirements.'\n  impact 0.7\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24266r493696_chk'\n  tag severity: 'high'\n  tag gid: 'V-222596'\n  tag rid: 'SV-222596r879810_rule'\n  tag stig_id: 'APSC-DV-002440'\n  tag gtitle: 'SRG-APP-000439'\n  tag fix_id: 'F-24255r493697_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84867', 'V-70245']\n  tag cci: ['CCI-002418']\n  tag nist: ['SC-8']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222596.rb"},"title":"The application must protect the confidentiality and integrity of transmitted information.","desc":"Without protection of the transmitted information, confidentiality and integrity may be compromised since unprotected communications can be intercepted and either read or altered.\n\nThis requirement applies  to those applications that transmit data, or allow access to data non-locally. Application and data owners have a responsibility for ensuring data integrity and confidentiality is maintained at every step of the data transfer and handling process. \n\nApplication and data owners need to identify the data that requires cryptographic protection. If no data protection requirements are defined as to what specific data must be encrypted and what data is non-sensitive and doesn't require encryption, all data must be encrypted.\n \nWhen transmitting data, applications need to leverage transmission protection mechanisms, such as TLS, SSL VPNs, or IPSEC.\n\nCommunication paths outside the physical protection of a controlled boundary are exposed to the possibility of interception and modification. Protecting the confidentiality and integrity of organizational information can be accomplished by physical means (e.g., employing physical distribution systems) or by logical means (e.g., employing cryptographic techniques). If physical means of protection are employed, then logical means (cryptography) do not have to be employed, and vice versa.","descriptions":{"default":"Without protection of the transmitted information, confidentiality and integrity may be compromised since unprotected communications can be intercepted and either read or altered.\n\nThis requirement applies  to those applications that transmit data, or allow access to data non-locally. Application and data owners have a responsibility for ensuring data integrity and confidentiality is maintained at every step of the data transfer and handling process. \n\nApplication and data owners need to identify the data that requires cryptographic protection. If no data protection requirements are defined as to what specific data must be encrypted and what data is non-sensitive and doesn't require encryption, all data must be encrypted.\n \nWhen transmitting data, applications need to leverage transmission protection mechanisms, such as TLS, SSL VPNs, or IPSEC.\n\nCommunication paths outside the physical protection of a controlled boundary are exposed to the possibility of interception and modification. Protecting the confidentiality and integrity of organizational information can be accomplished by physical means (e.g., employing physical distribution systems) or by logical means (e.g., employing cryptographic techniques). If physical means of protection are employed, then logical means (cryptography) do not have to be employed, and vice versa.","check":"Review the application documentation and interview the application administrator.\n\nIdentify application clients, servers and associated network connections including application networking ports.  \n\nIdentify the types of data processed by the application and review any documented data protection requirements.\n\nIdentify the application communication protocols.\n\nReview application documents for instructions or guidance on configuring application encryption settings.\n\nVerify the application is configured to enable encryption protections for data in accordance with the data protection requirements. If no data protection requirements exist, ensure all application data is encrypted.\n\nIf the application does not utilize TLS, IPsec or other approved encryption mechanism to protect the confidentiality and integrity of transmitted information, this is a finding.","fix":"Configure all of the application systems to require TLS encryption in accordance with data protection requirements."},"impact":0.7,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24266r493696_chk","severity":"high","gid":"V-222596","rid":"SV-222596r879810_rule","stig_id":"APSC-DV-002440","gtitle":"SRG-APP-000439","fix_id":"F-24255r493697_fix","documentable":null,"legacy":["SV-84867","V-70245"],"cci":["CCI-002418"],"nist":["SC-8"]}},{"id":"SV-222597","code":"control 'SV-222597' do\n  title 'The application must implement cryptographic mechanisms to prevent unauthorized disclosure of information and/or detect changes to information during transmission unless otherwise protected by alternative physical safeguards, such as, at a minimum, a Protected Distribution System (PDS).'\n  desc \"Data is subject to manipulation and other integrity related attacks whenever that data is transferred across a network. To protect data integrity during transmission, the application must implement mechanisms to ensure the integrity of all transmitted information.\n\nAll transmitted information means that the protections are not restricted to just the data itself. Protection mechanisms must be extended to include data labels, security parameters, or metadata if data protection requirements specify.\n\nModern web application data transfer methods can be complex and are not necessarily just point-to-point in nature. Service-Oriented Architecture (SOA) and RESTFUL web services allow for XML-based application data to be transmitted in a manner similar to network traffic wherein the application data is transmitted along multiple servers' hops.\n\nIn such cases, point-to-point protection methods like TLS or SSL may not be the best choice for ensuring data integrity and alternative data integrity protection methods like XML Integrity Signature protections where the XML payload itself is signed may be required as part of the application design.\n\nOverall application design and architecture must always be taken into account when establishing data integrity protection mechanisms. Custom-developed solutions that provide a file transfer capability should implement data integrity checks for incoming and outgoing files. Transmitted information requires mechanisms to ensure the data integrity (e.g., digital signatures, SSL, TLS, or cryptographic hashing).\"\n  desc 'check', 'Review the application documentation, the application architecture designs and interview the application administrator.\n\nAsk the application admin to identify the network path taken by the application data and demonstrate the application support integrity mechanisms for transmission of both incoming and outgoing files and any transmitted data.\n\nFor example, hashing/digital signature and cyclic redundancy checks (CRCs) can be used to confirm integrity on data streams and transmitted files.\n\nUse of TLS can be used to assure integrity in point-to-point communication sessions.\n\nWhen the application uses messaging or web services or other technologies where the data can traverse multiple hops, the individual message or packet must be encrypted to protect the integrity of the message.\n\nIf the application is not configured to provide cryptographic protections to application data while it is transmitted unless protected by alternative safety measures like a PDS, this is a finding.'\n  desc 'fix', 'Configure the application to use cryptographic protections to prevent unauthorized disclosure of application data based upon the application architecture.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-36250r602313_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222597'\n  tag rid: 'SV-222597r879811_rule'\n  tag stig_id: 'APSC-DV-002450'\n  tag gtitle: 'SRG-APP-000440'\n  tag fix_id: 'F-36214r602314_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84869', 'V-70247']\n  tag cci: ['CCI-002421']\n  tag nist: ['SC-8 (1)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222597.rb"},"title":"The application must implement cryptographic mechanisms to prevent unauthorized disclosure of information and/or detect changes to information during transmission unless otherwise protected by alternative physical safeguards, such as, at a minimum, a Protected Distribution System (PDS).","desc":"Data is subject to manipulation and other integrity related attacks whenever that data is transferred across a network. To protect data integrity during transmission, the application must implement mechanisms to ensure the integrity of all transmitted information.\n\nAll transmitted information means that the protections are not restricted to just the data itself. Protection mechanisms must be extended to include data labels, security parameters, or metadata if data protection requirements specify.\n\nModern web application data transfer methods can be complex and are not necessarily just point-to-point in nature. Service-Oriented Architecture (SOA) and RESTFUL web services allow for XML-based application data to be transmitted in a manner similar to network traffic wherein the application data is transmitted along multiple servers' hops.\n\nIn such cases, point-to-point protection methods like TLS or SSL may not be the best choice for ensuring data integrity and alternative data integrity protection methods like XML Integrity Signature protections where the XML payload itself is signed may be required as part of the application design.\n\nOverall application design and architecture must always be taken into account when establishing data integrity protection mechanisms. Custom-developed solutions that provide a file transfer capability should implement data integrity checks for incoming and outgoing files. Transmitted information requires mechanisms to ensure the data integrity (e.g., digital signatures, SSL, TLS, or cryptographic hashing).","descriptions":{"default":"Data is subject to manipulation and other integrity related attacks whenever that data is transferred across a network. To protect data integrity during transmission, the application must implement mechanisms to ensure the integrity of all transmitted information.\n\nAll transmitted information means that the protections are not restricted to just the data itself. Protection mechanisms must be extended to include data labels, security parameters, or metadata if data protection requirements specify.\n\nModern web application data transfer methods can be complex and are not necessarily just point-to-point in nature. Service-Oriented Architecture (SOA) and RESTFUL web services allow for XML-based application data to be transmitted in a manner similar to network traffic wherein the application data is transmitted along multiple servers' hops.\n\nIn such cases, point-to-point protection methods like TLS or SSL may not be the best choice for ensuring data integrity and alternative data integrity protection methods like XML Integrity Signature protections where the XML payload itself is signed may be required as part of the application design.\n\nOverall application design and architecture must always be taken into account when establishing data integrity protection mechanisms. Custom-developed solutions that provide a file transfer capability should implement data integrity checks for incoming and outgoing files. Transmitted information requires mechanisms to ensure the data integrity (e.g., digital signatures, SSL, TLS, or cryptographic hashing).","check":"Review the application documentation, the application architecture designs and interview the application administrator.\n\nAsk the application admin to identify the network path taken by the application data and demonstrate the application support integrity mechanisms for transmission of both incoming and outgoing files and any transmitted data.\n\nFor example, hashing/digital signature and cyclic redundancy checks (CRCs) can be used to confirm integrity on data streams and transmitted files.\n\nUse of TLS can be used to assure integrity in point-to-point communication sessions.\n\nWhen the application uses messaging or web services or other technologies where the data can traverse multiple hops, the individual message or packet must be encrypted to protect the integrity of the message.\n\nIf the application is not configured to provide cryptographic protections to application data while it is transmitted unless protected by alternative safety measures like a PDS, this is a finding.","fix":"Configure the application to use cryptographic protections to prevent unauthorized disclosure of application data based upon the application architecture."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-36250r602313_chk","severity":"medium","gid":"V-222597","rid":"SV-222597r879811_rule","stig_id":"APSC-DV-002450","gtitle":"SRG-APP-000440","fix_id":"F-36214r602314_fix","documentable":null,"legacy":["SV-84869","V-70247"],"cci":["CCI-002421"],"nist":["SC-8 (1)"]}},{"id":"SV-222598","code":"control 'SV-222598' do\n  title 'The application must maintain the confidentiality and integrity of information during preparation for transmission.'\n  desc \"Data is subject to manipulation and other integrity related attacks whenever that data is transferred across a network. To protect data integrity during transmission, the application must implement mechanisms to ensure the integrity of all transmitted information. All transmitted information means that the protections are not restricted to just the data itself. Protection mechanisms must be extended to include data labels, security parameters or metadata if data protection requirements specify. Modern web application data transfer methods can be complex and are not necessarily just point-to-point in nature. Service-Oriented Architecture (SOA) and RESTFUL web services allow for XML-based application data to be transmitted in a manner similar to network traffic wherein the application data is transmitted along multiple servers' hops. In such cases, point-to-point protection methods like TLS or SSL may not be the best choice for ensuring data integrity and alternative data integrity protection methods like XML Integrity Signature protections where the XML payload itself is signed may be required as part of the application design. Overall application design and architecture must always be taken into account when establishing data integrity protection mechanisms. Custom-developed solutions that provide a file transfer capability should implement data integrity checks for incoming and outgoing files. Transmitted information requires mechanisms to ensure the data integrity (e.g., digital signatures, SSL, TLS, or cryptographic hashing).\"\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nIdentify web servers and associated network connections.\n\nAccess the application with a web browser.\n\nVerify the web browser goes secure automatically by automatically redirecting the browser to a secure port running TLS encryption, or ensure the port used by the application uses TLS encryption by default.\n\nFor tiered applications, (web server, application server, database server) verify the communication channels between the tiers is also encrypted.\n\nIf the application does not utilize TLS to protect the confidentiality and integrity of transmitted information, this is a finding.'\n  desc 'fix', 'Configure all of the application systems to require TLS encryption.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24268r493702_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222598'\n  tag rid: 'SV-222598r879812_rule'\n  tag stig_id: 'APSC-DV-002460'\n  tag gtitle: 'SRG-APP-000441'\n  tag fix_id: 'F-24257r493703_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84871', 'V-70249']\n  tag cci: ['CCI-002420']\n  tag nist: ['SC-8 (2)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222598.rb"},"title":"The application must maintain the confidentiality and integrity of information during preparation for transmission.","desc":"Data is subject to manipulation and other integrity related attacks whenever that data is transferred across a network. To protect data integrity during transmission, the application must implement mechanisms to ensure the integrity of all transmitted information. All transmitted information means that the protections are not restricted to just the data itself. Protection mechanisms must be extended to include data labels, security parameters or metadata if data protection requirements specify. Modern web application data transfer methods can be complex and are not necessarily just point-to-point in nature. Service-Oriented Architecture (SOA) and RESTFUL web services allow for XML-based application data to be transmitted in a manner similar to network traffic wherein the application data is transmitted along multiple servers' hops. In such cases, point-to-point protection methods like TLS or SSL may not be the best choice for ensuring data integrity and alternative data integrity protection methods like XML Integrity Signature protections where the XML payload itself is signed may be required as part of the application design. Overall application design and architecture must always be taken into account when establishing data integrity protection mechanisms. Custom-developed solutions that provide a file transfer capability should implement data integrity checks for incoming and outgoing files. Transmitted information requires mechanisms to ensure the data integrity (e.g., digital signatures, SSL, TLS, or cryptographic hashing).","descriptions":{"default":"Data is subject to manipulation and other integrity related attacks whenever that data is transferred across a network. To protect data integrity during transmission, the application must implement mechanisms to ensure the integrity of all transmitted information. All transmitted information means that the protections are not restricted to just the data itself. Protection mechanisms must be extended to include data labels, security parameters or metadata if data protection requirements specify. Modern web application data transfer methods can be complex and are not necessarily just point-to-point in nature. Service-Oriented Architecture (SOA) and RESTFUL web services allow for XML-based application data to be transmitted in a manner similar to network traffic wherein the application data is transmitted along multiple servers' hops. In such cases, point-to-point protection methods like TLS or SSL may not be the best choice for ensuring data integrity and alternative data integrity protection methods like XML Integrity Signature protections where the XML payload itself is signed may be required as part of the application design. Overall application design and architecture must always be taken into account when establishing data integrity protection mechanisms. Custom-developed solutions that provide a file transfer capability should implement data integrity checks for incoming and outgoing files. Transmitted information requires mechanisms to ensure the data integrity (e.g., digital signatures, SSL, TLS, or cryptographic hashing).","check":"Review the application documentation and interview the application administrator.\n\nIdentify web servers and associated network connections.\n\nAccess the application with a web browser.\n\nVerify the web browser goes secure automatically by automatically redirecting the browser to a secure port running TLS encryption, or ensure the port used by the application uses TLS encryption by default.\n\nFor tiered applications, (web server, application server, database server) verify the communication channels between the tiers is also encrypted.\n\nIf the application does not utilize TLS to protect the confidentiality and integrity of transmitted information, this is a finding.","fix":"Configure all of the application systems to require TLS encryption."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24268r493702_chk","severity":"medium","gid":"V-222598","rid":"SV-222598r879812_rule","stig_id":"APSC-DV-002460","gtitle":"SRG-APP-000441","fix_id":"F-24257r493703_fix","documentable":null,"legacy":["SV-84871","V-70249"],"cci":["CCI-002420"],"nist":["SC-8 (2)"]}},{"id":"SV-222599","code":"control 'SV-222599' do\n  title 'The application must maintain the confidentiality and integrity of information during reception.'\n  desc \"Data is subject to manipulation and other integrity related attacks whenever that data is transferred across a network. To protect data integrity during transmission, the application must implement mechanisms to ensure the integrity of all transmitted information. All transmitted information means that the protections are not restricted to just the data itself. Protection mechanisms must be extended to include data labels, security parameters or metadata if data protection requirements specify. Modern web application data transfer methods can be complex and are not necessarily just point-to-point in nature. Service-Oriented Architecture (SOA) and RESTFUL web services allow for XML-based application data to be transmitted in a manner similar to network traffic wherein the application data is transmitted along multiple servers' hops. In such cases, point-to-point protection methods like TLS or SSL may not be the best choice for ensuring data integrity and alternative data integrity protection methods like XML Integrity Signature protections where the XML payload itself is signed may be required as part of the application design. Overall application design and architecture must always be taken into account when establishing data integrity protection mechanisms. Custom-developed solutions that provide a file transfer capability should implement data integrity checks for incoming and outgoing files. Transmitted information requires mechanisms to ensure the data integrity (e.g., digital signatures, SSL, TLS, or cryptographic hashing).\"\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nIdentify web servers and associated network connections.\n\nAccess the application with a web browser.\n\nVerify the web browser goes secure automatically by automatically redirecting the browser to a secure port running TLS encryption, or ensure the port used by the application uses TLS encryption by default.\n\nFor tiered applications, (web server, application server, database server) ensure the communication channels between the tiers is also encrypted.\n\nIf the application does not utilize TLS to protect the confidentiality and integrity of transmitted information, this is a finding.'\n  desc 'fix', 'Configure all of the application systems to require TLS encryption.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24269r493705_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222599'\n  tag rid: 'SV-222599r879813_rule'\n  tag stig_id: 'APSC-DV-002470'\n  tag gtitle: 'SRG-APP-000442'\n  tag fix_id: 'F-24258r493706_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84873', 'V-70251']\n  tag cci: ['CCI-002422']\n  tag nist: ['SC-8 (2)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222599.rb"},"title":"The application must maintain the confidentiality and integrity of information during reception.","desc":"Data is subject to manipulation and other integrity related attacks whenever that data is transferred across a network. To protect data integrity during transmission, the application must implement mechanisms to ensure the integrity of all transmitted information. All transmitted information means that the protections are not restricted to just the data itself. Protection mechanisms must be extended to include data labels, security parameters or metadata if data protection requirements specify. Modern web application data transfer methods can be complex and are not necessarily just point-to-point in nature. Service-Oriented Architecture (SOA) and RESTFUL web services allow for XML-based application data to be transmitted in a manner similar to network traffic wherein the application data is transmitted along multiple servers' hops. In such cases, point-to-point protection methods like TLS or SSL may not be the best choice for ensuring data integrity and alternative data integrity protection methods like XML Integrity Signature protections where the XML payload itself is signed may be required as part of the application design. Overall application design and architecture must always be taken into account when establishing data integrity protection mechanisms. Custom-developed solutions that provide a file transfer capability should implement data integrity checks for incoming and outgoing files. Transmitted information requires mechanisms to ensure the data integrity (e.g., digital signatures, SSL, TLS, or cryptographic hashing).","descriptions":{"default":"Data is subject to manipulation and other integrity related attacks whenever that data is transferred across a network. To protect data integrity during transmission, the application must implement mechanisms to ensure the integrity of all transmitted information. All transmitted information means that the protections are not restricted to just the data itself. Protection mechanisms must be extended to include data labels, security parameters or metadata if data protection requirements specify. Modern web application data transfer methods can be complex and are not necessarily just point-to-point in nature. Service-Oriented Architecture (SOA) and RESTFUL web services allow for XML-based application data to be transmitted in a manner similar to network traffic wherein the application data is transmitted along multiple servers' hops. In such cases, point-to-point protection methods like TLS or SSL may not be the best choice for ensuring data integrity and alternative data integrity protection methods like XML Integrity Signature protections where the XML payload itself is signed may be required as part of the application design. Overall application design and architecture must always be taken into account when establishing data integrity protection mechanisms. Custom-developed solutions that provide a file transfer capability should implement data integrity checks for incoming and outgoing files. Transmitted information requires mechanisms to ensure the data integrity (e.g., digital signatures, SSL, TLS, or cryptographic hashing).","check":"Review the application documentation and interview the application administrator.\n\nIdentify web servers and associated network connections.\n\nAccess the application with a web browser.\n\nVerify the web browser goes secure automatically by automatically redirecting the browser to a secure port running TLS encryption, or ensure the port used by the application uses TLS encryption by default.\n\nFor tiered applications, (web server, application server, database server) ensure the communication channels between the tiers is also encrypted.\n\nIf the application does not utilize TLS to protect the confidentiality and integrity of transmitted information, this is a finding.","fix":"Configure all of the application systems to require TLS encryption."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24269r493705_chk","severity":"medium","gid":"V-222599","rid":"SV-222599r879813_rule","stig_id":"APSC-DV-002470","gtitle":"SRG-APP-000442","fix_id":"F-24258r493706_fix","documentable":null,"legacy":["SV-84873","V-70251"],"cci":["CCI-002422"],"nist":["SC-8 (2)"]}},{"id":"SV-222600","code":"control 'SV-222600' do\n  title 'The application must not disclose unnecessary information to users.'\n  desc 'Applications should not disclose information not required for the transaction. (e.g., a web application should not divulge the fact there is a SQL server database and/or its version).\n\nThese events usually occur when the web application has not been configured to send specific error messages for error events. Instead, when a processing anomaly occurs, the application displays technical information about the type of application server, database in use, or other technical details.\n\nThis provides attackers additional information which they can use to find other attack avenues, or tailor specific attacks, on the application.'\n  desc 'check', 'Review the application system documentation and interview the application administrators.\n\nAsk them to demonstrate how the web server and application configuration does not disclose any information about the application which could be used by an attacker to gain access to the application.\n\nAsk the application representative to logon as a non-privileged user and review all screens of the application to identify any potential data that should not be disclosed to the user.\n\nReview web server configuration and determine if custom error pages are configured to display on error events.\n\nReview error pages sent to application users to verify the pages are generic in nature and provide no technical details related to application architecture.\n\nIf the application displays any application technical data such as database version, application server information, or any other technical details that should not be disclosed to a regular user, this is a finding.'\n  desc 'fix', 'Configure the application to not display technical details about the application architecture on error events.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24270r493708_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222600'\n  tag rid: 'SV-222600r879812_rule'\n  tag stig_id: 'APSC-DV-002480'\n  tag gtitle: 'SRG-APP-000441'\n  tag fix_id: 'F-24259r493709_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84875', 'V-70253']\n  tag cci: ['CCI-002420']\n  tag nist: ['SC-8 (2)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222600.rb"},"title":"The application must not disclose unnecessary information to users.","desc":"Applications should not disclose information not required for the transaction. (e.g., a web application should not divulge the fact there is a SQL server database and/or its version).\n\nThese events usually occur when the web application has not been configured to send specific error messages for error events. Instead, when a processing anomaly occurs, the application displays technical information about the type of application server, database in use, or other technical details.\n\nThis provides attackers additional information which they can use to find other attack avenues, or tailor specific attacks, on the application.","descriptions":{"default":"Applications should not disclose information not required for the transaction. (e.g., a web application should not divulge the fact there is a SQL server database and/or its version).\n\nThese events usually occur when the web application has not been configured to send specific error messages for error events. Instead, when a processing anomaly occurs, the application displays technical information about the type of application server, database in use, or other technical details.\n\nThis provides attackers additional information which they can use to find other attack avenues, or tailor specific attacks, on the application.","check":"Review the application system documentation and interview the application administrators.\n\nAsk them to demonstrate how the web server and application configuration does not disclose any information about the application which could be used by an attacker to gain access to the application.\n\nAsk the application representative to logon as a non-privileged user and review all screens of the application to identify any potential data that should not be disclosed to the user.\n\nReview web server configuration and determine if custom error pages are configured to display on error events.\n\nReview error pages sent to application users to verify the pages are generic in nature and provide no technical details related to application architecture.\n\nIf the application displays any application technical data such as database version, application server information, or any other technical details that should not be disclosed to a regular user, this is a finding.","fix":"Configure the application to not display technical details about the application architecture on error events."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24270r493708_chk","severity":"medium","gid":"V-222600","rid":"SV-222600r879812_rule","stig_id":"APSC-DV-002480","gtitle":"SRG-APP-000441","fix_id":"F-24259r493709_fix","documentable":null,"legacy":["SV-84875","V-70253"],"cci":["CCI-002420"],"nist":["SC-8 (2)"]}},{"id":"SV-222601","code":"control 'SV-222601' do\n  title 'The application must not store sensitive information in hidden fields.'\n  desc \"Hidden fields allow developers to process application data without having to display it on the screen.  Using hidden fields to pass data in forms is a common practice among web applications and by itself is not a security risk.  \n\nHowever, hidden fields are not secure and can be easily manipulated by users.  Information requiring confidentiality or integrity protections must not be placed in a hidden field.   If data that is sensitive must be stored in a hidden field, it must be encrypted.\n\nFurthermore, hidden fields used to control access decisions can lead to a complete compromise of access control mechanisms allowing immediate compromise of the user's application session.\"\n  desc 'check', 'Interview application administrator and review application documentation to identify and familiarize with the application features and functions.\n\nRequest most recent code review and vulnerability scan results.  Review test configuration to ensure testing for hidden fields was conducted.  Review test results for incidents of hidden data fields.  \n\nExamine identified hidden fields and determine what type of data is stored in the hidden fields.\n\nIf the data stored in the hidden fields are determined to be authentication or session related data, or if the code review or vulnerability scan results are not available and configured to test for hidden fields, this is a finding.'\n  desc 'fix', 'Design and configure the application to not store sensitive information in hidden fields.  \n\nEncrypt sensitive information stored in hidden fields using DoD-approved encryption and use server side session management techniques for user session management.'\n  impact 0.7\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24271r493711_chk'\n  tag severity: 'high'\n  tag gid: 'V-222601'\n  tag rid: 'SV-222601r879812_rule'\n  tag stig_id: 'APSC-DV-002485'\n  tag gtitle: 'SRG-APP-000441'\n  tag fix_id: 'F-24260r493712_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84877', 'V-70255']\n  tag cci: ['CCI-002420']\n  tag nist: ['SC-8 (2)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222601.rb"},"title":"The application must not store sensitive information in hidden fields.","desc":"Hidden fields allow developers to process application data without having to display it on the screen.  Using hidden fields to pass data in forms is a common practice among web applications and by itself is not a security risk.  \n\nHowever, hidden fields are not secure and can be easily manipulated by users.  Information requiring confidentiality or integrity protections must not be placed in a hidden field.   If data that is sensitive must be stored in a hidden field, it must be encrypted.\n\nFurthermore, hidden fields used to control access decisions can lead to a complete compromise of access control mechanisms allowing immediate compromise of the user's application session.","descriptions":{"default":"Hidden fields allow developers to process application data without having to display it on the screen.  Using hidden fields to pass data in forms is a common practice among web applications and by itself is not a security risk.  \n\nHowever, hidden fields are not secure and can be easily manipulated by users.  Information requiring confidentiality or integrity protections must not be placed in a hidden field.   If data that is sensitive must be stored in a hidden field, it must be encrypted.\n\nFurthermore, hidden fields used to control access decisions can lead to a complete compromise of access control mechanisms allowing immediate compromise of the user's application session.","check":"Interview application administrator and review application documentation to identify and familiarize with the application features and functions.\n\nRequest most recent code review and vulnerability scan results.  Review test configuration to ensure testing for hidden fields was conducted.  Review test results for incidents of hidden data fields.  \n\nExamine identified hidden fields and determine what type of data is stored in the hidden fields.\n\nIf the data stored in the hidden fields are determined to be authentication or session related data, or if the code review or vulnerability scan results are not available and configured to test for hidden fields, this is a finding.","fix":"Design and configure the application to not store sensitive information in hidden fields.  \n\nEncrypt sensitive information stored in hidden fields using DoD-approved encryption and use server side session management techniques for user session management."},"impact":0.7,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24271r493711_chk","severity":"high","gid":"V-222601","rid":"SV-222601r879812_rule","stig_id":"APSC-DV-002485","gtitle":"SRG-APP-000441","fix_id":"F-24260r493712_fix","documentable":null,"legacy":["SV-84877","V-70255"],"cci":["CCI-002420"],"nist":["SC-8 (2)"]}},{"id":"SV-222602","code":"control 'SV-222602' do\n  title 'The application must protect from Cross-Site Scripting (XSS) vulnerabilities.'\n  desc 'XSS attacks are essentially code injection attacks against the various language interpreters contained within the browser. XSS can be executed via HTML, JavaScript, VBScript, ActiveX; essentially any scripting language a browser is capable of processing.\n\nXSS vulnerabilities are created when a website does not properly sanitize, escape, or encode user input. For example, \"&lt;\" is the HTML encoding for the \"<\" character. If the encoding is performed, the script code will not execute.\n\nThere are 3 parties involved in an XSS attack, the attacker, the trusted and vulnerable website, and the victim. An attacker will take advantage of a vulnerable website that does not properly validate user input by inserting malicious code into any data entry field.\n\nWhen the victim visits the trusted website and clicks on the malicious link left by the attacker, the attacker’s script is executed in the victims browser with the trust permissions assigned to the site.\n\nThere are several different types of XSS attack and the complete details regarding XSS cannot be described completely here.\n\nTo address the issue of XSS, web application developers must escape, encode or otherwise validate all user input that is processed and output by the web server. They should also use web templates or a web development framework that provides the capability to encode or otherwise validate user input.\n\nExamples of XSS vulnerabilities can be obtained from the Open Web Application Security Project (OWASP) website.\n  \nThe site is available by pointing your browser to https://www.owasp.org.'\n  desc 'check', %q(Review the application documentation and the vulnerability assessment scan results from automated vulnerability assessment tools.\n\nVerify scan configuration settings include web-based applications settings which include XSS tests.\n\nReview scan results for XSS vulnerabilities.\n\nIf the scan results indicate aspects of the application are vulnerable to XSS, request subsequent scan data that shows the XSS vulnerabilities previously detected have been fixed.\n\nIf results that show compliance are not available, request proof of any steps that have been taken to mitigate the risk. This can include using network-based IPS to detect and prevent XSS attacks from occurring.\n\nIf scan results are not available, perform manual testing in various data entry fields to determine if XSS exist.\n\nNavigate through the web application as a regular user and identify any data entry fields where data can be input.\n\nInput the following strings:\n\n<script>alert('hello')</script>\n<img src=x onerror=\"alert(document.cookie);\"\n\nIf the script pop up box is displayed, or if scan reports show unremediated XSS results and no mitigating steps have been taken, this is a finding.)\n  desc 'fix', 'Verify user input is validated and encode or escape user input to prevent embedded script code from executing.\n\nDevelop your application using a web template system or a web application development framework that provides auto escaping features rather than building your own escape logic.'\n  impact 0.7\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-36251r602316_chk'\n  tag severity: 'high'\n  tag gid: 'V-222602'\n  tag rid: 'SV-222602r879652_rule'\n  tag stig_id: 'APSC-DV-002490'\n  tag gtitle: 'SRG-APP-000251'\n  tag fix_id: 'F-36215r602317_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84879', 'V-70257']\n  tag cci: ['CCI-001310']\n  tag nist: ['SI-10']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222602.rb"},"title":"The application must protect from Cross-Site Scripting (XSS) vulnerabilities.","desc":"XSS attacks are essentially code injection attacks against the various language interpreters contained within the browser. XSS can be executed via HTML, JavaScript, VBScript, ActiveX; essentially any scripting language a browser is capable of processing.\n\nXSS vulnerabilities are created when a website does not properly sanitize, escape, or encode user input. For example, \"&lt;\" is the HTML encoding for the \"<\" character. If the encoding is performed, the script code will not execute.\n\nThere are 3 parties involved in an XSS attack, the attacker, the trusted and vulnerable website, and the victim. An attacker will take advantage of a vulnerable website that does not properly validate user input by inserting malicious code into any data entry field.\n\nWhen the victim visits the trusted website and clicks on the malicious link left by the attacker, the attacker’s script is executed in the victims browser with the trust permissions assigned to the site.\n\nThere are several different types of XSS attack and the complete details regarding XSS cannot be described completely here.\n\nTo address the issue of XSS, web application developers must escape, encode or otherwise validate all user input that is processed and output by the web server. They should also use web templates or a web development framework that provides the capability to encode or otherwise validate user input.\n\nExamples of XSS vulnerabilities can be obtained from the Open Web Application Security Project (OWASP) website.\n  \nThe site is available by pointing your browser to https://www.owasp.org.","descriptions":{"default":"XSS attacks are essentially code injection attacks against the various language interpreters contained within the browser. XSS can be executed via HTML, JavaScript, VBScript, ActiveX; essentially any scripting language a browser is capable of processing.\n\nXSS vulnerabilities are created when a website does not properly sanitize, escape, or encode user input. For example, \"&lt;\" is the HTML encoding for the \"<\" character. If the encoding is performed, the script code will not execute.\n\nThere are 3 parties involved in an XSS attack, the attacker, the trusted and vulnerable website, and the victim. An attacker will take advantage of a vulnerable website that does not properly validate user input by inserting malicious code into any data entry field.\n\nWhen the victim visits the trusted website and clicks on the malicious link left by the attacker, the attacker’s script is executed in the victims browser with the trust permissions assigned to the site.\n\nThere are several different types of XSS attack and the complete details regarding XSS cannot be described completely here.\n\nTo address the issue of XSS, web application developers must escape, encode or otherwise validate all user input that is processed and output by the web server. They should also use web templates or a web development framework that provides the capability to encode or otherwise validate user input.\n\nExamples of XSS vulnerabilities can be obtained from the Open Web Application Security Project (OWASP) website.\n  \nThe site is available by pointing your browser to https://www.owasp.org.","check":"Review the application documentation and the vulnerability assessment scan results from automated vulnerability assessment tools.\n\nVerify scan configuration settings include web-based applications settings which include XSS tests.\n\nReview scan results for XSS vulnerabilities.\n\nIf the scan results indicate aspects of the application are vulnerable to XSS, request subsequent scan data that shows the XSS vulnerabilities previously detected have been fixed.\n\nIf results that show compliance are not available, request proof of any steps that have been taken to mitigate the risk. This can include using network-based IPS to detect and prevent XSS attacks from occurring.\n\nIf scan results are not available, perform manual testing in various data entry fields to determine if XSS exist.\n\nNavigate through the web application as a regular user and identify any data entry fields where data can be input.\n\nInput the following strings:\n\n<script>alert('hello')</script>\n<img src=x onerror=\"alert(document.cookie);\"\n\nIf the script pop up box is displayed, or if scan reports show unremediated XSS results and no mitigating steps have been taken, this is a finding.","fix":"Verify user input is validated and encode or escape user input to prevent embedded script code from executing.\n\nDevelop your application using a web template system or a web application development framework that provides auto escaping features rather than building your own escape logic."},"impact":0.7,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-36251r602316_chk","severity":"high","gid":"V-222602","rid":"SV-222602r879652_rule","stig_id":"APSC-DV-002490","gtitle":"SRG-APP-000251","fix_id":"F-36215r602317_fix","documentable":null,"legacy":["SV-84879","V-70257"],"cci":["CCI-001310"],"nist":["SI-10"]}},{"id":"SV-222603","code":"control 'SV-222603' do\n  title 'The application must protect from Cross-Site Request Forgery (CSRF) vulnerabilities.'\n  desc 'Cross-Site Request Forgery (CSRF) is an attack where a website user is forced to execute an unwanted action on a website that he or she is currently authenticated to. An attacker, through social engineering (e.g., e-mail or chat) creates a hyperlink which executes unwanted actions on the website the victim is authenticated to and sends it to the victim. If the victim clicks on the link, the action is executed unbeknownst to the victim.\n\nA CSRF attack executes a website request on behalf of the user which can lead to a compromise of the user’s data. What is needed to be successful is for the attacker to know the URL, an authenticated application user, and trick the user into clicking the malicious link.\n\nWhile XSS is not needed for a CSRF attack to work, XSS vulnerabilities can provide the attacker with a vector to obtain information from the user that may be used in mitigating the risk. The application must not be vulnerable to XSS as an XSS attack can be used to help defeat token, double-submit cookie, referrer and origin-based CSRF defenses.'\n  desc 'check', 'Review the application documentation, the code review reports and the vulnerability assessment scan results from the automated vulnerability assessment tools.\n\nVerify scan configuration settings include web-based application settings which include XSS tests.\n\nReview the scan results for CSRF vulnerabilities.\n\nIf the scan results indicate aspects of the application are vulnerable to CSRF, request subsequent scan data that shows the CSRF vulnerabilities previously detected have been fixed.\n\nIf results that show compliance are not available, request proof of any steps that have been taken to mitigate the risk.\n\nMitigation steps include using web reputation filters to identify sources of exploits delivered via CSRF, web application firewalls that validate cookie and the referrer field in the HTTP headers, or product specific IPS filters that identify and intercept known CSRF vulnerabilities in web-based applications.\n\nIf scan results are not available ask the application administrator to provide evidence that shows the application is designed to address CSRF security issues. There are various methods for mitigating the risk, including using a challenge token that is tied to the users session.\n\nIf application scan results show an unremediated CSRF vulnerability, or if no scan results are available, or no mitigations have been enabled, this is a finding.'\n  desc 'fix', 'Configure the application to use unpredictable challenge tokens and check the HTTP referrer to ensure the request was issued from the site itself.  Implement mitigating controls as required such as using web reputation services.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24273r493717_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222603'\n  tag rid: 'SV-222603r879652_rule'\n  tag stig_id: 'APSC-DV-002500'\n  tag gtitle: 'SRG-APP-000251'\n  tag fix_id: 'F-24262r493718_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84881', 'V-70259']\n  tag cci: ['CCI-001310']\n  tag nist: ['SI-10']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222603.rb"},"title":"The application must protect from Cross-Site Request Forgery (CSRF) vulnerabilities.","desc":"Cross-Site Request Forgery (CSRF) is an attack where a website user is forced to execute an unwanted action on a website that he or she is currently authenticated to. An attacker, through social engineering (e.g., e-mail or chat) creates a hyperlink which executes unwanted actions on the website the victim is authenticated to and sends it to the victim. If the victim clicks on the link, the action is executed unbeknownst to the victim.\n\nA CSRF attack executes a website request on behalf of the user which can lead to a compromise of the user’s data. What is needed to be successful is for the attacker to know the URL, an authenticated application user, and trick the user into clicking the malicious link.\n\nWhile XSS is not needed for a CSRF attack to work, XSS vulnerabilities can provide the attacker with a vector to obtain information from the user that may be used in mitigating the risk. The application must not be vulnerable to XSS as an XSS attack can be used to help defeat token, double-submit cookie, referrer and origin-based CSRF defenses.","descriptions":{"default":"Cross-Site Request Forgery (CSRF) is an attack where a website user is forced to execute an unwanted action on a website that he or she is currently authenticated to. An attacker, through social engineering (e.g., e-mail or chat) creates a hyperlink which executes unwanted actions on the website the victim is authenticated to and sends it to the victim. If the victim clicks on the link, the action is executed unbeknownst to the victim.\n\nA CSRF attack executes a website request on behalf of the user which can lead to a compromise of the user’s data. What is needed to be successful is for the attacker to know the URL, an authenticated application user, and trick the user into clicking the malicious link.\n\nWhile XSS is not needed for a CSRF attack to work, XSS vulnerabilities can provide the attacker with a vector to obtain information from the user that may be used in mitigating the risk. The application must not be vulnerable to XSS as an XSS attack can be used to help defeat token, double-submit cookie, referrer and origin-based CSRF defenses.","check":"Review the application documentation, the code review reports and the vulnerability assessment scan results from the automated vulnerability assessment tools.\n\nVerify scan configuration settings include web-based application settings which include XSS tests.\n\nReview the scan results for CSRF vulnerabilities.\n\nIf the scan results indicate aspects of the application are vulnerable to CSRF, request subsequent scan data that shows the CSRF vulnerabilities previously detected have been fixed.\n\nIf results that show compliance are not available, request proof of any steps that have been taken to mitigate the risk.\n\nMitigation steps include using web reputation filters to identify sources of exploits delivered via CSRF, web application firewalls that validate cookie and the referrer field in the HTTP headers, or product specific IPS filters that identify and intercept known CSRF vulnerabilities in web-based applications.\n\nIf scan results are not available ask the application administrator to provide evidence that shows the application is designed to address CSRF security issues. There are various methods for mitigating the risk, including using a challenge token that is tied to the users session.\n\nIf application scan results show an unremediated CSRF vulnerability, or if no scan results are available, or no mitigations have been enabled, this is a finding.","fix":"Configure the application to use unpredictable challenge tokens and check the HTTP referrer to ensure the request was issued from the site itself.  Implement mitigating controls as required such as using web reputation services."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24273r493717_chk","severity":"medium","gid":"V-222603","rid":"SV-222603r879652_rule","stig_id":"APSC-DV-002500","gtitle":"SRG-APP-000251","fix_id":"F-24262r493718_fix","documentable":null,"legacy":["SV-84881","V-70259"],"cci":["CCI-001310"],"nist":["SI-10"]}},{"id":"SV-222604","code":"control 'SV-222604' do\n  title 'The application must protect from command injection.'\n  desc 'A command injection attack is an attack on a vulnerable application where improperly validated input is passed to a command shell setup in the application. The result is the ability of an attacker to execute OS commands via the application.\n\nA command injection allows an attacker to execute their own commands with the same privileges as the application executing.\n\nThe following is an example of a URL based command injection attack.\n\nBefore alteration:\nhttp://sitename/cgi-bin/userData.pl?doc=user1.txt\n\nExample URL modified: \nhttp://sitename/cgi-bin/userData.pl?doc=/bin/ls|\n\nThe result is the execution of the command “/bin/ls” which could allow the attacker to list contents of the directory via the browser.\n\nThe following is a list of functions vulnerable to command injection sorted according to language.  \n\nLanguage Functions/Characters\n- C/C++  - system(), popen(), execlp(), execvp(), ShellExecute(), ShellExecuteEx(), _wsystem()\n- Perl - system, exec, `,open, |, eval, /e\n- Python - exec, eval, os.system, os.popen, execfile, input, compile\n- Java - Class.forName(), Class.newInstance(), Runtime.exec()'\n  desc 'check', 'Review the application documentation and the system configuration settings.\n\nInterview the application administrator for details regarding security assessment including automated code review and vulnerability scans conducted to test for command injection.\n\nReview the scan results from the entire application.\n\nVerify scan configuration is set to check for command injection vulnerabilities.\n\nIf results indicate vulnerability, verify a subsequent scan has been run to ensure the issue has been remediated.\n\nManual test procedures are available on the OWASP website. Procedures may need to be modified to suit application architecture.\n\nhttps://www.owasp.org/index.php/Testing_for_Command_Injection_%28OTG-INPVAL-013%29\n\nIf testing results are not provided demonstrating the vulnerability does not exist, or if the application representative cannot demonstrate how actions are taken to identify and protect from command injection vulnerabilities, this is a finding.'\n  desc 'fix', 'Modify the application so as to escape/sanitize special character input or configure the system to protect against command injection attacks based on application architecture.'\n  impact 0.7\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24274r493720_chk'\n  tag severity: 'high'\n  tag gid: 'V-222604'\n  tag rid: 'SV-222604r879652_rule'\n  tag stig_id: 'APSC-DV-002510'\n  tag gtitle: 'SRG-APP-000251'\n  tag fix_id: 'F-24263r493721_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84883', 'V-70261']\n  tag cci: ['CCI-001310']\n  tag nist: ['SI-10']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222604.rb"},"title":"The application must protect from command injection.","desc":"A command injection attack is an attack on a vulnerable application where improperly validated input is passed to a command shell setup in the application. The result is the ability of an attacker to execute OS commands via the application.\n\nA command injection allows an attacker to execute their own commands with the same privileges as the application executing.\n\nThe following is an example of a URL based command injection attack.\n\nBefore alteration:\nhttp://sitename/cgi-bin/userData.pl?doc=user1.txt\n\nExample URL modified: \nhttp://sitename/cgi-bin/userData.pl?doc=/bin/ls|\n\nThe result is the execution of the command “/bin/ls” which could allow the attacker to list contents of the directory via the browser.\n\nThe following is a list of functions vulnerable to command injection sorted according to language.  \n\nLanguage Functions/Characters\n- C/C++  - system(), popen(), execlp(), execvp(), ShellExecute(), ShellExecuteEx(), _wsystem()\n- Perl - system, exec, `,open, |, eval, /e\n- Python - exec, eval, os.system, os.popen, execfile, input, compile\n- Java - Class.forName(), Class.newInstance(), Runtime.exec()","descriptions":{"default":"A command injection attack is an attack on a vulnerable application where improperly validated input is passed to a command shell setup in the application. The result is the ability of an attacker to execute OS commands via the application.\n\nA command injection allows an attacker to execute their own commands with the same privileges as the application executing.\n\nThe following is an example of a URL based command injection attack.\n\nBefore alteration:\nhttp://sitename/cgi-bin/userData.pl?doc=user1.txt\n\nExample URL modified: \nhttp://sitename/cgi-bin/userData.pl?doc=/bin/ls|\n\nThe result is the execution of the command “/bin/ls” which could allow the attacker to list contents of the directory via the browser.\n\nThe following is a list of functions vulnerable to command injection sorted according to language.  \n\nLanguage Functions/Characters\n- C/C++  - system(), popen(), execlp(), execvp(), ShellExecute(), ShellExecuteEx(), _wsystem()\n- Perl - system, exec, `,open, |, eval, /e\n- Python - exec, eval, os.system, os.popen, execfile, input, compile\n- Java - Class.forName(), Class.newInstance(), Runtime.exec()","check":"Review the application documentation and the system configuration settings.\n\nInterview the application administrator for details regarding security assessment including automated code review and vulnerability scans conducted to test for command injection.\n\nReview the scan results from the entire application.\n\nVerify scan configuration is set to check for command injection vulnerabilities.\n\nIf results indicate vulnerability, verify a subsequent scan has been run to ensure the issue has been remediated.\n\nManual test procedures are available on the OWASP website. Procedures may need to be modified to suit application architecture.\n\nhttps://www.owasp.org/index.php/Testing_for_Command_Injection_%28OTG-INPVAL-013%29\n\nIf testing results are not provided demonstrating the vulnerability does not exist, or if the application representative cannot demonstrate how actions are taken to identify and protect from command injection vulnerabilities, this is a finding.","fix":"Modify the application so as to escape/sanitize special character input or configure the system to protect against command injection attacks based on application architecture."},"impact":0.7,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24274r493720_chk","severity":"high","gid":"V-222604","rid":"SV-222604r879652_rule","stig_id":"APSC-DV-002510","gtitle":"SRG-APP-000251","fix_id":"F-24263r493721_fix","documentable":null,"legacy":["SV-84883","V-70261"],"cci":["CCI-001310"],"nist":["SI-10"]}},{"id":"SV-222605","code":"control 'SV-222605' do\n  title 'The application must protect from canonical representation vulnerabilities.'\n  desc 'Canonical representation vulnerabilities can occur when a data conversion process does not convert the data to its simplest form resulting in the possible misrepresentation of the data.\n\nThe application may behave in an unexpected manner when acting on input that has not been sanitized or normalized.\n\nVulnerable application code is written to expect one form of data and executes its program logic on another form of data thereby creating instability or unexpected behavior.\n\nThe Open Web Application Security Project (OWASP) website provides test and remediation procedures that can be used for testing if vulnerability scan tools or results are not available.\n\nThe site is available by pointing your browser to https://www.owasp.org.'\n  desc 'check', 'Review the application documentation and interview the application administrator for details regarding security assessment code reviews or vulnerability scans.\n\nReview the scan results from the entire application. This can be provided as results from an automated code review or a vulnerability scanning tool.\n\nReview the scan results to determine if there are any existing canonical representation vulnerabilities.\n\nReview web server and application configuration.\n\nThe OWASP website provides the following test procedures:\n\n\"Investigate the web application to determine if it asserts an internal code page, locale, or culture.\n\nIf the default character set, locale is not asserted it will be one of the following:\n\nHTTP Posts. Interesting tidbit: All HTTP posts are required to be ISO 8859-1, which will lose data for most double byte character sets. You must test your application with your supported browsers to determine if they pass in fully encoded double byte characters safely\n\nHTTP Gets. Depends on the previously rendered page and per-browser implementations, but URL encoding is not properly defined for double byte character sets. IE can be optionally forced to do all submits as UTF-8 which is then properly canonicalized on the server\n\n.NET: Unicode (little endian)\n\nJSP implementations, such as Tomcat: UTF8 - see “javaEncoding” in web.xml by many servlet containers\n\nJava: Unicode (UTF-16, big endian, or depends on the OS during JVM startup)\n\nPHP: Set in php.ini, ISO 8859-1”\n\nIf the results are not provided or the application representative cannot demonstrate that the application does not use Unicode encoding, this is a finding.'\n  desc 'fix', 'A suitable canonical form should be chosen and all user input canonicalized into that form before any authorization decisions are performed.\n\nSecurity checks should be carried out after decoding is completed. Moreover, it is recommended to check that the encoding method chosen is a valid canonical encoding for the symbol it represents.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-36252r602319_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222605'\n  tag rid: 'SV-222605r879652_rule'\n  tag stig_id: 'APSC-DV-002520'\n  tag gtitle: 'SRG-APP-000251'\n  tag fix_id: 'F-36216r602320_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84885', 'V-70263']\n  tag cci: ['CCI-001310']\n  tag nist: ['SI-10']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222605.rb"},"title":"The application must protect from canonical representation vulnerabilities.","desc":"Canonical representation vulnerabilities can occur when a data conversion process does not convert the data to its simplest form resulting in the possible misrepresentation of the data.\n\nThe application may behave in an unexpected manner when acting on input that has not been sanitized or normalized.\n\nVulnerable application code is written to expect one form of data and executes its program logic on another form of data thereby creating instability or unexpected behavior.\n\nThe Open Web Application Security Project (OWASP) website provides test and remediation procedures that can be used for testing if vulnerability scan tools or results are not available.\n\nThe site is available by pointing your browser to https://www.owasp.org.","descriptions":{"default":"Canonical representation vulnerabilities can occur when a data conversion process does not convert the data to its simplest form resulting in the possible misrepresentation of the data.\n\nThe application may behave in an unexpected manner when acting on input that has not been sanitized or normalized.\n\nVulnerable application code is written to expect one form of data and executes its program logic on another form of data thereby creating instability or unexpected behavior.\n\nThe Open Web Application Security Project (OWASP) website provides test and remediation procedures that can be used for testing if vulnerability scan tools or results are not available.\n\nThe site is available by pointing your browser to https://www.owasp.org.","check":"Review the application documentation and interview the application administrator for details regarding security assessment code reviews or vulnerability scans.\n\nReview the scan results from the entire application. This can be provided as results from an automated code review or a vulnerability scanning tool.\n\nReview the scan results to determine if there are any existing canonical representation vulnerabilities.\n\nReview web server and application configuration.\n\nThe OWASP website provides the following test procedures:\n\n\"Investigate the web application to determine if it asserts an internal code page, locale, or culture.\n\nIf the default character set, locale is not asserted it will be one of the following:\n\nHTTP Posts. Interesting tidbit: All HTTP posts are required to be ISO 8859-1, which will lose data for most double byte character sets. You must test your application with your supported browsers to determine if they pass in fully encoded double byte characters safely\n\nHTTP Gets. Depends on the previously rendered page and per-browser implementations, but URL encoding is not properly defined for double byte character sets. IE can be optionally forced to do all submits as UTF-8 which is then properly canonicalized on the server\n\n.NET: Unicode (little endian)\n\nJSP implementations, such as Tomcat: UTF8 - see “javaEncoding” in web.xml by many servlet containers\n\nJava: Unicode (UTF-16, big endian, or depends on the OS during JVM startup)\n\nPHP: Set in php.ini, ISO 8859-1”\n\nIf the results are not provided or the application representative cannot demonstrate that the application does not use Unicode encoding, this is a finding.","fix":"A suitable canonical form should be chosen and all user input canonicalized into that form before any authorization decisions are performed.\n\nSecurity checks should be carried out after decoding is completed. Moreover, it is recommended to check that the encoding method chosen is a valid canonical encoding for the symbol it represents."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-36252r602319_chk","severity":"medium","gid":"V-222605","rid":"SV-222605r879652_rule","stig_id":"APSC-DV-002520","gtitle":"SRG-APP-000251","fix_id":"F-36216r602320_fix","documentable":null,"legacy":["SV-84885","V-70263"],"cci":["CCI-001310"],"nist":["SI-10"]}},{"id":"SV-222606","code":"control 'SV-222606' do\n  title 'The application must validate all input.'\n  desc 'Checking the valid syntax and semantics of information system inputs (e.g., character set, length, numerical range, and acceptable values) verifies that inputs match specified definitions for format and content. Software applications typically follow well-defined protocols that use structured messages (i.e., commands or queries) to communicate between software modules or system components. \n\nStructured messages can contain raw or unstructured data interspersed with metadata or control information. If software applications use attacker-supplied inputs to construct structured messages without properly encoding such messages, then the attacker could insert malicious commands or special characters that can cause the data to be interpreted as control information or metadata. \n\nConsequently, the module or component that receives the tainted output will perform the wrong operations or otherwise interpret the data incorrectly. Prescreening inputs prior to passing to interpreters prevents the content from being unintentionally interpreted as commands. Input validation helps to ensure accurate and correct inputs and prevent attacks such as cross-site scripting and a variety of injection attacks.\n\nAbsence of input validation opens an application to improper manipulation of data. The lack of input validation can lead immediate access of application, denial of service, and corruption of data.\n\nInvalid input includes presence of scripting tags within text fields, query string manipulation, and invalid data types and sizes.\n\nWhen an application validates input, it will only execute provided input after it has evaluated the input, validated the input and determined the data is in an expected format, and content is not extraneous or malformed.\n\nComprehensive application security testing and code reviews are required to ensure the application is not vulnerable to input validation vulnerabilities.\n\nApplication security code reviews should be conducted during the development phase to find and address input validation errors. When code reviews are not possible, fuzz testing can be performed on the application to attempt and identify vulnerable data input fields.'\n  desc 'check', 'Review the application documentation, the code review reports and the vulnerability assessment scan results from automated vulnerability assessment tools.\n\nVerify scan configuration settings include input validation and fuzzing tests.\n\nTest data entry fields on all pages/screens of the application.\n\nProcedures on testing input are relevant to the architecture of the application.\n\nA reference on input validation testing is included at the OWASP website. The site includes testing procedures for input validation that affect many different technologies.\n\nIdentify the relevant testing procedures based upon the application architecture and components being tested.\n\nhttps://www.owasp.org/index.php/Testing_for_Input_Validation\n\nIf test results include input validation errors, or if no test results exist, this is a finding.'\n  desc 'fix', 'Design and configure the application to validate input prior to executing commands.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24276r493726_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222606'\n  tag rid: 'SV-222606r879652_rule'\n  tag stig_id: 'APSC-DV-002530'\n  tag gtitle: 'SRG-APP-000251'\n  tag fix_id: 'F-24265r493727_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84887', 'V-70265']\n  tag cci: ['CCI-001310']\n  tag nist: ['SI-10']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222606.rb"},"title":"The application must validate all input.","desc":"Checking the valid syntax and semantics of information system inputs (e.g., character set, length, numerical range, and acceptable values) verifies that inputs match specified definitions for format and content. Software applications typically follow well-defined protocols that use structured messages (i.e., commands or queries) to communicate between software modules or system components. \n\nStructured messages can contain raw or unstructured data interspersed with metadata or control information. If software applications use attacker-supplied inputs to construct structured messages without properly encoding such messages, then the attacker could insert malicious commands or special characters that can cause the data to be interpreted as control information or metadata. \n\nConsequently, the module or component that receives the tainted output will perform the wrong operations or otherwise interpret the data incorrectly. Prescreening inputs prior to passing to interpreters prevents the content from being unintentionally interpreted as commands. Input validation helps to ensure accurate and correct inputs and prevent attacks such as cross-site scripting and a variety of injection attacks.\n\nAbsence of input validation opens an application to improper manipulation of data. The lack of input validation can lead immediate access of application, denial of service, and corruption of data.\n\nInvalid input includes presence of scripting tags within text fields, query string manipulation, and invalid data types and sizes.\n\nWhen an application validates input, it will only execute provided input after it has evaluated the input, validated the input and determined the data is in an expected format, and content is not extraneous or malformed.\n\nComprehensive application security testing and code reviews are required to ensure the application is not vulnerable to input validation vulnerabilities.\n\nApplication security code reviews should be conducted during the development phase to find and address input validation errors. When code reviews are not possible, fuzz testing can be performed on the application to attempt and identify vulnerable data input fields.","descriptions":{"default":"Checking the valid syntax and semantics of information system inputs (e.g., character set, length, numerical range, and acceptable values) verifies that inputs match specified definitions for format and content. Software applications typically follow well-defined protocols that use structured messages (i.e., commands or queries) to communicate between software modules or system components. \n\nStructured messages can contain raw or unstructured data interspersed with metadata or control information. If software applications use attacker-supplied inputs to construct structured messages without properly encoding such messages, then the attacker could insert malicious commands or special characters that can cause the data to be interpreted as control information or metadata. \n\nConsequently, the module or component that receives the tainted output will perform the wrong operations or otherwise interpret the data incorrectly. Prescreening inputs prior to passing to interpreters prevents the content from being unintentionally interpreted as commands. Input validation helps to ensure accurate and correct inputs and prevent attacks such as cross-site scripting and a variety of injection attacks.\n\nAbsence of input validation opens an application to improper manipulation of data. The lack of input validation can lead immediate access of application, denial of service, and corruption of data.\n\nInvalid input includes presence of scripting tags within text fields, query string manipulation, and invalid data types and sizes.\n\nWhen an application validates input, it will only execute provided input after it has evaluated the input, validated the input and determined the data is in an expected format, and content is not extraneous or malformed.\n\nComprehensive application security testing and code reviews are required to ensure the application is not vulnerable to input validation vulnerabilities.\n\nApplication security code reviews should be conducted during the development phase to find and address input validation errors. When code reviews are not possible, fuzz testing can be performed on the application to attempt and identify vulnerable data input fields.","check":"Review the application documentation, the code review reports and the vulnerability assessment scan results from automated vulnerability assessment tools.\n\nVerify scan configuration settings include input validation and fuzzing tests.\n\nTest data entry fields on all pages/screens of the application.\n\nProcedures on testing input are relevant to the architecture of the application.\n\nA reference on input validation testing is included at the OWASP website. The site includes testing procedures for input validation that affect many different technologies.\n\nIdentify the relevant testing procedures based upon the application architecture and components being tested.\n\nhttps://www.owasp.org/index.php/Testing_for_Input_Validation\n\nIf test results include input validation errors, or if no test results exist, this is a finding.","fix":"Design and configure the application to validate input prior to executing commands."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24276r493726_chk","severity":"medium","gid":"V-222606","rid":"SV-222606r879652_rule","stig_id":"APSC-DV-002530","gtitle":"SRG-APP-000251","fix_id":"F-24265r493727_fix","documentable":null,"legacy":["SV-84887","V-70265"],"cci":["CCI-001310"],"nist":["SI-10"]}},{"id":"SV-222607","code":"control 'SV-222607' do\n  title 'The application must not be vulnerable to SQL Injection.'\n  desc 'SQL Injection is a code injection attack against database applications. Malicious SQL statements are inserted into an application data entry field where they are submitted to the database and executed. This is a direct result of not validating input that is used by the application to perform a command or execute an action.\n\nSuccessful attacks can read data, write data, execute administrative functions within the database, shutdown the DBMS, and in some cases execute OS commands.\n\nBest practices to reduce the potential for SQL Injection vulnerabilities include:\n\nNot using concatenation or replacement to build SQL queries.\n\nUsing prepared statements with parameterized queries that have been tested and validated not to be vulnerable to SQL Injection.\n\nUsing stored procedures that have been tested and validated not to be vulnerable to SQL Injection.\n\nEscaping all user supplied input.\n\nAdditional steps to prevent SQL Injection can be found at the OWASP website:\n\nhttps://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet'\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nRequest the latest vulnerability scan test results.\n\nVerify the scan configuration is configured to test for SQL injection flaws.\n\nReview the scan results to determine if any SQL injection flaws were detected during application testing.\n\nIf SQL injection flaws were discovered, request a subsequent scan that will show that the issues have been remediated.\n\nIf the scan results are not available, identify the database product in use and refer to the OWASP web application testing guide for detailed instructions on performing a manual SQL injection test. The instructions are located here and many tests are organized by database product:\n\nhttps://www.owasp.org/index.php/Testing_for_SQL_Injection_%28OTG-INPVAL-005%29\n\nIf the application is vulnerable to SQL injection attack, contains SQL injection flaws, or if scan results do not exist, this is a finding.'\n  desc 'fix', 'Modify the application and remove SQL injection vulnerabilities.'\n  impact 0.7\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24277r493729_chk'\n  tag severity: 'high'\n  tag gid: 'V-222607'\n  tag rid: 'SV-222607r879652_rule'\n  tag stig_id: 'APSC-DV-002540'\n  tag gtitle: 'SRG-APP-000251'\n  tag fix_id: 'F-24266r493730_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84889', 'V-70267']\n  tag cci: ['CCI-001310']\n  tag nist: ['SI-10']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222607.rb"},"title":"The application must not be vulnerable to SQL Injection.","desc":"SQL Injection is a code injection attack against database applications. Malicious SQL statements are inserted into an application data entry field where they are submitted to the database and executed. This is a direct result of not validating input that is used by the application to perform a command or execute an action.\n\nSuccessful attacks can read data, write data, execute administrative functions within the database, shutdown the DBMS, and in some cases execute OS commands.\n\nBest practices to reduce the potential for SQL Injection vulnerabilities include:\n\nNot using concatenation or replacement to build SQL queries.\n\nUsing prepared statements with parameterized queries that have been tested and validated not to be vulnerable to SQL Injection.\n\nUsing stored procedures that have been tested and validated not to be vulnerable to SQL Injection.\n\nEscaping all user supplied input.\n\nAdditional steps to prevent SQL Injection can be found at the OWASP website:\n\nhttps://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet","descriptions":{"default":"SQL Injection is a code injection attack against database applications. Malicious SQL statements are inserted into an application data entry field where they are submitted to the database and executed. This is a direct result of not validating input that is used by the application to perform a command or execute an action.\n\nSuccessful attacks can read data, write data, execute administrative functions within the database, shutdown the DBMS, and in some cases execute OS commands.\n\nBest practices to reduce the potential for SQL Injection vulnerabilities include:\n\nNot using concatenation or replacement to build SQL queries.\n\nUsing prepared statements with parameterized queries that have been tested and validated not to be vulnerable to SQL Injection.\n\nUsing stored procedures that have been tested and validated not to be vulnerable to SQL Injection.\n\nEscaping all user supplied input.\n\nAdditional steps to prevent SQL Injection can be found at the OWASP website:\n\nhttps://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet","check":"Review the application documentation and interview the application administrator.\n\nRequest the latest vulnerability scan test results.\n\nVerify the scan configuration is configured to test for SQL injection flaws.\n\nReview the scan results to determine if any SQL injection flaws were detected during application testing.\n\nIf SQL injection flaws were discovered, request a subsequent scan that will show that the issues have been remediated.\n\nIf the scan results are not available, identify the database product in use and refer to the OWASP web application testing guide for detailed instructions on performing a manual SQL injection test. The instructions are located here and many tests are organized by database product:\n\nhttps://www.owasp.org/index.php/Testing_for_SQL_Injection_%28OTG-INPVAL-005%29\n\nIf the application is vulnerable to SQL injection attack, contains SQL injection flaws, or if scan results do not exist, this is a finding.","fix":"Modify the application and remove SQL injection vulnerabilities."},"impact":0.7,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24277r493729_chk","severity":"high","gid":"V-222607","rid":"SV-222607r879652_rule","stig_id":"APSC-DV-002540","gtitle":"SRG-APP-000251","fix_id":"F-24266r493730_fix","documentable":null,"legacy":["SV-84889","V-70267"],"cci":["CCI-001310"],"nist":["SI-10"]}},{"id":"SV-222608","code":"control 'SV-222608' do\n  title 'The application must not be vulnerable to XML-oriented attacks.'\n  desc 'Extensible Markup Language (XML) is widely employed in web technology and applications like web services (SOAP, REST, and WSDL) and is also used for configuration files. XML vulnerability examples include XML injection, XML Spoofing, XML-based Denial of Service attacks and information disclosure attacks.\n\nWhen utilizing XML, web applications must take steps to ensure they are addressing XML-related security issues. This is accomplished by choosing well-designed application components, building application code that follows security best practices and by patching application components when vulnerabilities are identified.\n\nXML firewalls or gateways may be employed to assist in protecting applications by controlling access to XML-based applications, filtering XML content, rate-limiting requests, and validating XML traffic.'\n  desc 'check', 'Review the application documentation, the application architecture and interview the application administrator.\n\nIdentify any XML-based web services or XML functionality performed by the application.\n\nDetermine if an XML firewall is deployed to protect application from XML-related attacks.\n\nIf the application does not process XML, the requirement is not applicable.\n\nReview the latest application vulnerability assessment and verify the scan was configured to test for XML-related vulnerabilities and security issues.\n\nExamples include but are not limited to:\n\nXML Injection\nXML related Denial of Service\nXPATH injection\nXML Signature attacks\nXML Spoofing\n\nIf an XML firewall is deployed, request configuration information regarding the application and validate the firewall is configured to protect the application.\n\nIf the vulnerability scan is not configured to scan for XML-oriented vulnerabilities, if no scan results exist, or if the XML firewall is not configured to protect the application, this is a finding.'\n  desc 'fix', 'Design the application to utilize components that are not vulnerable to XML attacks.\n\nPatch the application components when vulnerabilities are discovered.'\n  impact 0.7\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24278r493732_chk'\n  tag severity: 'high'\n  tag gid: 'V-222608'\n  tag rid: 'SV-222608r879652_rule'\n  tag stig_id: 'APSC-DV-002550'\n  tag gtitle: 'SRG-APP-000251'\n  tag fix_id: 'F-24267r493733_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84891', 'V-70269']\n  tag cci: ['CCI-001310']\n  tag nist: ['SI-10']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222608.rb"},"title":"The application must not be vulnerable to XML-oriented attacks.","desc":"Extensible Markup Language (XML) is widely employed in web technology and applications like web services (SOAP, REST, and WSDL) and is also used for configuration files. XML vulnerability examples include XML injection, XML Spoofing, XML-based Denial of Service attacks and information disclosure attacks.\n\nWhen utilizing XML, web applications must take steps to ensure they are addressing XML-related security issues. This is accomplished by choosing well-designed application components, building application code that follows security best practices and by patching application components when vulnerabilities are identified.\n\nXML firewalls or gateways may be employed to assist in protecting applications by controlling access to XML-based applications, filtering XML content, rate-limiting requests, and validating XML traffic.","descriptions":{"default":"Extensible Markup Language (XML) is widely employed in web technology and applications like web services (SOAP, REST, and WSDL) and is also used for configuration files. XML vulnerability examples include XML injection, XML Spoofing, XML-based Denial of Service attacks and information disclosure attacks.\n\nWhen utilizing XML, web applications must take steps to ensure they are addressing XML-related security issues. This is accomplished by choosing well-designed application components, building application code that follows security best practices and by patching application components when vulnerabilities are identified.\n\nXML firewalls or gateways may be employed to assist in protecting applications by controlling access to XML-based applications, filtering XML content, rate-limiting requests, and validating XML traffic.","check":"Review the application documentation, the application architecture and interview the application administrator.\n\nIdentify any XML-based web services or XML functionality performed by the application.\n\nDetermine if an XML firewall is deployed to protect application from XML-related attacks.\n\nIf the application does not process XML, the requirement is not applicable.\n\nReview the latest application vulnerability assessment and verify the scan was configured to test for XML-related vulnerabilities and security issues.\n\nExamples include but are not limited to:\n\nXML Injection\nXML related Denial of Service\nXPATH injection\nXML Signature attacks\nXML Spoofing\n\nIf an XML firewall is deployed, request configuration information regarding the application and validate the firewall is configured to protect the application.\n\nIf the vulnerability scan is not configured to scan for XML-oriented vulnerabilities, if no scan results exist, or if the XML firewall is not configured to protect the application, this is a finding.","fix":"Design the application to utilize components that are not vulnerable to XML attacks.\n\nPatch the application components when vulnerabilities are discovered."},"impact":0.7,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24278r493732_chk","severity":"high","gid":"V-222608","rid":"SV-222608r879652_rule","stig_id":"APSC-DV-002550","gtitle":"SRG-APP-000251","fix_id":"F-24267r493733_fix","documentable":null,"legacy":["SV-84891","V-70269"],"cci":["CCI-001310"],"nist":["SI-10"]}},{"id":"SV-222609","code":"control 'SV-222609' do\n  title 'The application must not be subject to input handling vulnerabilities.'\n  desc 'A common application vulnerability is unpredictable behavior due to improper input validation. This requirement guards against adverse or unintended system behavior caused by invalid inputs, where information system responses to the invalid input may be disruptive or cause the system to fail into an unsafe state.\n\nData received from the user should always be suspected as being malicious and always validated prior to using it as input to the application.\n\nSome examples of input methods:\n\n- Forms Data\n- URL parameters\n- Hidden Fields\n- Cookies\n- HTTP Headers or anything in the HTTP request\n- Client data entry fields\n\nItems to validate:\n\n- Out of range values/Boundary \n- Data length \n- Validate types of characters allowed\n- Whitelist validation for known good data input while denying all other input.\n\nOther recommendations include: \n\n- Using drop down menus for lists\n- Validating input on the server, not on the client.\n\nIf validating on the client, also validate on the server:\n\n- Using regular expressions to validate input\n- Using HTML filter libraries that implement input validation tasks.'\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nIf working with the developer, request documentation on their development processes and what their standard operating procedure is for sanitizing all application input.\n\nIdentify the latest vulnerability scan results.\n\nReview the scan results and scan configuration settings.\n\nVerify the scan was configured to identify input validation vulnerabilities.\n\nIf the scan results detected high risk vulnerabilities, verify a more recent scan shows remediation of the vulnerabilities is available for examination.\n\nReview any risk acceptance documentation that indicates the ISSO has reviewed and accepted the risk.\n\nIf the vulnerability scan is not configured to test for input validation vulnerabilities if the most recent scan results show that high risk input validation vulnerabilities exist and a documented risk acceptance from the ISSO is not available, or if the scan results do not exist, this is a finding.'\n  desc 'fix', 'Follow best practice when accepting user input and verify that all input is validated before the application processes the input.\n\nRemediate identified vulnerabilities and obtain documented risk acceptance for those issues that cannot be remediated immediately.'\n  impact 0.7\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-36253r602322_chk'\n  tag severity: 'high'\n  tag gid: 'V-222609'\n  tag rid: 'SV-222609r879818_rule'\n  tag stig_id: 'APSC-DV-002560'\n  tag gtitle: 'SRG-APP-000447'\n  tag fix_id: 'F-36217r864578_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84893', 'V-70271']\n  tag cci: ['CCI-002754']\n  tag nist: ['SI-10 (3)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222609.rb"},"title":"The application must not be subject to input handling vulnerabilities.","desc":"A common application vulnerability is unpredictable behavior due to improper input validation. This requirement guards against adverse or unintended system behavior caused by invalid inputs, where information system responses to the invalid input may be disruptive or cause the system to fail into an unsafe state.\n\nData received from the user should always be suspected as being malicious and always validated prior to using it as input to the application.\n\nSome examples of input methods:\n\n- Forms Data\n- URL parameters\n- Hidden Fields\n- Cookies\n- HTTP Headers or anything in the HTTP request\n- Client data entry fields\n\nItems to validate:\n\n- Out of range values/Boundary \n- Data length \n- Validate types of characters allowed\n- Whitelist validation for known good data input while denying all other input.\n\nOther recommendations include: \n\n- Using drop down menus for lists\n- Validating input on the server, not on the client.\n\nIf validating on the client, also validate on the server:\n\n- Using regular expressions to validate input\n- Using HTML filter libraries that implement input validation tasks.","descriptions":{"default":"A common application vulnerability is unpredictable behavior due to improper input validation. This requirement guards against adverse or unintended system behavior caused by invalid inputs, where information system responses to the invalid input may be disruptive or cause the system to fail into an unsafe state.\n\nData received from the user should always be suspected as being malicious and always validated prior to using it as input to the application.\n\nSome examples of input methods:\n\n- Forms Data\n- URL parameters\n- Hidden Fields\n- Cookies\n- HTTP Headers or anything in the HTTP request\n- Client data entry fields\n\nItems to validate:\n\n- Out of range values/Boundary \n- Data length \n- Validate types of characters allowed\n- Whitelist validation for known good data input while denying all other input.\n\nOther recommendations include: \n\n- Using drop down menus for lists\n- Validating input on the server, not on the client.\n\nIf validating on the client, also validate on the server:\n\n- Using regular expressions to validate input\n- Using HTML filter libraries that implement input validation tasks.","check":"Review the application documentation and interview the application administrator.\n\nIf working with the developer, request documentation on their development processes and what their standard operating procedure is for sanitizing all application input.\n\nIdentify the latest vulnerability scan results.\n\nReview the scan results and scan configuration settings.\n\nVerify the scan was configured to identify input validation vulnerabilities.\n\nIf the scan results detected high risk vulnerabilities, verify a more recent scan shows remediation of the vulnerabilities is available for examination.\n\nReview any risk acceptance documentation that indicates the ISSO has reviewed and accepted the risk.\n\nIf the vulnerability scan is not configured to test for input validation vulnerabilities if the most recent scan results show that high risk input validation vulnerabilities exist and a documented risk acceptance from the ISSO is not available, or if the scan results do not exist, this is a finding.","fix":"Follow best practice when accepting user input and verify that all input is validated before the application processes the input.\n\nRemediate identified vulnerabilities and obtain documented risk acceptance for those issues that cannot be remediated immediately."},"impact":0.7,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-36253r602322_chk","severity":"high","gid":"V-222609","rid":"SV-222609r879818_rule","stig_id":"APSC-DV-002560","gtitle":"SRG-APP-000447","fix_id":"F-36217r864578_fix","documentable":null,"legacy":["SV-84893","V-70271"],"cci":["CCI-002754"],"nist":["SI-10 (3)"]}},{"id":"SV-222610","code":"control 'SV-222610' do\n  title 'The application must generate error messages that provide information necessary for corrective actions without revealing information that could be exploited by adversaries.'\n  desc \"Only authorized personnel should be aware of errors and the details of the errors. Error messages are an indicator of an organization's operational state or can identify application components. Additionally, Personally Identifiable Information (PII) and operational information must not be revealed through error messages to unauthorized personnel or their designated representatives.\n\nThe structure and content of error messages must be carefully considered by the organization and development team. The extent to which the information system is able to identify and handle error conditions is guided by organizational policy and operational requirements.\n\nError messages should not include variable names, variable types, SQL strings, or source code. Errors that contain field names from the screen and a description of what should be in the field should not be considered a finding.\"\n  desc 'check', 'Review the application documentation and interview the application administrator for details regarding how the application displays error messages.\n\nUtilize the application as a non-privileged user and attempt to execute functionality that will generate error messages.\n\nReview the error messages displayed to ensure no sensitive information is provided to end users.\n\nIf error messages are designed to provide users with just enough detail to pass along to support staff in order to aid in troubleshooting such as date, time, or other generic information, this is not a finding.\n\nIf variable names, SQL strings, system path information, or source or program code are displayed in error messages sent to non-privileged users, this is a finding.'\n  desc 'fix', 'Configure the server to not send error messages containing system information or sensitive data to users.\n\nUse generic error messages.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24280r493738_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222610'\n  tag rid: 'SV-222610r879655_rule'\n  tag stig_id: 'APSC-DV-002570'\n  tag gtitle: 'SRG-APP-000266'\n  tag fix_id: 'F-24269r493739_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84895', 'V-70273']\n  tag cci: ['CCI-001312']\n  tag nist: ['SI-11 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222610.rb"},"title":"The application must generate error messages that provide information necessary for corrective actions without revealing information that could be exploited by adversaries.","desc":"Only authorized personnel should be aware of errors and the details of the errors. Error messages are an indicator of an organization's operational state or can identify application components. Additionally, Personally Identifiable Information (PII) and operational information must not be revealed through error messages to unauthorized personnel or their designated representatives.\n\nThe structure and content of error messages must be carefully considered by the organization and development team. The extent to which the information system is able to identify and handle error conditions is guided by organizational policy and operational requirements.\n\nError messages should not include variable names, variable types, SQL strings, or source code. Errors that contain field names from the screen and a description of what should be in the field should not be considered a finding.","descriptions":{"default":"Only authorized personnel should be aware of errors and the details of the errors. Error messages are an indicator of an organization's operational state or can identify application components. Additionally, Personally Identifiable Information (PII) and operational information must not be revealed through error messages to unauthorized personnel or their designated representatives.\n\nThe structure and content of error messages must be carefully considered by the organization and development team. The extent to which the information system is able to identify and handle error conditions is guided by organizational policy and operational requirements.\n\nError messages should not include variable names, variable types, SQL strings, or source code. Errors that contain field names from the screen and a description of what should be in the field should not be considered a finding.","check":"Review the application documentation and interview the application administrator for details regarding how the application displays error messages.\n\nUtilize the application as a non-privileged user and attempt to execute functionality that will generate error messages.\n\nReview the error messages displayed to ensure no sensitive information is provided to end users.\n\nIf error messages are designed to provide users with just enough detail to pass along to support staff in order to aid in troubleshooting such as date, time, or other generic information, this is not a finding.\n\nIf variable names, SQL strings, system path information, or source or program code are displayed in error messages sent to non-privileged users, this is a finding.","fix":"Configure the server to not send error messages containing system information or sensitive data to users.\n\nUse generic error messages."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24280r493738_chk","severity":"medium","gid":"V-222610","rid":"SV-222610r879655_rule","stig_id":"APSC-DV-002570","gtitle":"SRG-APP-000266","fix_id":"F-24269r493739_fix","documentable":null,"legacy":["SV-84895","V-70273"],"cci":["CCI-001312"],"nist":["SI-11 a"]}},{"id":"SV-222611","code":"control 'SV-222611' do\n  title 'The application must reveal error messages only to the ISSO, ISSM, or SA.'\n  desc \"Only authorized personnel should be aware of errors and the details of the errors. Error messages are an indicator of an organization's operational state or can identify application components. Additionally, Personally Identifiable Information (PII) and operational information must not be revealed through error messages to unauthorized personnel or their designated representatives.\n\nThe structure and content of error messages must be carefully considered by the organization and development team. The extent to which the information system is able to identify and handle error conditions is guided by organizational policy and operational requirements.\n\nError messages should not include variable names, variable types, SQL strings, or source code. Errors that contain field names from the screen and a description of what should be in the field should not be considered a finding.\"\n  desc 'check', 'Review the application documentation and interview the application administrator for details regarding how the application displays error messages.\n\nAuthenticate to the application as a non-privileged user and attempt to execute functionality that will generate error messages.\n\nReview the error messages displayed to ensure no sensitive information is provided to end users.\n\nAuthenticate as a privileged user and repeat tests.\n\nIf error messages are designed to provide users with just enough detail to pass along to support staff in order to aid in troubleshooting such as date, time or other generic information, this is not a finding.\n\nIf detailed error messages are provided to privileged users, this is not a finding.\n\nIf variable names, SQL strings, system path information, or source or program code are displayed in error messages sent to non-privileged users, this is a finding.'\n  desc 'fix', 'Configure the server to only send error messages containing system information or sensitive data to privileged users.\n\nUse generic error messages for non-privileged users.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24281r493741_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222611'\n  tag rid: 'SV-222611r879656_rule'\n  tag stig_id: 'APSC-DV-002580'\n  tag gtitle: 'SRG-APP-000267'\n  tag fix_id: 'F-24270r493742_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84897', 'V-70275']\n  tag cci: ['CCI-001314']\n  tag nist: ['SI-11 b']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222611.rb"},"title":"The application must reveal error messages only to the ISSO, ISSM, or SA.","desc":"Only authorized personnel should be aware of errors and the details of the errors. Error messages are an indicator of an organization's operational state or can identify application components. Additionally, Personally Identifiable Information (PII) and operational information must not be revealed through error messages to unauthorized personnel or their designated representatives.\n\nThe structure and content of error messages must be carefully considered by the organization and development team. The extent to which the information system is able to identify and handle error conditions is guided by organizational policy and operational requirements.\n\nError messages should not include variable names, variable types, SQL strings, or source code. Errors that contain field names from the screen and a description of what should be in the field should not be considered a finding.","descriptions":{"default":"Only authorized personnel should be aware of errors and the details of the errors. Error messages are an indicator of an organization's operational state or can identify application components. Additionally, Personally Identifiable Information (PII) and operational information must not be revealed through error messages to unauthorized personnel or their designated representatives.\n\nThe structure and content of error messages must be carefully considered by the organization and development team. The extent to which the information system is able to identify and handle error conditions is guided by organizational policy and operational requirements.\n\nError messages should not include variable names, variable types, SQL strings, or source code. Errors that contain field names from the screen and a description of what should be in the field should not be considered a finding.","check":"Review the application documentation and interview the application administrator for details regarding how the application displays error messages.\n\nAuthenticate to the application as a non-privileged user and attempt to execute functionality that will generate error messages.\n\nReview the error messages displayed to ensure no sensitive information is provided to end users.\n\nAuthenticate as a privileged user and repeat tests.\n\nIf error messages are designed to provide users with just enough detail to pass along to support staff in order to aid in troubleshooting such as date, time or other generic information, this is not a finding.\n\nIf detailed error messages are provided to privileged users, this is not a finding.\n\nIf variable names, SQL strings, system path information, or source or program code are displayed in error messages sent to non-privileged users, this is a finding.","fix":"Configure the server to only send error messages containing system information or sensitive data to privileged users.\n\nUse generic error messages for non-privileged users."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24281r493741_chk","severity":"medium","gid":"V-222611","rid":"SV-222611r879656_rule","stig_id":"APSC-DV-002580","gtitle":"SRG-APP-000267","fix_id":"F-24270r493742_fix","documentable":null,"legacy":["SV-84897","V-70275"],"cci":["CCI-001314"],"nist":["SI-11 b"]}},{"id":"SV-222612","code":"control 'SV-222612' do\n  title 'The application must not be vulnerable to overflow attacks.'\n  desc 'A buffer overflow occurs when a program exceeds the amount of data allocated to a buffer. The buffer is a sequential section of memory and when the data is written outside the memory bounds, the program can crash or malicious code can be executed.\n\nSecurity safeguards employed to protect memory include, for example, data execution prevention and address space layout randomization. Data execution prevention safeguards can either be hardware-enforced or software-enforced with hardware providing the greater strength of mechanism.\n\nBuffer overflows can manifest as stack overflows, heap overflows integer overflows and format string overflows. Each type of overflow is dependent upon the underlying application language and the context in which the overflow is executed.\n\nInteger overflows can lead to infinite looping when loop index variables are compromised and cause a denial of service.  If the integer is used in data references, the data can become corrupt. Also, using the integer in memory allocation can cause buffer overflows, and a denial of service.  Integers used in access control mechanisms can potentially trigger buffer overflows, which can be used to execute arbitrary code. \n\nAlmost all known web servers, application servers, and web application environments are susceptible to buffer overflows. Proper validation of user input is required to mitigate the risk. Notably, limiting the size of the strings a user is allowed to input to a program to a predetermined, acceptable length.\n\nA code review, static code analysis or active vulnerability or fuzz testing are methods used to identify overflows within application code.'\n  desc 'check', 'Review the application documentation and architecture.\n\nInterview the application admin and identify the most recent code testing and analysis that has been conducted.\n\nReview the test results; verify configuration of analysis tools are set to check for the existence of overflows. This includes but is not limited to buffer overflows, stack overflows, heap overflows, integer overflows and format string overflows.\n\nIf overflows are identified in the test results, verify the latest test results are being used, if not, ensure remediation has been completed.\n\nIf the test results show overflows exist and no remediation evidence is presented, or if test results are not available, this is a finding.'\n  desc 'fix', 'Design the application to use a language or compiler that performs automatic bounds checking.\n\nUse an abstraction library to abstract away risky APIs.\n\nUse compiler-based canary mechanisms such as StackGuard, ProPolice, and the Microsoft Visual Studio/GS flag.\n\nUse OS-level preventative functionality and control user input validation.\n\nPatch applications when overflows are identified in vendor products.'\n  impact 0.7\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-36254r602325_chk'\n  tag severity: 'high'\n  tag gid: 'V-222612'\n  tag rid: 'SV-222612r879821_rule'\n  tag stig_id: 'APSC-DV-002590'\n  tag gtitle: 'SRG-APP-000450'\n  tag fix_id: 'F-36218r864579_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84899', 'V-70277']\n  tag cci: ['CCI-002824']\n  tag nist: ['SI-16']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222612.rb"},"title":"The application must not be vulnerable to overflow attacks.","desc":"A buffer overflow occurs when a program exceeds the amount of data allocated to a buffer. The buffer is a sequential section of memory and when the data is written outside the memory bounds, the program can crash or malicious code can be executed.\n\nSecurity safeguards employed to protect memory include, for example, data execution prevention and address space layout randomization. Data execution prevention safeguards can either be hardware-enforced or software-enforced with hardware providing the greater strength of mechanism.\n\nBuffer overflows can manifest as stack overflows, heap overflows integer overflows and format string overflows. Each type of overflow is dependent upon the underlying application language and the context in which the overflow is executed.\n\nInteger overflows can lead to infinite looping when loop index variables are compromised and cause a denial of service.  If the integer is used in data references, the data can become corrupt. Also, using the integer in memory allocation can cause buffer overflows, and a denial of service.  Integers used in access control mechanisms can potentially trigger buffer overflows, which can be used to execute arbitrary code. \n\nAlmost all known web servers, application servers, and web application environments are susceptible to buffer overflows. Proper validation of user input is required to mitigate the risk. Notably, limiting the size of the strings a user is allowed to input to a program to a predetermined, acceptable length.\n\nA code review, static code analysis or active vulnerability or fuzz testing are methods used to identify overflows within application code.","descriptions":{"default":"A buffer overflow occurs when a program exceeds the amount of data allocated to a buffer. The buffer is a sequential section of memory and when the data is written outside the memory bounds, the program can crash or malicious code can be executed.\n\nSecurity safeguards employed to protect memory include, for example, data execution prevention and address space layout randomization. Data execution prevention safeguards can either be hardware-enforced or software-enforced with hardware providing the greater strength of mechanism.\n\nBuffer overflows can manifest as stack overflows, heap overflows integer overflows and format string overflows. Each type of overflow is dependent upon the underlying application language and the context in which the overflow is executed.\n\nInteger overflows can lead to infinite looping when loop index variables are compromised and cause a denial of service.  If the integer is used in data references, the data can become corrupt. Also, using the integer in memory allocation can cause buffer overflows, and a denial of service.  Integers used in access control mechanisms can potentially trigger buffer overflows, which can be used to execute arbitrary code. \n\nAlmost all known web servers, application servers, and web application environments are susceptible to buffer overflows. Proper validation of user input is required to mitigate the risk. Notably, limiting the size of the strings a user is allowed to input to a program to a predetermined, acceptable length.\n\nA code review, static code analysis or active vulnerability or fuzz testing are methods used to identify overflows within application code.","check":"Review the application documentation and architecture.\n\nInterview the application admin and identify the most recent code testing and analysis that has been conducted.\n\nReview the test results; verify configuration of analysis tools are set to check for the existence of overflows. This includes but is not limited to buffer overflows, stack overflows, heap overflows, integer overflows and format string overflows.\n\nIf overflows are identified in the test results, verify the latest test results are being used, if not, ensure remediation has been completed.\n\nIf the test results show overflows exist and no remediation evidence is presented, or if test results are not available, this is a finding.","fix":"Design the application to use a language or compiler that performs automatic bounds checking.\n\nUse an abstraction library to abstract away risky APIs.\n\nUse compiler-based canary mechanisms such as StackGuard, ProPolice, and the Microsoft Visual Studio/GS flag.\n\nUse OS-level preventative functionality and control user input validation.\n\nPatch applications when overflows are identified in vendor products."},"impact":0.7,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-36254r602325_chk","severity":"high","gid":"V-222612","rid":"SV-222612r879821_rule","stig_id":"APSC-DV-002590","gtitle":"SRG-APP-000450","fix_id":"F-36218r864579_fix","documentable":null,"legacy":["SV-84899","V-70277"],"cci":["CCI-002824"],"nist":["SI-16"]}},{"id":"SV-222613","code":"control 'SV-222613' do\n  title 'The application must remove organization-defined software components after updated versions have been installed.'\n  desc 'Previous versions of software components that are not removed from the information system after updates have been installed may be exploited by adversaries. Some information technology products may remove older versions of software automatically from the information system.'\n  desc 'check', 'Review the application documentation and interview the application admin to identify application locations on system.\n\nIdentify application versions that are installed on the system.\n\nReview the file system structure to see if older versions of the application are still installed.\n\nIf old versions of the application or components are still installed on the system, this is a finding.'\n  desc 'fix', 'Configure or design the application to remove old components when updating.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24283r493747_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222613'\n  tag rid: 'SV-222613r879825_rule'\n  tag stig_id: 'APSC-DV-002610'\n  tag gtitle: 'SRG-APP-000454'\n  tag fix_id: 'F-24272r493748_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84901', 'V-70279']\n  tag cci: ['CCI-002617']\n  tag nist: ['SI-2 (6)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222613.rb"},"title":"The application must remove organization-defined software components after updated versions have been installed.","desc":"Previous versions of software components that are not removed from the information system after updates have been installed may be exploited by adversaries. Some information technology products may remove older versions of software automatically from the information system.","descriptions":{"default":"Previous versions of software components that are not removed from the information system after updates have been installed may be exploited by adversaries. Some information technology products may remove older versions of software automatically from the information system.","check":"Review the application documentation and interview the application admin to identify application locations on system.\n\nIdentify application versions that are installed on the system.\n\nReview the file system structure to see if older versions of the application are still installed.\n\nIf old versions of the application or components are still installed on the system, this is a finding.","fix":"Configure or design the application to remove old components when updating."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24283r493747_chk","severity":"medium","gid":"V-222613","rid":"SV-222613r879825_rule","stig_id":"APSC-DV-002610","gtitle":"SRG-APP-000454","fix_id":"F-24272r493748_fix","documentable":null,"legacy":["SV-84901","V-70279"],"cci":["CCI-002617"],"nist":["SI-2 (6)"]}},{"id":"SV-222614","code":"control 'SV-222614' do\n  title 'Security-relevant software updates and patches must be kept up to date.'\n  desc 'Security flaws with software applications are discovered daily. Vendors are constantly updating and patching their products to address newly discovered security vulnerabilities. Organizations (including any contractor to the organization) are required to promptly install security-relevant software updates (e.g., patches, service packs, and hot fixes). Flaws discovered during security assessments, continuous monitoring, incident response activities, or information system error handling must also be addressed expeditiously.\n\nOrganization-defined time periods for updating security-relevant software may vary based on a variety of factors including, for example, the security category of the information system or the criticality of the update (i.e., severity of the vulnerability related to the discovered flaw).\n\nThis requirement will apply to software patch management solutions that are used to install patches across the enclave and also to applications themselves that are not part of that patch management solution. For example, many browsers today provide the capability to install their own patch software. Patch criticality, as well as system criticality will vary. Therefore, the tactical situations regarding the patch management process will also vary. This means that the time period utilized must be a configurable parameter. Time frames for application of security-relevant software updates may be dependent upon the Information Assurance Vulnerability Management (IAVM) process.\n\nThe application, or the patch management solution that is configured to patch the application, must be configured to check for and install security-relevant software updates and patches at least weekly. Patches must be applied immediately or in accordance with POA&Ms, IAVMs, CTOs, DTMs or other authoritative patching guidelines or sources.'\n  desc 'check', 'Review the application documentation to identify application versions and patching.\n\nInterview the application administrator and inquire about patching process.\n\nReview IAVMs and CTOs to determine if the application is being updated in accordance with authoritative sources.\n\nIf application updates are not checked on at least on a weekly basis and applied immediately or in accordance with POA&Ms, IAVMs, CTOs, DTMs or other authoritative patching guidelines or sources, this is a finding.'\n  desc 'fix', 'Check for application updates at least weekly and apply patches immediately or in accordance with POA&Ms, IAVMs, CTOs, DTMs or other authoritative patching guidelines or sources.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24284r493750_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222614'\n  tag rid: 'SV-222614r879827_rule'\n  tag stig_id: 'APSC-DV-002630'\n  tag gtitle: 'SRG-APP-000456'\n  tag fix_id: 'F-24273r493751_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84903', 'V-70281']\n  tag cci: ['CCI-002605']\n  tag nist: ['SI-2 c']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222614.rb"},"title":"Security-relevant software updates and patches must be kept up to date.","desc":"Security flaws with software applications are discovered daily. Vendors are constantly updating and patching their products to address newly discovered security vulnerabilities. Organizations (including any contractor to the organization) are required to promptly install security-relevant software updates (e.g., patches, service packs, and hot fixes). Flaws discovered during security assessments, continuous monitoring, incident response activities, or information system error handling must also be addressed expeditiously.\n\nOrganization-defined time periods for updating security-relevant software may vary based on a variety of factors including, for example, the security category of the information system or the criticality of the update (i.e., severity of the vulnerability related to the discovered flaw).\n\nThis requirement will apply to software patch management solutions that are used to install patches across the enclave and also to applications themselves that are not part of that patch management solution. For example, many browsers today provide the capability to install their own patch software. Patch criticality, as well as system criticality will vary. Therefore, the tactical situations regarding the patch management process will also vary. This means that the time period utilized must be a configurable parameter. Time frames for application of security-relevant software updates may be dependent upon the Information Assurance Vulnerability Management (IAVM) process.\n\nThe application, or the patch management solution that is configured to patch the application, must be configured to check for and install security-relevant software updates and patches at least weekly. Patches must be applied immediately or in accordance with POA&Ms, IAVMs, CTOs, DTMs or other authoritative patching guidelines or sources.","descriptions":{"default":"Security flaws with software applications are discovered daily. Vendors are constantly updating and patching their products to address newly discovered security vulnerabilities. Organizations (including any contractor to the organization) are required to promptly install security-relevant software updates (e.g., patches, service packs, and hot fixes). Flaws discovered during security assessments, continuous monitoring, incident response activities, or information system error handling must also be addressed expeditiously.\n\nOrganization-defined time periods for updating security-relevant software may vary based on a variety of factors including, for example, the security category of the information system or the criticality of the update (i.e., severity of the vulnerability related to the discovered flaw).\n\nThis requirement will apply to software patch management solutions that are used to install patches across the enclave and also to applications themselves that are not part of that patch management solution. For example, many browsers today provide the capability to install their own patch software. Patch criticality, as well as system criticality will vary. Therefore, the tactical situations regarding the patch management process will also vary. This means that the time period utilized must be a configurable parameter. Time frames for application of security-relevant software updates may be dependent upon the Information Assurance Vulnerability Management (IAVM) process.\n\nThe application, or the patch management solution that is configured to patch the application, must be configured to check for and install security-relevant software updates and patches at least weekly. Patches must be applied immediately or in accordance with POA&Ms, IAVMs, CTOs, DTMs or other authoritative patching guidelines or sources.","check":"Review the application documentation to identify application versions and patching.\n\nInterview the application administrator and inquire about patching process.\n\nReview IAVMs and CTOs to determine if the application is being updated in accordance with authoritative sources.\n\nIf application updates are not checked on at least on a weekly basis and applied immediately or in accordance with POA&Ms, IAVMs, CTOs, DTMs or other authoritative patching guidelines or sources, this is a finding.","fix":"Check for application updates at least weekly and apply patches immediately or in accordance with POA&Ms, IAVMs, CTOs, DTMs or other authoritative patching guidelines or sources."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24284r493750_chk","severity":"medium","gid":"V-222614","rid":"SV-222614r879827_rule","stig_id":"APSC-DV-002630","gtitle":"SRG-APP-000456","fix_id":"F-24273r493751_fix","documentable":null,"legacy":["SV-84903","V-70281"],"cci":["CCI-002605"],"nist":["SI-2 c"]}},{"id":"SV-222615","code":"control 'SV-222615' do\n  title 'The application performing organization-defined security functions must verify correct operation of security functions.'\n  desc 'Without verification, security functions may not operate correctly and this failure may go unnoticed.\n\nSecurity function is defined as the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based. Security functionality includes, but is not limited to, establishing system accounts, configuring access authorizations (i.e., permissions, privileges), setting events to be audited, and setting intrusion detection parameters.\n\nThis requirement applies to applications performing security functions and security function verification/testing.'\n  desc 'check', 'Review the application documentation and interview the system administrator to determine if the application performs security function testing.\n\nIf the application is not designed or intended to perform security function testing, the requirement is not applicable.\n\nAccess the application design documents and determine if the application is designed to verify the correct operation of security functions.\n\nReview application logs and take note of log entries that indicate security function testing is being performed and verified.\n\nIf the application is designed to perform security function testing and does not verify the correct operation of security functions, this is a finding.'\n  desc 'fix', 'Design the application to verify the correct operation of security functions.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24285r493753_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222615'\n  tag rid: 'SV-222615r879843_rule'\n  tag stig_id: 'APSC-DV-002760'\n  tag gtitle: 'SRG-APP-000472'\n  tag fix_id: 'F-24274r493754_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84905', 'V-70283']\n  tag cci: ['CCI-002696']\n  tag nist: ['SI-6 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222615.rb"},"title":"The application performing organization-defined security functions must verify correct operation of security functions.","desc":"Without verification, security functions may not operate correctly and this failure may go unnoticed.\n\nSecurity function is defined as the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based. Security functionality includes, but is not limited to, establishing system accounts, configuring access authorizations (i.e., permissions, privileges), setting events to be audited, and setting intrusion detection parameters.\n\nThis requirement applies to applications performing security functions and security function verification/testing.","descriptions":{"default":"Without verification, security functions may not operate correctly and this failure may go unnoticed.\n\nSecurity function is defined as the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based. Security functionality includes, but is not limited to, establishing system accounts, configuring access authorizations (i.e., permissions, privileges), setting events to be audited, and setting intrusion detection parameters.\n\nThis requirement applies to applications performing security functions and security function verification/testing.","check":"Review the application documentation and interview the system administrator to determine if the application performs security function testing.\n\nIf the application is not designed or intended to perform security function testing, the requirement is not applicable.\n\nAccess the application design documents and determine if the application is designed to verify the correct operation of security functions.\n\nReview application logs and take note of log entries that indicate security function testing is being performed and verified.\n\nIf the application is designed to perform security function testing and does not verify the correct operation of security functions, this is a finding.","fix":"Design the application to verify the correct operation of security functions."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24285r493753_chk","severity":"medium","gid":"V-222615","rid":"SV-222615r879843_rule","stig_id":"APSC-DV-002760","gtitle":"SRG-APP-000472","fix_id":"F-24274r493754_fix","documentable":null,"legacy":["SV-84905","V-70283"],"cci":["CCI-002696"],"nist":["SI-6 a"]}},{"id":"SV-222616","code":"control 'SV-222616' do\n  title 'The application must perform verification of the correct operation of security functions: upon system startup and/or restart; upon command by a user with privileged access; and/or every 30 days.'\n  desc 'Without verification, security functions may not operate correctly and this failure may go unnoticed.\n\nSecurity function is defined as the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based. Security functionality includes, but is not limited to, establishing system accounts, configuring access authorizations (i.e., permissions, privileges), setting events to be audited, and setting intrusion detection parameters.\n\nNotifications provided by information systems include, for example, electronic alerts to system administrators, messages to local computer consoles, and/or hardware indications, such as lights.\n\nThis requirement applies to applications performing security functions and the applications performing security function verification/testing.'\n  desc 'check', 'Review the application documentation and interview the system administrator to determine if the application performs security function testing.\n\nIf the application is not designed or intended to perform security function testing, the requirement is not applicable.\n\nAccess the application design documents or have the system administrator provide proof if the application is designed to verify the correct operation of security functions.\n\nReview application logs and take note of log entries that indicate security function testing is being performed and verified on startup, restart, or on command by an authorized user.\n\nIf the application is designed to perform security function testing and does not verify the correct operation of security functions on startup, restart, or upon command by a privileged user, this is a finding.'\n  desc 'fix', 'Design the application to verify the correct operation of security functions on command and on application startup and restart.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24286r493756_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222616'\n  tag rid: 'SV-222616r879844_rule'\n  tag stig_id: 'APSC-DV-002770'\n  tag gtitle: 'SRG-APP-000473'\n  tag fix_id: 'F-24275r493757_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84907', 'V-70285']\n  tag cci: ['CCI-002699']\n  tag nist: ['SI-6 b']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222616.rb"},"title":"The application must perform verification of the correct operation of security functions: upon system startup and/or restart; upon command by a user with privileged access; and/or every 30 days.","desc":"Without verification, security functions may not operate correctly and this failure may go unnoticed.\n\nSecurity function is defined as the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based. Security functionality includes, but is not limited to, establishing system accounts, configuring access authorizations (i.e., permissions, privileges), setting events to be audited, and setting intrusion detection parameters.\n\nNotifications provided by information systems include, for example, electronic alerts to system administrators, messages to local computer consoles, and/or hardware indications, such as lights.\n\nThis requirement applies to applications performing security functions and the applications performing security function verification/testing.","descriptions":{"default":"Without verification, security functions may not operate correctly and this failure may go unnoticed.\n\nSecurity function is defined as the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based. Security functionality includes, but is not limited to, establishing system accounts, configuring access authorizations (i.e., permissions, privileges), setting events to be audited, and setting intrusion detection parameters.\n\nNotifications provided by information systems include, for example, electronic alerts to system administrators, messages to local computer consoles, and/or hardware indications, such as lights.\n\nThis requirement applies to applications performing security functions and the applications performing security function verification/testing.","check":"Review the application documentation and interview the system administrator to determine if the application performs security function testing.\n\nIf the application is not designed or intended to perform security function testing, the requirement is not applicable.\n\nAccess the application design documents or have the system administrator provide proof if the application is designed to verify the correct operation of security functions.\n\nReview application logs and take note of log entries that indicate security function testing is being performed and verified on startup, restart, or on command by an authorized user.\n\nIf the application is designed to perform security function testing and does not verify the correct operation of security functions on startup, restart, or upon command by a privileged user, this is a finding.","fix":"Design the application to verify the correct operation of security functions on command and on application startup and restart."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24286r493756_chk","severity":"medium","gid":"V-222616","rid":"SV-222616r879844_rule","stig_id":"APSC-DV-002770","gtitle":"SRG-APP-000473","fix_id":"F-24275r493757_fix","documentable":null,"legacy":["SV-84907","V-70285"],"cci":["CCI-002699"],"nist":["SI-6 b"]}},{"id":"SV-222617","code":"control 'SV-222617' do\n  title 'The application must notify the ISSO and ISSM of failed security verification tests.'\n  desc 'If personnel are not notified of failed security verification tests, they will not be able to take corrective action and the unsecure condition(s) will remain.\n\nSecurity function is defined as the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based. Security functionality includes, but is not limited to, establishing system accounts, configuring access authorizations (i.e., permissions, privileges), setting events to be audited, and setting intrusion detection parameters.\n\nNotifications provided by information systems include messages to local computer consoles, and/or hardware indications, such as lights.\n\nThis requirement applies to applications performing security functions and the applications performing security function verification/testing.'\n  desc 'check', 'Review the application documentation and interview the system administrator to determine if the application performs security function testing.\n\nIf the application is not designed or intended to perform security function testing, the requirement is not applicable.\n\nAccess the application design documents or have the system administrator provide proof the application is designed to verify the correct operation of security functions.\n\nReview application logs and take note of log entries that indicate security function testing is being performed and verified on startup, restart, or on command by an authorized user.\n\nReview logs to identify if the application has sent notifications to ISSO and ISSM when security verification tests fail.\n\nReview application features and function to identify areas of the management interfaces that specify where failed security verifications tests are to be sent and validate the ISSO and ISSM are configured as recipients.\n \nIf the application is designed to perform security function testing and does not notify the ISSO and ISSM of failed verification tests, this is a finding.'\n  desc 'fix', 'Configure the application to send notices to the ISSO and ISSM indicating the application failed a verification test.'\n  impact 0.3\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24287r493759_chk'\n  tag severity: 'low'\n  tag gid: 'V-222617'\n  tag rid: 'SV-222617r879661_rule'\n  tag stig_id: 'APSC-DV-002780'\n  tag gtitle: 'SRG-APP-000275'\n  tag fix_id: 'F-24276r493760_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84909', 'V-70287']\n  tag cci: ['CCI-001294']\n  tag nist: ['SI-6 c']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222617.rb"},"title":"The application must notify the ISSO and ISSM of failed security verification tests.","desc":"If personnel are not notified of failed security verification tests, they will not be able to take corrective action and the unsecure condition(s) will remain.\n\nSecurity function is defined as the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based. Security functionality includes, but is not limited to, establishing system accounts, configuring access authorizations (i.e., permissions, privileges), setting events to be audited, and setting intrusion detection parameters.\n\nNotifications provided by information systems include messages to local computer consoles, and/or hardware indications, such as lights.\n\nThis requirement applies to applications performing security functions and the applications performing security function verification/testing.","descriptions":{"default":"If personnel are not notified of failed security verification tests, they will not be able to take corrective action and the unsecure condition(s) will remain.\n\nSecurity function is defined as the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based. Security functionality includes, but is not limited to, establishing system accounts, configuring access authorizations (i.e., permissions, privileges), setting events to be audited, and setting intrusion detection parameters.\n\nNotifications provided by information systems include messages to local computer consoles, and/or hardware indications, such as lights.\n\nThis requirement applies to applications performing security functions and the applications performing security function verification/testing.","check":"Review the application documentation and interview the system administrator to determine if the application performs security function testing.\n\nIf the application is not designed or intended to perform security function testing, the requirement is not applicable.\n\nAccess the application design documents or have the system administrator provide proof the application is designed to verify the correct operation of security functions.\n\nReview application logs and take note of log entries that indicate security function testing is being performed and verified on startup, restart, or on command by an authorized user.\n\nReview logs to identify if the application has sent notifications to ISSO and ISSM when security verification tests fail.\n\nReview application features and function to identify areas of the management interfaces that specify where failed security verifications tests are to be sent and validate the ISSO and ISSM are configured as recipients.\n \nIf the application is designed to perform security function testing and does not notify the ISSO and ISSM of failed verification tests, this is a finding.","fix":"Configure the application to send notices to the ISSO and ISSM indicating the application failed a verification test."},"impact":0.3,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24287r493759_chk","severity":"low","gid":"V-222617","rid":"SV-222617r879661_rule","stig_id":"APSC-DV-002780","gtitle":"SRG-APP-000275","fix_id":"F-24276r493760_fix","documentable":null,"legacy":["SV-84909","V-70287"],"cci":["CCI-001294"],"nist":["SI-6 c"]}},{"id":"SV-222618","code":"control 'SV-222618' do\n  title 'Unsigned Category 1A mobile code must not be used in the application in accordance with DoD policy.'\n  desc 'Use of un-trusted Level 1A mobile code technologies can introduce security vulnerabilities and malicious code into the client system.\n\n1A code is defined as:\n\n- ActiveX controls\n- Mobile code script (JavaScript, VBScript)\n- Windows Scripting Host (WSH) (downloaded via URL or email)\n\nWhen JavaScript and VBScript execute within the browser they are Category 3, however, when they execute in WSH, they are 1A.'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify any mobile code that is provided by the application for client consumption.\n\nIf the application does not contain mobile code, or if the mobile code executes within the client browser, this is not applicable.\n\nThe URL of the application must be added to the Trusted Sites zone. This is accomplished via the Tools, Internet Options, and “Security” Tab.\n\nSelect the “Trusted Sites” zone.\nClick the “sites” button.\nEnter the URL into the text box below the “Add this site to this zone” message.\nClick \"Add”.\nClick “OK”.\n\nNote: This requires administrator privileges to add URL to sites on a STIG compliant workstation.\n\nNext, test the application. This testing should include functional testing from all major components of the application.\n\nIf mobile code is in use, the browser will prompt to download the control. At the download prompt, the browser will indicate that code has been digitally signed.\n\nIf the code has not been signed or the application warns that a control cannot be invoked due to security settings, this is a finding.'\n  desc 'fix', 'Configure the application so Category 1A mobile code is signed.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24288r493762_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222618'\n  tag rid: 'SV-222618r879627_rule'\n  tag stig_id: 'APSC-DV-002870'\n  tag gtitle: 'SRG-APP-000206'\n  tag fix_id: 'F-24277r493763_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84911', 'V-70289']\n  tag cci: ['CCI-001166']\n  tag nist: ['SC-18 (1)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222618.rb"},"title":"Unsigned Category 1A mobile code must not be used in the application in accordance with DoD policy.","desc":"Use of un-trusted Level 1A mobile code technologies can introduce security vulnerabilities and malicious code into the client system.\n\n1A code is defined as:\n\n- ActiveX controls\n- Mobile code script (JavaScript, VBScript)\n- Windows Scripting Host (WSH) (downloaded via URL or email)\n\nWhen JavaScript and VBScript execute within the browser they are Category 3, however, when they execute in WSH, they are 1A.","descriptions":{"default":"Use of un-trusted Level 1A mobile code technologies can introduce security vulnerabilities and malicious code into the client system.\n\n1A code is defined as:\n\n- ActiveX controls\n- Mobile code script (JavaScript, VBScript)\n- Windows Scripting Host (WSH) (downloaded via URL or email)\n\nWhen JavaScript and VBScript execute within the browser they are Category 3, however, when they execute in WSH, they are 1A.","check":"Review the application documentation and interview the application administrator to identify any mobile code that is provided by the application for client consumption.\n\nIf the application does not contain mobile code, or if the mobile code executes within the client browser, this is not applicable.\n\nThe URL of the application must be added to the Trusted Sites zone. This is accomplished via the Tools, Internet Options, and “Security” Tab.\n\nSelect the “Trusted Sites” zone.\nClick the “sites” button.\nEnter the URL into the text box below the “Add this site to this zone” message.\nClick \"Add”.\nClick “OK”.\n\nNote: This requires administrator privileges to add URL to sites on a STIG compliant workstation.\n\nNext, test the application. This testing should include functional testing from all major components of the application.\n\nIf mobile code is in use, the browser will prompt to download the control. At the download prompt, the browser will indicate that code has been digitally signed.\n\nIf the code has not been signed or the application warns that a control cannot be invoked due to security settings, this is a finding.","fix":"Configure the application so Category 1A mobile code is signed."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24288r493762_chk","severity":"medium","gid":"V-222618","rid":"SV-222618r879627_rule","stig_id":"APSC-DV-002870","gtitle":"SRG-APP-000206","fix_id":"F-24277r493763_fix","documentable":null,"legacy":["SV-84911","V-70289"],"cci":["CCI-001166"],"nist":["SC-18 (1)"]}},{"id":"SV-222619","code":"control 'SV-222619' do\n  title 'The ISSO must ensure an account management process is implemented, verifying only authorized users can gain access to the application, and individual accounts designated as inactive, suspended, or terminated are promptly removed.'\n  desc 'A comprehensive account management process will ensure that only authorized users can gain access to applications and that individual accounts designated as inactive, suspended, or terminated are promptly deactivated. Such a process greatly reduces the risk that accounts will be misused, hijacked, or data compromised.'\n  desc 'check', 'Interview the application representative to verify that a documented process exists for user and system account creation, termination, and expiration.\n\nObtain a list of recently departed personnel and verify that their accounts were removed or deactivated on all systems in a timely manner (e.g., less than two days).\n \nIf a documented account management process does not exist or unauthorized users have active accounts, this is a finding.'\n  desc 'fix', 'Establish an account management process.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24289r493765_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222619'\n  tag rid: 'SV-222619r879887_rule'\n  tag stig_id: 'APSC-DV-002880'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24278r493766_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84913', 'V-70291']\n  tag cci: ['CCI-002121']\n  tag nist: ['AC-2 f']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222619.rb"},"title":"The ISSO must ensure an account management process is implemented, verifying only authorized users can gain access to the application, and individual accounts designated as inactive, suspended, or terminated are promptly removed.","desc":"A comprehensive account management process will ensure that only authorized users can gain access to applications and that individual accounts designated as inactive, suspended, or terminated are promptly deactivated. Such a process greatly reduces the risk that accounts will be misused, hijacked, or data compromised.","descriptions":{"default":"A comprehensive account management process will ensure that only authorized users can gain access to applications and that individual accounts designated as inactive, suspended, or terminated are promptly deactivated. Such a process greatly reduces the risk that accounts will be misused, hijacked, or data compromised.","check":"Interview the application representative to verify that a documented process exists for user and system account creation, termination, and expiration.\n\nObtain a list of recently departed personnel and verify that their accounts were removed or deactivated on all systems in a timely manner (e.g., less than two days).\n \nIf a documented account management process does not exist or unauthorized users have active accounts, this is a finding.","fix":"Establish an account management process."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24289r493765_chk","severity":"medium","gid":"V-222619","rid":"SV-222619r879887_rule","stig_id":"APSC-DV-002880","gtitle":"SRG-APP-000516","fix_id":"F-24278r493766_fix","documentable":null,"legacy":["SV-84913","V-70291"],"cci":["CCI-002121"],"nist":["AC-2 f"]}},{"id":"SV-222620","code":"control 'SV-222620' do\n  title 'Application web servers must be on a separate network segment from the application and database servers if it is a tiered application operating in the DoD DMZ.'\n  desc 'A tiered application usually consists of 3 tiers, the web layer (presentation tier), the application layer (application logic tier), and the database layer (data storage tier).\n\nUsing one system for hosting all 3 tiers introduces risk that if one tier is compromised, there are no additional protection layers available to defend the other tiers.\nSecurity controls must be in place in order to provide different levels and types of defenses for each type of server based upon data protection requirements identified by policy or data owner.\n\nDoD DMZ policy specifies that logical separation is allowed but when hosting different data types on the same server, physical separation is required.\n\n1) Unrestricted web servers and Restricted web servers must be on separate virtual or physical servers from Private web servers, application servers, or database servers.\n2) Unrestricted web servers and Restricted web servers can either be on separate physical servers from each other, or they can be on separate virtual servers.\n3) If application and database servers have been separated by service type into Unrestricted, Restricted, and Private servers (permitted but not required in Increment 1 Phase 1), they must be on separate virtual or physical servers from each other by server type (Application or Database) and by service type (Unrestricted, Restricted, or Private).\n\nReference the DoD DMZ STIG for details on data types and separation requirements.\n\nSecurity controls include firewalls or other forms of access controls that restrict the ability to traverse the network from one system to the other.\n\nSeparation can be performed either physically or logically based upon data protection and application protection design requirements.\n\nPhysically separate networks require distinct physical network devices for connections (e.g., two separate switches or two separate routers).\n\nPhysically separate machines utilize a non-virtual OS.\n\nLogically separate networks are usually implemented via a VLAN.\n\nLogically separate systems are implemented with virtual machines or other system emulation.\n\nSecurity controls are firewall rules or ACLs that provide access restrictions on network traffic and limit communications between systems to only application and application/system support traffic.\n\nFor complete explanation of DoD DMZ requirements, reference DoD DMZ requirements.'\n  desc 'check', 'Review the application documentation.\n\nReview the application data protection requirements and identify if all data types hosted on server are identical.\n\nReview the network diagram and identify web servers/web services, web application servers, and database servers.\n\nIf the application is not hosted in the DoD DMZ, this requirement is not applicable.\n\nVerify the application web servers are separated from the application and database servers if the application is a tiered design as per DoD DMZ STIG requirements.\n\nIf the application is tiered and the network infrastructure hosting the application is not configured to provide separation and security access controls between the tiered layers in accordance with DoD DMZ requirements, this is a finding.'\n  desc 'fix', 'Separate web server from other application tiers and place it on a separate network segment apart from the application and database servers in accordance with DoD DMZ data access controls requirements.'\n  impact 0.7\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24290r493768_chk'\n  tag severity: 'high'\n  tag gid: 'V-222620'\n  tag rid: 'SV-222620r879887_rule'\n  tag stig_id: 'APSC-DV-002890'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24279r493769_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84915', 'V-70293']\n  tag cci: ['CCI-002225']\n  tag nist: ['AC-6 (4)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222620.rb"},"title":"Application web servers must be on a separate network segment from the application and database servers if it is a tiered application operating in the DoD DMZ.","desc":"A tiered application usually consists of 3 tiers, the web layer (presentation tier), the application layer (application logic tier), and the database layer (data storage tier).\n\nUsing one system for hosting all 3 tiers introduces risk that if one tier is compromised, there are no additional protection layers available to defend the other tiers.\nSecurity controls must be in place in order to provide different levels and types of defenses for each type of server based upon data protection requirements identified by policy or data owner.\n\nDoD DMZ policy specifies that logical separation is allowed but when hosting different data types on the same server, physical separation is required.\n\n1) Unrestricted web servers and Restricted web servers must be on separate virtual or physical servers from Private web servers, application servers, or database servers.\n2) Unrestricted web servers and Restricted web servers can either be on separate physical servers from each other, or they can be on separate virtual servers.\n3) If application and database servers have been separated by service type into Unrestricted, Restricted, and Private servers (permitted but not required in Increment 1 Phase 1), they must be on separate virtual or physical servers from each other by server type (Application or Database) and by service type (Unrestricted, Restricted, or Private).\n\nReference the DoD DMZ STIG for details on data types and separation requirements.\n\nSecurity controls include firewalls or other forms of access controls that restrict the ability to traverse the network from one system to the other.\n\nSeparation can be performed either physically or logically based upon data protection and application protection design requirements.\n\nPhysically separate networks require distinct physical network devices for connections (e.g., two separate switches or two separate routers).\n\nPhysically separate machines utilize a non-virtual OS.\n\nLogically separate networks are usually implemented via a VLAN.\n\nLogically separate systems are implemented with virtual machines or other system emulation.\n\nSecurity controls are firewall rules or ACLs that provide access restrictions on network traffic and limit communications between systems to only application and application/system support traffic.\n\nFor complete explanation of DoD DMZ requirements, reference DoD DMZ requirements.","descriptions":{"default":"A tiered application usually consists of 3 tiers, the web layer (presentation tier), the application layer (application logic tier), and the database layer (data storage tier).\n\nUsing one system for hosting all 3 tiers introduces risk that if one tier is compromised, there are no additional protection layers available to defend the other tiers.\nSecurity controls must be in place in order to provide different levels and types of defenses for each type of server based upon data protection requirements identified by policy or data owner.\n\nDoD DMZ policy specifies that logical separation is allowed but when hosting different data types on the same server, physical separation is required.\n\n1) Unrestricted web servers and Restricted web servers must be on separate virtual or physical servers from Private web servers, application servers, or database servers.\n2) Unrestricted web servers and Restricted web servers can either be on separate physical servers from each other, or they can be on separate virtual servers.\n3) If application and database servers have been separated by service type into Unrestricted, Restricted, and Private servers (permitted but not required in Increment 1 Phase 1), they must be on separate virtual or physical servers from each other by server type (Application or Database) and by service type (Unrestricted, Restricted, or Private).\n\nReference the DoD DMZ STIG for details on data types and separation requirements.\n\nSecurity controls include firewalls or other forms of access controls that restrict the ability to traverse the network from one system to the other.\n\nSeparation can be performed either physically or logically based upon data protection and application protection design requirements.\n\nPhysically separate networks require distinct physical network devices for connections (e.g., two separate switches or two separate routers).\n\nPhysically separate machines utilize a non-virtual OS.\n\nLogically separate networks are usually implemented via a VLAN.\n\nLogically separate systems are implemented with virtual machines or other system emulation.\n\nSecurity controls are firewall rules or ACLs that provide access restrictions on network traffic and limit communications between systems to only application and application/system support traffic.\n\nFor complete explanation of DoD DMZ requirements, reference DoD DMZ requirements.","check":"Review the application documentation.\n\nReview the application data protection requirements and identify if all data types hosted on server are identical.\n\nReview the network diagram and identify web servers/web services, web application servers, and database servers.\n\nIf the application is not hosted in the DoD DMZ, this requirement is not applicable.\n\nVerify the application web servers are separated from the application and database servers if the application is a tiered design as per DoD DMZ STIG requirements.\n\nIf the application is tiered and the network infrastructure hosting the application is not configured to provide separation and security access controls between the tiered layers in accordance with DoD DMZ requirements, this is a finding.","fix":"Separate web server from other application tiers and place it on a separate network segment apart from the application and database servers in accordance with DoD DMZ data access controls requirements."},"impact":0.7,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24290r493768_chk","severity":"high","gid":"V-222620","rid":"SV-222620r879887_rule","stig_id":"APSC-DV-002890","gtitle":"SRG-APP-000516","fix_id":"F-24279r493769_fix","documentable":null,"legacy":["SV-84915","V-70293"],"cci":["CCI-002225"],"nist":["AC-6 (4)"]}},{"id":"SV-222621","code":"control 'SV-222621' do\n  title 'The ISSO must ensure application audit trails are retained for at least 1 year for applications without SAMI data, and 5 years for applications including SAMI data.'\n  desc 'Log files are a requirement to trace intruder activity or to audit user activity.'\n  desc 'check', 'Verify a process is in place to retain application audit log files for one year and five years for SAMI data.\n\nIf audit logs have not been retained for one year or five years for SAMI data, this is a finding.'\n  desc 'fix', 'Retain application audit log files for one year and five years for SAMI data.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24291r493771_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222621'\n  tag rid: 'SV-222621r879887_rule'\n  tag stig_id: 'APSC-DV-002900'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24280r493772_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84917', 'V-70295']\n  tag cci: ['CCI-000167']\n  tag nist: ['AU-11']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222621.rb"},"title":"The ISSO must ensure application audit trails are retained for at least 1 year for applications without SAMI data, and 5 years for applications including SAMI data.","desc":"Log files are a requirement to trace intruder activity or to audit user activity.","descriptions":{"default":"Log files are a requirement to trace intruder activity or to audit user activity.","check":"Verify a process is in place to retain application audit log files for one year and five years for SAMI data.\n\nIf audit logs have not been retained for one year or five years for SAMI data, this is a finding.","fix":"Retain application audit log files for one year and five years for SAMI data."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24291r493771_chk","severity":"medium","gid":"V-222621","rid":"SV-222621r879887_rule","stig_id":"APSC-DV-002900","gtitle":"SRG-APP-000516","fix_id":"F-24280r493772_fix","documentable":null,"legacy":["SV-84917","V-70295"],"cci":["CCI-000167"],"nist":["AU-11"]}},{"id":"SV-222622","code":"control 'SV-222622' do\n  title 'The ISSO must review audit trails periodically based on system documentation recommendations or immediately upon system security events.'\n  desc 'Without access control the data is not secure. It can be compromised, misused, or changed by unauthorized access at any time.'\n  desc 'check', 'Interview the application representative and ask for the system documentation that states how often audit logs are reviewed. Also, determine when the audit logs were last reviewed.\n\nIf the application representative cannot provide system documentation identifying how often the auditing logs are reviewed, or has not audited within the last time period stated in the system documentation, this is a finding.'\n  desc 'fix', 'Establish a scheduled process for reviewing logs.\n\nMaintain a log or records of dates and times audit logs are reviewed.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24292r493774_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222622'\n  tag rid: 'SV-222622r879887_rule'\n  tag stig_id: 'APSC-DV-002910'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24281r493775_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84919', 'V-70297']\n  tag cci: ['CCI-001872']\n  tag nist: ['AU-6 (10)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222622.rb"},"title":"The ISSO must review audit trails periodically based on system documentation recommendations or immediately upon system security events.","desc":"Without access control the data is not secure. It can be compromised, misused, or changed by unauthorized access at any time.","descriptions":{"default":"Without access control the data is not secure. It can be compromised, misused, or changed by unauthorized access at any time.","check":"Interview the application representative and ask for the system documentation that states how often audit logs are reviewed. Also, determine when the audit logs were last reviewed.\n\nIf the application representative cannot provide system documentation identifying how often the auditing logs are reviewed, or has not audited within the last time period stated in the system documentation, this is a finding.","fix":"Establish a scheduled process for reviewing logs.\n\nMaintain a log or records of dates and times audit logs are reviewed."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24292r493774_chk","severity":"medium","gid":"V-222622","rid":"SV-222622r879887_rule","stig_id":"APSC-DV-002910","gtitle":"SRG-APP-000516","fix_id":"F-24281r493775_fix","documentable":null,"legacy":["SV-84919","V-70297"],"cci":["CCI-001872"],"nist":["AU-6 (10)"]}},{"id":"SV-222623","code":"control 'SV-222623' do\n  title 'The ISSO must report all suspected violations of IA policies in accordance with DoD information system IA procedures.'\n  desc 'Violations of IA policies must be reviewed and reported. If there are no policies regarding the reporting of IA violations, IA violations may not be tracked or addressed in a proper manner.'\n  desc 'check', 'Interview the application representative and review the SOPs to ensure that violations of IA policies are analyzed and reported.\n \nIf there is no policy for reporting IA violations, this is a finding.'\n  desc 'fix', 'Create and maintain a policy to report IA violations.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24293r493777_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222623'\n  tag rid: 'SV-222623r879887_rule'\n  tag stig_id: 'APSC-DV-002920'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24282r493778_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84923', 'V-70301']\n  tag cci: ['CCI-000149']\n  tag nist: ['AU-6 b']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222623.rb"},"title":"The ISSO must report all suspected violations of IA policies in accordance with DoD information system IA procedures.","desc":"Violations of IA policies must be reviewed and reported. If there are no policies regarding the reporting of IA violations, IA violations may not be tracked or addressed in a proper manner.","descriptions":{"default":"Violations of IA policies must be reviewed and reported. If there are no policies regarding the reporting of IA violations, IA violations may not be tracked or addressed in a proper manner.","check":"Interview the application representative and review the SOPs to ensure that violations of IA policies are analyzed and reported.\n \nIf there is no policy for reporting IA violations, this is a finding.","fix":"Create and maintain a policy to report IA violations."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24293r493777_chk","severity":"medium","gid":"V-222623","rid":"SV-222623r879887_rule","stig_id":"APSC-DV-002920","gtitle":"SRG-APP-000516","fix_id":"F-24282r493778_fix","documentable":null,"legacy":["SV-84923","V-70301"],"cci":["CCI-000149"],"nist":["AU-6 b"]}},{"id":"SV-222624","code":"control 'SV-222624' do\n  title 'The ISSO must ensure active vulnerability testing is performed.'\n  desc 'Use of automated scanning tools accompanied with manual testing/validation which confirms or expands on the automated test results is an accepted best practice when performing application security testing. Automated scanning tools expedite and help to standardize security testing, they can incorporate known attack methods and procedures, test for libraries and other software modules known to be vulnerable to attack and utilize a test method known as \"fuzz testing\". Fuzz testing is a testing process where the application is provided invalid, unexpected, or random data. Poorly designed and coded applications will become unstable or crash. Properly designed and coded applications will reject improper and unexpected data input from application clients and remain stable.\n\nMany vulnerability scanning tools provide automated fuzz testing capabilities for the testing of web applications. All of these tools help to identify a wide range of application vulnerabilities including, but not limited to; buffer overflows, cross-site scripting flaws, denial of service format bugs and SQL injection, all of which can lead to a successful compromise of the system or result in a denial of service.\n\nDue to changes in the production environment, it is a good practice to schedule periodic active testing of production web applications. Ideally, this will occur prior to deployment and after updates or changes to the application production environment.\n\nIt is imperative that automated scanning tools are configured properly to ensure that all of the application components that can be tested are tested. In the case of web applications, some of the application code base may be accessible on the website and could potentially be corrected by a knowledgeable system administrator. Active testing is different from code review testing in that active testing does not require access to the application source code base. A code review requires complete code base access and is normally performed by the development team.\n\nIf vulnerability testing is not conducted, there is the distinct potential that security vulnerabilities could be unknowingly introduced into the application environment.\n\nThe following website provides an overview of fuzz testing and examples:\n\nhttp://www.owasp.org/index.php/Fuzzing'\n  desc 'check', 'Ask the application representative to provide vulnerability test procedures and vulnerability test results.\n\nAsk the application representative to provide the settings that were used to conduct the vulnerability testing.\n\nVerify the automated vulnerability scanning tool was appropriately configured to assure as complete a test as possible of the application architecture components. E.g., if the application includes a web server, web server tests must be included.\n\nIf the vulnerability scan report includes informational and/or non-critical results this is not a finding.\n\nIf previously identified vulnerabilities have subsequently been resolved, this is not a finding.\n\nIf the application test procedures and test results do not include active vulnerability and fuzz testing this is a finding.\n\nIf the vulnerability scan results include critical vulnerabilities, this is a finding.\n\nIf the vulnerability scanning tests are not relevant to the architecture of the application, this is a finding.'\n  desc 'fix', 'Perform active vulnerability and fuzz testing of the application.\n\nVerify the vulnerability scanning tool is configured to test all application components and functionality.\n\nAddress discovered vulnerabilities.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24294r493780_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222624'\n  tag rid: 'SV-222624r879887_rule'\n  tag stig_id: 'APSC-DV-002930'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24283r493781_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84925', 'V-70303']\n  tag cci: ['CCI-000256']\n  tag nist: ['CA-2 (2)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222624.rb"},"title":"The ISSO must ensure active vulnerability testing is performed.","desc":"Use of automated scanning tools accompanied with manual testing/validation which confirms or expands on the automated test results is an accepted best practice when performing application security testing. Automated scanning tools expedite and help to standardize security testing, they can incorporate known attack methods and procedures, test for libraries and other software modules known to be vulnerable to attack and utilize a test method known as \"fuzz testing\". Fuzz testing is a testing process where the application is provided invalid, unexpected, or random data. Poorly designed and coded applications will become unstable or crash. Properly designed and coded applications will reject improper and unexpected data input from application clients and remain stable.\n\nMany vulnerability scanning tools provide automated fuzz testing capabilities for the testing of web applications. All of these tools help to identify a wide range of application vulnerabilities including, but not limited to; buffer overflows, cross-site scripting flaws, denial of service format bugs and SQL injection, all of which can lead to a successful compromise of the system or result in a denial of service.\n\nDue to changes in the production environment, it is a good practice to schedule periodic active testing of production web applications. Ideally, this will occur prior to deployment and after updates or changes to the application production environment.\n\nIt is imperative that automated scanning tools are configured properly to ensure that all of the application components that can be tested are tested. In the case of web applications, some of the application code base may be accessible on the website and could potentially be corrected by a knowledgeable system administrator. Active testing is different from code review testing in that active testing does not require access to the application source code base. A code review requires complete code base access and is normally performed by the development team.\n\nIf vulnerability testing is not conducted, there is the distinct potential that security vulnerabilities could be unknowingly introduced into the application environment.\n\nThe following website provides an overview of fuzz testing and examples:\n\nhttp://www.owasp.org/index.php/Fuzzing","descriptions":{"default":"Use of automated scanning tools accompanied with manual testing/validation which confirms or expands on the automated test results is an accepted best practice when performing application security testing. Automated scanning tools expedite and help to standardize security testing, they can incorporate known attack methods and procedures, test for libraries and other software modules known to be vulnerable to attack and utilize a test method known as \"fuzz testing\". Fuzz testing is a testing process where the application is provided invalid, unexpected, or random data. Poorly designed and coded applications will become unstable or crash. Properly designed and coded applications will reject improper and unexpected data input from application clients and remain stable.\n\nMany vulnerability scanning tools provide automated fuzz testing capabilities for the testing of web applications. All of these tools help to identify a wide range of application vulnerabilities including, but not limited to; buffer overflows, cross-site scripting flaws, denial of service format bugs and SQL injection, all of which can lead to a successful compromise of the system or result in a denial of service.\n\nDue to changes in the production environment, it is a good practice to schedule periodic active testing of production web applications. Ideally, this will occur prior to deployment and after updates or changes to the application production environment.\n\nIt is imperative that automated scanning tools are configured properly to ensure that all of the application components that can be tested are tested. In the case of web applications, some of the application code base may be accessible on the website and could potentially be corrected by a knowledgeable system administrator. Active testing is different from code review testing in that active testing does not require access to the application source code base. A code review requires complete code base access and is normally performed by the development team.\n\nIf vulnerability testing is not conducted, there is the distinct potential that security vulnerabilities could be unknowingly introduced into the application environment.\n\nThe following website provides an overview of fuzz testing and examples:\n\nhttp://www.owasp.org/index.php/Fuzzing","check":"Ask the application representative to provide vulnerability test procedures and vulnerability test results.\n\nAsk the application representative to provide the settings that were used to conduct the vulnerability testing.\n\nVerify the automated vulnerability scanning tool was appropriately configured to assure as complete a test as possible of the application architecture components. E.g., if the application includes a web server, web server tests must be included.\n\nIf the vulnerability scan report includes informational and/or non-critical results this is not a finding.\n\nIf previously identified vulnerabilities have subsequently been resolved, this is not a finding.\n\nIf the application test procedures and test results do not include active vulnerability and fuzz testing this is a finding.\n\nIf the vulnerability scan results include critical vulnerabilities, this is a finding.\n\nIf the vulnerability scanning tests are not relevant to the architecture of the application, this is a finding.","fix":"Perform active vulnerability and fuzz testing of the application.\n\nVerify the vulnerability scanning tool is configured to test all application components and functionality.\n\nAddress discovered vulnerabilities."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24294r493780_chk","severity":"medium","gid":"V-222624","rid":"SV-222624r879887_rule","stig_id":"APSC-DV-002930","gtitle":"SRG-APP-000516","fix_id":"F-24283r493781_fix","documentable":null,"legacy":["SV-84925","V-70303"],"cci":["CCI-000256"],"nist":["CA-2 (2)"]}},{"id":"SV-222625","code":"control 'SV-222625' do\n  title 'Execution flow diagrams and design documents must be created to show how deadlock and recursion issues in web services are being mitigated.'\n  desc 'In order to understand data flows within web services, the process flow of data must be developed and documented.\n\nThere are several different ways that web service deadlock occurs, many times it is due to when a client invokes a synchronous method on a web service, the client will block waiting for the method to complete. If attempts to call the client (invoke a callback) while the client is waiting for the original method to complete, then each party will deadlock waiting for the other.\n\nThis is referred to as deadlock. The same situation could occur if a callback handler attempted to call a synchronous method on its caller.\n\nApplications that utilize web services must account for and document how they deal with a deadlock issue. This can be accomplished by documenting data flow and specifically accounting for the risk in the design of the application.'\n  desc 'check', 'Review the application documentation and the system diagrams detailing application system to system and service to service communication methods.\n\nInterview the application admin to identify any application web services that are deployed by the application.\n\nIf the application does not deploy web services, the requirement is not applicable.\n\nIf the application consumes web services but is not responsible for development of the services, the requirement is not applicable.\n\nReview the data flow diagrams and the system documentation to determine if the issue of web service deadlock is addressed.\n\nIf the issue is not addressed in the documentation or configuration settings, ask the application admin to demonstrate how deadlock issues are addressed.\n\nIf deadlock issues are not being addressed via documented web service configuration or design, this is a finding.'\n  desc 'fix', 'Develop web services to account for deadlock issues.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24295r493783_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222625'\n  tag rid: 'SV-222625r879887_rule'\n  tag stig_id: 'APSC-DV-002950'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24284r493784_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84929', 'V-70307']\n  tag cci: ['CCI-000336', 'CCI-000366']\n  tag nist: ['CM-4 (2)', 'CM-6 b']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222625.rb"},"title":"Execution flow diagrams and design documents must be created to show how deadlock and recursion issues in web services are being mitigated.","desc":"In order to understand data flows within web services, the process flow of data must be developed and documented.\n\nThere are several different ways that web service deadlock occurs, many times it is due to when a client invokes a synchronous method on a web service, the client will block waiting for the method to complete. If attempts to call the client (invoke a callback) while the client is waiting for the original method to complete, then each party will deadlock waiting for the other.\n\nThis is referred to as deadlock. The same situation could occur if a callback handler attempted to call a synchronous method on its caller.\n\nApplications that utilize web services must account for and document how they deal with a deadlock issue. This can be accomplished by documenting data flow and specifically accounting for the risk in the design of the application.","descriptions":{"default":"In order to understand data flows within web services, the process flow of data must be developed and documented.\n\nThere are several different ways that web service deadlock occurs, many times it is due to when a client invokes a synchronous method on a web service, the client will block waiting for the method to complete. If attempts to call the client (invoke a callback) while the client is waiting for the original method to complete, then each party will deadlock waiting for the other.\n\nThis is referred to as deadlock. The same situation could occur if a callback handler attempted to call a synchronous method on its caller.\n\nApplications that utilize web services must account for and document how they deal with a deadlock issue. This can be accomplished by documenting data flow and specifically accounting for the risk in the design of the application.","check":"Review the application documentation and the system diagrams detailing application system to system and service to service communication methods.\n\nInterview the application admin to identify any application web services that are deployed by the application.\n\nIf the application does not deploy web services, the requirement is not applicable.\n\nIf the application consumes web services but is not responsible for development of the services, the requirement is not applicable.\n\nReview the data flow diagrams and the system documentation to determine if the issue of web service deadlock is addressed.\n\nIf the issue is not addressed in the documentation or configuration settings, ask the application admin to demonstrate how deadlock issues are addressed.\n\nIf deadlock issues are not being addressed via documented web service configuration or design, this is a finding.","fix":"Develop web services to account for deadlock issues."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24295r493783_chk","severity":"medium","gid":"V-222625","rid":"SV-222625r879887_rule","stig_id":"APSC-DV-002950","gtitle":"SRG-APP-000516","fix_id":"F-24284r493784_fix","documentable":null,"legacy":["SV-84929","V-70307"],"cci":["CCI-000336","CCI-000366"],"nist":["CM-4 (2)","CM-6 b"]}},{"id":"SV-222626","code":"control 'SV-222626' do\n  title 'The designer must ensure the application does not store configuration and control files in the same directory as user data.'\n  desc 'Application configuration settings and user data are required to be stored in separate locations in order to prevent application users from possibly being able to access application configuration settings or application data files. Without proper access controls and separation of application configuration settings from user data, there is the potential that existing code or configuration settings could be changed by users. These changes in code can lead to a Denial of Service (DoS) attack or allow malicious code to be placed within the application. In addition, collocating application data and code complicates many issues such as backup, recovery, directory access privilege, and upgrades.'\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nAsk the application administrator or examine the application documentation to determine the file location of the application configuration settings and user data.\n\nIdentify the directory where the application code, configuration settings and other application control data are located.\n\nIdentify where user data is stored.\n\nExamine file permissions to application folder.\n\nIf the application user data is located in the same directory as the application configuration settings or control files, or if the file permissions allow application users write access to application configuration settings, this is a finding.'\n  desc 'fix', 'Separate the application user data into a different directory than the application code and user file permissions to restrict user access to application configuration settings.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24296r493786_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222626'\n  tag rid: 'SV-222626r879887_rule'\n  tag stig_id: 'APSC-DV-002960'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24285r493787_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84931', 'V-70309']\n  tag cci: ['CCI-000345']\n  tag nist: ['CM-5']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222626.rb"},"title":"The designer must ensure the application does not store configuration and control files in the same directory as user data.","desc":"Application configuration settings and user data are required to be stored in separate locations in order to prevent application users from possibly being able to access application configuration settings or application data files. Without proper access controls and separation of application configuration settings from user data, there is the potential that existing code or configuration settings could be changed by users. These changes in code can lead to a Denial of Service (DoS) attack or allow malicious code to be placed within the application. In addition, collocating application data and code complicates many issues such as backup, recovery, directory access privilege, and upgrades.","descriptions":{"default":"Application configuration settings and user data are required to be stored in separate locations in order to prevent application users from possibly being able to access application configuration settings or application data files. Without proper access controls and separation of application configuration settings from user data, there is the potential that existing code or configuration settings could be changed by users. These changes in code can lead to a Denial of Service (DoS) attack or allow malicious code to be placed within the application. In addition, collocating application data and code complicates many issues such as backup, recovery, directory access privilege, and upgrades.","check":"Review the application documentation and interview the application administrator.\n\nAsk the application administrator or examine the application documentation to determine the file location of the application configuration settings and user data.\n\nIdentify the directory where the application code, configuration settings and other application control data are located.\n\nIdentify where user data is stored.\n\nExamine file permissions to application folder.\n\nIf the application user data is located in the same directory as the application configuration settings or control files, or if the file permissions allow application users write access to application configuration settings, this is a finding.","fix":"Separate the application user data into a different directory than the application code and user file permissions to restrict user access to application configuration settings."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24296r493786_chk","severity":"medium","gid":"V-222626","rid":"SV-222626r879887_rule","stig_id":"APSC-DV-002960","gtitle":"SRG-APP-000516","fix_id":"F-24285r493787_fix","documentable":null,"legacy":["SV-84931","V-70309"],"cci":["CCI-000345"],"nist":["CM-5"]}},{"id":"SV-222627","code":"control 'SV-222627' do\n  title 'The ISSO must ensure if a DoD STIG or NSA guide is not available, a third-party product will be configured by following available guidance.'\n  desc 'Not all COTS products are covered by a STIG. Those products not covered by a STIG, should follow commercially accepted best practices, independent testing results and vendors lock down guides and recommendations if they are available.'\n  desc 'check', 'Review the application documentation to identify application name, features and version.\n\nIdentify if a DoD STIG or NSA guide is available.\n\nIf no STIG is available for the product, the application and application components must be configured by the following as available: \n\n- commercially accepted practices, \n- independent testing results, or \n- vendor literature and lock down guides.\n\nIf the application and application components do not have DoD STIG or NSA guidance available and are not configured according to: \ncommercially accepted practices, \nindependent testing results,\nor vendor literature and lock down guides, this is a finding.'\n  desc 'fix', 'Configure the application according to the product STIG or when a STIG is not available, utilize:\n\n- commercially accepted practices,\n- independent testing results, or\n- vendor literature and lock down guides.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24297r493789_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222627'\n  tag rid: 'SV-222627r879887_rule'\n  tag stig_id: 'APSC-DV-002970'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24286r493790_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84933', 'V-70311']\n  tag cci: ['CCI-000363']\n  tag nist: ['CM-6 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222627.rb"},"title":"The ISSO must ensure if a DoD STIG or NSA guide is not available, a third-party product will be configured by following available guidance.","desc":"Not all COTS products are covered by a STIG. Those products not covered by a STIG, should follow commercially accepted best practices, independent testing results and vendors lock down guides and recommendations if they are available.","descriptions":{"default":"Not all COTS products are covered by a STIG. Those products not covered by a STIG, should follow commercially accepted best practices, independent testing results and vendors lock down guides and recommendations if they are available.","check":"Review the application documentation to identify application name, features and version.\n\nIdentify if a DoD STIG or NSA guide is available.\n\nIf no STIG is available for the product, the application and application components must be configured by the following as available: \n\n- commercially accepted practices, \n- independent testing results, or \n- vendor literature and lock down guides.\n\nIf the application and application components do not have DoD STIG or NSA guidance available and are not configured according to: \ncommercially accepted practices, \nindependent testing results,\nor vendor literature and lock down guides, this is a finding.","fix":"Configure the application according to the product STIG or when a STIG is not available, utilize:\n\n- commercially accepted practices,\n- independent testing results, or\n- vendor literature and lock down guides."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24297r493789_chk","severity":"medium","gid":"V-222627","rid":"SV-222627r879887_rule","stig_id":"APSC-DV-002970","gtitle":"SRG-APP-000516","fix_id":"F-24286r493790_fix","documentable":null,"legacy":["SV-84933","V-70311"],"cci":["CCI-000363"],"nist":["CM-6 a"]}},{"id":"SV-222628","code":"control 'SV-222628' do\n  title 'New IP addresses, data services, and associated ports used by the application must be submitted to the appropriate approving authority for the organization, which in turn will be submitted through the DoD Ports, Protocols, and Services Management (DoD PPSM)'\n  desc 'Failure to comply with DoD Ports, Protocols, and Services (PPS) Vulnerability Analysis and associated PPS mitigations may result in compromise of enclave boundary protections and/or functionality of the application.'\n  desc 'check', 'All application ports, protocols, and services needed for application operation need to be in compliance with the DoD Ports and Protocols guidance.\n\nCheck:\n\nhttp://iase.disa.mil/ppsm/Pages/index.aspx\n\nto verify the ports, protocols, and services are in compliance with the PPS CAL.\n\nCheck all necessary ports and protocols needed for application operation (only those accessed from outside the local enclave) are checked against the DoD Ports and Protocols guidance to ensure compliance.\n\nIdentify the ports needed for the application:\n\n- Look at System Security Plan/Accreditation documentation\n- Ask System Administrator\n- Go to Network Administrator\n- Go to Network Reviewer\n- If a network scan is available, use it\n- Use netstat/task manager\n- Check /etc./services\n\nIf the application is not in compliance with DoD Ports and Protocols guidance, this is a finding.'\n  desc 'fix', 'Verify the accreditation documentation lists all interfaces and the ports, protocols, and services used.\n\nVerify that all ports, protocols, and services are used in accordance with the DoD PPSM.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-36255r602328_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222628'\n  tag rid: 'SV-222628r879887_rule'\n  tag stig_id: 'APSC-DV-002980'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-36219r602329_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84935', 'V-70313']\n  tag cci: ['CCI-000388']\n  tag nist: ['CM-7 (3)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222628.rb"},"title":"New IP addresses, data services, and associated ports used by the application must be submitted to the appropriate approving authority for the organization, which in turn will be submitted through the DoD Ports, Protocols, and Services Management (DoD PPSM)","desc":"Failure to comply with DoD Ports, Protocols, and Services (PPS) Vulnerability Analysis and associated PPS mitigations may result in compromise of enclave boundary protections and/or functionality of the application.","descriptions":{"default":"Failure to comply with DoD Ports, Protocols, and Services (PPS) Vulnerability Analysis and associated PPS mitigations may result in compromise of enclave boundary protections and/or functionality of the application.","check":"All application ports, protocols, and services needed for application operation need to be in compliance with the DoD Ports and Protocols guidance.\n\nCheck:\n\nhttp://iase.disa.mil/ppsm/Pages/index.aspx\n\nto verify the ports, protocols, and services are in compliance with the PPS CAL.\n\nCheck all necessary ports and protocols needed for application operation (only those accessed from outside the local enclave) are checked against the DoD Ports and Protocols guidance to ensure compliance.\n\nIdentify the ports needed for the application:\n\n- Look at System Security Plan/Accreditation documentation\n- Ask System Administrator\n- Go to Network Administrator\n- Go to Network Reviewer\n- If a network scan is available, use it\n- Use netstat/task manager\n- Check /etc./services\n\nIf the application is not in compliance with DoD Ports and Protocols guidance, this is a finding.","fix":"Verify the accreditation documentation lists all interfaces and the ports, protocols, and services used.\n\nVerify that all ports, protocols, and services are used in accordance with the DoD PPSM."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-36255r602328_chk","severity":"medium","gid":"V-222628","rid":"SV-222628r879887_rule","stig_id":"APSC-DV-002980","gtitle":"SRG-APP-000516","fix_id":"F-36219r602329_fix","documentable":null,"legacy":["SV-84935","V-70313"],"cci":["CCI-000388"],"nist":["CM-7 (3)"]}},{"id":"SV-222629","code":"control 'SV-222629' do\n  title 'The application must be registered with the DoD Ports and Protocols Database.'\n  desc 'Failure to register the applications usage of ports, protocols, and services with the DoD PPS Database may result in a Denial of Service (DoS) because of enclave boundary protections at other end points within the network.'\n  desc 'check', 'Verify registration of the application and ports in the Ports and Protocols Database for a production site.\n\nIf the application requires registration, and is not registered or all ports used have not been identified in the database, this is a finding.'\n  desc 'fix', 'Register the application and ports in the Ports and Protocols Database.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24299r493795_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222629'\n  tag rid: 'SV-222629r879887_rule'\n  tag stig_id: 'APSC-DV-002990'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24288r493796_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84939', 'V-70317']\n  tag cci: ['CCI-000388']\n  tag nist: ['CM-7 (3)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222629.rb"},"title":"The application must be registered with the DoD Ports and Protocols Database.","desc":"Failure to register the applications usage of ports, protocols, and services with the DoD PPS Database may result in a Denial of Service (DoS) because of enclave boundary protections at other end points within the network.","descriptions":{"default":"Failure to register the applications usage of ports, protocols, and services with the DoD PPS Database may result in a Denial of Service (DoS) because of enclave boundary protections at other end points within the network.","check":"Verify registration of the application and ports in the Ports and Protocols Database for a production site.\n\nIf the application requires registration, and is not registered or all ports used have not been identified in the database, this is a finding.","fix":"Register the application and ports in the Ports and Protocols Database."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24299r493795_chk","severity":"medium","gid":"V-222629","rid":"SV-222629r879887_rule","stig_id":"APSC-DV-002990","gtitle":"SRG-APP-000516","fix_id":"F-24288r493796_fix","documentable":null,"legacy":["SV-84939","V-70317"],"cci":["CCI-000388"],"nist":["CM-7 (3)"]}},{"id":"SV-222630","code":"control 'SV-222630' do\n  title 'The Configuration Management (CM) repository must be properly patched and STIG compliant.'\n  desc 'A Configuration Management (CM) repository is used to manage application code versions and to securely store application code.\n\nFailure to properly apply security patches and secure the software Configuration Management system could affect the confidentiality and integrity of the application source-code.  \n\nCompromise of the Configuration Management system could lead to unauthorized changes to applications including the addition of malware, root kits, back doors, logic bombs or other malicious functions into valid application code.   \n\nThis requirement is intended to be applied to application developers or organizations responsible for code management or who have and operate an application CM repository.'\n  desc 'check', 'Review the application system documentation and interview the application administrator.\n\nIdentify if the STIG is being applied to application developers or organizations responsible for code management or who have and operate an application CM repository. If this is not the case, the requirement is not applicable.\n\nReview CM patch management processes and procedures.  Have the system and CM admins demonstrate their patch management processes and verify the system has the latest security patches applied.  \n\nReview the ATO documentation and verify the system that operates the CM repository software has had all relevant STIGs applied.\n\nIf CM repository is not at the latest security patch level and is not operating on a STIG compliant system, this is a finding.'\n  desc 'fix', 'Patch the CM system when new security patches are made available and apply the relevant STIGs.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24300r493798_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222630'\n  tag rid: 'SV-222630r879887_rule'\n  tag stig_id: 'APSC-DV-002995'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24289r493799_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84961', 'V-70339']\n  tag cci: ['CCI-001795']\n  tag nist: ['CM-9 b']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222630.rb"},"title":"The Configuration Management (CM) repository must be properly patched and STIG compliant.","desc":"A Configuration Management (CM) repository is used to manage application code versions and to securely store application code.\n\nFailure to properly apply security patches and secure the software Configuration Management system could affect the confidentiality and integrity of the application source-code.  \n\nCompromise of the Configuration Management system could lead to unauthorized changes to applications including the addition of malware, root kits, back doors, logic bombs or other malicious functions into valid application code.   \n\nThis requirement is intended to be applied to application developers or organizations responsible for code management or who have and operate an application CM repository.","descriptions":{"default":"A Configuration Management (CM) repository is used to manage application code versions and to securely store application code.\n\nFailure to properly apply security patches and secure the software Configuration Management system could affect the confidentiality and integrity of the application source-code.  \n\nCompromise of the Configuration Management system could lead to unauthorized changes to applications including the addition of malware, root kits, back doors, logic bombs or other malicious functions into valid application code.   \n\nThis requirement is intended to be applied to application developers or organizations responsible for code management or who have and operate an application CM repository.","check":"Review the application system documentation and interview the application administrator.\n\nIdentify if the STIG is being applied to application developers or organizations responsible for code management or who have and operate an application CM repository. If this is not the case, the requirement is not applicable.\n\nReview CM patch management processes and procedures.  Have the system and CM admins demonstrate their patch management processes and verify the system has the latest security patches applied.  \n\nReview the ATO documentation and verify the system that operates the CM repository software has had all relevant STIGs applied.\n\nIf CM repository is not at the latest security patch level and is not operating on a STIG compliant system, this is a finding.","fix":"Patch the CM system when new security patches are made available and apply the relevant STIGs."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24300r493798_chk","severity":"medium","gid":"V-222630","rid":"SV-222630r879887_rule","stig_id":"APSC-DV-002995","gtitle":"SRG-APP-000516","fix_id":"F-24289r493799_fix","documentable":null,"legacy":["SV-84961","V-70339"],"cci":["CCI-001795"],"nist":["CM-9 b"]}},{"id":"SV-222631","code":"control 'SV-222631' do\n  title 'Access privileges to the Configuration Management (CM) repository must be reviewed every three months.'\n  desc 'A Configuration Management (CM) repository is used to manage application code versions and to securely store application code.\n\nIncorrect access privileges to the CM repository can lead to malicious code or unintentional code being introduced into the application.\n\nThis requirement is intended to be applied to application developers or organizations responsible for code management or who have and operate an application CM repository.'\n  desc 'check', 'Review the application system documentation.\n\nInterview the application administrator.\n\nIdentify if development of the application is done in house and if application configuration management repository exists.\n\nIf application development is not done in house and if a code configuration management repository does not exist, the requirement is not applicable.\n\nReview CM management processes and procedures.\n\nVerify the CM repository access permissions are reviewed at least every three months.\n\nAsk the application administrator or the CM administrator when the last time the CM access privileges were reviewed.\n\nIf CM access privileges have not been reviewed within the last three months, this is a finding.'\n  desc 'fix', 'Review access privileges to the CM repository at least every three months.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24301r493801_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222631'\n  tag rid: 'SV-222631r879887_rule'\n  tag stig_id: 'APSC-DV-003000'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24290r493802_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84963', 'V-70341']\n  tag cci: ['CCI-001795']\n  tag nist: ['CM-9 b']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222631.rb"},"title":"Access privileges to the Configuration Management (CM) repository must be reviewed every three months.","desc":"A Configuration Management (CM) repository is used to manage application code versions and to securely store application code.\n\nIncorrect access privileges to the CM repository can lead to malicious code or unintentional code being introduced into the application.\n\nThis requirement is intended to be applied to application developers or organizations responsible for code management or who have and operate an application CM repository.","descriptions":{"default":"A Configuration Management (CM) repository is used to manage application code versions and to securely store application code.\n\nIncorrect access privileges to the CM repository can lead to malicious code or unintentional code being introduced into the application.\n\nThis requirement is intended to be applied to application developers or organizations responsible for code management or who have and operate an application CM repository.","check":"Review the application system documentation.\n\nInterview the application administrator.\n\nIdentify if development of the application is done in house and if application configuration management repository exists.\n\nIf application development is not done in house and if a code configuration management repository does not exist, the requirement is not applicable.\n\nReview CM management processes and procedures.\n\nVerify the CM repository access permissions are reviewed at least every three months.\n\nAsk the application administrator or the CM administrator when the last time the CM access privileges were reviewed.\n\nIf CM access privileges have not been reviewed within the last three months, this is a finding.","fix":"Review access privileges to the CM repository at least every three months."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24301r493801_chk","severity":"medium","gid":"V-222631","rid":"SV-222631r879887_rule","stig_id":"APSC-DV-003000","gtitle":"SRG-APP-000516","fix_id":"F-24290r493802_fix","documentable":null,"legacy":["SV-84963","V-70341"],"cci":["CCI-001795"],"nist":["CM-9 b"]}},{"id":"SV-222632","code":"control 'SV-222632' do\n  title 'A Software Configuration Management (SCM) plan describing the configuration control and change management process of application objects developed by the organization and the roles and responsibilities of the organization must be created and maintained.'\n  desc 'Software Configuration Management (SCM) is very important in tracking code releases, baselines, and managing access to the configuration management repository. The SCM plan identifies what should be under configuration management control.\n\nWithout an SCM plan that addresses code security issues, code releases can be tracked and vulnerabilities can be inserted intentionally or unintentionally into the code base of the application.\n\nThis requirement is intended to be applied to application developers or organizations responsible for code management or who have and operate an application configuration management repository (CMR).\n\nThe SCM plan identifies all objects created during the development process subject to configuration control.\n\nThe SCM plan maintains procedures for identifying individual application components, as well as, entire application releases during all phases of the software development lifecycle.\n\nThe SCM plan identifies and tracks all actions and changes resulting from a change request from initiation to release.\n\nThe SCM plan contains procedures to identify, document, review, and authorize any change requests to the application.\n\nThe SCM plan defines the responsibilities, the actions to be performed, the tools, techniques and methodologies, and defines an initial set of baselined software components.\n\nThe SCM plan objects have security classifications labels.\n\nThe SCM plan identifies tools and version numbers used in the software development lifecycle.\n\nThe SCM plan identifies mechanisms for controlled access of simultaneous individuals updating the same application component.\n\nThe SCM plan assures only authorized changes by authorized persons are possible.\n\nThe SCM plan identifies mechanisms to control access and audit changes between different versions of objects subject to configuration control.\n\nThe SCM plan identifies mechanisms to track and audit all modifications of objects under configuration control.  Audits include the originator and date and time of the modification.\n\nThe SCM plan should contain the following:\n\n- Description of the configuration control and change management process\n- Types of objects developed\n- Roles and responsibilities of the organization\n\nThe SCM plan should also contain the following:\n\n- Defined responsibilities\n- Actions to be performed\n- Tools used in the process\n- Techniques and methodologies\n- Initial set of baselined software components\n\nThe SCM plan should identify all objects that are under configuration management control.\n\nThe SCM plan should identify third-party tools and respective version numbers.\n\nThe SCM plan should identify mechanisms for controlled access of individuals simultaneously updating the same application component.\n\nThe SCM plan assures only authorized changes by authorized persons are allowed.\n\nThe SCM plan should identify mechanisms to control access and audit changes between different versions of objects subject to configuration control.\n\nThe SCM plan should have procedures for label versions of application components and application builds under configuration management control.\n\nThe configuration management repository (CMR) should track change requests from beginning to end.\n\nThe configuration management repository (CMR) should authorize change requests to the application.\n \nThe configuration management repository (CMR) should contain security classification labels for code and documentation in the repository. Classification labels are not applicable to unclassified systems.\n\nThe configuration management repository (CMR) should monitor all objects under CMR control for auditing.'\n  desc 'check', 'Interview ISSM or application administrator.\n\nIdentify if development of the application is done in house and if application configuration management repository exists.\n\nIf application development is not done in house and if a code configuration management repository does not exist, the requirement is not applicable.\n\nVerify the SCM plan identifies all objects created during the development process subject to configuration control.\n\nVerify the SCM plan maintains procedures for identifying individual application components, as well as, entire application releases during all phases of the software development lifecycle.\n\nVerify the SCM plan identifies and tracks all actions and changes resulting from a change request from initiation to release.\n\nVerify the SCM plan contains procedures to identify, document, review, and authorize any change requests to the application.\n\nVerify the SCM plan defines the responsibilities, the actions to be performed, the tools, techniques and methodologies, and defines an initial set of base-lined software components.\n\nVerify the SCM plan objects have security classifications labels if processing classified data.\n\nVerify the SCM plan identifies tools and version numbers used in the software development lifecycle.\n\nVerify the SCM plan identifies mechanisms for controlled access of simultaneous individuals updating the same application component.\n\nVerify the SCM plan assures only authorized changes by authorized persons are possible.\n\nVerify the SCM plan identifies mechanisms to control access and audit changes between different versions of objects subject to configuration control.\n\nVerify the SCM plan identifies mechanisms to track and audit all modifications of objects under configuration control. Audits will include the originator and date and time of the modification.\n\nAsk the application representative to review the applications SCM plan.\n\nThe SCM plan should contain the following:\n\n- Description of the configuration control and change management process\n- Types of objects developed\n- Roles and responsibilities of the organization\n- Defined responsibilities\n- Actions to be performed\n- Tools used in the process\n- Techniques and methodologies\n- Initial set of baselined software components\n\nIf the SCM plan does not include the above, this is a finding.\n\nThe SCM plan should identify all objects that are under configuration management control. Ask the application representative to provide access to the CMR and to identify the objects shown in the SCM plan.\n\nIf the application representative cannot display all types of objects under CMR control, this is a finding.\n\nThe SCM plan should identify third-party tools and respective version numbers.\n\nIf the SCM plan does not identify third-party tools, this is a finding.\n\nThe SCM plan should identify mechanisms for controlled access of individuals simultaneously updating the same application component.\n\nIf the SCM plan does not identify mechanisms for controlled access, this is a finding.\n\nThe SCM plan assures only authorized changes by authorized persons are allowed.\n\nIf the SCM plan does not assure only authorized changes are made, this is a finding.\n\nThe SCM plan should identify the mechanisms used to control access and audit changes between different versions of objects subject to CMR control.\n\nIf the SCM plan does not identify mechanisms used to control access and to audit changes between different versions of objects subject to CMR control, this is a finding.\n\nThe SCM plan should have procedures for label versions of application components and application builds under configuration management control. Ask the application representative to demonstrate the CMR and ensure it contains versions and releases of the application. Ask the application representative to create a build or demonstrate a current release of the application that can be recreated.\n\nIf the application representative cannot display releases and application component versions, this is a finding.\n\nThe CMR should track change requests from beginning to end. Ask the application representative to display a completed or in-process change request.\n\nIf the CMR cannot track change requests, this is a finding.\n\nIf the application has just completed its first release, there may not be any change requests logged in the CMR.  In this case, this finding is not applicable.\n\nThe CMR should authorize change requests to the application. Ask the application representative to display an authorized change request and identify who is responsible for authorizing change requests.\n\nIf the CMR does not track authorized change requests, this is a finding.\n\nIf the application has just completed its first release, there may not be any change requests logged in the CMR. In this case, this finding is not applicable.\n\nThe CMR should contain security classification labels for code and documentation in the repository. \n\nClassification labels are not applicable to unclassified systems.  If the applications managed by the CMR are not classified, this requirement is not applicable.\n\nIf the CMR manages classified applications and there are no classification labels of code and documentation in the CMR, this is a finding.\n\nThe CMR should audit all objects under CM control for modification.\n\nIf the CMR does not audit for modifications, this is a finding.'\n  desc 'fix', 'Create and update a SCM plan describing the configuration control and change management process of application objects developed by the organization and the roles and responsibilities of the organization.  Configure CMR to comply.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24302r493804_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222632'\n  tag rid: 'SV-222632r879887_rule'\n  tag stig_id: 'APSC-DV-003010'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24291r493805_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84965', 'V-70343']\n  tag cci: ['CCI-001795']\n  tag nist: ['CM-9 b']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222632.rb"},"title":"A Software Configuration Management (SCM) plan describing the configuration control and change management process of application objects developed by the organization and the roles and responsibilities of the organization must be created and maintained.","desc":"Software Configuration Management (SCM) is very important in tracking code releases, baselines, and managing access to the configuration management repository. The SCM plan identifies what should be under configuration management control.\n\nWithout an SCM plan that addresses code security issues, code releases can be tracked and vulnerabilities can be inserted intentionally or unintentionally into the code base of the application.\n\nThis requirement is intended to be applied to application developers or organizations responsible for code management or who have and operate an application configuration management repository (CMR).\n\nThe SCM plan identifies all objects created during the development process subject to configuration control.\n\nThe SCM plan maintains procedures for identifying individual application components, as well as, entire application releases during all phases of the software development lifecycle.\n\nThe SCM plan identifies and tracks all actions and changes resulting from a change request from initiation to release.\n\nThe SCM plan contains procedures to identify, document, review, and authorize any change requests to the application.\n\nThe SCM plan defines the responsibilities, the actions to be performed, the tools, techniques and methodologies, and defines an initial set of baselined software components.\n\nThe SCM plan objects have security classifications labels.\n\nThe SCM plan identifies tools and version numbers used in the software development lifecycle.\n\nThe SCM plan identifies mechanisms for controlled access of simultaneous individuals updating the same application component.\n\nThe SCM plan assures only authorized changes by authorized persons are possible.\n\nThe SCM plan identifies mechanisms to control access and audit changes between different versions of objects subject to configuration control.\n\nThe SCM plan identifies mechanisms to track and audit all modifications of objects under configuration control.  Audits include the originator and date and time of the modification.\n\nThe SCM plan should contain the following:\n\n- Description of the configuration control and change management process\n- Types of objects developed\n- Roles and responsibilities of the organization\n\nThe SCM plan should also contain the following:\n\n- Defined responsibilities\n- Actions to be performed\n- Tools used in the process\n- Techniques and methodologies\n- Initial set of baselined software components\n\nThe SCM plan should identify all objects that are under configuration management control.\n\nThe SCM plan should identify third-party tools and respective version numbers.\n\nThe SCM plan should identify mechanisms for controlled access of individuals simultaneously updating the same application component.\n\nThe SCM plan assures only authorized changes by authorized persons are allowed.\n\nThe SCM plan should identify mechanisms to control access and audit changes between different versions of objects subject to configuration control.\n\nThe SCM plan should have procedures for label versions of application components and application builds under configuration management control.\n\nThe configuration management repository (CMR) should track change requests from beginning to end.\n\nThe configuration management repository (CMR) should authorize change requests to the application.\n \nThe configuration management repository (CMR) should contain security classification labels for code and documentation in the repository. Classification labels are not applicable to unclassified systems.\n\nThe configuration management repository (CMR) should monitor all objects under CMR control for auditing.","descriptions":{"default":"Software Configuration Management (SCM) is very important in tracking code releases, baselines, and managing access to the configuration management repository. The SCM plan identifies what should be under configuration management control.\n\nWithout an SCM plan that addresses code security issues, code releases can be tracked and vulnerabilities can be inserted intentionally or unintentionally into the code base of the application.\n\nThis requirement is intended to be applied to application developers or organizations responsible for code management or who have and operate an application configuration management repository (CMR).\n\nThe SCM plan identifies all objects created during the development process subject to configuration control.\n\nThe SCM plan maintains procedures for identifying individual application components, as well as, entire application releases during all phases of the software development lifecycle.\n\nThe SCM plan identifies and tracks all actions and changes resulting from a change request from initiation to release.\n\nThe SCM plan contains procedures to identify, document, review, and authorize any change requests to the application.\n\nThe SCM plan defines the responsibilities, the actions to be performed, the tools, techniques and methodologies, and defines an initial set of baselined software components.\n\nThe SCM plan objects have security classifications labels.\n\nThe SCM plan identifies tools and version numbers used in the software development lifecycle.\n\nThe SCM plan identifies mechanisms for controlled access of simultaneous individuals updating the same application component.\n\nThe SCM plan assures only authorized changes by authorized persons are possible.\n\nThe SCM plan identifies mechanisms to control access and audit changes between different versions of objects subject to configuration control.\n\nThe SCM plan identifies mechanisms to track and audit all modifications of objects under configuration control.  Audits include the originator and date and time of the modification.\n\nThe SCM plan should contain the following:\n\n- Description of the configuration control and change management process\n- Types of objects developed\n- Roles and responsibilities of the organization\n\nThe SCM plan should also contain the following:\n\n- Defined responsibilities\n- Actions to be performed\n- Tools used in the process\n- Techniques and methodologies\n- Initial set of baselined software components\n\nThe SCM plan should identify all objects that are under configuration management control.\n\nThe SCM plan should identify third-party tools and respective version numbers.\n\nThe SCM plan should identify mechanisms for controlled access of individuals simultaneously updating the same application component.\n\nThe SCM plan assures only authorized changes by authorized persons are allowed.\n\nThe SCM plan should identify mechanisms to control access and audit changes between different versions of objects subject to configuration control.\n\nThe SCM plan should have procedures for label versions of application components and application builds under configuration management control.\n\nThe configuration management repository (CMR) should track change requests from beginning to end.\n\nThe configuration management repository (CMR) should authorize change requests to the application.\n \nThe configuration management repository (CMR) should contain security classification labels for code and documentation in the repository. Classification labels are not applicable to unclassified systems.\n\nThe configuration management repository (CMR) should monitor all objects under CMR control for auditing.","check":"Interview ISSM or application administrator.\n\nIdentify if development of the application is done in house and if application configuration management repository exists.\n\nIf application development is not done in house and if a code configuration management repository does not exist, the requirement is not applicable.\n\nVerify the SCM plan identifies all objects created during the development process subject to configuration control.\n\nVerify the SCM plan maintains procedures for identifying individual application components, as well as, entire application releases during all phases of the software development lifecycle.\n\nVerify the SCM plan identifies and tracks all actions and changes resulting from a change request from initiation to release.\n\nVerify the SCM plan contains procedures to identify, document, review, and authorize any change requests to the application.\n\nVerify the SCM plan defines the responsibilities, the actions to be performed, the tools, techniques and methodologies, and defines an initial set of base-lined software components.\n\nVerify the SCM plan objects have security classifications labels if processing classified data.\n\nVerify the SCM plan identifies tools and version numbers used in the software development lifecycle.\n\nVerify the SCM plan identifies mechanisms for controlled access of simultaneous individuals updating the same application component.\n\nVerify the SCM plan assures only authorized changes by authorized persons are possible.\n\nVerify the SCM plan identifies mechanisms to control access and audit changes between different versions of objects subject to configuration control.\n\nVerify the SCM plan identifies mechanisms to track and audit all modifications of objects under configuration control. Audits will include the originator and date and time of the modification.\n\nAsk the application representative to review the applications SCM plan.\n\nThe SCM plan should contain the following:\n\n- Description of the configuration control and change management process\n- Types of objects developed\n- Roles and responsibilities of the organization\n- Defined responsibilities\n- Actions to be performed\n- Tools used in the process\n- Techniques and methodologies\n- Initial set of baselined software components\n\nIf the SCM plan does not include the above, this is a finding.\n\nThe SCM plan should identify all objects that are under configuration management control. Ask the application representative to provide access to the CMR and to identify the objects shown in the SCM plan.\n\nIf the application representative cannot display all types of objects under CMR control, this is a finding.\n\nThe SCM plan should identify third-party tools and respective version numbers.\n\nIf the SCM plan does not identify third-party tools, this is a finding.\n\nThe SCM plan should identify mechanisms for controlled access of individuals simultaneously updating the same application component.\n\nIf the SCM plan does not identify mechanisms for controlled access, this is a finding.\n\nThe SCM plan assures only authorized changes by authorized persons are allowed.\n\nIf the SCM plan does not assure only authorized changes are made, this is a finding.\n\nThe SCM plan should identify the mechanisms used to control access and audit changes between different versions of objects subject to CMR control.\n\nIf the SCM plan does not identify mechanisms used to control access and to audit changes between different versions of objects subject to CMR control, this is a finding.\n\nThe SCM plan should have procedures for label versions of application components and application builds under configuration management control. Ask the application representative to demonstrate the CMR and ensure it contains versions and releases of the application. Ask the application representative to create a build or demonstrate a current release of the application that can be recreated.\n\nIf the application representative cannot display releases and application component versions, this is a finding.\n\nThe CMR should track change requests from beginning to end. Ask the application representative to display a completed or in-process change request.\n\nIf the CMR cannot track change requests, this is a finding.\n\nIf the application has just completed its first release, there may not be any change requests logged in the CMR.  In this case, this finding is not applicable.\n\nThe CMR should authorize change requests to the application. Ask the application representative to display an authorized change request and identify who is responsible for authorizing change requests.\n\nIf the CMR does not track authorized change requests, this is a finding.\n\nIf the application has just completed its first release, there may not be any change requests logged in the CMR. In this case, this finding is not applicable.\n\nThe CMR should contain security classification labels for code and documentation in the repository. \n\nClassification labels are not applicable to unclassified systems.  If the applications managed by the CMR are not classified, this requirement is not applicable.\n\nIf the CMR manages classified applications and there are no classification labels of code and documentation in the CMR, this is a finding.\n\nThe CMR should audit all objects under CM control for modification.\n\nIf the CMR does not audit for modifications, this is a finding.","fix":"Create and update a SCM plan describing the configuration control and change management process of application objects developed by the organization and the roles and responsibilities of the organization.  Configure CMR to comply."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24302r493804_chk","severity":"medium","gid":"V-222632","rid":"SV-222632r879887_rule","stig_id":"APSC-DV-003010","gtitle":"SRG-APP-000516","fix_id":"F-24291r493805_fix","documentable":null,"legacy":["SV-84965","V-70343"],"cci":["CCI-001795"],"nist":["CM-9 b"]}},{"id":"SV-222633","code":"control 'SV-222633' do\n  title 'A Configuration Control Board (CCB) that meets at least every release cycle, for managing the Configuration Management (CM) process must be established.'\n  desc \"Software Configuration Management (SCM) is very important in tracking code releases, baselines, and managing access to the configuration management repository. An SCM plan or charter identifies what should be under configuration management control. Without an SCM plan and a CCB, application releases can't be tracked and vulnerabilities can be inserted intentionally or unintentionally into the code base of the application.\n\nThis requirement is intended to be applied to application developers or organizations responsible for code management or who have and operate an application CM repository.\"\n  desc 'check', 'Interview the application representative and determine if application development is performed on site by the organization.\n\nIf application development is not done in house, the requirement is not applicable.\n\nIf so, determine if a CCB exists. Ask about the membership of the CCB, and identify the primary members. Ask if there is CCB charter documentation.\n\nInterview the application representative and determine how often the CCB meets.\n\nAsk if there is CCB charter documentation. The CCB charter documentation should indicate how often the CCB meets.\n\nIf there is no charter documentation, ask when the last time the CCB met and when was the last release of the application.\n\nCCBs do not have to physically meet, and the CCB chair may authorize a release based on phone and/or e-mail conversations.\n\nIf there is no evidence of CCB activity or meetings prior to the last release cycle, this is a finding.'\n  desc 'fix', 'Setup and maintain a Configuration Control Board.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24303r493807_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222633'\n  tag rid: 'SV-222633r879887_rule'\n  tag stig_id: 'APSC-DV-003020'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24292r493808_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84967', 'V-70345']\n  tag cci: ['CCI-001795']\n  tag nist: ['CM-9 b']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222633.rb"},"title":"A Configuration Control Board (CCB) that meets at least every release cycle, for managing the Configuration Management (CM) process must be established.","desc":"Software Configuration Management (SCM) is very important in tracking code releases, baselines, and managing access to the configuration management repository. An SCM plan or charter identifies what should be under configuration management control. Without an SCM plan and a CCB, application releases can't be tracked and vulnerabilities can be inserted intentionally or unintentionally into the code base of the application.\n\nThis requirement is intended to be applied to application developers or organizations responsible for code management or who have and operate an application CM repository.","descriptions":{"default":"Software Configuration Management (SCM) is very important in tracking code releases, baselines, and managing access to the configuration management repository. An SCM plan or charter identifies what should be under configuration management control. Without an SCM plan and a CCB, application releases can't be tracked and vulnerabilities can be inserted intentionally or unintentionally into the code base of the application.\n\nThis requirement is intended to be applied to application developers or organizations responsible for code management or who have and operate an application CM repository.","check":"Interview the application representative and determine if application development is performed on site by the organization.\n\nIf application development is not done in house, the requirement is not applicable.\n\nIf so, determine if a CCB exists. Ask about the membership of the CCB, and identify the primary members. Ask if there is CCB charter documentation.\n\nInterview the application representative and determine how often the CCB meets.\n\nAsk if there is CCB charter documentation. The CCB charter documentation should indicate how often the CCB meets.\n\nIf there is no charter documentation, ask when the last time the CCB met and when was the last release of the application.\n\nCCBs do not have to physically meet, and the CCB chair may authorize a release based on phone and/or e-mail conversations.\n\nIf there is no evidence of CCB activity or meetings prior to the last release cycle, this is a finding.","fix":"Setup and maintain a Configuration Control Board."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24303r493807_chk","severity":"medium","gid":"V-222633","rid":"SV-222633r879887_rule","stig_id":"APSC-DV-003020","gtitle":"SRG-APP-000516","fix_id":"F-24292r493808_fix","documentable":null,"legacy":["SV-84967","V-70345"],"cci":["CCI-001795"],"nist":["CM-9 b"]}},{"id":"SV-222634","code":"control 'SV-222634' do\n  title 'The application services and interfaces must be compatible with and ready for IPv6 networks.'\n  desc 'If the application has not been upgraded to execute on an IPv6-only network, there is a possibility the application will not execute properly, and as a result, a denial of service could occur.\n\nIn order to operate on an IPV6 network, the application must be capable of making IPV6 compatible network socket calls.'\n  desc 'check', 'Verify the application environment is compliant with all DoD IPv6 Standards Profile for IPv6 Capable Products guidance for servers.\n\nIf the application environment is not compliant with all DoD IPv6 Standards Profile for IPv6 Capable Products guidance for servers, this is a finding.'\n  desc 'fix', 'Design application to be compliant with all Department of Defense (DoD) Information Technology Standards Registry (DISR) IPv6 profiles.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24304r493810_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222634'\n  tag rid: 'SV-222634r879760_rule'\n  tag stig_id: 'APSC-DV-003030'\n  tag gtitle: 'SRG-APP-000387'\n  tag fix_id: 'F-24293r493811_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84969', 'V-70347']\n  tag cci: ['CCI-002853']\n  tag nist: ['CP-11']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222634.rb"},"title":"The application services and interfaces must be compatible with and ready for IPv6 networks.","desc":"If the application has not been upgraded to execute on an IPv6-only network, there is a possibility the application will not execute properly, and as a result, a denial of service could occur.\n\nIn order to operate on an IPV6 network, the application must be capable of making IPV6 compatible network socket calls.","descriptions":{"default":"If the application has not been upgraded to execute on an IPv6-only network, there is a possibility the application will not execute properly, and as a result, a denial of service could occur.\n\nIn order to operate on an IPV6 network, the application must be capable of making IPV6 compatible network socket calls.","check":"Verify the application environment is compliant with all DoD IPv6 Standards Profile for IPv6 Capable Products guidance for servers.\n\nIf the application environment is not compliant with all DoD IPv6 Standards Profile for IPv6 Capable Products guidance for servers, this is a finding.","fix":"Design application to be compliant with all Department of Defense (DoD) Information Technology Standards Registry (DISR) IPv6 profiles."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24304r493810_chk","severity":"medium","gid":"V-222634","rid":"SV-222634r879760_rule","stig_id":"APSC-DV-003030","gtitle":"SRG-APP-000387","fix_id":"F-24293r493811_fix","documentable":null,"legacy":["SV-84969","V-70347"],"cci":["CCI-002853"],"nist":["CP-11"]}},{"id":"SV-222635","code":"control 'SV-222635' do\n  title 'The application must not be hosted on a general purpose machine if the application is designated as critical or high availability by the ISSO.'\n  desc 'Critical applications should not be hosted on a multi-purpose server with other applications. Applications that share resources are susceptible to the other shared application security defects. Even if the critical application is designed and deployed securely, an application that is not designed and deployed securely, can cause resource issues and possibly crash effecting the critical application.'\n  desc 'check', 'Ask the application representative to review the servers where the application is deployed. \n\nAsk what other applications are deployed on those servers.\n\nIdentify the criticality of the applications installed on the system.\n\nIf a mission critical application is deployed onto the same server as non-mission critical applications, this is a finding.'\n  desc 'fix', 'Deploy mission critical applications on servers that are not shared by other less critical applications.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24305r493813_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222635'\n  tag rid: 'SV-222635r879887_rule'\n  tag stig_id: 'APSC-DV-003040'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24294r493814_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84971', 'V-70349']\n  tag cci: ['CCI-002828']\n  tag nist: ['CP-2 (8)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222635.rb"},"title":"The application must not be hosted on a general purpose machine if the application is designated as critical or high availability by the ISSO.","desc":"Critical applications should not be hosted on a multi-purpose server with other applications. Applications that share resources are susceptible to the other shared application security defects. Even if the critical application is designed and deployed securely, an application that is not designed and deployed securely, can cause resource issues and possibly crash effecting the critical application.","descriptions":{"default":"Critical applications should not be hosted on a multi-purpose server with other applications. Applications that share resources are susceptible to the other shared application security defects. Even if the critical application is designed and deployed securely, an application that is not designed and deployed securely, can cause resource issues and possibly crash effecting the critical application.","check":"Ask the application representative to review the servers where the application is deployed. \n\nAsk what other applications are deployed on those servers.\n\nIdentify the criticality of the applications installed on the system.\n\nIf a mission critical application is deployed onto the same server as non-mission critical applications, this is a finding.","fix":"Deploy mission critical applications on servers that are not shared by other less critical applications."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24305r493813_chk","severity":"medium","gid":"V-222635","rid":"SV-222635r879887_rule","stig_id":"APSC-DV-003040","gtitle":"SRG-APP-000516","fix_id":"F-24294r493814_fix","documentable":null,"legacy":["SV-84971","V-70349"],"cci":["CCI-002828"],"nist":["CP-2 (8)"]}},{"id":"SV-222636","code":"control 'SV-222636' do\n  title 'A disaster recovery/continuity plan must exist in accordance with DoD policy based on the applications availability requirements.'\n  desc 'All applications must document disaster recovery/continuity  procedures to include business recovery plans, system contingency plans, facility disaster recovery plans, and plan acceptance.'\n  desc 'check', 'Review disaster recovery/continuity plans.\n\nFor high risk applications, verify the disaster plan exists and provides for the smooth transfer of all mission or business essential functions to an alternate site for the duration of an event with little or no loss of operational continuity.\n \nFor moderate risk applications, verify the disaster recovery/continuity plan exists and provides for the resumption of mission or business essential functions within 24 hours activation.\n\nFor low risk applications, verify the disaster recovery/continuity plan exists and provides for the partial resumption of mission or business essential functions within 5 days of activation.\n \nIf the disaster recovery/continuity plan does not exist or does not meet the severity level requirements, this is a finding.'\n  desc 'fix', 'Create and maintain the disaster recovery/continuity plan.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24306r493816_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222636'\n  tag rid: 'SV-222636r879887_rule'\n  tag stig_id: 'APSC-DV-003050'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24295r493817_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84973', 'V-70351']\n  tag cci: ['CCI-000445']\n  tag nist: ['CP-2 a 1']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222636.rb"},"title":"A disaster recovery/continuity plan must exist in accordance with DoD policy based on the applications availability requirements.","desc":"All applications must document disaster recovery/continuity  procedures to include business recovery plans, system contingency plans, facility disaster recovery plans, and plan acceptance.","descriptions":{"default":"All applications must document disaster recovery/continuity  procedures to include business recovery plans, system contingency plans, facility disaster recovery plans, and plan acceptance.","check":"Review disaster recovery/continuity plans.\n\nFor high risk applications, verify the disaster plan exists and provides for the smooth transfer of all mission or business essential functions to an alternate site for the duration of an event with little or no loss of operational continuity.\n \nFor moderate risk applications, verify the disaster recovery/continuity plan exists and provides for the resumption of mission or business essential functions within 24 hours activation.\n\nFor low risk applications, verify the disaster recovery/continuity plan exists and provides for the partial resumption of mission or business essential functions within 5 days of activation.\n \nIf the disaster recovery/continuity plan does not exist or does not meet the severity level requirements, this is a finding.","fix":"Create and maintain the disaster recovery/continuity plan."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24306r493816_chk","severity":"medium","gid":"V-222636","rid":"SV-222636r879887_rule","stig_id":"APSC-DV-003050","gtitle":"SRG-APP-000516","fix_id":"F-24295r493817_fix","documentable":null,"legacy":["SV-84973","V-70351"],"cci":["CCI-000445"],"nist":["CP-2 a 1"]}},{"id":"SV-222637","code":"control 'SV-222637' do\n  title 'Recovery procedures and technical system features must exist so recovery is performed in a secure and verifiable manner. The ISSO will document circumstances inhibiting a trusted recovery.'\n  desc 'Without a disaster recovery plan, the application is susceptible to interruption in service due to damage within the processing site.\n\nIf the application is part of the site’s disaster recovery plan, ensure that the plan contains detailed instructions pertaining to the application. Verify that recovery procedures indicate the steps needed for secure and trusted recovery.'\n  desc 'check', 'Review disaster recovery plan.\n\nVerify that a disaster recovery plan is in place for the application.\n\nVerify that the recovery procedures include any special considerations for trusted recovery.\n\nIf the application is not part of the site’s disaster recovery plan, or if any special considerations for trusted recovery are not documented, this is a finding.'\n  desc 'fix', 'Create and maintain a disaster recovery plan.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24307r493819_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222637'\n  tag rid: 'SV-222637r879887_rule'\n  tag stig_id: 'APSC-DV-003060'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24296r493820_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84975', 'V-70353']\n  tag cci: ['CCI-000448']\n  tag nist: ['CP-2 a 2']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222637.rb"},"title":"Recovery procedures and technical system features must exist so recovery is performed in a secure and verifiable manner. The ISSO will document circumstances inhibiting a trusted recovery.","desc":"Without a disaster recovery plan, the application is susceptible to interruption in service due to damage within the processing site.\n\nIf the application is part of the site’s disaster recovery plan, ensure that the plan contains detailed instructions pertaining to the application. Verify that recovery procedures indicate the steps needed for secure and trusted recovery.","descriptions":{"default":"Without a disaster recovery plan, the application is susceptible to interruption in service due to damage within the processing site.\n\nIf the application is part of the site’s disaster recovery plan, ensure that the plan contains detailed instructions pertaining to the application. Verify that recovery procedures indicate the steps needed for secure and trusted recovery.","check":"Review disaster recovery plan.\n\nVerify that a disaster recovery plan is in place for the application.\n\nVerify that the recovery procedures include any special considerations for trusted recovery.\n\nIf the application is not part of the site’s disaster recovery plan, or if any special considerations for trusted recovery are not documented, this is a finding.","fix":"Create and maintain a disaster recovery plan."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24307r493819_chk","severity":"medium","gid":"V-222637","rid":"SV-222637r879887_rule","stig_id":"APSC-DV-003060","gtitle":"SRG-APP-000516","fix_id":"F-24296r493820_fix","documentable":null,"legacy":["SV-84975","V-70353"],"cci":["CCI-000448"],"nist":["CP-2 a 2"]}},{"id":"SV-222638","code":"control 'SV-222638' do\n  title 'Data backup must be performed at required intervals in accordance with DoD policy.'\n  desc 'Without proper backups, the application is not protected from the loss of data or the operating environment in the event of hardware or software failure.'\n  desc 'check', 'Interview the application and system admins and review documented backup procedures.\n\nCheck the following based on the risk level of the application.\n\nFor low risk applications:\n\nValidate backup procedures exist and are performed at least weekly.\n\nA sampling of system backups should be checked to ensure compliance with the control.\n\nFor medium risk applications:\n\nValidate backup procedures exist and are performed at least daily.\n\nValidate recovery media is stored at an off-site location and ensure the data is protected in accordance with its risk category and confidentiality level. This validation can be performed by examining an SLA or MOU/MOA that states the protection levels of the data and how it should be stored.\n\nA sampling of system backups should be checked to ensure compliance with the control.\n\nVerify that the organization tests backup information to ensure media reliability and information integrity.\n\nVerify that the organization selectively uses backup information in the restoration of information system functions as part of annual contingency plan testing.\n\nFor high risk applications:\n\nValidate that the procedures have been defined for system redundancy and they are properly implemented and are executing the procedures.\n\nVerify that the redundant system is properly separated from the primary system (i.e., located in a different building or in a different city). This validation should be performed by examining the secondary system and ensuring its operation.\n\nExamine the SLA or MOU/MOA to ensure redundant capability is addressed. Finding details should indicate the type of validation performed. Examine the mirror capability testing procedures and results to insure the capability is properly tested at 6 month minimum intervals.\n\nIf any of the requirements above for the associated risk level of the application are not met, this is a finding.'\n  desc 'fix', 'Develop and implement backup procedures based on risk level of the system and in accordance with DoD policy.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24308r493822_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222638'\n  tag rid: 'SV-222638r879887_rule'\n  tag stig_id: 'APSC-DV-003070'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24297r493823_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84977', 'V-70355']\n  tag cci: ['CCI-000537']\n  tag nist: ['CP-9 (b)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222638.rb"},"title":"Data backup must be performed at required intervals in accordance with DoD policy.","desc":"Without proper backups, the application is not protected from the loss of data or the operating environment in the event of hardware or software failure.","descriptions":{"default":"Without proper backups, the application is not protected from the loss of data or the operating environment in the event of hardware or software failure.","check":"Interview the application and system admins and review documented backup procedures.\n\nCheck the following based on the risk level of the application.\n\nFor low risk applications:\n\nValidate backup procedures exist and are performed at least weekly.\n\nA sampling of system backups should be checked to ensure compliance with the control.\n\nFor medium risk applications:\n\nValidate backup procedures exist and are performed at least daily.\n\nValidate recovery media is stored at an off-site location and ensure the data is protected in accordance with its risk category and confidentiality level. This validation can be performed by examining an SLA or MOU/MOA that states the protection levels of the data and how it should be stored.\n\nA sampling of system backups should be checked to ensure compliance with the control.\n\nVerify that the organization tests backup information to ensure media reliability and information integrity.\n\nVerify that the organization selectively uses backup information in the restoration of information system functions as part of annual contingency plan testing.\n\nFor high risk applications:\n\nValidate that the procedures have been defined for system redundancy and they are properly implemented and are executing the procedures.\n\nVerify that the redundant system is properly separated from the primary system (i.e., located in a different building or in a different city). This validation should be performed by examining the secondary system and ensuring its operation.\n\nExamine the SLA or MOU/MOA to ensure redundant capability is addressed. Finding details should indicate the type of validation performed. Examine the mirror capability testing procedures and results to insure the capability is properly tested at 6 month minimum intervals.\n\nIf any of the requirements above for the associated risk level of the application are not met, this is a finding.","fix":"Develop and implement backup procedures based on risk level of the system and in accordance with DoD policy."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24308r493822_chk","severity":"medium","gid":"V-222638","rid":"SV-222638r879887_rule","stig_id":"APSC-DV-003070","gtitle":"SRG-APP-000516","fix_id":"F-24297r493823_fix","documentable":null,"legacy":["SV-84977","V-70355"],"cci":["CCI-000537"],"nist":["CP-9 (b)"]}},{"id":"SV-222639","code":"control 'SV-222639' do\n  title 'Back-up copies of the application software or source code must be stored in a fire-rated container or stored separately (offsite).'\n  desc 'Application developers and application administrators must take steps to ensure continuity of development effort and operations should a disaster strike.  \n\nSteps include protecting back-up copies of development code and application software.\n\nImproper storage of the back-up copies can result in extended outages of the information system in the event of a fire or other situation that results in destruction of the back-up as well as the operating copy.\n\nTo address this risk, copies of application software and application source code must be stored in a fire-rated container or separately (offsite) from the operational or development environments.'\n  desc 'check', 'When reviewing a COTS or GOTS application, verify that a back-up copy of the software is stored in a fire rated container or is stored separately (offsite) from the operational environment.\n\nDetermine if application development is done in-house. \n\nIf application development occurs in-house and source code is available, verify a back-up copy of the source code is kept in a fire-rated container or stored offsite from the development environment.\n\nIf back-up copies of the application software or source code are not stored in a fire-rated container or stored separately (offsite) from their respective environments, this is a finding.'\n  desc 'fix', 'Store a back-up copy of the application software and source code in a fire-rated container or store it separately (offsite) from their respective environments.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24309r493825_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222639'\n  tag rid: 'SV-222639r879887_rule'\n  tag stig_id: 'APSC-DV-003080'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24298r493826_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84979', 'V-70357']\n  tag cci: ['CCI-000540']\n  tag nist: ['CP-9 (d)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222639.rb"},"title":"Back-up copies of the application software or source code must be stored in a fire-rated container or stored separately (offsite).","desc":"Application developers and application administrators must take steps to ensure continuity of development effort and operations should a disaster strike.  \n\nSteps include protecting back-up copies of development code and application software.\n\nImproper storage of the back-up copies can result in extended outages of the information system in the event of a fire or other situation that results in destruction of the back-up as well as the operating copy.\n\nTo address this risk, copies of application software and application source code must be stored in a fire-rated container or separately (offsite) from the operational or development environments.","descriptions":{"default":"Application developers and application administrators must take steps to ensure continuity of development effort and operations should a disaster strike.  \n\nSteps include protecting back-up copies of development code and application software.\n\nImproper storage of the back-up copies can result in extended outages of the information system in the event of a fire or other situation that results in destruction of the back-up as well as the operating copy.\n\nTo address this risk, copies of application software and application source code must be stored in a fire-rated container or separately (offsite) from the operational or development environments.","check":"When reviewing a COTS or GOTS application, verify that a back-up copy of the software is stored in a fire rated container or is stored separately (offsite) from the operational environment.\n\nDetermine if application development is done in-house. \n\nIf application development occurs in-house and source code is available, verify a back-up copy of the source code is kept in a fire-rated container or stored offsite from the development environment.\n\nIf back-up copies of the application software or source code are not stored in a fire-rated container or stored separately (offsite) from their respective environments, this is a finding.","fix":"Store a back-up copy of the application software and source code in a fire-rated container or store it separately (offsite) from their respective environments."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24309r493825_chk","severity":"medium","gid":"V-222639","rid":"SV-222639r879887_rule","stig_id":"APSC-DV-003080","gtitle":"SRG-APP-000516","fix_id":"F-24298r493826_fix","documentable":null,"legacy":["SV-84979","V-70357"],"cci":["CCI-000540"],"nist":["CP-9 (d)"]}},{"id":"SV-222640","code":"control 'SV-222640' do\n  title 'Procedures must be in place to assure the appropriate physical and technical protection of the backup and restoration of the application.'\n  desc 'Protection of backup and restoration assets is essential for the successful restore of operations after a catastrophic failure or damage to the system or data files. Failure to follow proper procedures may result in the permanent loss of system data and/or the loss of system capability resulting in failure of the customer’s mission.'\n  desc 'check', 'Validate that backup and recovery procedures incorporate protection of the backup and restoration assets.\n\nVerify assets housing the backup data (e.g., SANS, tapes, backup directories, software) and the assets used for restoration (e.g., equipment and system software) are included in the backup and recovery procedures.\n\nIf backup and restoration devices are not included in the recovery procedures, this is a finding.'\n  desc 'fix', 'Develop and implement procedures to insure that backup and restoration assets are properly protected and stored in an area/location where it is unlikely they would be affected by an event that would affect the primary assets.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24310r493828_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222640'\n  tag rid: 'SV-222640r879887_rule'\n  tag stig_id: 'APSC-DV-003090'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24299r493829_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84981', 'V-70359']\n  tag cci: ['CCI-000540']\n  tag nist: ['CP-9 (d)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222640.rb"},"title":"Procedures must be in place to assure the appropriate physical and technical protection of the backup and restoration of the application.","desc":"Protection of backup and restoration assets is essential for the successful restore of operations after a catastrophic failure or damage to the system or data files. Failure to follow proper procedures may result in the permanent loss of system data and/or the loss of system capability resulting in failure of the customer’s mission.","descriptions":{"default":"Protection of backup and restoration assets is essential for the successful restore of operations after a catastrophic failure or damage to the system or data files. Failure to follow proper procedures may result in the permanent loss of system data and/or the loss of system capability resulting in failure of the customer’s mission.","check":"Validate that backup and recovery procedures incorporate protection of the backup and restoration assets.\n\nVerify assets housing the backup data (e.g., SANS, tapes, backup directories, software) and the assets used for restoration (e.g., equipment and system software) are included in the backup and recovery procedures.\n\nIf backup and restoration devices are not included in the recovery procedures, this is a finding.","fix":"Develop and implement procedures to insure that backup and restoration assets are properly protected and stored in an area/location where it is unlikely they would be affected by an event that would affect the primary assets."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24310r493828_chk","severity":"medium","gid":"V-222640","rid":"SV-222640r879887_rule","stig_id":"APSC-DV-003090","gtitle":"SRG-APP-000516","fix_id":"F-24299r493829_fix","documentable":null,"legacy":["SV-84981","V-70359"],"cci":["CCI-000540"],"nist":["CP-9 (d)"]}},{"id":"SV-222641","code":"control 'SV-222641' do\n  title 'The application must use encryption to implement key exchange and authenticate endpoints prior to establishing a communication channel for key exchange.'\n  desc 'If the application does not use encryption and authenticate endpoints prior to establishing a communication channel and prior to transmitting encryption keys, these keys may be intercepted, and could be used to decrypt the traffic of the current session, leading to potential loss or compromise of DoD data.'\n  desc 'check', 'If the application does not implement key exchange, this check is not applicable.\n\nIdentify all application or supporting infrastructure features using key exchange.\n\nVerify the application is using FIPS-140-2 validated cryptographic modules for encryption of keys during key exchange.\n\nIf the application does not implement encryption for key exchange, this is a finding.'\n  desc 'fix', 'Use encryption for key exchange.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24311r493831_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222641'\n  tag rid: 'SV-222641r879887_rule'\n  tag stig_id: 'APSC-DV-003100'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24300r493832_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84983', 'V-70361']\n  tag cci: ['CCI-000201']\n  tag nist: ['IA-5 (6)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222641.rb"},"title":"The application must use encryption to implement key exchange and authenticate endpoints prior to establishing a communication channel for key exchange.","desc":"If the application does not use encryption and authenticate endpoints prior to establishing a communication channel and prior to transmitting encryption keys, these keys may be intercepted, and could be used to decrypt the traffic of the current session, leading to potential loss or compromise of DoD data.","descriptions":{"default":"If the application does not use encryption and authenticate endpoints prior to establishing a communication channel and prior to transmitting encryption keys, these keys may be intercepted, and could be used to decrypt the traffic of the current session, leading to potential loss or compromise of DoD data.","check":"If the application does not implement key exchange, this check is not applicable.\n\nIdentify all application or supporting infrastructure features using key exchange.\n\nVerify the application is using FIPS-140-2 validated cryptographic modules for encryption of keys during key exchange.\n\nIf the application does not implement encryption for key exchange, this is a finding.","fix":"Use encryption for key exchange."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24311r493831_chk","severity":"medium","gid":"V-222641","rid":"SV-222641r879887_rule","stig_id":"APSC-DV-003100","gtitle":"SRG-APP-000516","fix_id":"F-24300r493832_fix","documentable":null,"legacy":["SV-84983","V-70361"],"cci":["CCI-000201"],"nist":["IA-5 (6)"]}},{"id":"SV-222642","code":"control 'SV-222642' do\n  title 'The application must not contain embedded authentication data.'\n  desc 'Authentication data stored in code could potentially be read and used by anonymous users to gain access to a backend database or application servers. This could lead to compromise of application data.'\n  desc 'check', 'Review the application documentation and any available source code; this includes configuration files such as global.asa, if present, scripts, HTML files, and any ASCII files.\n\nIdentify any instances of passwords, certificates, or sensitive data included in code.\n\nIf credentials were found, check the file permissions and ownership of the offending file.\n\nIf access to the folder hosting the file is not restricted to the related application process and administrative users, this is a finding.\n\nThe finding details should note specifically where the offending credentials or data were located and what resources they enabled.'\n  desc 'fix', 'Remove embedded authentication data stored in code, configuration files, scripts, HTML file, or any ASCII files.'\n  impact 0.7\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24312r493834_chk'\n  tag severity: 'high'\n  tag gid: 'V-222642'\n  tag rid: 'SV-222642r879887_rule'\n  tag stig_id: 'APSC-DV-003110'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24301r493835_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84985', 'V-70363']\n  tag cci: ['CCI-002367']\n  tag nist: ['IA-5 (7)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222642.rb"},"title":"The application must not contain embedded authentication data.","desc":"Authentication data stored in code could potentially be read and used by anonymous users to gain access to a backend database or application servers. This could lead to compromise of application data.","descriptions":{"default":"Authentication data stored in code could potentially be read and used by anonymous users to gain access to a backend database or application servers. This could lead to compromise of application data.","check":"Review the application documentation and any available source code; this includes configuration files such as global.asa, if present, scripts, HTML files, and any ASCII files.\n\nIdentify any instances of passwords, certificates, or sensitive data included in code.\n\nIf credentials were found, check the file permissions and ownership of the offending file.\n\nIf access to the folder hosting the file is not restricted to the related application process and administrative users, this is a finding.\n\nThe finding details should note specifically where the offending credentials or data were located and what resources they enabled.","fix":"Remove embedded authentication data stored in code, configuration files, scripts, HTML file, or any ASCII files."},"impact":0.7,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24312r493834_chk","severity":"high","gid":"V-222642","rid":"SV-222642r879887_rule","stig_id":"APSC-DV-003110","gtitle":"SRG-APP-000516","fix_id":"F-24301r493835_fix","documentable":null,"legacy":["SV-84985","V-70363"],"cci":["CCI-002367"],"nist":["IA-5 (7)"]}},{"id":"SV-222643","code":"control 'SV-222643' do\n  title 'The application must have the capability to mark sensitive/classified output when required.'\n  desc 'Failure to properly mark output could result in a disclosure of sensitive or classified data which is an immediate loss in confidentiality.'\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nAsk the application representative for the application’s classification guide. This guide should document the data elements and their classification.\n\nDetermine which application functions to examine, giving preference to report generation capabilities and the most common user transactions that involve sensitive data (FOUO, secret or above).\n\nLog on to the application and perform these in sequence, printing output when applicable. The application representative’s assistance may be required to perform these steps. For each function, note whether the appropriate markings appear on the displayed and printed output. If a classification document does not exist, data must be marked at the highest classification of the system.\n\nAppropriate markings for an application are as follows: For classified data, markings are required at a minimum at the top and the bottom of screens and reports.\n\nFor FOUO data, markings are required at a minimum of the bottom of the screen or report. In some cases, technology may prohibit the appropriate markings on printed documents. For example, in some cases, it is not possible to mark all pages top and bottom when a user prints from a browser. If this is the case, ask the application representative if user procedures exist for manually marking printed documents. If procedures do exist, examine the procedures to verify if the users were to follow the procedures the data would be marked correctly.\n\nAsk how these procedures are distributed to the users.\n\nIf appropriate markings are not present within the application and it is technically possible to have the markings present, this is a finding.\n\nIf it is not technically feasible to meet the minimum marking requirement and no user procedures exist or if followed the procedures will result in incorrect markings, or the procedures are not readily available to users, this is a finding.\n\nIn any case of a finding, the finding details should specify which functions failed to produce the desired results.\n\nAfter completing the test, destroy all printed output using the site’s preferred method for disposal. For example: utilizing a shredder or disposal in burn bags.'\n  desc 'fix', 'Enable the application to adequately mark sensitive/classified output.'\n  impact 0.7\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24313r493837_chk'\n  tag severity: 'high'\n  tag gid: 'V-222643'\n  tag rid: 'SV-222643r879887_rule'\n  tag stig_id: 'APSC-DV-003120'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24302r493838_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84987', 'V-70365']\n  tag cci: ['CCI-001010']\n  tag nist: ['MP-3 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222643.rb"},"title":"The application must have the capability to mark sensitive/classified output when required.","desc":"Failure to properly mark output could result in a disclosure of sensitive or classified data which is an immediate loss in confidentiality.","descriptions":{"default":"Failure to properly mark output could result in a disclosure of sensitive or classified data which is an immediate loss in confidentiality.","check":"Review the application documentation and interview the application administrator.\n\nAsk the application representative for the application’s classification guide. This guide should document the data elements and their classification.\n\nDetermine which application functions to examine, giving preference to report generation capabilities and the most common user transactions that involve sensitive data (FOUO, secret or above).\n\nLog on to the application and perform these in sequence, printing output when applicable. The application representative’s assistance may be required to perform these steps. For each function, note whether the appropriate markings appear on the displayed and printed output. If a classification document does not exist, data must be marked at the highest classification of the system.\n\nAppropriate markings for an application are as follows: For classified data, markings are required at a minimum at the top and the bottom of screens and reports.\n\nFor FOUO data, markings are required at a minimum of the bottom of the screen or report. In some cases, technology may prohibit the appropriate markings on printed documents. For example, in some cases, it is not possible to mark all pages top and bottom when a user prints from a browser. If this is the case, ask the application representative if user procedures exist for manually marking printed documents. If procedures do exist, examine the procedures to verify if the users were to follow the procedures the data would be marked correctly.\n\nAsk how these procedures are distributed to the users.\n\nIf appropriate markings are not present within the application and it is technically possible to have the markings present, this is a finding.\n\nIf it is not technically feasible to meet the minimum marking requirement and no user procedures exist or if followed the procedures will result in incorrect markings, or the procedures are not readily available to users, this is a finding.\n\nIn any case of a finding, the finding details should specify which functions failed to produce the desired results.\n\nAfter completing the test, destroy all printed output using the site’s preferred method for disposal. For example: utilizing a shredder or disposal in burn bags.","fix":"Enable the application to adequately mark sensitive/classified output."},"impact":0.7,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24313r493837_chk","severity":"high","gid":"V-222643","rid":"SV-222643r879887_rule","stig_id":"APSC-DV-003120","gtitle":"SRG-APP-000516","fix_id":"F-24302r493838_fix","documentable":null,"legacy":["SV-84987","V-70365"],"cci":["CCI-001010"],"nist":["MP-3 a"]}},{"id":"SV-222644","code":"control 'SV-222644' do\n  title 'Prior to each release of the application, updates to system, or applying patches; tests plans and procedures must be created and executed.'\n  desc 'Without test plans and procedures for application releases or updates, unexpected results may occur which could lead to a denial of service to the application or components.\n\nThis requirement is meant to apply to developers or organizations that are doing development work when releasing a version update or a patch to the application.'\n  desc 'check', 'If the review is not being done with the developer of the application, this requirement is not applicable.\n\nAsk the application representative to provide tests plans, procedures, and results to ensure they are updated for each application release or updates to system patches.\n\nIf test plans, procedures, and results do not exist, or are not updated for each application release, this is a finding.'\n  desc 'fix', 'Execute tests plans prior to release or patch update.'\n  impact 0.3\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24314r493840_chk'\n  tag severity: 'low'\n  tag gid: 'V-222644'\n  tag rid: 'SV-222644r879887_rule'\n  tag stig_id: 'APSC-DV-003130'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24303r493841_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84989', 'V-70367']\n  tag cci: ['CCI-003004']\n  tag nist: ['PM-14 a 2']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222644.rb"},"title":"Prior to each release of the application, updates to system, or applying patches; tests plans and procedures must be created and executed.","desc":"Without test plans and procedures for application releases or updates, unexpected results may occur which could lead to a denial of service to the application or components.\n\nThis requirement is meant to apply to developers or organizations that are doing development work when releasing a version update or a patch to the application.","descriptions":{"default":"Without test plans and procedures for application releases or updates, unexpected results may occur which could lead to a denial of service to the application or components.\n\nThis requirement is meant to apply to developers or organizations that are doing development work when releasing a version update or a patch to the application.","check":"If the review is not being done with the developer of the application, this requirement is not applicable.\n\nAsk the application representative to provide tests plans, procedures, and results to ensure they are updated for each application release or updates to system patches.\n\nIf test plans, procedures, and results do not exist, or are not updated for each application release, this is a finding.","fix":"Execute tests plans prior to release or patch update."},"impact":0.3,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24314r493840_chk","severity":"low","gid":"V-222644","rid":"SV-222644r879887_rule","stig_id":"APSC-DV-003130","gtitle":"SRG-APP-000516","fix_id":"F-24303r493841_fix","documentable":null,"legacy":["SV-84989","V-70367"],"cci":["CCI-003004"],"nist":["PM-14 a 2"]}},{"id":"SV-222645","code":"control 'SV-222645' do\n  title 'Application files must be cryptographically hashed prior to deploying to DoD operational networks.'\n  desc 'When application code and binaries are transferred from one environment to another, there is the potential for malware to be introduced into either the application code or even the application binaries themselves. Care must be taken to ensure that application code and binaries are validated for integrity prior to deployment into a production environment.\n\nTo ensure file integrity, application files and/or application packages are cryptographically hashed using a strong hashing algorithm. Comparing hashes after transferring the files makes it possible to detect changes in files that could indicate potential integrity issues with the application.\n\nCurrently, SHA256 is the DoD approved standard for cryptographic hash functions. DoD application developers must use SHA256 when creating cryptographic hashes; however, some non-DoD vendors might still use MD5 or SHA1 when generating a checksum hash for their application packages. It is important to use the same algorithms when validating the hash. If a non DoD vendor uses SHA1 when hashing their files, you must use SHA1 to validate the hash. Otherwise, the hashes will not match and a false positive indication of tampering will result.\n\nPrior to release of the application receiving an ATO/IATO for deployment into a DoD operational network, the application must be validated for integrity to ensure no tampering of source code or binaries has occurred. Failure to validate the integrity of application code and/or application binaries prior to deploying an application into a production environment may compromise the operational network.'\n  desc 'check', %q(Ask the application representative to demonstrate their cryptographic hash validation process or provide process documentation. The validation process will vary based upon the operating system used as there are numerous clients available that will display a file's cryptographic hash for validation purposes.\n\nLinux operating systems include the \"sha256sum\" utility. For Linux systems using sha256sum command syntax is: sha256sum [OPTION]... [FILE]...\n\nRecent Windows PowerShell versions include the \"get-filehash\" PowerShell cmdlet. The default algorithm value used is SHA256.\n\nSyntax is: \nGet-FileHash\n[-Path] <String[]>\n[-Algorithm <String>]\n[<CommonParameters>] \n\nA validation process involves obtaining the application files’ cryptographic hash value from the programs author or other authoritative source such as the application's website. A utility like the \"sha256sum\" utility is then run using the downloaded application file name as the argument. The output is the files' hash value. The two hash values are compared and if they match, then file integrity is ensured.\n\nIf the application being reviewed is a COTS product and the vendor used a SHA1 or MD5 algorithm to generate a hash value, this is not a finding.\n\nIf the application being reviewed is a COTS product and the vendor did not provide a hash value for validating the package, this is not a finding.\n\nIf the integrity of the application files/code is not validated prior to deployment to DoD operational networks, this is a finding.)\n  desc 'fix', 'Developers/release managers create cryptographic hash values of application files and/or application packages prior to transitioning the application from test to a production environment. They protect cryptographic hash information so it cannot be altered and make a read copy of the hash information available to application Admins so they can validate application packages and files after they download the files.\n\nApplication Admins validate cryptographic hashes prior to deploying the application to production.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-36256r602331_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222645'\n  tag rid: 'SV-222645r879887_rule'\n  tag stig_id: 'APSC-DV-003140'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-36220r602332_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84991', 'V-70369']\n  tag cci: ['CCI-000698']\n  tag nist: ['SA-10 (1)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222645.rb"},"title":"Application files must be cryptographically hashed prior to deploying to DoD operational networks.","desc":"When application code and binaries are transferred from one environment to another, there is the potential for malware to be introduced into either the application code or even the application binaries themselves. Care must be taken to ensure that application code and binaries are validated for integrity prior to deployment into a production environment.\n\nTo ensure file integrity, application files and/or application packages are cryptographically hashed using a strong hashing algorithm. Comparing hashes after transferring the files makes it possible to detect changes in files that could indicate potential integrity issues with the application.\n\nCurrently, SHA256 is the DoD approved standard for cryptographic hash functions. DoD application developers must use SHA256 when creating cryptographic hashes; however, some non-DoD vendors might still use MD5 or SHA1 when generating a checksum hash for their application packages. It is important to use the same algorithms when validating the hash. If a non DoD vendor uses SHA1 when hashing their files, you must use SHA1 to validate the hash. Otherwise, the hashes will not match and a false positive indication of tampering will result.\n\nPrior to release of the application receiving an ATO/IATO for deployment into a DoD operational network, the application must be validated for integrity to ensure no tampering of source code or binaries has occurred. Failure to validate the integrity of application code and/or application binaries prior to deploying an application into a production environment may compromise the operational network.","descriptions":{"default":"When application code and binaries are transferred from one environment to another, there is the potential for malware to be introduced into either the application code or even the application binaries themselves. Care must be taken to ensure that application code and binaries are validated for integrity prior to deployment into a production environment.\n\nTo ensure file integrity, application files and/or application packages are cryptographically hashed using a strong hashing algorithm. Comparing hashes after transferring the files makes it possible to detect changes in files that could indicate potential integrity issues with the application.\n\nCurrently, SHA256 is the DoD approved standard for cryptographic hash functions. DoD application developers must use SHA256 when creating cryptographic hashes; however, some non-DoD vendors might still use MD5 or SHA1 when generating a checksum hash for their application packages. It is important to use the same algorithms when validating the hash. If a non DoD vendor uses SHA1 when hashing their files, you must use SHA1 to validate the hash. Otherwise, the hashes will not match and a false positive indication of tampering will result.\n\nPrior to release of the application receiving an ATO/IATO for deployment into a DoD operational network, the application must be validated for integrity to ensure no tampering of source code or binaries has occurred. Failure to validate the integrity of application code and/or application binaries prior to deploying an application into a production environment may compromise the operational network.","check":"Ask the application representative to demonstrate their cryptographic hash validation process or provide process documentation. The validation process will vary based upon the operating system used as there are numerous clients available that will display a file's cryptographic hash for validation purposes.\n\nLinux operating systems include the \"sha256sum\" utility. For Linux systems using sha256sum command syntax is: sha256sum [OPTION]... [FILE]...\n\nRecent Windows PowerShell versions include the \"get-filehash\" PowerShell cmdlet. The default algorithm value used is SHA256.\n\nSyntax is: \nGet-FileHash\n[-Path] <String[]>\n[-Algorithm <String>]\n[<CommonParameters>] \n\nA validation process involves obtaining the application files’ cryptographic hash value from the programs author or other authoritative source such as the application's website. A utility like the \"sha256sum\" utility is then run using the downloaded application file name as the argument. The output is the files' hash value. The two hash values are compared and if they match, then file integrity is ensured.\n\nIf the application being reviewed is a COTS product and the vendor used a SHA1 or MD5 algorithm to generate a hash value, this is not a finding.\n\nIf the application being reviewed is a COTS product and the vendor did not provide a hash value for validating the package, this is not a finding.\n\nIf the integrity of the application files/code is not validated prior to deployment to DoD operational networks, this is a finding.","fix":"Developers/release managers create cryptographic hash values of application files and/or application packages prior to transitioning the application from test to a production environment. They protect cryptographic hash information so it cannot be altered and make a read copy of the hash information available to application Admins so they can validate application packages and files after they download the files.\n\nApplication Admins validate cryptographic hashes prior to deploying the application to production."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-36256r602331_chk","severity":"medium","gid":"V-222645","rid":"SV-222645r879887_rule","stig_id":"APSC-DV-003140","gtitle":"SRG-APP-000516","fix_id":"F-36220r602332_fix","documentable":null,"legacy":["SV-84991","V-70369"],"cci":["CCI-000698"],"nist":["SA-10 (1)"]}},{"id":"SV-222646","code":"control 'SV-222646' do\n  title 'At least one tester must be designated to test for security flaws in addition to functional testing.'\n  desc 'If there is no person designated to test for security flaws, vulnerabilities can potentially be missed during testing.\n\nThis requirement is meant to apply to developers or organizations that are doing development work.'\n  desc 'check', 'Review the organization chart and interview the admin staff.\n\nIdentify personnel designated as application security testers.\n\nIf the organization operating the application is not doing development work, this requirement is not applicable.\n\nIf the organization has not designated personnel to conduct security testing, this is a finding.'\n  desc 'fix', 'Designate personnel to conduct security testing on the applications.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24316r493846_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222646'\n  tag rid: 'SV-222646r879887_rule'\n  tag stig_id: 'APSC-DV-003150'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24305r493847_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84993', 'V-70371']\n  tag cci: ['CCI-003182']\n  tag nist: ['SA-11 (2)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222646.rb"},"title":"At least one tester must be designated to test for security flaws in addition to functional testing.","desc":"If there is no person designated to test for security flaws, vulnerabilities can potentially be missed during testing.\n\nThis requirement is meant to apply to developers or organizations that are doing development work.","descriptions":{"default":"If there is no person designated to test for security flaws, vulnerabilities can potentially be missed during testing.\n\nThis requirement is meant to apply to developers or organizations that are doing development work.","check":"Review the organization chart and interview the admin staff.\n\nIdentify personnel designated as application security testers.\n\nIf the organization operating the application is not doing development work, this requirement is not applicable.\n\nIf the organization has not designated personnel to conduct security testing, this is a finding.","fix":"Designate personnel to conduct security testing on the applications."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24316r493846_chk","severity":"medium","gid":"V-222646","rid":"SV-222646r879887_rule","stig_id":"APSC-DV-003150","gtitle":"SRG-APP-000516","fix_id":"F-24305r493847_fix","documentable":null,"legacy":["SV-84993","V-70371"],"cci":["CCI-003182"],"nist":["SA-11 (2)"]}},{"id":"SV-222647","code":"control 'SV-222647' do\n  title 'Test procedures must be created and at least annually executed to ensure system initialization, shutdown, and aborts are configured to verify the system remains in a secure state.'\n  desc 'Secure state assurance cannot be accomplished without testing the system state at least annually to ensure the system remains in a secure state upon initialization, shutdown, and aborts.'\n  desc 'check', 'Review the process documentation and interview the admin staff.\n\nIdentify if testing procedures exist and if they include annual testing to ensure the application remains in a secure state on initialization, shutdown, and aborts.\n\nChecks should include at a minimum, attempts to access the application and application configuration settings without credentials or with improper credentials both locally and remotely.\n\nDates should be noted as to the last date of testing.\n\nIf annual testing procedures do not exist, or if administrators are unable to provide testing dates that indicate the tests were conducted within the last year, this is a finding.'\n  desc 'fix', 'Create test procedures to test the security state of the application and exercise test procedures annually.'\n  impact 0.3\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24317r493849_chk'\n  tag severity: 'low'\n  tag gid: 'V-222647'\n  tag rid: 'SV-222647r879887_rule'\n  tag stig_id: 'APSC-DV-003160'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24306r493850_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84995', 'V-70373']\n  tag cci: ['CCI-003182']\n  tag nist: ['SA-11 (2)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222647.rb"},"title":"Test procedures must be created and at least annually executed to ensure system initialization, shutdown, and aborts are configured to verify the system remains in a secure state.","desc":"Secure state assurance cannot be accomplished without testing the system state at least annually to ensure the system remains in a secure state upon initialization, shutdown, and aborts.","descriptions":{"default":"Secure state assurance cannot be accomplished without testing the system state at least annually to ensure the system remains in a secure state upon initialization, shutdown, and aborts.","check":"Review the process documentation and interview the admin staff.\n\nIdentify if testing procedures exist and if they include annual testing to ensure the application remains in a secure state on initialization, shutdown, and aborts.\n\nChecks should include at a minimum, attempts to access the application and application configuration settings without credentials or with improper credentials both locally and remotely.\n\nDates should be noted as to the last date of testing.\n\nIf annual testing procedures do not exist, or if administrators are unable to provide testing dates that indicate the tests were conducted within the last year, this is a finding.","fix":"Create test procedures to test the security state of the application and exercise test procedures annually."},"impact":0.3,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24317r493849_chk","severity":"low","gid":"V-222647","rid":"SV-222647r879887_rule","stig_id":"APSC-DV-003160","gtitle":"SRG-APP-000516","fix_id":"F-24306r493850_fix","documentable":null,"legacy":["SV-84995","V-70373"],"cci":["CCI-003182"],"nist":["SA-11 (2)"]}},{"id":"SV-222648","code":"control 'SV-222648' do\n  title 'An application code review must be performed on the application.'\n  desc 'A code review is a systematic evaluation of computer source code conducted for the purposes of identifying and remediating the security flaws in the software.\n\nThis requirement is meant to apply to developers or organizations that are doing application development work and have the responsibility for maintaining the application source code.\n\nExamples of security flaws include but are not limited to:\n\n- format string exploits\n- memory leaks \n- buffer overflows \n- race conditions\n- sql injection\n- dead/unused/commented code\n- input validation exploits\n\nThe code review is conducted during the application development phase, this allows discovered security issues to be corrected prior to release.\n\nCode reviews performed after the development phase must eventually go back to development for correction so conducting the code review during development is the logical and preferred action.\n\nAutomated code review tools are to be used whenever reviewing application source code. These tools are often incorporated into Integrated Development Environments (IDE) so code reviews can be conducted during all stages of the development life cycle. Periodically reviewing code during the development phase makes transition to a production environment easier as flaws are continually identified and addressed during the development phase rather than en masse at the end of the development effort.\n\nCode review processes and the tools used to conduct the code review analysis will vary depending upon application architecture and the development languages utilized.\n\nIn addition to automated testing, manual code reviews may also be used to validate or augment automated code review results. Larger projects will have a large code base and will require the use of automated code review tools in order to achieve complete code review coverage.\n\nA manual code review may consist of a peer review wherein other programmers on the team manually examine source code and automated code review results for known flaws that introduce security bugs into the application.\n\nAs with any testing, there is no single best approach and the tests must be tailored to the application architecture. Use of automated tools along with manual review of code and testing results is considered a best practice when conducting code reviews. This method is the most likely way to ensure the maximum number of errors are caught and addressed prior to implementing the application in a production environment.'\n  desc 'check', 'This requirement is meant to apply to developers or organizations that are doing the application development work and have the responsibility for maintaining the application source code.  Otherwise, the requirement is not applicable.\n\nReview the system documentation and ask the application representative to describe the code review process or provide documentation outlining the organizations code review process.\n\nIf code reviews are conducted with software tools, have the application representative provide the latest code review report for the application.\n\nEnsure the code review looks for all known security flaws including but not limited to:\n\n- format string exploits\n- memory leaks\n- buffer overflows\n- race conditions\n- sql injection\n- dead/unused/commented code\n- input validation exploits\n\nIf the organization does not conduct code reviews on the application that attempt to identify all known and potential security issues, or if code review results are not available for review, this is a finding.'\n  desc 'fix', 'Conduct and document code reviews on the application during development and identify and remediate all known and potential security vulnerabilities prior to releasing the application.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24318r493852_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222648'\n  tag rid: 'SV-222648r879887_rule'\n  tag stig_id: 'APSC-DV-003170'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24307r493853_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84997', 'V-70375']\n  tag cci: ['CCI-003187']\n  tag nist: ['SA-11 (4)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222648.rb"},"title":"An application code review must be performed on the application.","desc":"A code review is a systematic evaluation of computer source code conducted for the purposes of identifying and remediating the security flaws in the software.\n\nThis requirement is meant to apply to developers or organizations that are doing application development work and have the responsibility for maintaining the application source code.\n\nExamples of security flaws include but are not limited to:\n\n- format string exploits\n- memory leaks \n- buffer overflows \n- race conditions\n- sql injection\n- dead/unused/commented code\n- input validation exploits\n\nThe code review is conducted during the application development phase, this allows discovered security issues to be corrected prior to release.\n\nCode reviews performed after the development phase must eventually go back to development for correction so conducting the code review during development is the logical and preferred action.\n\nAutomated code review tools are to be used whenever reviewing application source code. These tools are often incorporated into Integrated Development Environments (IDE) so code reviews can be conducted during all stages of the development life cycle. Periodically reviewing code during the development phase makes transition to a production environment easier as flaws are continually identified and addressed during the development phase rather than en masse at the end of the development effort.\n\nCode review processes and the tools used to conduct the code review analysis will vary depending upon application architecture and the development languages utilized.\n\nIn addition to automated testing, manual code reviews may also be used to validate or augment automated code review results. Larger projects will have a large code base and will require the use of automated code review tools in order to achieve complete code review coverage.\n\nA manual code review may consist of a peer review wherein other programmers on the team manually examine source code and automated code review results for known flaws that introduce security bugs into the application.\n\nAs with any testing, there is no single best approach and the tests must be tailored to the application architecture. Use of automated tools along with manual review of code and testing results is considered a best practice when conducting code reviews. This method is the most likely way to ensure the maximum number of errors are caught and addressed prior to implementing the application in a production environment.","descriptions":{"default":"A code review is a systematic evaluation of computer source code conducted for the purposes of identifying and remediating the security flaws in the software.\n\nThis requirement is meant to apply to developers or organizations that are doing application development work and have the responsibility for maintaining the application source code.\n\nExamples of security flaws include but are not limited to:\n\n- format string exploits\n- memory leaks \n- buffer overflows \n- race conditions\n- sql injection\n- dead/unused/commented code\n- input validation exploits\n\nThe code review is conducted during the application development phase, this allows discovered security issues to be corrected prior to release.\n\nCode reviews performed after the development phase must eventually go back to development for correction so conducting the code review during development is the logical and preferred action.\n\nAutomated code review tools are to be used whenever reviewing application source code. These tools are often incorporated into Integrated Development Environments (IDE) so code reviews can be conducted during all stages of the development life cycle. Periodically reviewing code during the development phase makes transition to a production environment easier as flaws are continually identified and addressed during the development phase rather than en masse at the end of the development effort.\n\nCode review processes and the tools used to conduct the code review analysis will vary depending upon application architecture and the development languages utilized.\n\nIn addition to automated testing, manual code reviews may also be used to validate or augment automated code review results. Larger projects will have a large code base and will require the use of automated code review tools in order to achieve complete code review coverage.\n\nA manual code review may consist of a peer review wherein other programmers on the team manually examine source code and automated code review results for known flaws that introduce security bugs into the application.\n\nAs with any testing, there is no single best approach and the tests must be tailored to the application architecture. Use of automated tools along with manual review of code and testing results is considered a best practice when conducting code reviews. This method is the most likely way to ensure the maximum number of errors are caught and addressed prior to implementing the application in a production environment.","check":"This requirement is meant to apply to developers or organizations that are doing the application development work and have the responsibility for maintaining the application source code.  Otherwise, the requirement is not applicable.\n\nReview the system documentation and ask the application representative to describe the code review process or provide documentation outlining the organizations code review process.\n\nIf code reviews are conducted with software tools, have the application representative provide the latest code review report for the application.\n\nEnsure the code review looks for all known security flaws including but not limited to:\n\n- format string exploits\n- memory leaks\n- buffer overflows\n- race conditions\n- sql injection\n- dead/unused/commented code\n- input validation exploits\n\nIf the organization does not conduct code reviews on the application that attempt to identify all known and potential security issues, or if code review results are not available for review, this is a finding.","fix":"Conduct and document code reviews on the application during development and identify and remediate all known and potential security vulnerabilities prior to releasing the application."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24318r493852_chk","severity":"medium","gid":"V-222648","rid":"SV-222648r879887_rule","stig_id":"APSC-DV-003170","gtitle":"SRG-APP-000516","fix_id":"F-24307r493853_fix","documentable":null,"legacy":["SV-84997","V-70375"],"cci":["CCI-003187"],"nist":["SA-11 (4)"]}},{"id":"SV-222649","code":"control 'SV-222649' do\n  title 'Code coverage statistics must be maintained for each release of the application.'\n  desc 'This requirement is meant to apply to developers or organizations that are doing application development work.\n\nCode coverage statistics describes the overall functionality provided by the application and how much of the source code has been tested during the release cycle.\n\nTo avoid the potential for testing the same pieces of code over and over again, code coverage statistics are used to track which aspects or modules of the application are tested.\n\nSome applications are so large that it is not feasible to test every last bit of the application code on one release cycle. In those instances, it is acceptable to prioritize and identify the modules that are critical to the applications security posture and test those first. Rolling over to test other modules later as resources permit. E.g., testing functionality that performs authentication and authorization before testing printing capabilities.\n\nApplication developers should keep statistics that show all of the modules of the application and identify which modules were tested and when. This will help testers to keep track of what has been tested and help to verify all functionality is tested.\n\nThe developer makes sure that flaws are documented in a defect tracking system.\n\nIf the application is smaller in nature and all aspects of the application can be tested, the code coverage statistics would be 100%.'\n  desc 'check', 'If the organization does not do or manage the application development work for the application, this requirement is not applicable.\n\nAsk the application representative to provide code coverage statistics maintained for the application.\n\nIf these code coverage statistics do not exist, this is a finding.'\n  desc 'fix', 'Track application testing and maintain statistics that show how much of the application function was tested.'\n  impact 0.3\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24319r493855_chk'\n  tag severity: 'low'\n  tag gid: 'V-222649'\n  tag rid: 'SV-222649r879887_rule'\n  tag stig_id: 'APSC-DV-003180'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24308r493856_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84999', 'V-70377']\n  tag cci: ['CCI-003188']\n  tag nist: ['SA-11 (4)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222649.rb"},"title":"Code coverage statistics must be maintained for each release of the application.","desc":"This requirement is meant to apply to developers or organizations that are doing application development work.\n\nCode coverage statistics describes the overall functionality provided by the application and how much of the source code has been tested during the release cycle.\n\nTo avoid the potential for testing the same pieces of code over and over again, code coverage statistics are used to track which aspects or modules of the application are tested.\n\nSome applications are so large that it is not feasible to test every last bit of the application code on one release cycle. In those instances, it is acceptable to prioritize and identify the modules that are critical to the applications security posture and test those first. Rolling over to test other modules later as resources permit. E.g., testing functionality that performs authentication and authorization before testing printing capabilities.\n\nApplication developers should keep statistics that show all of the modules of the application and identify which modules were tested and when. This will help testers to keep track of what has been tested and help to verify all functionality is tested.\n\nThe developer makes sure that flaws are documented in a defect tracking system.\n\nIf the application is smaller in nature and all aspects of the application can be tested, the code coverage statistics would be 100%.","descriptions":{"default":"This requirement is meant to apply to developers or organizations that are doing application development work.\n\nCode coverage statistics describes the overall functionality provided by the application and how much of the source code has been tested during the release cycle.\n\nTo avoid the potential for testing the same pieces of code over and over again, code coverage statistics are used to track which aspects or modules of the application are tested.\n\nSome applications are so large that it is not feasible to test every last bit of the application code on one release cycle. In those instances, it is acceptable to prioritize and identify the modules that are critical to the applications security posture and test those first. Rolling over to test other modules later as resources permit. E.g., testing functionality that performs authentication and authorization before testing printing capabilities.\n\nApplication developers should keep statistics that show all of the modules of the application and identify which modules were tested and when. This will help testers to keep track of what has been tested and help to verify all functionality is tested.\n\nThe developer makes sure that flaws are documented in a defect tracking system.\n\nIf the application is smaller in nature and all aspects of the application can be tested, the code coverage statistics would be 100%.","check":"If the organization does not do or manage the application development work for the application, this requirement is not applicable.\n\nAsk the application representative to provide code coverage statistics maintained for the application.\n\nIf these code coverage statistics do not exist, this is a finding.","fix":"Track application testing and maintain statistics that show how much of the application function was tested."},"impact":0.3,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24319r493855_chk","severity":"low","gid":"V-222649","rid":"SV-222649r879887_rule","stig_id":"APSC-DV-003180","gtitle":"SRG-APP-000516","fix_id":"F-24308r493856_fix","documentable":null,"legacy":["SV-84999","V-70377"],"cci":["CCI-003188"],"nist":["SA-11 (4)"]}},{"id":"SV-222650","code":"control 'SV-222650' do\n  title 'Flaws found during a code review must be tracked in a defect tracking system.'\n  desc 'This requirement is meant to apply to developers or organizations that are doing application development work.\n\nIf flaws are not tracked they may possibly be forgotten to be included in a release. Tracking flaws in the configuration management repository will help identify code elements to be changed, as well as the requested change.'\n  desc 'check', 'This requirement is meant to apply to developers or organizations that are doing application development work.\n\nIf application development is not being done or managed by the organization, this requirement is not applicable.\n\nAsk the application representative to demonstrate that the configuration management repository captures flaws in the code review process. The configuration management repository may consist of a separate application for capturing code defects.\n\nIf there is no configuration management repository or the code review flaws are not captured in the configuration management repository, this is a finding.'\n  desc 'fix', 'Track software defects in a defect tracking system.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24320r493858_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222650'\n  tag rid: 'SV-222650r918120_rule'\n  tag stig_id: 'APSC-DV-003190'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24309r493859_fix'\n  tag 'documentable'\n  tag legacy: ['SV-85001', 'V-70379']\n  tag cci: ['CCI-003161']\n  tag nist: ['SA-10 e']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222650.rb"},"title":"Flaws found during a code review must be tracked in a defect tracking system.","desc":"This requirement is meant to apply to developers or organizations that are doing application development work.\n\nIf flaws are not tracked they may possibly be forgotten to be included in a release. Tracking flaws in the configuration management repository will help identify code elements to be changed, as well as the requested change.","descriptions":{"default":"This requirement is meant to apply to developers or organizations that are doing application development work.\n\nIf flaws are not tracked they may possibly be forgotten to be included in a release. Tracking flaws in the configuration management repository will help identify code elements to be changed, as well as the requested change.","check":"This requirement is meant to apply to developers or organizations that are doing application development work.\n\nIf application development is not being done or managed by the organization, this requirement is not applicable.\n\nAsk the application representative to demonstrate that the configuration management repository captures flaws in the code review process. The configuration management repository may consist of a separate application for capturing code defects.\n\nIf there is no configuration management repository or the code review flaws are not captured in the configuration management repository, this is a finding.","fix":"Track software defects in a defect tracking system."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24320r493858_chk","severity":"medium","gid":"V-222650","rid":"SV-222650r918120_rule","stig_id":"APSC-DV-003190","gtitle":"SRG-APP-000516","fix_id":"F-24309r493859_fix","documentable":null,"legacy":["SV-85001","V-70379"],"cci":["CCI-003161"],"nist":["SA-10 e"]}},{"id":"SV-222651","code":"control 'SV-222651' do\n  title 'The changes to the application must be assessed for IA and accreditation impact prior to implementation.'\n  desc 'When changes are made to an application, either in the code or in the configuration of underlying components such as the OS or the web or application server, there is the potential for security vulnerabilities to be opened up on the system.\n\nIA assessment of proposed changes is necessary to verify security integrity is maintained within the application.'\n  desc 'check', 'Interview the application and system administrators and determine if changes to the application are assessed for IA impact prior to implementation.\n\nReview the CCB process documentation to ensure potential changes to the application are evaluated to determine impact. An informal group may be tasked with impact assessment of upcoming version changes.\n\nIf IA impact analysis is not performed, this is a finding.'\n  desc 'fix', 'Review IA impact to the system prior to implementing changes.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24321r493861_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222651'\n  tag rid: 'SV-222651r879887_rule'\n  tag stig_id: 'APSC-DV-003200'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24310r493862_fix'\n  tag 'documentable'\n  tag legacy: ['SV-85003', 'V-70381']\n  tag cci: ['CCI-003173']\n  tag nist: ['SA-11 b']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222651.rb"},"title":"The changes to the application must be assessed for IA and accreditation impact prior to implementation.","desc":"When changes are made to an application, either in the code or in the configuration of underlying components such as the OS or the web or application server, there is the potential for security vulnerabilities to be opened up on the system.\n\nIA assessment of proposed changes is necessary to verify security integrity is maintained within the application.","descriptions":{"default":"When changes are made to an application, either in the code or in the configuration of underlying components such as the OS or the web or application server, there is the potential for security vulnerabilities to be opened up on the system.\n\nIA assessment of proposed changes is necessary to verify security integrity is maintained within the application.","check":"Interview the application and system administrators and determine if changes to the application are assessed for IA impact prior to implementation.\n\nReview the CCB process documentation to ensure potential changes to the application are evaluated to determine impact. An informal group may be tasked with impact assessment of upcoming version changes.\n\nIf IA impact analysis is not performed, this is a finding.","fix":"Review IA impact to the system prior to implementing changes."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24321r493861_chk","severity":"medium","gid":"V-222651","rid":"SV-222651r879887_rule","stig_id":"APSC-DV-003200","gtitle":"SRG-APP-000516","fix_id":"F-24310r493862_fix","documentable":null,"legacy":["SV-85003","V-70381"],"cci":["CCI-003173"],"nist":["SA-11 b"]}},{"id":"SV-222652","code":"control 'SV-222652' do\n  title 'Security flaws must be fixed or addressed in the project plan.'\n  desc 'This requirement is meant to apply to developers or organizations that are doing application development work.\n\nApplication development efforts include the creation of a project plan to track and organize the development work.\n\nIf security flaws are not tracked within the project plan, it is possible the flaws will be overlooked and included in a release.\n\nTracking flaws in the project plan will help identify code elements to be changed as well as the requested change.'\n  desc 'check', 'This requirement is meant to apply to developers or organizations that are doing application development work. If the organization managing the application is not performing or managing the development of the application the requirement is not applicable.\n\nAsk the application representative to demonstrate how security flaws are integrated into the project plan.\n\nIf security flaws are not addressed in the project plan or there is no process to introduce security flaws into the project plan, this is a finding.'\n  desc 'fix', 'Address security flaws within a project plan to ensure they are tracked and addressed by management.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24322r493864_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222652'\n  tag rid: 'SV-222652r879887_rule'\n  tag stig_id: 'APSC-DV-003210'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24311r493865_fix'\n  tag 'documentable'\n  tag legacy: ['SV-85005', 'V-70383']\n  tag cci: ['CCI-003178']\n  tag nist: ['SA-11 e']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222652.rb"},"title":"Security flaws must be fixed or addressed in the project plan.","desc":"This requirement is meant to apply to developers or organizations that are doing application development work.\n\nApplication development efforts include the creation of a project plan to track and organize the development work.\n\nIf security flaws are not tracked within the project plan, it is possible the flaws will be overlooked and included in a release.\n\nTracking flaws in the project plan will help identify code elements to be changed as well as the requested change.","descriptions":{"default":"This requirement is meant to apply to developers or organizations that are doing application development work.\n\nApplication development efforts include the creation of a project plan to track and organize the development work.\n\nIf security flaws are not tracked within the project plan, it is possible the flaws will be overlooked and included in a release.\n\nTracking flaws in the project plan will help identify code elements to be changed as well as the requested change.","check":"This requirement is meant to apply to developers or organizations that are doing application development work. If the organization managing the application is not performing or managing the development of the application the requirement is not applicable.\n\nAsk the application representative to demonstrate how security flaws are integrated into the project plan.\n\nIf security flaws are not addressed in the project plan or there is no process to introduce security flaws into the project plan, this is a finding.","fix":"Address security flaws within a project plan to ensure they are tracked and addressed by management."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24322r493864_chk","severity":"medium","gid":"V-222652","rid":"SV-222652r879887_rule","stig_id":"APSC-DV-003210","gtitle":"SRG-APP-000516","fix_id":"F-24311r493865_fix","documentable":null,"legacy":["SV-85005","V-70383"],"cci":["CCI-003178"],"nist":["SA-11 e"]}},{"id":"SV-222653","code":"control 'SV-222653' do\n  title 'The application development team must follow a set of coding standards.'\n  desc 'Coding standards are guidelines established by the development team or individual developers that recommend programming style, practices and methods.  The coding standards employed will vary based upon the programming language that is being used to develop the application and the development team.\n\nCoding standards often cover the use of white space characters, variable naming conventions, function naming conventions, and comment styles.  Implementing coding standards provides many benefits to the development process.  These benefits include code readability, coding consistency among both individual and teams of developers as well as ease of code integration.  \n\nThe following are examples of what will typically be in a coding standards document.  This list is an example of what one can expect to find in typical coding standard documents and is not a comprehensive list:\n\n- Indent style conventions\n- Naming conventions\n- Line length conventions\n- Comment conventions\n- Programming best practices\n- Programming style conventions\n\nCoding standards allow developers to quickly adapt to code which has been developed by various members of a development team.  Coding standards are useful in the code review process as well as in situations where a team member leaves and duties must then be assigned to another team member.  \n\nCode conforming to a standard format is easier to read, especially if someone other than the original developer is examining the code.  In addition, formatted code can be debugged and corrected faster than unformatted code.\n\nIntroducing coding standards can help increase the consistency, reliability, and security of the application by ensuring common programming structures and tasks are handled by similar methods, as well as, reducing the occurrence of common logic errors.'\n  desc 'check', 'This requirement is meant to apply to developers or organizations that are doing application development work. If the organization operating the application under review is not doing the development or managing the development of the application, the requirement is not applicable.\n\nAsk the application representative about their coding standards. Ask for a coding standards document, review the document and ask the developers if they are aware of and if they use the coding standards. Make a determination if the application developers follow the coding standard. \n\nIf the developers do not follow a coding standard, or if a coding standard document does not exist, this is a finding.'\n  desc 'fix', 'Create and maintain a coding standard process and documentation for developers to follow. \n\nInclude programming best practices based on the languages being used for application development. Include items that should be standardized across the team that deals with how developers write their application code.'\n  impact 0.3\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-36257r602334_chk'\n  tag severity: 'low'\n  tag gid: 'V-222653'\n  tag rid: 'SV-222653r879887_rule'\n  tag stig_id: 'APSC-DV-003215'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-36221r864580_fix'\n  tag 'documentable'\n  tag legacy: ['SV-85007', 'V-70385']\n  tag cci: ['CCI-003233']\n  tag nist: ['SA-15 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222653.rb"},"title":"The application development team must follow a set of coding standards.","desc":"Coding standards are guidelines established by the development team or individual developers that recommend programming style, practices and methods.  The coding standards employed will vary based upon the programming language that is being used to develop the application and the development team.\n\nCoding standards often cover the use of white space characters, variable naming conventions, function naming conventions, and comment styles.  Implementing coding standards provides many benefits to the development process.  These benefits include code readability, coding consistency among both individual and teams of developers as well as ease of code integration.  \n\nThe following are examples of what will typically be in a coding standards document.  This list is an example of what one can expect to find in typical coding standard documents and is not a comprehensive list:\n\n- Indent style conventions\n- Naming conventions\n- Line length conventions\n- Comment conventions\n- Programming best practices\n- Programming style conventions\n\nCoding standards allow developers to quickly adapt to code which has been developed by various members of a development team.  Coding standards are useful in the code review process as well as in situations where a team member leaves and duties must then be assigned to another team member.  \n\nCode conforming to a standard format is easier to read, especially if someone other than the original developer is examining the code.  In addition, formatted code can be debugged and corrected faster than unformatted code.\n\nIntroducing coding standards can help increase the consistency, reliability, and security of the application by ensuring common programming structures and tasks are handled by similar methods, as well as, reducing the occurrence of common logic errors.","descriptions":{"default":"Coding standards are guidelines established by the development team or individual developers that recommend programming style, practices and methods.  The coding standards employed will vary based upon the programming language that is being used to develop the application and the development team.\n\nCoding standards often cover the use of white space characters, variable naming conventions, function naming conventions, and comment styles.  Implementing coding standards provides many benefits to the development process.  These benefits include code readability, coding consistency among both individual and teams of developers as well as ease of code integration.  \n\nThe following are examples of what will typically be in a coding standards document.  This list is an example of what one can expect to find in typical coding standard documents and is not a comprehensive list:\n\n- Indent style conventions\n- Naming conventions\n- Line length conventions\n- Comment conventions\n- Programming best practices\n- Programming style conventions\n\nCoding standards allow developers to quickly adapt to code which has been developed by various members of a development team.  Coding standards are useful in the code review process as well as in situations where a team member leaves and duties must then be assigned to another team member.  \n\nCode conforming to a standard format is easier to read, especially if someone other than the original developer is examining the code.  In addition, formatted code can be debugged and corrected faster than unformatted code.\n\nIntroducing coding standards can help increase the consistency, reliability, and security of the application by ensuring common programming structures and tasks are handled by similar methods, as well as, reducing the occurrence of common logic errors.","check":"This requirement is meant to apply to developers or organizations that are doing application development work. If the organization operating the application under review is not doing the development or managing the development of the application, the requirement is not applicable.\n\nAsk the application representative about their coding standards. Ask for a coding standards document, review the document and ask the developers if they are aware of and if they use the coding standards. Make a determination if the application developers follow the coding standard. \n\nIf the developers do not follow a coding standard, or if a coding standard document does not exist, this is a finding.","fix":"Create and maintain a coding standard process and documentation for developers to follow. \n\nInclude programming best practices based on the languages being used for application development. Include items that should be standardized across the team that deals with how developers write their application code."},"impact":0.3,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-36257r602334_chk","severity":"low","gid":"V-222653","rid":"SV-222653r879887_rule","stig_id":"APSC-DV-003215","gtitle":"SRG-APP-000516","fix_id":"F-36221r864580_fix","documentable":null,"legacy":["SV-85007","V-70385"],"cci":["CCI-003233"],"nist":["SA-15 a"]}},{"id":"SV-222654","code":"control 'SV-222654' do\n  title 'The designer must create and update the Design Document for each release of the application.'\n  desc 'This requirement is meant to apply to developers or organizations that are doing application development work.\n\nThe application design document or configuration guide includes configuration settings, recommendations and best practices that pertain to the secure deployment of the application.\n\nIt also contains the detailed functional architecture as well as any changes to the application architecture corresponding to a new version release and must be documented to ensure all risks are assessed and mitigated to the maximum extent practical.\n\nFailure to do so may result in unexposed risk, and failure to mitigate the risk leading to failure or compromise of the system.'\n  desc 'check', 'This requirement is meant to apply to developers or organizations that are doing application development work. If the organization operating the application is not doing the development or managing the development of the application, the requirement is not applicable.\n\nAsk the application representative for the design document for the application. Review the design document.\n\nExamine the design document and/or the threat model for the application and verify the following information is documented:\n\n- All external interfaces.\n- The nature of information being exchanged\n- Any protections on the external interface\n- User roles required for access control and the access privileges assigned to each role\n- Unique security requirements (e.g., encryption of key data elements at rest)\n- Categories of sensitive information processed by the application and their specific protection plans (e.g., PII, HIPAA).\n- Restoration priority of subsystems, processes, or information\n- Verify the organization includes documentation describing the design and implementation details of the security controls employed within the information system with sufficient detail\n- Application incident response plan that provides details on how to provide the development team with application vulnerability or bug information.\n\nIf the design document is incomplete, this is a finding.'\n  desc 'fix', 'Create and maintain the Design Document for each release of the application and identify the following:\n\n- All external interfaces (from the threat model)\n- The nature of information being exchanged\n- Categories of sensitive information processed or stored and their specific protection plans\n- The protection mechanisms associated with each interface\n- User roles required for access control\n- Access privileges assigned to each role\n- Unique application security requirements\n- Categories of sensitive information processed or stored and specific protection plans (e.g., Privacy Act, HIPAA, etc.)\n- Restoration priority of subsystems, processes, or information.'\n  impact 0.3\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-36258r602337_chk'\n  tag severity: 'low'\n  tag gid: 'V-222654'\n  tag rid: 'SV-222654r879887_rule'\n  tag stig_id: 'APSC-DV-003220'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-36222r864581_fix'\n  tag 'documentable'\n  tag legacy: ['SV-85009', 'V-70387']\n  tag cci: ['CCI-003233']\n  tag nist: ['SA-15 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222654.rb"},"title":"The designer must create and update the Design Document for each release of the application.","desc":"This requirement is meant to apply to developers or organizations that are doing application development work.\n\nThe application design document or configuration guide includes configuration settings, recommendations and best practices that pertain to the secure deployment of the application.\n\nIt also contains the detailed functional architecture as well as any changes to the application architecture corresponding to a new version release and must be documented to ensure all risks are assessed and mitigated to the maximum extent practical.\n\nFailure to do so may result in unexposed risk, and failure to mitigate the risk leading to failure or compromise of the system.","descriptions":{"default":"This requirement is meant to apply to developers or organizations that are doing application development work.\n\nThe application design document or configuration guide includes configuration settings, recommendations and best practices that pertain to the secure deployment of the application.\n\nIt also contains the detailed functional architecture as well as any changes to the application architecture corresponding to a new version release and must be documented to ensure all risks are assessed and mitigated to the maximum extent practical.\n\nFailure to do so may result in unexposed risk, and failure to mitigate the risk leading to failure or compromise of the system.","check":"This requirement is meant to apply to developers or organizations that are doing application development work. If the organization operating the application is not doing the development or managing the development of the application, the requirement is not applicable.\n\nAsk the application representative for the design document for the application. Review the design document.\n\nExamine the design document and/or the threat model for the application and verify the following information is documented:\n\n- All external interfaces.\n- The nature of information being exchanged\n- Any protections on the external interface\n- User roles required for access control and the access privileges assigned to each role\n- Unique security requirements (e.g., encryption of key data elements at rest)\n- Categories of sensitive information processed by the application and their specific protection plans (e.g., PII, HIPAA).\n- Restoration priority of subsystems, processes, or information\n- Verify the organization includes documentation describing the design and implementation details of the security controls employed within the information system with sufficient detail\n- Application incident response plan that provides details on how to provide the development team with application vulnerability or bug information.\n\nIf the design document is incomplete, this is a finding.","fix":"Create and maintain the Design Document for each release of the application and identify the following:\n\n- All external interfaces (from the threat model)\n- The nature of information being exchanged\n- Categories of sensitive information processed or stored and their specific protection plans\n- The protection mechanisms associated with each interface\n- User roles required for access control\n- Access privileges assigned to each role\n- Unique application security requirements\n- Categories of sensitive information processed or stored and specific protection plans (e.g., Privacy Act, HIPAA, etc.)\n- Restoration priority of subsystems, processes, or information."},"impact":0.3,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-36258r602337_chk","severity":"low","gid":"V-222654","rid":"SV-222654r879887_rule","stig_id":"APSC-DV-003220","gtitle":"SRG-APP-000516","fix_id":"F-36222r864581_fix","documentable":null,"legacy":["SV-85009","V-70387"],"cci":["CCI-003233"],"nist":["SA-15 a"]}},{"id":"SV-222655","code":"control 'SV-222655' do\n  title 'Threat models must be documented and reviewed for each application release and updated as required by design and functionality changes or when new threats are discovered.'\n  desc 'Threat modeling is an approach for analyzing the security of an application. It is a structured approach that enables you to identify, quantify, and address the security risks associated with an application. Threat modeling is not an approach to reviewing code, but it does complement the security code review process.\n\nThreat modeling can optimize application security by identifying objectives and vulnerabilities, and then defining countermeasures to prevent, or mitigate the effects of, threats to the system.\n\nThe lack of threat modeling will potentially leave unidentified threats for attackers to utilize to gain access to the application. To execute a threat model you should do the following:\n\n- Decompose the Application. The first step in the threat modeling process is gaining an understanding of the application and how it interacts with external entities. This includes identifying application components such as web server, application server, database server and languages used by the application. It also includes identifying network connections and the means utilized to access the application.\n\n- Determine and rank threats. Use a threat categorization methodology to understand the different threat categories.\nE.g., Auditing, authentication, configuration management and data protection. The goal of the threat categorization is to help identify threats both from the attacker perspective and the defensive perspective.\n\n- Determine countermeasures and mitigation. A lack of protection against a threat might indicate a vulnerability whose risk exposure could be mitigated with the implementation of a countermeasure.\n\nCountermeasures could include using application firewalls, IDS/IPS to block or identify known attacks against the architecture and alarming on audit log events.\n\nRefer to the OWASP website for additional details on application threat modeling.\n\nhttps://www.owasp.org/index.php/Application_Threat_Modeling'\n  desc 'check', 'This requirement is meant to apply to developers or organizations that are doing application development work.\n\nIf the organization operating the application is not doing the development or is not managing the development of the application, the requirement is not applicable.\n\nReview the threat model document and identify the following sections are present:\n\n- Identified threats\n- Potential vulnerabilities\n- Counter measures taken\n- Potential mitigations\n- Mitigations selected based on risk analysis\n\nReview the identified threats, vulnerabilities, and countermeasures.\nCountermeasures could include implementing application firewalls or IDS/IPS and configuring certain IDS filters.\n\nReview the application documentation.\nVerify the architecture and components of the application match with the components in the threat model document.\nVerify identified threats and vulnerabilities are addressed or mitigated and the ISSO and ISSM have reviewed and approved the document.\n\nIf the described threat model documentation does not exist, this is a finding.'\n  desc 'fix', 'Establish and maintain threat models and review for each application release and when new threats are discovered. Identify potential mitigations to identified threats. Verify mitigations are implemented to threats based on their risk analysis.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24325r493873_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222655'\n  tag rid: 'SV-222655r879887_rule'\n  tag stig_id: 'APSC-DV-003230'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24314r493874_fix'\n  tag 'documentable'\n  tag legacy: ['SV-85011', 'V-70389']\n  tag cci: ['CCI-003256']\n  tag nist: ['SA-15 (4)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222655.rb"},"title":"Threat models must be documented and reviewed for each application release and updated as required by design and functionality changes or when new threats are discovered.","desc":"Threat modeling is an approach for analyzing the security of an application. It is a structured approach that enables you to identify, quantify, and address the security risks associated with an application. Threat modeling is not an approach to reviewing code, but it does complement the security code review process.\n\nThreat modeling can optimize application security by identifying objectives and vulnerabilities, and then defining countermeasures to prevent, or mitigate the effects of, threats to the system.\n\nThe lack of threat modeling will potentially leave unidentified threats for attackers to utilize to gain access to the application. To execute a threat model you should do the following:\n\n- Decompose the Application. The first step in the threat modeling process is gaining an understanding of the application and how it interacts with external entities. This includes identifying application components such as web server, application server, database server and languages used by the application. It also includes identifying network connections and the means utilized to access the application.\n\n- Determine and rank threats. Use a threat categorization methodology to understand the different threat categories.\nE.g., Auditing, authentication, configuration management and data protection. The goal of the threat categorization is to help identify threats both from the attacker perspective and the defensive perspective.\n\n- Determine countermeasures and mitigation. A lack of protection against a threat might indicate a vulnerability whose risk exposure could be mitigated with the implementation of a countermeasure.\n\nCountermeasures could include using application firewalls, IDS/IPS to block or identify known attacks against the architecture and alarming on audit log events.\n\nRefer to the OWASP website for additional details on application threat modeling.\n\nhttps://www.owasp.org/index.php/Application_Threat_Modeling","descriptions":{"default":"Threat modeling is an approach for analyzing the security of an application. It is a structured approach that enables you to identify, quantify, and address the security risks associated with an application. Threat modeling is not an approach to reviewing code, but it does complement the security code review process.\n\nThreat modeling can optimize application security by identifying objectives and vulnerabilities, and then defining countermeasures to prevent, or mitigate the effects of, threats to the system.\n\nThe lack of threat modeling will potentially leave unidentified threats for attackers to utilize to gain access to the application. To execute a threat model you should do the following:\n\n- Decompose the Application. The first step in the threat modeling process is gaining an understanding of the application and how it interacts with external entities. This includes identifying application components such as web server, application server, database server and languages used by the application. It also includes identifying network connections and the means utilized to access the application.\n\n- Determine and rank threats. Use a threat categorization methodology to understand the different threat categories.\nE.g., Auditing, authentication, configuration management and data protection. The goal of the threat categorization is to help identify threats both from the attacker perspective and the defensive perspective.\n\n- Determine countermeasures and mitigation. A lack of protection against a threat might indicate a vulnerability whose risk exposure could be mitigated with the implementation of a countermeasure.\n\nCountermeasures could include using application firewalls, IDS/IPS to block or identify known attacks against the architecture and alarming on audit log events.\n\nRefer to the OWASP website for additional details on application threat modeling.\n\nhttps://www.owasp.org/index.php/Application_Threat_Modeling","check":"This requirement is meant to apply to developers or organizations that are doing application development work.\n\nIf the organization operating the application is not doing the development or is not managing the development of the application, the requirement is not applicable.\n\nReview the threat model document and identify the following sections are present:\n\n- Identified threats\n- Potential vulnerabilities\n- Counter measures taken\n- Potential mitigations\n- Mitigations selected based on risk analysis\n\nReview the identified threats, vulnerabilities, and countermeasures.\nCountermeasures could include implementing application firewalls or IDS/IPS and configuring certain IDS filters.\n\nReview the application documentation.\nVerify the architecture and components of the application match with the components in the threat model document.\nVerify identified threats and vulnerabilities are addressed or mitigated and the ISSO and ISSM have reviewed and approved the document.\n\nIf the described threat model documentation does not exist, this is a finding.","fix":"Establish and maintain threat models and review for each application release and when new threats are discovered. Identify potential mitigations to identified threats. Verify mitigations are implemented to threats based on their risk analysis."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24325r493873_chk","severity":"medium","gid":"V-222655","rid":"SV-222655r879887_rule","stig_id":"APSC-DV-003230","gtitle":"SRG-APP-000516","fix_id":"F-24314r493874_fix","documentable":null,"legacy":["SV-85011","V-70389"],"cci":["CCI-003256"],"nist":["SA-15 (4)"]}},{"id":"SV-222656","code":"control 'SV-222656' do\n  title 'The application must not be subject to error handling vulnerabilities.'\n  desc 'Error handling is the failure to check the return values of functions or catch top level exceptions within a program. Improper error handling in an application can lead to an application failure or possibly result in the application entering an insecure state. \n\nThe primary way to detect error handling vulnerabilities is to perform code reviews. If a manual code review cannot be performed, static code analysis tools should be employed in conjunction with tests to help force the error conditions by specifying invalid input (such as fuzzed data and malformed filenames) and by using different accounts to run the application. These tests may give indications of vulnerability, but they are not comprehensive.\n\nIn order to minimize error handling errors, ensure proper return code and exception handling is implemented throughout the application.'\n  desc 'check', 'Review the application documentation, code review reports and the results from static code analysis tools.\n\nIdentify the most recent security scans and code analysis testing conducted.  Verify testing configuration includes tests for error handling issues.\n\nCheck test results for identified error handling vulnerabilities within the application.\n\nIf the test results indicate the existence of error handling vulnerabilities and no remediation evidence is presented, this is a finding.\n\nIf no test results are available for review, this is a finding.'\n  desc 'fix', 'Ensure proper return code and exception handling is implemented throughout the application.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24326r493876_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222656'\n  tag rid: 'SV-222656r879887_rule'\n  tag stig_id: 'APSC-DV-003235'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24315r493877_fix'\n  tag 'documentable'\n  tag legacy: ['SV-85013', 'V-70391']\n  tag cci: ['CCI-003272']\n  tag nist: ['SA-15 (5)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222656.rb"},"title":"The application must not be subject to error handling vulnerabilities.","desc":"Error handling is the failure to check the return values of functions or catch top level exceptions within a program. Improper error handling in an application can lead to an application failure or possibly result in the application entering an insecure state. \n\nThe primary way to detect error handling vulnerabilities is to perform code reviews. If a manual code review cannot be performed, static code analysis tools should be employed in conjunction with tests to help force the error conditions by specifying invalid input (such as fuzzed data and malformed filenames) and by using different accounts to run the application. These tests may give indications of vulnerability, but they are not comprehensive.\n\nIn order to minimize error handling errors, ensure proper return code and exception handling is implemented throughout the application.","descriptions":{"default":"Error handling is the failure to check the return values of functions or catch top level exceptions within a program. Improper error handling in an application can lead to an application failure or possibly result in the application entering an insecure state. \n\nThe primary way to detect error handling vulnerabilities is to perform code reviews. If a manual code review cannot be performed, static code analysis tools should be employed in conjunction with tests to help force the error conditions by specifying invalid input (such as fuzzed data and malformed filenames) and by using different accounts to run the application. These tests may give indications of vulnerability, but they are not comprehensive.\n\nIn order to minimize error handling errors, ensure proper return code and exception handling is implemented throughout the application.","check":"Review the application documentation, code review reports and the results from static code analysis tools.\n\nIdentify the most recent security scans and code analysis testing conducted.  Verify testing configuration includes tests for error handling issues.\n\nCheck test results for identified error handling vulnerabilities within the application.\n\nIf the test results indicate the existence of error handling vulnerabilities and no remediation evidence is presented, this is a finding.\n\nIf no test results are available for review, this is a finding.","fix":"Ensure proper return code and exception handling is implemented throughout the application."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24326r493876_chk","severity":"medium","gid":"V-222656","rid":"SV-222656r879887_rule","stig_id":"APSC-DV-003235","gtitle":"SRG-APP-000516","fix_id":"F-24315r493877_fix","documentable":null,"legacy":["SV-85013","V-70391"],"cci":["CCI-003272"],"nist":["SA-15 (5)"]}},{"id":"SV-222657","code":"control 'SV-222657' do\n  title 'The application development team must provide an application incident response plan.'\n  desc 'An application incident response process is managed by the development team and should include a method for individuals to submit potential security vulnerabilities to the development or maintenance team. \n\nThe plan should dictate what is to be done with the reported vulnerabilities. Reported vulnerabilities must be tracked throughout the process to ensure they are triaged, corrected, and tested. The corresponding update is released to the user community and the user community is notified of the availability of the application update.\n\nWithout an established application incident management plan and process, discovered issues and vulnerabilities will go unreported.   Vulnerabilities will not be triaged and managed, and there may be delays in corrective actions.\n\nInformation on how to submit bug and vulnerability reports must also be included in the application design document or configuration guide.\n\nThis requirement is meant to be applied when reviewing an application with the development team.'\n  desc 'check', 'If the application is a COTS application and the development team is not accessible to interview this requirement is not applicable.\n\nInterview the application development team members. Request and review the application incident response plan. \n\nEnsure the plan includes an implemented process that:\n\n- Tracks reported vulnerabilities and bugs\n- Confirms reported vulnerabilities and bugs\n- Tracks remediation effort\n- Notifies application users of available updates that address the reported issues.\n\nIf the application incident response plan does not exist and at a minimum does not implement the aforementioned processes, this is a finding.'\n  desc 'fix', 'The development team creates an application incident response plan documenting and establishing a process that at a minimum:\n\n- Tracks reported vulnerabilities and bugs\n- Confirms reported vulnerabilities and bugs\n- Tracks remediation effort\n- Notifies application users of available updates that address the reported issues.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-36259r602340_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222657'\n  tag rid: 'SV-222657r879887_rule'\n  tag stig_id: 'APSC-DV-003236'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-36223r864582_fix'\n  tag 'documentable'\n  tag legacy: ['SV-85015', 'V-70393']\n  tag cci: ['CCI-003289']\n  tag nist: ['SA-15 (10)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222657.rb"},"title":"The application development team must provide an application incident response plan.","desc":"An application incident response process is managed by the development team and should include a method for individuals to submit potential security vulnerabilities to the development or maintenance team. \n\nThe plan should dictate what is to be done with the reported vulnerabilities. Reported vulnerabilities must be tracked throughout the process to ensure they are triaged, corrected, and tested. The corresponding update is released to the user community and the user community is notified of the availability of the application update.\n\nWithout an established application incident management plan and process, discovered issues and vulnerabilities will go unreported.   Vulnerabilities will not be triaged and managed, and there may be delays in corrective actions.\n\nInformation on how to submit bug and vulnerability reports must also be included in the application design document or configuration guide.\n\nThis requirement is meant to be applied when reviewing an application with the development team.","descriptions":{"default":"An application incident response process is managed by the development team and should include a method for individuals to submit potential security vulnerabilities to the development or maintenance team. \n\nThe plan should dictate what is to be done with the reported vulnerabilities. Reported vulnerabilities must be tracked throughout the process to ensure they are triaged, corrected, and tested. The corresponding update is released to the user community and the user community is notified of the availability of the application update.\n\nWithout an established application incident management plan and process, discovered issues and vulnerabilities will go unreported.   Vulnerabilities will not be triaged and managed, and there may be delays in corrective actions.\n\nInformation on how to submit bug and vulnerability reports must also be included in the application design document or configuration guide.\n\nThis requirement is meant to be applied when reviewing an application with the development team.","check":"If the application is a COTS application and the development team is not accessible to interview this requirement is not applicable.\n\nInterview the application development team members. Request and review the application incident response plan. \n\nEnsure the plan includes an implemented process that:\n\n- Tracks reported vulnerabilities and bugs\n- Confirms reported vulnerabilities and bugs\n- Tracks remediation effort\n- Notifies application users of available updates that address the reported issues.\n\nIf the application incident response plan does not exist and at a minimum does not implement the aforementioned processes, this is a finding.","fix":"The development team creates an application incident response plan documenting and establishing a process that at a minimum:\n\n- Tracks reported vulnerabilities and bugs\n- Confirms reported vulnerabilities and bugs\n- Tracks remediation effort\n- Notifies application users of available updates that address the reported issues."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-36259r602340_chk","severity":"medium","gid":"V-222657","rid":"SV-222657r879887_rule","stig_id":"APSC-DV-003236","gtitle":"SRG-APP-000516","fix_id":"F-36223r864582_fix","documentable":null,"legacy":["SV-85015","V-70393"],"cci":["CCI-003289"],"nist":["SA-15 (10)"]}},{"id":"SV-222658","code":"control 'SV-222658' do\n  title 'All products must be supported by the vendor or the development team.'\n  desc 'Unsupported commercial and government developed software products should not be used because fixes to newly identified bugs will not be implemented by the vendor or development team. The lack of security updates can result in potential vulnerabilities.'\n  desc 'check', 'Review the application documentation and interview the application administrator.\n\nIdentify all software components.\n\nReview the version information and identify the vendor if COTS software.\n\nAccess the vendor website to verify the version is still supported.\n\nAsk the application representative for proof that the application and all of its components are supported.\n\nExamples of proof may include:\n\ndesign documentation that includes support information, support specific contract documentation, successful creation of vendor support tickets, website toll free support phone numbers etcetera.\n\nIf any of the software components are not supported by a COTS vendor or a GOTS organization, this is a finding.'\n  desc 'fix', 'Remove or decommission all unsupported software products in the application.'\n  impact 0.7\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24328r493882_chk'\n  tag severity: 'high'\n  tag gid: 'V-222658'\n  tag rid: 'SV-222658r879887_rule'\n  tag stig_id: 'APSC-DV-003240'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24317r493883_fix'\n  tag 'documentable'\n  tag legacy: ['SV-85017', 'V-70395']\n  tag cci: ['CCI-003376']\n  tag nist: ['SA-22 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222658.rb"},"title":"All products must be supported by the vendor or the development team.","desc":"Unsupported commercial and government developed software products should not be used because fixes to newly identified bugs will not be implemented by the vendor or development team. The lack of security updates can result in potential vulnerabilities.","descriptions":{"default":"Unsupported commercial and government developed software products should not be used because fixes to newly identified bugs will not be implemented by the vendor or development team. The lack of security updates can result in potential vulnerabilities.","check":"Review the application documentation and interview the application administrator.\n\nIdentify all software components.\n\nReview the version information and identify the vendor if COTS software.\n\nAccess the vendor website to verify the version is still supported.\n\nAsk the application representative for proof that the application and all of its components are supported.\n\nExamples of proof may include:\n\ndesign documentation that includes support information, support specific contract documentation, successful creation of vendor support tickets, website toll free support phone numbers etcetera.\n\nIf any of the software components are not supported by a COTS vendor or a GOTS organization, this is a finding.","fix":"Remove or decommission all unsupported software products in the application."},"impact":0.7,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24328r493882_chk","severity":"high","gid":"V-222658","rid":"SV-222658r879887_rule","stig_id":"APSC-DV-003240","gtitle":"SRG-APP-000516","fix_id":"F-24317r493883_fix","documentable":null,"legacy":["SV-85017","V-70395"],"cci":["CCI-003376"],"nist":["SA-22 a"]}},{"id":"SV-222659","code":"control 'SV-222659' do\n  title 'The application must be decommissioned when maintenance or support is no longer available.'\n  desc 'Unsupported software products should not be used because fixes to newly identified bugs will not be implemented by the vendor or development team. The lack of security updates can result in potential vulnerabilities.\n\nWhen maintenance updates and patches are no longer available, the application is no longer considered supported, and should be decommissioned.'\n  desc 'check', 'Interview the application representative and determine if all the application components are under maintenance contract. The entire application may be covered by a single maintenance agreement. The application should be decommissioned if maintenance or security support is no longer being provided by the vendor or by the development staff of a custom developed application.\n\nIf the application or any of the application components are not being maintained, this is a finding.'\n  desc 'fix', 'Ensure there is maintenance for the application.'\n  impact 0.7\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24329r493885_chk'\n  tag severity: 'high'\n  tag gid: 'V-222659'\n  tag rid: 'SV-222659r879887_rule'\n  tag stig_id: 'APSC-DV-003250'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24318r493886_fix'\n  tag 'documentable'\n  tag legacy: ['SV-85019', 'V-70397']\n  tag cci: ['CCI-003376']\n  tag nist: ['SA-22 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222659.rb"},"title":"The application must be decommissioned when maintenance or support is no longer available.","desc":"Unsupported software products should not be used because fixes to newly identified bugs will not be implemented by the vendor or development team. The lack of security updates can result in potential vulnerabilities.\n\nWhen maintenance updates and patches are no longer available, the application is no longer considered supported, and should be decommissioned.","descriptions":{"default":"Unsupported software products should not be used because fixes to newly identified bugs will not be implemented by the vendor or development team. The lack of security updates can result in potential vulnerabilities.\n\nWhen maintenance updates and patches are no longer available, the application is no longer considered supported, and should be decommissioned.","check":"Interview the application representative and determine if all the application components are under maintenance contract. The entire application may be covered by a single maintenance agreement. The application should be decommissioned if maintenance or security support is no longer being provided by the vendor or by the development staff of a custom developed application.\n\nIf the application or any of the application components are not being maintained, this is a finding.","fix":"Ensure there is maintenance for the application."},"impact":0.7,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24329r493885_chk","severity":"high","gid":"V-222659","rid":"SV-222659r879887_rule","stig_id":"APSC-DV-003250","gtitle":"SRG-APP-000516","fix_id":"F-24318r493886_fix","documentable":null,"legacy":["SV-85019","V-70397"],"cci":["CCI-003376"],"nist":["SA-22 a"]}},{"id":"SV-222660","code":"control 'SV-222660' do\n  title 'Procedures must be in place to notify users when an application is decommissioned.'\n  desc 'When maintenance no longer exists for an application, there are no individuals responsible for making security updates. The application support staff should maintain procedures for decommissioning. The decommissioning process should include notifying users of the pending decommissioning event. If the users are not informed of the decommissioning event, attackers may be able to stand up similar looking system and fool users into attempting to log onto a duplicate system. This can be as simple as a banner informing users.\n\nThis risk is primarily geared towards insider threat scenarios and externally accessible applications that provide access to publicly releasable data but should also be applied to internal systems as a best practice.'\n  desc 'check', 'Interview the application representative to determine if provisions are in place to notify users when an application is decommissioned.\n \nIf provisions are not in place to notify users when an application is decommissioned, this is a finding.'\n  desc 'fix', 'Create and establish procedures to notify users when an application is decommissioned.'\n  impact 0.3\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24330r493888_chk'\n  tag severity: 'low'\n  tag gid: 'V-222660'\n  tag rid: 'SV-222660r879887_rule'\n  tag stig_id: 'APSC-DV-003260'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24319r493889_fix'\n  tag 'documentable'\n  tag legacy: ['SV-85021', 'V-70399']\n  tag cci: ['CCI-003374']\n  tag nist: ['SA-22 b']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222660.rb"},"title":"Procedures must be in place to notify users when an application is decommissioned.","desc":"When maintenance no longer exists for an application, there are no individuals responsible for making security updates. The application support staff should maintain procedures for decommissioning. The decommissioning process should include notifying users of the pending decommissioning event. If the users are not informed of the decommissioning event, attackers may be able to stand up similar looking system and fool users into attempting to log onto a duplicate system. This can be as simple as a banner informing users.\n\nThis risk is primarily geared towards insider threat scenarios and externally accessible applications that provide access to publicly releasable data but should also be applied to internal systems as a best practice.","descriptions":{"default":"When maintenance no longer exists for an application, there are no individuals responsible for making security updates. The application support staff should maintain procedures for decommissioning. The decommissioning process should include notifying users of the pending decommissioning event. If the users are not informed of the decommissioning event, attackers may be able to stand up similar looking system and fool users into attempting to log onto a duplicate system. This can be as simple as a banner informing users.\n\nThis risk is primarily geared towards insider threat scenarios and externally accessible applications that provide access to publicly releasable data but should also be applied to internal systems as a best practice.","check":"Interview the application representative to determine if provisions are in place to notify users when an application is decommissioned.\n \nIf provisions are not in place to notify users when an application is decommissioned, this is a finding.","fix":"Create and establish procedures to notify users when an application is decommissioned."},"impact":0.3,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24330r493888_chk","severity":"low","gid":"V-222660","rid":"SV-222660r879887_rule","stig_id":"APSC-DV-003260","gtitle":"SRG-APP-000516","fix_id":"F-24319r493889_fix","documentable":null,"legacy":["SV-85021","V-70399"],"cci":["CCI-003374"],"nist":["SA-22 b"]}},{"id":"SV-222661","code":"control 'SV-222661' do\n  title 'Unnecessary built-in application accounts must be disabled.'\n  desc 'Default passwords and properties of built-in accounts are often publicly available. Anyone with necessary knowledge, internal or external, can compromise an application using built-in accounts.\n\nBuilt-in accounts are those that are added as part of the installation of the application software. These accounts exist for many common Commercial Off-the-Shelf (COTS) or open source components of enterprise applications (e.g., OS, web browser or database software).'\n  desc 'check', 'Review the application documentation and identify if the application creates or utilizes built-in accounts.\n\nExamine the account list for obvious examples (e.g., accounts with vendor names such as Oracle or Tivoli).\n\nVerify that these accounts have been removed or disabled.\n\nIf enabled built-in accounts are present, ask the application representative the reason for their existence.\n\nIf the account is required in order for the application to operate properly, verify the account password has been changed to a DoD acceptable value.\n\nIf these accounts are not necessary to run the application, or if the accounts are required and the password has not been changed to meet DoD password requirements, this is a finding.'\n  desc 'fix', 'Disable unnecessary built-in userids, use other strong authentication when possible and use strong passwords if accounts are necessary for application operation.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24331r493891_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222661'\n  tag rid: 'SV-222661r879887_rule'\n  tag stig_id: 'APSC-DV-003270'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24320r493892_fix'\n  tag 'documentable'\n  tag legacy: ['SV-85023', 'V-70401']\n  tag cci: ['CCI-003109']\n  tag nist: ['SA-4 (5) (a)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222661.rb"},"title":"Unnecessary built-in application accounts must be disabled.","desc":"Default passwords and properties of built-in accounts are often publicly available. Anyone with necessary knowledge, internal or external, can compromise an application using built-in accounts.\n\nBuilt-in accounts are those that are added as part of the installation of the application software. These accounts exist for many common Commercial Off-the-Shelf (COTS) or open source components of enterprise applications (e.g., OS, web browser or database software).","descriptions":{"default":"Default passwords and properties of built-in accounts are often publicly available. Anyone with necessary knowledge, internal or external, can compromise an application using built-in accounts.\n\nBuilt-in accounts are those that are added as part of the installation of the application software. These accounts exist for many common Commercial Off-the-Shelf (COTS) or open source components of enterprise applications (e.g., OS, web browser or database software).","check":"Review the application documentation and identify if the application creates or utilizes built-in accounts.\n\nExamine the account list for obvious examples (e.g., accounts with vendor names such as Oracle or Tivoli).\n\nVerify that these accounts have been removed or disabled.\n\nIf enabled built-in accounts are present, ask the application representative the reason for their existence.\n\nIf the account is required in order for the application to operate properly, verify the account password has been changed to a DoD acceptable value.\n\nIf these accounts are not necessary to run the application, or if the accounts are required and the password has not been changed to meet DoD password requirements, this is a finding.","fix":"Disable unnecessary built-in userids, use other strong authentication when possible and use strong passwords if accounts are necessary for application operation."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24331r493891_chk","severity":"medium","gid":"V-222661","rid":"SV-222661r879887_rule","stig_id":"APSC-DV-003270","gtitle":"SRG-APP-000516","fix_id":"F-24320r493892_fix","documentable":null,"legacy":["SV-85023","V-70401"],"cci":["CCI-003109"],"nist":["SA-4 (5) (a)"]}},{"id":"SV-222662","code":"control 'SV-222662' do\n  title 'Default passwords must be changed.'\n  desc 'Default passwords can easily be compromised by attackers allowing immediate access to the applications.'\n  desc 'check', 'Identify the application name and version and do an Internet search for the product name and the string \"default password\".\n\nIf default passwords are found, attempt to authenticate with the published default passwords.\n\nIf authentication is successful, this is a finding.'\n  desc 'fix', 'Configure the application to use strong authenticators instead of passwords when possible. Otherwise, change default passwords to a DoD-approved strength password and follow all guidance for passwords.'\n  impact 0.7\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24332r493894_chk'\n  tag severity: 'high'\n  tag gid: 'V-222662'\n  tag rid: 'SV-222662r879887_rule'\n  tag stig_id: 'APSC-DV-003280'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24321r493895_fix'\n  tag 'documentable'\n  tag legacy: ['SV-85025', 'V-70403']\n  tag cci: ['CCI-003109']\n  tag nist: ['SA-4 (5) (a)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222662.rb"},"title":"Default passwords must be changed.","desc":"Default passwords can easily be compromised by attackers allowing immediate access to the applications.","descriptions":{"default":"Default passwords can easily be compromised by attackers allowing immediate access to the applications.","check":"Identify the application name and version and do an Internet search for the product name and the string \"default password\".\n\nIf default passwords are found, attempt to authenticate with the published default passwords.\n\nIf authentication is successful, this is a finding.","fix":"Configure the application to use strong authenticators instead of passwords when possible. Otherwise, change default passwords to a DoD-approved strength password and follow all guidance for passwords."},"impact":0.7,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24332r493894_chk","severity":"high","gid":"V-222662","rid":"SV-222662r879887_rule","stig_id":"APSC-DV-003280","gtitle":"SRG-APP-000516","fix_id":"F-24321r493895_fix","documentable":null,"legacy":["SV-85025","V-70403"],"cci":["CCI-003109"],"nist":["SA-4 (5) (a)"]}},{"id":"SV-222663","code":"control 'SV-222663' do\n  title 'An Application Configuration Guide must be created and included with the application.'\n  desc 'The Application Configuration Guide is any document or collection of documents used to configure the application.  These documents may be part of a user guide, secure configuration guide, or any guidance that satisfies the requirements provided herein.  \n\nConfiguration examples include but are not limited to:\n\n - Encryption Settings\n - PKI Certificate Configuration Settings\n - Password Settings\n - Auditing configuration\n - AD configuration\n - Backup and disaster recovery settings\n - List of hosting enclaves and network connection requirements\n - Deployment configuration settings \n - Known security assumptions, implications, system level protections, best practices, and required permissions\n\nDevelopment systems, build systems, and test systems must operate in a standardized environment. These settings are to be documented in the Application Configuration Guide.\n\nExamples include but are not limited to:\n\n - List of development systems, build systems, and test systems. \n - Versions of compilers used\n - Build options when creating applications and components\n - Versions of COTS software (used as part of the application)\n - Operating systems and versions\n - For web applications, which browsers and what versions are supported.\n \nAll deployment configuration settings are to be documented in the Application Configuration Guide and the Application Configuration Guide must be made available to application hosting providers and application/system administrators.'\n  desc 'check', 'Interview the application administrator.  Request and review the Application Configuration Guide. \n\nVerify the configuration guide at a minimum provides configuration details for the following examples.  The examples provided herein are not intended to limit the configuration settings that are documented in the guide.\n\nConfiguration examples include but are not limited to:\n\n - Encryption Settings\n - PKI Certificate Configuration Settings\n - Password Settings\n - Auditing configuration\n - AD configuration\n - Backup and disaster recovery settings\n - List of hosting enclaves and network connection requirements\n - Deployment configuration settings \n - Known security assumptions, implications, system level protections, best practices, and required permissions\n\nReview the Application Configuration Guide and determine if development systems are documented.  If no development is being performed where the application is hosted, this part of the requirement is NA.\n\nDevelopment systems, build systems, and test systems must operate in a standardized environment.\n\nExamples include but are not limited to:\n\n - List of development systems, build systems, and test systems. \n - Versions of compilers used\n - Build options when creating applications and components\n - Versions of COTS software (used as part of the application)\n - Operating systems and versions\n - For web applications, which browsers and what versions are supported.\n\nIf there is no application configuration guide included with the application, this is a finding.'\n  desc 'fix', 'Create the application configuration guide in accordance with configuration examples provided in the vulnerability discussion and check.\n\nVerify the application configuration guide is distributed along  with the application.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24333r493897_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222663'\n  tag rid: 'SV-222663r879887_rule'\n  tag stig_id: 'APSC-DV-003285'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24322r493898_fix'\n  tag 'documentable'\n  tag legacy: ['SV-85027', 'V-70405']\n  tag cci: ['CCI-003124']\n  tag nist: ['SA-5 a 1']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222663.rb"},"title":"An Application Configuration Guide must be created and included with the application.","desc":"The Application Configuration Guide is any document or collection of documents used to configure the application.  These documents may be part of a user guide, secure configuration guide, or any guidance that satisfies the requirements provided herein.  \n\nConfiguration examples include but are not limited to:\n\n - Encryption Settings\n - PKI Certificate Configuration Settings\n - Password Settings\n - Auditing configuration\n - AD configuration\n - Backup and disaster recovery settings\n - List of hosting enclaves and network connection requirements\n - Deployment configuration settings \n - Known security assumptions, implications, system level protections, best practices, and required permissions\n\nDevelopment systems, build systems, and test systems must operate in a standardized environment. These settings are to be documented in the Application Configuration Guide.\n\nExamples include but are not limited to:\n\n - List of development systems, build systems, and test systems. \n - Versions of compilers used\n - Build options when creating applications and components\n - Versions of COTS software (used as part of the application)\n - Operating systems and versions\n - For web applications, which browsers and what versions are supported.\n \nAll deployment configuration settings are to be documented in the Application Configuration Guide and the Application Configuration Guide must be made available to application hosting providers and application/system administrators.","descriptions":{"default":"The Application Configuration Guide is any document or collection of documents used to configure the application.  These documents may be part of a user guide, secure configuration guide, or any guidance that satisfies the requirements provided herein.  \n\nConfiguration examples include but are not limited to:\n\n - Encryption Settings\n - PKI Certificate Configuration Settings\n - Password Settings\n - Auditing configuration\n - AD configuration\n - Backup and disaster recovery settings\n - List of hosting enclaves and network connection requirements\n - Deployment configuration settings \n - Known security assumptions, implications, system level protections, best practices, and required permissions\n\nDevelopment systems, build systems, and test systems must operate in a standardized environment. These settings are to be documented in the Application Configuration Guide.\n\nExamples include but are not limited to:\n\n - List of development systems, build systems, and test systems. \n - Versions of compilers used\n - Build options when creating applications and components\n - Versions of COTS software (used as part of the application)\n - Operating systems and versions\n - For web applications, which browsers and what versions are supported.\n \nAll deployment configuration settings are to be documented in the Application Configuration Guide and the Application Configuration Guide must be made available to application hosting providers and application/system administrators.","check":"Interview the application administrator.  Request and review the Application Configuration Guide. \n\nVerify the configuration guide at a minimum provides configuration details for the following examples.  The examples provided herein are not intended to limit the configuration settings that are documented in the guide.\n\nConfiguration examples include but are not limited to:\n\n - Encryption Settings\n - PKI Certificate Configuration Settings\n - Password Settings\n - Auditing configuration\n - AD configuration\n - Backup and disaster recovery settings\n - List of hosting enclaves and network connection requirements\n - Deployment configuration settings \n - Known security assumptions, implications, system level protections, best practices, and required permissions\n\nReview the Application Configuration Guide and determine if development systems are documented.  If no development is being performed where the application is hosted, this part of the requirement is NA.\n\nDevelopment systems, build systems, and test systems must operate in a standardized environment.\n\nExamples include but are not limited to:\n\n - List of development systems, build systems, and test systems. \n - Versions of compilers used\n - Build options when creating applications and components\n - Versions of COTS software (used as part of the application)\n - Operating systems and versions\n - For web applications, which browsers and what versions are supported.\n\nIf there is no application configuration guide included with the application, this is a finding.","fix":"Create the application configuration guide in accordance with configuration examples provided in the vulnerability discussion and check.\n\nVerify the application configuration guide is distributed along  with the application."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24333r493897_chk","severity":"medium","gid":"V-222663","rid":"SV-222663r879887_rule","stig_id":"APSC-DV-003285","gtitle":"SRG-APP-000516","fix_id":"F-24322r493898_fix","documentable":null,"legacy":["SV-85027","V-70405"],"cci":["CCI-003124"],"nist":["SA-5 a 1"]}},{"id":"SV-222664","code":"control 'SV-222664' do\n  title 'If the application contains classified data, a Security Classification Guide must exist containing data elements and their classification.'\n  desc 'Without a classification guide the marking, storage, and output media of classified material can be inadvertently mixed with unclassified material, leading to its possible loss or compromise.'\n  desc 'check', 'If the application does not process classified information, this check is not applicable.\n \nThe application may already be covered by a higher level program or other classification guide. If the classification guide is not written specifically to the application, the sensitive application data should be reviewed to determine whether it is contained in the classification guide.\n\nDoD 5200.01R identifies requirements for security classification and/or declassification guides.\n\nhttp://www.dtic.mil/whs/directives/corres/pdf/520001_vol1.pdf\n\nSecurity classification guides shall provide the following information:\n\nIdentify specific items, elements, or categories of information to be protected.\n\nState the specific classification to be assigned to each item or element of information and, when useful, specify items of information that are unclassified.\n\nProvide declassification instructions for each item or element of information, to include the applicable exemption category for information exempted from automatic declassification.\n\nState a concise reason for classification for each item, element, or category of information that, at a minimum, cites the applicable classification categories in Section 1.5 of E.O. 12958.\n\nIdentify any special handling caveats that apply to items, elements, or categories of information.\n\nIdentify, by name or personal identifier and position title, the original classification authority approving the guide and the date of that approval.\n\nProvide a point-of-contact for questions about the guide and suggestions for improvement.\n\nFor information exempted from automatic declassification because its disclosure would reveal foreign government information or violate a statute, treaty, or international agreement, the security classification guide will identify the government or specify the applicable statute, treaty, or international agreement, as appropriate.\n\nIf the security classification guide does not exist, or does not contain application data elements and their classification, this is a finding.'\n  desc 'fix', 'Create and maintain a security classification guide.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24334r493900_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222664'\n  tag rid: 'SV-222664r879887_rule'\n  tag stig_id: 'APSC-DV-003290'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24323r493901_fix'\n  tag 'documentable'\n  tag legacy: ['SV-85029', 'V-70407']\n  tag cci: ['CCI-003124']\n  tag nist: ['SA-5 a 1']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222664.rb"},"title":"If the application contains classified data, a Security Classification Guide must exist containing data elements and their classification.","desc":"Without a classification guide the marking, storage, and output media of classified material can be inadvertently mixed with unclassified material, leading to its possible loss or compromise.","descriptions":{"default":"Without a classification guide the marking, storage, and output media of classified material can be inadvertently mixed with unclassified material, leading to its possible loss or compromise.","check":"If the application does not process classified information, this check is not applicable.\n \nThe application may already be covered by a higher level program or other classification guide. If the classification guide is not written specifically to the application, the sensitive application data should be reviewed to determine whether it is contained in the classification guide.\n\nDoD 5200.01R identifies requirements for security classification and/or declassification guides.\n\nhttp://www.dtic.mil/whs/directives/corres/pdf/520001_vol1.pdf\n\nSecurity classification guides shall provide the following information:\n\nIdentify specific items, elements, or categories of information to be protected.\n\nState the specific classification to be assigned to each item or element of information and, when useful, specify items of information that are unclassified.\n\nProvide declassification instructions for each item or element of information, to include the applicable exemption category for information exempted from automatic declassification.\n\nState a concise reason for classification for each item, element, or category of information that, at a minimum, cites the applicable classification categories in Section 1.5 of E.O. 12958.\n\nIdentify any special handling caveats that apply to items, elements, or categories of information.\n\nIdentify, by name or personal identifier and position title, the original classification authority approving the guide and the date of that approval.\n\nProvide a point-of-contact for questions about the guide and suggestions for improvement.\n\nFor information exempted from automatic declassification because its disclosure would reveal foreign government information or violate a statute, treaty, or international agreement, the security classification guide will identify the government or specify the applicable statute, treaty, or international agreement, as appropriate.\n\nIf the security classification guide does not exist, or does not contain application data elements and their classification, this is a finding.","fix":"Create and maintain a security classification guide."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24334r493900_chk","severity":"medium","gid":"V-222664","rid":"SV-222664r879887_rule","stig_id":"APSC-DV-003290","gtitle":"SRG-APP-000516","fix_id":"F-24323r493901_fix","documentable":null,"legacy":["SV-85029","V-70407"],"cci":["CCI-003124"],"nist":["SA-5 a 1"]}},{"id":"SV-222665","code":"control 'SV-222665' do\n  title 'The designer must ensure uncategorized or emerging mobile code is not used in applications.'\n  desc 'By definition, mobile code is software obtained from remote systems outside the enclave boundary, transferred across a network, and then downloaded and executed on a local system without explicit installation or execution by the recipient.  \n\nFor a complete list of mobile code categorizations, refer to the overview document included with this STIG.\nCategorized mobile code includes but is not limited to:\n\n- ActiveX\n- Windows Scripting Host when used as mobile code\n- Unix Shell Scripts when used as mobile code\n- DOS batch scripts when used as mobile code\n- Java applets and other Java mobile code\n- Visual Basic for Applications (VBA)\n- LotusScript\n- PerfectScript\n- Postscript\n- JavaScript (including Jscript and ECMAScript variants)\n- VBScript\n- Portable Document Format (PDF)\n- Shockwave/Flash\n- Rich Internet Applications\n\nThe following technologies are not currently designated as mobile code:\n\n- XML\n- SMIL\n- QuickTime\n- VRML (exclusive of any associated Java applets or JavaScript scripts)\n\nThe following are outside the scope of the mobile code requirements:\n\n- Scripts and applets embedded in or linked to web pages and executed in the context of the web server.  Examples of this are Java servlets, Java Server pages, CGI, Active Server Pages, CFML, PHP, SSI, server-side JavaScript, server-side LotusScript.\n- Local programs and command scripts \n- Distributed object-oriented programming systems (e.g., CORBA, DCOM).\n- Software patches, updates, including self-extracting updates - software updates that must be invoked explicitly by the user are outside the mobile code policy.  Examples of technologies in this area include: Netscape SmartUpdate, Microsoft Windows Update, Netscape web browser plug-ins and Linux.\n\nIf other types of mobile code technologies are present that are not listed here, a written waiver must be granted by the CIO (allowing use of emerging mobile code technology). Also uncategorized mobile code must be submitted for AO approval.'\n  desc 'check', 'Review the application documentation and interview application administrator.\n\nDetermine what mobile code types are used by the application.\n\nIf uncategorized mobile code types are found, ask the application administrator to provide the documented waiver and risk acceptance. If the application is using uncategorized or emerging mobile code and there is no waiver provided, this is a finding.'\n  desc 'fix', 'Remove uncategorized or emerging mobile code from the application or obtain a waiver and risk acceptance to operate.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24335r493903_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222665'\n  tag rid: 'SV-222665r879887_rule'\n  tag stig_id: 'APSC-DV-003300'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24324r493904_fix'\n  tag 'documentable'\n  tag legacy: ['SV-85031', 'V-70409']\n  tag cci: ['CCI-001167']\n  tag nist: ['SC-18 (2)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222665.rb"},"title":"The designer must ensure uncategorized or emerging mobile code is not used in applications.","desc":"By definition, mobile code is software obtained from remote systems outside the enclave boundary, transferred across a network, and then downloaded and executed on a local system without explicit installation or execution by the recipient.  \n\nFor a complete list of mobile code categorizations, refer to the overview document included with this STIG.\nCategorized mobile code includes but is not limited to:\n\n- ActiveX\n- Windows Scripting Host when used as mobile code\n- Unix Shell Scripts when used as mobile code\n- DOS batch scripts when used as mobile code\n- Java applets and other Java mobile code\n- Visual Basic for Applications (VBA)\n- LotusScript\n- PerfectScript\n- Postscript\n- JavaScript (including Jscript and ECMAScript variants)\n- VBScript\n- Portable Document Format (PDF)\n- Shockwave/Flash\n- Rich Internet Applications\n\nThe following technologies are not currently designated as mobile code:\n\n- XML\n- SMIL\n- QuickTime\n- VRML (exclusive of any associated Java applets or JavaScript scripts)\n\nThe following are outside the scope of the mobile code requirements:\n\n- Scripts and applets embedded in or linked to web pages and executed in the context of the web server.  Examples of this are Java servlets, Java Server pages, CGI, Active Server Pages, CFML, PHP, SSI, server-side JavaScript, server-side LotusScript.\n- Local programs and command scripts \n- Distributed object-oriented programming systems (e.g., CORBA, DCOM).\n- Software patches, updates, including self-extracting updates - software updates that must be invoked explicitly by the user are outside the mobile code policy.  Examples of technologies in this area include: Netscape SmartUpdate, Microsoft Windows Update, Netscape web browser plug-ins and Linux.\n\nIf other types of mobile code technologies are present that are not listed here, a written waiver must be granted by the CIO (allowing use of emerging mobile code technology). Also uncategorized mobile code must be submitted for AO approval.","descriptions":{"default":"By definition, mobile code is software obtained from remote systems outside the enclave boundary, transferred across a network, and then downloaded and executed on a local system without explicit installation or execution by the recipient.  \n\nFor a complete list of mobile code categorizations, refer to the overview document included with this STIG.\nCategorized mobile code includes but is not limited to:\n\n- ActiveX\n- Windows Scripting Host when used as mobile code\n- Unix Shell Scripts when used as mobile code\n- DOS batch scripts when used as mobile code\n- Java applets and other Java mobile code\n- Visual Basic for Applications (VBA)\n- LotusScript\n- PerfectScript\n- Postscript\n- JavaScript (including Jscript and ECMAScript variants)\n- VBScript\n- Portable Document Format (PDF)\n- Shockwave/Flash\n- Rich Internet Applications\n\nThe following technologies are not currently designated as mobile code:\n\n- XML\n- SMIL\n- QuickTime\n- VRML (exclusive of any associated Java applets or JavaScript scripts)\n\nThe following are outside the scope of the mobile code requirements:\n\n- Scripts and applets embedded in or linked to web pages and executed in the context of the web server.  Examples of this are Java servlets, Java Server pages, CGI, Active Server Pages, CFML, PHP, SSI, server-side JavaScript, server-side LotusScript.\n- Local programs and command scripts \n- Distributed object-oriented programming systems (e.g., CORBA, DCOM).\n- Software patches, updates, including self-extracting updates - software updates that must be invoked explicitly by the user are outside the mobile code policy.  Examples of technologies in this area include: Netscape SmartUpdate, Microsoft Windows Update, Netscape web browser plug-ins and Linux.\n\nIf other types of mobile code technologies are present that are not listed here, a written waiver must be granted by the CIO (allowing use of emerging mobile code technology). Also uncategorized mobile code must be submitted for AO approval.","check":"Review the application documentation and interview application administrator.\n\nDetermine what mobile code types are used by the application.\n\nIf uncategorized mobile code types are found, ask the application administrator to provide the documented waiver and risk acceptance. If the application is using uncategorized or emerging mobile code and there is no waiver provided, this is a finding.","fix":"Remove uncategorized or emerging mobile code from the application or obtain a waiver and risk acceptance to operate."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24335r493903_chk","severity":"medium","gid":"V-222665","rid":"SV-222665r879887_rule","stig_id":"APSC-DV-003300","gtitle":"SRG-APP-000516","fix_id":"F-24324r493904_fix","documentable":null,"legacy":["SV-85031","V-70409"],"cci":["CCI-001167"],"nist":["SC-18 (2)"]}},{"id":"SV-222666","code":"control 'SV-222666' do\n  title 'Production database exports must have database administration credentials and sensitive data removed before releasing the export.'\n  desc 'Production database exports are often used to populate development databases. Test and development environments do not typically have the same rigid security protections that production environments do. When production data is used in test and development, the production database exports will need to be scrubbed to prevent information like passwords and other sensitive data from becoming available to development and test staff that may not have a need to know. Sensitive data should not be included in database exports because of classification, privacy, and other types of data protection requirement issues. Not all application developers have need-to-know sensitive information such as HIPAA data, Privacy Act Data, production admin passwords or classified data.'\n  desc 'check', 'Review the application documentation and identify the existence of databases within the application architecture.\n\nAsk the application admin to identify when data exports from this database are imported to test or development databases.\n \nIf no data is exported to test or development databases, this check is not applicable.\n\nIf there are such data exports, ask if the production database includes sensitive data identified by the data owner as sensitive such as passwords, financial, personnel, personal, HIPAA, Privacy Act, or classified data is included.\n\nIf any database exports include sensitive data and that data is not sanitized or removed prior to or immediately after import to the development database, this is a finding.'\n  desc 'fix', 'Remove sensitive data from production database exports.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24336r493906_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222666'\n  tag rid: 'SV-222666r879887_rule'\n  tag stig_id: 'APSC-DV-003310'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24325r493907_fix'\n  tag 'documentable'\n  tag legacy: ['SV-85033', 'V-70411']\n  tag cci: ['CCI-002478']\n  tag nist: ['SC-28 (2)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222666.rb"},"title":"Production database exports must have database administration credentials and sensitive data removed before releasing the export.","desc":"Production database exports are often used to populate development databases. Test and development environments do not typically have the same rigid security protections that production environments do. When production data is used in test and development, the production database exports will need to be scrubbed to prevent information like passwords and other sensitive data from becoming available to development and test staff that may not have a need to know. Sensitive data should not be included in database exports because of classification, privacy, and other types of data protection requirement issues. Not all application developers have need-to-know sensitive information such as HIPAA data, Privacy Act Data, production admin passwords or classified data.","descriptions":{"default":"Production database exports are often used to populate development databases. Test and development environments do not typically have the same rigid security protections that production environments do. When production data is used in test and development, the production database exports will need to be scrubbed to prevent information like passwords and other sensitive data from becoming available to development and test staff that may not have a need to know. Sensitive data should not be included in database exports because of classification, privacy, and other types of data protection requirement issues. Not all application developers have need-to-know sensitive information such as HIPAA data, Privacy Act Data, production admin passwords or classified data.","check":"Review the application documentation and identify the existence of databases within the application architecture.\n\nAsk the application admin to identify when data exports from this database are imported to test or development databases.\n \nIf no data is exported to test or development databases, this check is not applicable.\n\nIf there are such data exports, ask if the production database includes sensitive data identified by the data owner as sensitive such as passwords, financial, personnel, personal, HIPAA, Privacy Act, or classified data is included.\n\nIf any database exports include sensitive data and that data is not sanitized or removed prior to or immediately after import to the development database, this is a finding.","fix":"Remove sensitive data from production database exports."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24336r493906_chk","severity":"medium","gid":"V-222666","rid":"SV-222666r879887_rule","stig_id":"APSC-DV-003310","gtitle":"SRG-APP-000516","fix_id":"F-24325r493907_fix","documentable":null,"legacy":["SV-85033","V-70411"],"cci":["CCI-002478"],"nist":["SC-28 (2)"]}},{"id":"SV-222667","code":"control 'SV-222667' do\n  title 'Protections against DoS attacks must be implemented.'\n  desc 'Known DoS threats documented in the threat model should be mitigated, to prevent DoS type attacks.'\n  desc 'check', 'Ask the application representative for the threat model document.\n\nExamine the threat model document and determine if DoS attacks are specified as a threat.\n\nIf there are no DoS threats identified in the threat model, the requirement is not applicable.\n\nVerify the mitigations provided for DoS attacks are implemented from the threat model.\n\nIf mitigations for DoS attacks are identified in the threat model but are not implemented, this is a finding.'\n  desc 'fix', 'Implement mitigations from the threat model for DOS attacks.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24337r493909_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222667'\n  tag rid: 'SV-222667r879887_rule'\n  tag stig_id: 'APSC-DV-003320'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24326r493910_fix'\n  tag 'documentable'\n  tag legacy: ['SV-85035', 'V-70413']\n  tag cci: ['CCI-002386']\n  tag nist: ['SC-5']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222667.rb"},"title":"Protections against DoS attacks must be implemented.","desc":"Known DoS threats documented in the threat model should be mitigated, to prevent DoS type attacks.","descriptions":{"default":"Known DoS threats documented in the threat model should be mitigated, to prevent DoS type attacks.","check":"Ask the application representative for the threat model document.\n\nExamine the threat model document and determine if DoS attacks are specified as a threat.\n\nIf there are no DoS threats identified in the threat model, the requirement is not applicable.\n\nVerify the mitigations provided for DoS attacks are implemented from the threat model.\n\nIf mitigations for DoS attacks are identified in the threat model but are not implemented, this is a finding.","fix":"Implement mitigations from the threat model for DOS attacks."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24337r493909_chk","severity":"medium","gid":"V-222667","rid":"SV-222667r879887_rule","stig_id":"APSC-DV-003320","gtitle":"SRG-APP-000516","fix_id":"F-24326r493910_fix","documentable":null,"legacy":["SV-85035","V-70413"],"cci":["CCI-002386"],"nist":["SC-5"]}},{"id":"SV-222668","code":"control 'SV-222668' do\n  title 'The system must alert an administrator when low resource conditions are encountered.'\n  desc 'In order to prevent DoS type attacks, applications should be monitored when resource conditions reach a predefined threshold. This could indicate the onset of a DoS attack or could be the precursor to an application outage.'\n  desc 'check', 'Review the system documentation and interview the application and system administrators.\n\nExamine the system to determine if an automated, continuous on-line monitoring and audit trail creation capability is present with the capability to immediately alert personnel of any unusual or inappropriate activity with potential IA implications, and with a user configurable capability to automatically disable the system if serious IA violations are detected.\n\nIf this monitoring capability does not exist, this is a finding.'\n  desc 'fix', 'Implement mechanisms to alert system administrators about a low resource condition.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24338r493912_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222668'\n  tag rid: 'SV-222668r879887_rule'\n  tag stig_id: 'APSC-DV-003330'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24327r493913_fix'\n  tag 'documentable'\n  tag legacy: ['SV-85037', 'V-70415']\n  tag cci: ['CCI-001274']\n  tag nist: ['SI-4 (12)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222668.rb"},"title":"The system must alert an administrator when low resource conditions are encountered.","desc":"In order to prevent DoS type attacks, applications should be monitored when resource conditions reach a predefined threshold. This could indicate the onset of a DoS attack or could be the precursor to an application outage.","descriptions":{"default":"In order to prevent DoS type attacks, applications should be monitored when resource conditions reach a predefined threshold. This could indicate the onset of a DoS attack or could be the precursor to an application outage.","check":"Review the system documentation and interview the application and system administrators.\n\nExamine the system to determine if an automated, continuous on-line monitoring and audit trail creation capability is present with the capability to immediately alert personnel of any unusual or inappropriate activity with potential IA implications, and with a user configurable capability to automatically disable the system if serious IA violations are detected.\n\nIf this monitoring capability does not exist, this is a finding.","fix":"Implement mechanisms to alert system administrators about a low resource condition."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24338r493912_chk","severity":"medium","gid":"V-222668","rid":"SV-222668r879887_rule","stig_id":"APSC-DV-003330","gtitle":"SRG-APP-000516","fix_id":"F-24327r493913_fix","documentable":null,"legacy":["SV-85037","V-70415"],"cci":["CCI-001274"],"nist":["SI-4 (12)"]}},{"id":"SV-222669","code":"control 'SV-222669' do\n  title 'At least one application administrator must be registered to receive update notifications, or security alerts, when automated alerts are available.'\n  desc 'Administrators should register for updates to all COTS and custom-developed software, so when security flaws are identified, they can be tracked for testing and updates of the application can be applied.\n\nAdmin personnel should be registered to receive updates to all components of the application, such as Web Server, Application Servers, and Database Servers. Also, if update notifications are provided for any custom-developed software, libraries or third-party tools, deployment personnel must also register for these updates.'\n  desc 'check', 'Review the components of the application.\n\nAsk the application representative to demonstrate deployment personnel are registered to receive notifications for update notification for all of the application components including custom-developed software, libraries and third-party tools.\n\nIf no deployment personnel are registered to receive the alerts, this is a finding.'\n  desc 'fix', 'Register administrators to receive update notifications so they can patch and update applications and application components.'\n  impact 0.3\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24339r493915_chk'\n  tag severity: 'low'\n  tag gid: 'V-222669'\n  tag rid: 'SV-222669r879887_rule'\n  tag stig_id: 'APSC-DV-003340'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24328r493916_fix'\n  tag 'documentable'\n  tag legacy: ['SV-85039', 'V-70417']\n  tag cci: ['CCI-001285']\n  tag nist: ['SI-5 a']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222669.rb"},"title":"At least one application administrator must be registered to receive update notifications, or security alerts, when automated alerts are available.","desc":"Administrators should register for updates to all COTS and custom-developed software, so when security flaws are identified, they can be tracked for testing and updates of the application can be applied.\n\nAdmin personnel should be registered to receive updates to all components of the application, such as Web Server, Application Servers, and Database Servers. Also, if update notifications are provided for any custom-developed software, libraries or third-party tools, deployment personnel must also register for these updates.","descriptions":{"default":"Administrators should register for updates to all COTS and custom-developed software, so when security flaws are identified, they can be tracked for testing and updates of the application can be applied.\n\nAdmin personnel should be registered to receive updates to all components of the application, such as Web Server, Application Servers, and Database Servers. Also, if update notifications are provided for any custom-developed software, libraries or third-party tools, deployment personnel must also register for these updates.","check":"Review the components of the application.\n\nAsk the application representative to demonstrate deployment personnel are registered to receive notifications for update notification for all of the application components including custom-developed software, libraries and third-party tools.\n\nIf no deployment personnel are registered to receive the alerts, this is a finding.","fix":"Register administrators to receive update notifications so they can patch and update applications and application components."},"impact":0.3,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24339r493915_chk","severity":"low","gid":"V-222669","rid":"SV-222669r879887_rule","stig_id":"APSC-DV-003340","gtitle":"SRG-APP-000516","fix_id":"F-24328r493916_fix","documentable":null,"legacy":["SV-85039","V-70417"],"cci":["CCI-001285"],"nist":["SI-5 a"]}},{"id":"SV-222670","code":"control 'SV-222670' do\n  title 'The application must provide notifications or alerts when product update and security related patches are available.'\n  desc 'An application vulnerability management and update process must be in place to notify and provide users and administrators with a means of obtaining security patches and updates for the application.\n\nAn important part of the maintenance phase of an application is managing vulnerabilities for updated versions of the application after the application is released.  When a security flaw is discovered in an application deployed in a production environment, notification to the user community must take place as quickly as possible. \n\nThis notification should be planned for in the design phase of the application. This notification should be a warning of any potential risks to the application or data. A notification mechanism will be established to notify users of the vulnerability and the potential risks, the availability of a solution, and/or potential mitigations reducing risks to the application.'\n  desc 'check', 'Review the components of the application.  Interview the application administrator.\n\nHave the application administrator demonstrate the application notification process that occurs when a security patch or product update is available.\n\nThe process must include a brief description of the issue and any potential risks related to the issue.\n\nThe process must also include information regarding the availability of the patch or update and how it can be obtained as well as any potential mitigations that can be utilized in the interim.\n\nIf there is no application security patch or update notification process, this is a finding.\n\nIf the application notification process does not include a brief description, information on risks, how to obtain the patch or update and any potential mitigations, this is a finding.'\n  desc 'fix', 'Provide a distribution mechanism for obtaining updates to the application.\n\nInclude a description of the issue, a summary of risk as well as potential mitigations and how to obtain the update.'\n  impact 0.3\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24340r493918_chk'\n  tag severity: 'low'\n  tag gid: 'V-222670'\n  tag rid: 'SV-222670r879887_rule'\n  tag stig_id: 'APSC-DV-003345'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24329r493919_fix'\n  tag 'documentable'\n  tag legacy: ['SV-85041', 'V-70419']\n  tag cci: ['CCI-001286']\n  tag nist: ['SI-5 b']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222670.rb"},"title":"The application must provide notifications or alerts when product update and security related patches are available.","desc":"An application vulnerability management and update process must be in place to notify and provide users and administrators with a means of obtaining security patches and updates for the application.\n\nAn important part of the maintenance phase of an application is managing vulnerabilities for updated versions of the application after the application is released.  When a security flaw is discovered in an application deployed in a production environment, notification to the user community must take place as quickly as possible. \n\nThis notification should be planned for in the design phase of the application. This notification should be a warning of any potential risks to the application or data. A notification mechanism will be established to notify users of the vulnerability and the potential risks, the availability of a solution, and/or potential mitigations reducing risks to the application.","descriptions":{"default":"An application vulnerability management and update process must be in place to notify and provide users and administrators with a means of obtaining security patches and updates for the application.\n\nAn important part of the maintenance phase of an application is managing vulnerabilities for updated versions of the application after the application is released.  When a security flaw is discovered in an application deployed in a production environment, notification to the user community must take place as quickly as possible. \n\nThis notification should be planned for in the design phase of the application. This notification should be a warning of any potential risks to the application or data. A notification mechanism will be established to notify users of the vulnerability and the potential risks, the availability of a solution, and/or potential mitigations reducing risks to the application.","check":"Review the components of the application.  Interview the application administrator.\n\nHave the application administrator demonstrate the application notification process that occurs when a security patch or product update is available.\n\nThe process must include a brief description of the issue and any potential risks related to the issue.\n\nThe process must also include information regarding the availability of the patch or update and how it can be obtained as well as any potential mitigations that can be utilized in the interim.\n\nIf there is no application security patch or update notification process, this is a finding.\n\nIf the application notification process does not include a brief description, information on risks, how to obtain the patch or update and any potential mitigations, this is a finding.","fix":"Provide a distribution mechanism for obtaining updates to the application.\n\nInclude a description of the issue, a summary of risk as well as potential mitigations and how to obtain the update."},"impact":0.3,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24340r493918_chk","severity":"low","gid":"V-222670","rid":"SV-222670r879887_rule","stig_id":"APSC-DV-003345","gtitle":"SRG-APP-000516","fix_id":"F-24329r493919_fix","documentable":null,"legacy":["SV-85041","V-70419"],"cci":["CCI-001286"],"nist":["SI-5 b"]}},{"id":"SV-222671","code":"control 'SV-222671' do\n  title 'Connections between the DoD enclave and the Internet or other public or commercial wide area networks must require a DMZ.'\n  desc 'In order to protect DoD data and systems, all remote access to DoD information systems must be mediated through a managed access control point, such as a remote access server in a DMZ.'\n  desc 'check', 'Interview the application representative and determine if the application is publicly accessible.\n\nIf the application is publicly accessible and traffic is not being routed through a DMZ, this is a finding.'\n  desc 'fix', 'Setup a DMZ between DoD and public networks.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24341r493921_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222671'\n  tag rid: 'SV-222671r879887_rule'\n  tag stig_id: 'APSC-DV-003350'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24330r493922_fix'\n  tag 'documentable'\n  tag legacy: ['SV-85043', 'V-70421']\n  tag cci: ['CCI-001119']\n  tag nist: ['SC-7 (13)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222671.rb"},"title":"Connections between the DoD enclave and the Internet or other public or commercial wide area networks must require a DMZ.","desc":"In order to protect DoD data and systems, all remote access to DoD information systems must be mediated through a managed access control point, such as a remote access server in a DMZ.","descriptions":{"default":"In order to protect DoD data and systems, all remote access to DoD information systems must be mediated through a managed access control point, such as a remote access server in a DMZ.","check":"Interview the application representative and determine if the application is publicly accessible.\n\nIf the application is publicly accessible and traffic is not being routed through a DMZ, this is a finding.","fix":"Setup a DMZ between DoD and public networks."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24341r493921_chk","severity":"medium","gid":"V-222671","rid":"SV-222671r879887_rule","stig_id":"APSC-DV-003350","gtitle":"SRG-APP-000516","fix_id":"F-24330r493922_fix","documentable":null,"legacy":["SV-85043","V-70421"],"cci":["CCI-001119"],"nist":["SC-7 (13)"]}},{"id":"SV-222672","code":"control 'SV-222672' do\n  title 'The application must generate audit records when concurrent logons from different workstations occur.'\n  desc 'When an application provides users with the ability to concurrently logon, an event must be recorded that indicates the user has logged on from different workstations. It is important to ensure that audit logs differentiate between the two sessions.\n\nThe event data must include the user ID, the workstation information and application session information that provides the details necessary to determine which application session executed what action on the system.'\n  desc 'check', 'Review the application documentation and interview the application administrator to identify where log records are stored.\n\nAccess log records then log on to the application as a regular user from one workstation. Take note of workstation IP address and confirm the address as the source workstation.\n\nHave the application administrator log on to the application from another workstation using the same account.\n\nValidate the IP address of the second workstation is recorded in the logs.\n\nIf the application does not create an audit record when concurrent logons occur from different workstations, this is a finding.'\n  desc 'fix', 'Configure the application to log concurrent logons from different workstations.'\n  impact 0.3\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24342r493924_chk'\n  tag severity: 'low'\n  tag gid: 'V-222672'\n  tag rid: 'SV-222672r879877_rule'\n  tag stig_id: 'APSC-DV-003360'\n  tag gtitle: 'SRG-APP-000506'\n  tag fix_id: 'F-24331r493925_fix'\n  tag 'documentable'\n  tag legacy: ['SV-85045', 'V-70423']\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222672.rb"},"title":"The application must generate audit records when concurrent logons from different workstations occur.","desc":"When an application provides users with the ability to concurrently logon, an event must be recorded that indicates the user has logged on from different workstations. It is important to ensure that audit logs differentiate between the two sessions.\n\nThe event data must include the user ID, the workstation information and application session information that provides the details necessary to determine which application session executed what action on the system.","descriptions":{"default":"When an application provides users with the ability to concurrently logon, an event must be recorded that indicates the user has logged on from different workstations. It is important to ensure that audit logs differentiate between the two sessions.\n\nThe event data must include the user ID, the workstation information and application session information that provides the details necessary to determine which application session executed what action on the system.","check":"Review the application documentation and interview the application administrator to identify where log records are stored.\n\nAccess log records then log on to the application as a regular user from one workstation. Take note of workstation IP address and confirm the address as the source workstation.\n\nHave the application administrator log on to the application from another workstation using the same account.\n\nValidate the IP address of the second workstation is recorded in the logs.\n\nIf the application does not create an audit record when concurrent logons occur from different workstations, this is a finding.","fix":"Configure the application to log concurrent logons from different workstations."},"impact":0.3,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24342r493924_chk","severity":"low","gid":"V-222672","rid":"SV-222672r879877_rule","stig_id":"APSC-DV-003360","gtitle":"SRG-APP-000506","fix_id":"F-24331r493925_fix","documentable":null,"legacy":["SV-85045","V-70423"],"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-222673","code":"control 'SV-222673' do\n  title 'The Program Manager must verify all levels of program management, designers, developers, and testers receive annual security training pertaining to their job function.'\n  desc 'Many application team members may not be aware of the security implications regarding the code that they design, write and test.  To address this concern, the Program Manager will ensure all levels of program management receive security training regarding the necessity, impact, and benefits of integrating secure development practices into the development lifecycle.  \n\nThis training is in addition to DoD 8570 training requirements as DoD 8570 annual security training does not presently cover application SDLC security concerns.\n\nThe Program Manager will ensure development team members are provided training on secure design principles for the entire SDLC and newly discovered vulnerability types on, at least, an annual basis. \n\nDevelopment team members include:\n\n- Designers/Application Architects\n- Developers/Programmers\n- Testers\n- Application managers\n\nThis requirement applies to development teams or individual application developers and does not apply when reviewing a COTS application or an application hosted at a DECC or other hosting facility when the application team is not available to interview.'\n  desc 'check', 'This requirement is meant to be applied to developers and development teams only, otherwise, this requirement is not applicable.  \n\nInterview the application representative.\n\nAsk for evidence of annual security training for application managers, designers, developers, and testers. \n\nExamples of evidence include course completion certificates and a class roster. At a minimum, security training should include security awareness training pertaining to overall principles of secure application development.\n\nTraining must be in addition to DoD 8570 training requirements as DoD 8570 annual security training does not presently cover application SDLC security concerns. \n\nIf there is no evidence of security training, this is a finding.'\n  desc 'fix', 'Provide application development/operational related security specific annual training for managers, designers, developers, and testers.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24343r493927_chk'\n  tag severity: 'medium'\n  tag gid: 'V-222673'\n  tag rid: 'SV-222673r879887_rule'\n  tag stig_id: 'APSC-DV-003400'\n  tag gtitle: 'SRG-APP-000516'\n  tag fix_id: 'F-24332r493928_fix'\n  tag 'documentable'\n  tag legacy: ['SV-85047', 'V-70425']\n  tag cci: ['CCI-002052']\n  tag nist: ['AT-3 (3)']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-222673.rb"},"title":"The Program Manager must verify all levels of program management, designers, developers, and testers receive annual security training pertaining to their job function.","desc":"Many application team members may not be aware of the security implications regarding the code that they design, write and test.  To address this concern, the Program Manager will ensure all levels of program management receive security training regarding the necessity, impact, and benefits of integrating secure development practices into the development lifecycle.  \n\nThis training is in addition to DoD 8570 training requirements as DoD 8570 annual security training does not presently cover application SDLC security concerns.\n\nThe Program Manager will ensure development team members are provided training on secure design principles for the entire SDLC and newly discovered vulnerability types on, at least, an annual basis. \n\nDevelopment team members include:\n\n- Designers/Application Architects\n- Developers/Programmers\n- Testers\n- Application managers\n\nThis requirement applies to development teams or individual application developers and does not apply when reviewing a COTS application or an application hosted at a DECC or other hosting facility when the application team is not available to interview.","descriptions":{"default":"Many application team members may not be aware of the security implications regarding the code that they design, write and test.  To address this concern, the Program Manager will ensure all levels of program management receive security training regarding the necessity, impact, and benefits of integrating secure development practices into the development lifecycle.  \n\nThis training is in addition to DoD 8570 training requirements as DoD 8570 annual security training does not presently cover application SDLC security concerns.\n\nThe Program Manager will ensure development team members are provided training on secure design principles for the entire SDLC and newly discovered vulnerability types on, at least, an annual basis. \n\nDevelopment team members include:\n\n- Designers/Application Architects\n- Developers/Programmers\n- Testers\n- Application managers\n\nThis requirement applies to development teams or individual application developers and does not apply when reviewing a COTS application or an application hosted at a DECC or other hosting facility when the application team is not available to interview.","check":"This requirement is meant to be applied to developers and development teams only, otherwise, this requirement is not applicable.  \n\nInterview the application representative.\n\nAsk for evidence of annual security training for application managers, designers, developers, and testers. \n\nExamples of evidence include course completion certificates and a class roster. At a minimum, security training should include security awareness training pertaining to overall principles of secure application development.\n\nTraining must be in addition to DoD 8570 training requirements as DoD 8570 annual security training does not presently cover application SDLC security concerns. \n\nIf there is no evidence of security training, this is a finding.","fix":"Provide application development/operational related security specific annual training for managers, designers, developers, and testers."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24343r493927_chk","severity":"medium","gid":"V-222673","rid":"SV-222673r879887_rule","stig_id":"APSC-DV-003400","gtitle":"SRG-APP-000516","fix_id":"F-24332r493928_fix","documentable":null,"legacy":["SV-85047","V-70425"],"cci":["CCI-002052"],"nist":["AT-3 (3)"]}},{"id":"SV-254803","code":"control 'SV-254803' do\n  title 'The application must implement NSA-approved cryptography to protect classified information in accordance with applicable federal laws, Executive Orders, directives, policies, regulations, and standards.'\n  desc 'Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect classified data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.\n \nAdvanced Encryption Standard (AES)\nSymmetric block cipher used for information protection\nFIPS Pub 197\nUse 256 bit keys to protect up to TOP SECRET\n\nElliptic Curve Diffie-Hellman (ECDH) Key Exchange\nAsymmetric algorithm used for key establishment\nNIST SP 800-56A\nUse Curve P-384 to protect up to TOP SECRET.\n\nElliptic Curve Digital Signature Algorithm (ECDSA)\nAsymmetric algorithm used for digital signatures\nFIPS Pub 186-4\nUse Curve P-384 to protect up to TOP SECRET.\n\nSecure Hash Algorithm (SHA)\nAlgorithm used for computing a condensed representation of information\nFIPS Pub 180-4\n\nUse SHA-384 to protect up to TOP SECRET.\n \nDiffie-Hellman (DH) Key Exchange\nAsymmetric algorithm used for key establishment\nIETF RFC 3526 \nMinimum 3072-bit modulus to protect up to TOP SECRET\n\nRSA\nAsymmetric algorithm used for key establishment\nNIST SP 800-56B rev 1\nMinimum 3072-bit modulus to protect up to TOP SECRET\n\nRSA \nAsymmetric algorithm used for digital signatures\nFIPS PUB 186-4\nMinimum 3072 bit-modulus to protect up to TOP SECRET.'\n  desc 'check', 'Review the application documentation, system security plan and interview the application administrator to determine if the application processes classified data.\n\nIf the application does not process classified data, this requirement is not applicable.\n\nIdentify the data classifications and the cryptographic protections established to protect the application data.\n\nVerify the application is configured to utilize the appropriate encryption based upon data classification, cryptographic tasks that need to be performed (information protection, hashing, signing) and information protection requirements.\n\nNIST-certified cryptography must be used to store classified non-Sources and Methods Intelligence (SAMI) information if required by the information owner.\n\nNSA-validated type-1 encryption must be used for all SAMI data stored in the enclave.\n\nIf the application is not configured to utilize the NSA-approved cryptographic modules in accordance with data protection requirements specified in the security plan, this is a finding.'\n  desc 'fix', 'Configure application to encrypt stored classified information; Ensure encryption is performed using NIST FIPS 140-2-validated encryption.\n\nEncrypt stored, non-SAMI classified information using NIST FIPS 140-2-validated encryption.\n\nImplement NSA-validated type-1 encryption of all SAMI data stored in the enclave.'\n  impact 0.5\n  ref 'DPMS Target Application Security and Development'\n  tag check_id: 'C-24239r588004_chk'\n  tag severity: 'medium'\n  tag gid: 'V-254803'\n  tag rid: 'SV-254803r865217_rule'\n  tag stig_id: 'APSC-DV-002010'\n  tag gtitle: 'APSC-DV-002010'\n  tag fix_id: 'F-24228r588005_fix'\n  tag 'documentable'\n  tag legacy: ['SV-84811', 'V-70189']\n  tag cci: ['CCI-002450']\n  tag nist: ['SC-13 b']\nend","source_location":{"line":1,"ref":"../inspec_stubs/U_ASD_STIG_V5R3/controls/SV-254803.rb"},"title":"The application must implement NSA-approved cryptography to protect classified information in accordance with applicable federal laws, Executive Orders, directives, policies, regulations, and standards.","desc":"Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect classified data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.\n \nAdvanced Encryption Standard (AES)\nSymmetric block cipher used for information protection\nFIPS Pub 197\nUse 256 bit keys to protect up to TOP SECRET\n\nElliptic Curve Diffie-Hellman (ECDH) Key Exchange\nAsymmetric algorithm used for key establishment\nNIST SP 800-56A\nUse Curve P-384 to protect up to TOP SECRET.\n\nElliptic Curve Digital Signature Algorithm (ECDSA)\nAsymmetric algorithm used for digital signatures\nFIPS Pub 186-4\nUse Curve P-384 to protect up to TOP SECRET.\n\nSecure Hash Algorithm (SHA)\nAlgorithm used for computing a condensed representation of information\nFIPS Pub 180-4\n\nUse SHA-384 to protect up to TOP SECRET.\n \nDiffie-Hellman (DH) Key Exchange\nAsymmetric algorithm used for key establishment\nIETF RFC 3526 \nMinimum 3072-bit modulus to protect up to TOP SECRET\n\nRSA\nAsymmetric algorithm used for key establishment\nNIST SP 800-56B rev 1\nMinimum 3072-bit modulus to protect up to TOP SECRET\n\nRSA \nAsymmetric algorithm used for digital signatures\nFIPS PUB 186-4\nMinimum 3072 bit-modulus to protect up to TOP SECRET.","descriptions":{"default":"Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect classified data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.\n \nAdvanced Encryption Standard (AES)\nSymmetric block cipher used for information protection\nFIPS Pub 197\nUse 256 bit keys to protect up to TOP SECRET\n\nElliptic Curve Diffie-Hellman (ECDH) Key Exchange\nAsymmetric algorithm used for key establishment\nNIST SP 800-56A\nUse Curve P-384 to protect up to TOP SECRET.\n\nElliptic Curve Digital Signature Algorithm (ECDSA)\nAsymmetric algorithm used for digital signatures\nFIPS Pub 186-4\nUse Curve P-384 to protect up to TOP SECRET.\n\nSecure Hash Algorithm (SHA)\nAlgorithm used for computing a condensed representation of information\nFIPS Pub 180-4\n\nUse SHA-384 to protect up to TOP SECRET.\n \nDiffie-Hellman (DH) Key Exchange\nAsymmetric algorithm used for key establishment\nIETF RFC 3526 \nMinimum 3072-bit modulus to protect up to TOP SECRET\n\nRSA\nAsymmetric algorithm used for key establishment\nNIST SP 800-56B rev 1\nMinimum 3072-bit modulus to protect up to TOP SECRET\n\nRSA \nAsymmetric algorithm used for digital signatures\nFIPS PUB 186-4\nMinimum 3072 bit-modulus to protect up to TOP SECRET.","check":"Review the application documentation, system security plan and interview the application administrator to determine if the application processes classified data.\n\nIf the application does not process classified data, this requirement is not applicable.\n\nIdentify the data classifications and the cryptographic protections established to protect the application data.\n\nVerify the application is configured to utilize the appropriate encryption based upon data classification, cryptographic tasks that need to be performed (information protection, hashing, signing) and information protection requirements.\n\nNIST-certified cryptography must be used to store classified non-Sources and Methods Intelligence (SAMI) information if required by the information owner.\n\nNSA-validated type-1 encryption must be used for all SAMI data stored in the enclave.\n\nIf the application is not configured to utilize the NSA-approved cryptographic modules in accordance with data protection requirements specified in the security plan, this is a finding.","fix":"Configure application to encrypt stored classified information; Ensure encryption is performed using NIST FIPS 140-2-validated encryption.\n\nEncrypt stored, non-SAMI classified information using NIST FIPS 140-2-validated encryption.\n\nImplement NSA-validated type-1 encryption of all SAMI data stored in the enclave."},"impact":0.5,"refs":[{"ref":"DPMS Target Application Security and Development"}],"tags":{"check_id":"C-24239r588004_chk","severity":"medium","gid":"V-254803","rid":"SV-254803r865217_rule","stig_id":"APSC-DV-002010","gtitle":"APSC-DV-002010","fix_id":"F-24228r588005_fix","documentable":null,"legacy":["SV-84811","V-70189"],"cci":["CCI-002450"],"nist":["SC-13 b"]}}],"groups":[{"id":"controls/SV-222387.rb","title":null,"controls":["SV-222387"]},{"id":"controls/SV-222388.rb","title":null,"controls":["SV-222388"]},{"id":"controls/SV-222389.rb","title":null,"controls":["SV-222389"]},{"id":"controls/SV-222390.rb","title":null,"controls":["SV-222390"]},{"id":"controls/SV-222391.rb","title":null,"controls":["SV-222391"]},{"id":"controls/SV-222392.rb","title":null,"controls":["SV-222392"]},{"id":"controls/SV-222393.rb","title":null,"controls":["SV-222393"]},{"id":"controls/SV-222394.rb","title":null,"controls":["SV-222394"]},{"id":"controls/SV-222395.rb","title":null,"controls":["SV-222395"]},{"id":"controls/SV-222396.rb","title":null,"controls":["SV-222396"]},{"id":"controls/SV-222397.rb","title":null,"controls":["SV-222397"]},{"id":"controls/SV-222398.rb","title":null,"controls":["SV-222398"]},{"id":"controls/SV-222399.rb","title":null,"controls":["SV-222399"]},{"id":"controls/SV-222400.rb","title":null,"controls":["SV-222400"]},{"id":"controls/SV-222401.rb","title":null,"controls":["SV-222401"]},{"id":"controls/SV-222402.rb","title":null,"controls":["SV-222402"]},{"id":"controls/SV-222403.rb","title":null,"controls":["SV-222403"]},{"id":"controls/SV-222404.rb","title":null,"controls":["SV-222404"]},{"id":"controls/SV-222405.rb","title":null,"controls":["SV-222405"]},{"id":"controls/SV-222406.rb","title":null,"controls":["SV-222406"]},{"id":"controls/SV-222407.rb","title":null,"controls":["SV-222407"]},{"id":"controls/SV-222408.rb","title":null,"controls":["SV-222408"]},{"id":"controls/SV-222409.rb","title":null,"controls":["SV-222409"]},{"id":"controls/SV-222410.rb","title":null,"controls":["SV-222410"]},{"id":"controls/SV-222411.rb","title":null,"controls":["SV-222411"]},{"id":"controls/SV-222412.rb","title":null,"controls":["SV-222412"]},{"id":"controls/SV-222413.rb","title":null,"controls":["SV-222413"]},{"id":"controls/SV-222414.rb","title":null,"controls":["SV-222414"]},{"id":"controls/SV-222415.rb","title":null,"controls":["SV-222415"]},{"id":"controls/SV-222416.rb","title":null,"controls":["SV-222416"]},{"id":"controls/SV-222417.rb","title":null,"controls":["SV-222417"]},{"id":"controls/SV-222418.rb","title":null,"controls":["SV-222418"]},{"id":"controls/SV-222419.rb","title":null,"controls":["SV-222419"]},{"id":"controls/SV-222420.rb","title":null,"controls":["SV-222420"]},{"id":"controls/SV-222421.rb","title":null,"controls":["SV-222421"]},{"id":"controls/SV-222422.rb","title":null,"controls":["SV-222422"]},{"id":"controls/SV-222423.rb","title":null,"controls":["SV-222423"]},{"id":"controls/SV-222424.rb","title":null,"controls":["SV-222424"]},{"id":"controls/SV-222425.rb","title":null,"controls":["SV-222425"]},{"id":"controls/SV-222426.rb","title":null,"controls":["SV-222426"]},{"id":"controls/SV-222427.rb","title":null,"controls":["SV-222427"]},{"id":"controls/SV-222428.rb","title":null,"controls":["SV-222428"]},{"id":"controls/SV-222429.rb","title":null,"controls":["SV-222429"]},{"id":"controls/SV-222430.rb","title":null,"controls":["SV-222430"]},{"id":"controls/SV-222431.rb","title":null,"controls":["SV-222431"]},{"id":"controls/SV-222432.rb","title":null,"controls":["SV-222432"]},{"id":"controls/SV-222433.rb","title":null,"controls":["SV-222433"]},{"id":"controls/SV-222434.rb","title":null,"controls":["SV-222434"]},{"id":"controls/SV-222435.rb","title":null,"controls":["SV-222435"]},{"id":"controls/SV-222436.rb","title":null,"controls":["SV-222436"]},{"id":"controls/SV-222437.rb","title":null,"controls":["SV-222437"]},{"id":"controls/SV-222438.rb","title":null,"controls":["SV-222438"]},{"id":"controls/SV-222439.rb","title":null,"controls":["SV-222439"]},{"id":"controls/SV-222441.rb","title":null,"controls":["SV-222441"]},{"id":"controls/SV-222442.rb","title":null,"controls":["SV-222442"]},{"id":"controls/SV-222443.rb","title":null,"controls":["SV-222443"]},{"id":"controls/SV-222444.rb","title":null,"controls":["SV-222444"]},{"id":"controls/SV-222445.rb","title":null,"controls":["SV-222445"]},{"id":"controls/SV-222446.rb","title":null,"controls":["SV-222446"]},{"id":"controls/SV-222447.rb","title":null,"controls":["SV-222447"]},{"id":"controls/SV-222448.rb","title":null,"controls":["SV-222448"]},{"id":"controls/SV-222449.rb","title":null,"controls":["SV-222449"]},{"id":"controls/SV-222450.rb","title":null,"controls":["SV-222450"]},{"id":"controls/SV-222451.rb","title":null,"controls":["SV-222451"]},{"id":"controls/SV-222452.rb","title":null,"controls":["SV-222452"]},{"id":"controls/SV-222453.rb","title":null,"controls":["SV-222453"]},{"id":"controls/SV-222454.rb","title":null,"controls":["SV-222454"]},{"id":"controls/SV-222455.rb","title":null,"controls":["SV-222455"]},{"id":"controls/SV-222456.rb","title":null,"controls":["SV-222456"]},{"id":"controls/SV-222457.rb","title":null,"controls":["SV-222457"]},{"id":"controls/SV-222458.rb","title":null,"controls":["SV-222458"]},{"id":"controls/SV-222459.rb","title":null,"controls":["SV-222459"]},{"id":"controls/SV-222460.rb","title":null,"controls":["SV-222460"]},{"id":"controls/SV-222461.rb","title":null,"controls":["SV-222461"]},{"id":"controls/SV-222462.rb","title":null,"controls":["SV-222462"]},{"id":"controls/SV-222463.rb","title":null,"controls":["SV-222463"]},{"id":"controls/SV-222464.rb","title":null,"controls":["SV-222464"]},{"id":"controls/SV-222465.rb","title":null,"controls":["SV-222465"]},{"id":"controls/SV-222466.rb","title":null,"controls":["SV-222466"]},{"id":"controls/SV-222467.rb","title":null,"controls":["SV-222467"]},{"id":"controls/SV-222468.rb","title":null,"controls":["SV-222468"]},{"id":"controls/SV-222469.rb","title":null,"controls":["SV-222469"]},{"id":"controls/SV-222470.rb","title":null,"controls":["SV-222470"]},{"id":"controls/SV-222471.rb","title":null,"controls":["SV-222471"]},{"id":"controls/SV-222472.rb","title":null,"controls":["SV-222472"]},{"id":"controls/SV-222473.rb","title":null,"controls":["SV-222473"]},{"id":"controls/SV-222474.rb","title":null,"controls":["SV-222474"]},{"id":"controls/SV-222475.rb","title":null,"controls":["SV-222475"]},{"id":"controls/SV-222476.rb","title":null,"controls":["SV-222476"]},{"id":"controls/SV-222477.rb","title":null,"controls":["SV-222477"]},{"id":"controls/SV-222478.rb","title":null,"controls":["SV-222478"]},{"id":"controls/SV-222479.rb","title":null,"controls":["SV-222479"]},{"id":"controls/SV-222480.rb","title":null,"controls":["SV-222480"]},{"id":"controls/SV-222481.rb","title":null,"controls":["SV-222481"]},{"id":"controls/SV-222482.rb","title":null,"controls":["SV-222482"]},{"id":"controls/SV-222483.rb","title":null,"controls":["SV-222483"]},{"id":"controls/SV-222484.rb","title":null,"controls":["SV-222484"]},{"id":"controls/SV-222485.rb","title":null,"controls":["SV-222485"]},{"id":"controls/SV-222486.rb","title":null,"controls":["SV-222486"]},{"id":"controls/SV-222487.rb","title":null,"controls":["SV-222487"]},{"id":"controls/SV-222488.rb","title":null,"controls":["SV-222488"]},{"id":"controls/SV-222489.rb","title":null,"controls":["SV-222489"]},{"id":"controls/SV-222490.rb","title":null,"controls":["SV-222490"]},{"id":"controls/SV-222491.rb","title":null,"controls":["SV-222491"]},{"id":"controls/SV-222492.rb","title":null,"controls":["SV-222492"]},{"id":"controls/SV-222493.rb","title":null,"controls":["SV-222493"]},{"id":"controls/SV-222494.rb","title":null,"controls":["SV-222494"]},{"id":"controls/SV-222495.rb","title":null,"controls":["SV-222495"]},{"id":"controls/SV-222496.rb","title":null,"controls":["SV-222496"]},{"id":"controls/SV-222497.rb","title":null,"controls":["SV-222497"]},{"id":"controls/SV-222498.rb","title":null,"controls":["SV-222498"]},{"id":"controls/SV-222499.rb","title":null,"controls":["SV-222499"]},{"id":"controls/SV-222500.rb","title":null,"controls":["SV-222500"]},{"id":"controls/SV-222501.rb","title":null,"controls":["SV-222501"]},{"id":"controls/SV-222502.rb","title":null,"controls":["SV-222502"]},{"id":"controls/SV-222503.rb","title":null,"controls":["SV-222503"]},{"id":"controls/SV-222504.rb","title":null,"controls":["SV-222504"]},{"id":"controls/SV-222505.rb","title":null,"controls":["SV-222505"]},{"id":"controls/SV-222506.rb","title":null,"controls":["SV-222506"]},{"id":"controls/SV-222507.rb","title":null,"controls":["SV-222507"]},{"id":"controls/SV-222508.rb","title":null,"controls":["SV-222508"]},{"id":"controls/SV-222509.rb","title":null,"controls":["SV-222509"]},{"id":"controls/SV-222510.rb","title":null,"controls":["SV-222510"]},{"id":"controls/SV-222511.rb","title":null,"controls":["SV-222511"]},{"id":"controls/SV-222512.rb","title":null,"controls":["SV-222512"]},{"id":"controls/SV-222513.rb","title":null,"controls":["SV-222513"]},{"id":"controls/SV-222514.rb","title":null,"controls":["SV-222514"]},{"id":"controls/SV-222515.rb","title":null,"controls":["SV-222515"]},{"id":"controls/SV-222516.rb","title":null,"controls":["SV-222516"]},{"id":"controls/SV-222517.rb","title":null,"controls":["SV-222517"]},{"id":"controls/SV-222518.rb","title":null,"controls":["SV-222518"]},{"id":"controls/SV-222519.rb","title":null,"controls":["SV-222519"]},{"id":"controls/SV-222520.rb","title":null,"controls":["SV-222520"]},{"id":"controls/SV-222521.rb","title":null,"controls":["SV-222521"]},{"id":"controls/SV-222522.rb","title":null,"controls":["SV-222522"]},{"id":"controls/SV-222523.rb","title":null,"controls":["SV-222523"]},{"id":"controls/SV-222524.rb","title":null,"controls":["SV-222524"]},{"id":"controls/SV-222525.rb","title":null,"controls":["SV-222525"]},{"id":"controls/SV-222526.rb","title":null,"controls":["SV-222526"]},{"id":"controls/SV-222527.rb","title":null,"controls":["SV-222527"]},{"id":"controls/SV-222528.rb","title":null,"controls":["SV-222528"]},{"id":"controls/SV-222529.rb","title":null,"controls":["SV-222529"]},{"id":"controls/SV-222530.rb","title":null,"controls":["SV-222530"]},{"id":"controls/SV-222531.rb","title":null,"controls":["SV-222531"]},{"id":"controls/SV-222532.rb","title":null,"controls":["SV-222532"]},{"id":"controls/SV-222533.rb","title":null,"controls":["SV-222533"]},{"id":"controls/SV-222534.rb","title":null,"controls":["SV-222534"]},{"id":"controls/SV-222535.rb","title":null,"controls":["SV-222535"]},{"id":"controls/SV-222536.rb","title":null,"controls":["SV-222536"]},{"id":"controls/SV-222537.rb","title":null,"controls":["SV-222537"]},{"id":"controls/SV-222538.rb","title":null,"controls":["SV-222538"]},{"id":"controls/SV-222539.rb","title":null,"controls":["SV-222539"]},{"id":"controls/SV-222540.rb","title":null,"controls":["SV-222540"]},{"id":"controls/SV-222541.rb","title":null,"controls":["SV-222541"]},{"id":"controls/SV-222542.rb","title":null,"controls":["SV-222542"]},{"id":"controls/SV-222543.rb","title":null,"controls":["SV-222543"]},{"id":"controls/SV-222544.rb","title":null,"controls":["SV-222544"]},{"id":"controls/SV-222545.rb","title":null,"controls":["SV-222545"]},{"id":"controls/SV-222546.rb","title":null,"controls":["SV-222546"]},{"id":"controls/SV-222547.rb","title":null,"controls":["SV-222547"]},{"id":"controls/SV-222548.rb","title":null,"controls":["SV-222548"]},{"id":"controls/SV-222549.rb","title":null,"controls":["SV-222549"]},{"id":"controls/SV-222550.rb","title":null,"controls":["SV-222550"]},{"id":"controls/SV-222551.rb","title":null,"controls":["SV-222551"]},{"id":"controls/SV-222552.rb","title":null,"controls":["SV-222552"]},{"id":"controls/SV-222553.rb","title":null,"controls":["SV-222553"]},{"id":"controls/SV-222554.rb","title":null,"controls":["SV-222554"]},{"id":"controls/SV-222555.rb","title":null,"controls":["SV-222555"]},{"id":"controls/SV-222556.rb","title":null,"controls":["SV-222556"]},{"id":"controls/SV-222557.rb","title":null,"controls":["SV-222557"]},{"id":"controls/SV-222558.rb","title":null,"controls":["SV-222558"]},{"id":"controls/SV-222559.rb","title":null,"controls":["SV-222559"]},{"id":"controls/SV-222560.rb","title":null,"controls":["SV-222560"]},{"id":"controls/SV-222561.rb","title":null,"controls":["SV-222561"]},{"id":"controls/SV-222562.rb","title":null,"controls":["SV-222562"]},{"id":"controls/SV-222563.rb","title":null,"controls":["SV-222563"]},{"id":"controls/SV-222564.rb","title":null,"controls":["SV-222564"]},{"id":"controls/SV-222565.rb","title":null,"controls":["SV-222565"]},{"id":"controls/SV-222566.rb","title":null,"controls":["SV-222566"]},{"id":"controls/SV-222567.rb","title":null,"controls":["SV-222567"]},{"id":"controls/SV-222568.rb","title":null,"controls":["SV-222568"]},{"id":"controls/SV-222570.rb","title":null,"controls":["SV-222570"]},{"id":"controls/SV-222571.rb","title":null,"controls":["SV-222571"]},{"id":"controls/SV-222572.rb","title":null,"controls":["SV-222572"]},{"id":"controls/SV-222573.rb","title":null,"controls":["SV-222573"]},{"id":"controls/SV-222574.rb","title":null,"controls":["SV-222574"]},{"id":"controls/SV-222575.rb","title":null,"controls":["SV-222575"]},{"id":"controls/SV-222576.rb","title":null,"controls":["SV-222576"]},{"id":"controls/SV-222577.rb","title":null,"controls":["SV-222577"]},{"id":"controls/SV-222578.rb","title":null,"controls":["SV-222578"]},{"id":"controls/SV-222579.rb","title":null,"controls":["SV-222579"]},{"id":"controls/SV-222580.rb","title":null,"controls":["SV-222580"]},{"id":"controls/SV-222581.rb","title":null,"controls":["SV-222581"]},{"id":"controls/SV-222582.rb","title":null,"controls":["SV-222582"]},{"id":"controls/SV-222583.rb","title":null,"controls":["SV-222583"]},{"id":"controls/SV-222584.rb","title":null,"controls":["SV-222584"]},{"id":"controls/SV-222585.rb","title":null,"controls":["SV-222585"]},{"id":"controls/SV-222586.rb","title":null,"controls":["SV-222586"]},{"id":"controls/SV-222587.rb","title":null,"controls":["SV-222587"]},{"id":"controls/SV-222588.rb","title":null,"controls":["SV-222588"]},{"id":"controls/SV-222589.rb","title":null,"controls":["SV-222589"]},{"id":"controls/SV-222590.rb","title":null,"controls":["SV-222590"]},{"id":"controls/SV-222591.rb","title":null,"controls":["SV-222591"]},{"id":"controls/SV-222592.rb","title":null,"controls":["SV-222592"]},{"id":"controls/SV-222593.rb","title":null,"controls":["SV-222593"]},{"id":"controls/SV-222594.rb","title":null,"controls":["SV-222594"]},{"id":"controls/SV-222595.rb","title":null,"controls":["SV-222595"]},{"id":"controls/SV-222596.rb","title":null,"controls":["SV-222596"]},{"id":"controls/SV-222597.rb","title":null,"controls":["SV-222597"]},{"id":"controls/SV-222598.rb","title":null,"controls":["SV-222598"]},{"id":"controls/SV-222599.rb","title":null,"controls":["SV-222599"]},{"id":"controls/SV-222600.rb","title":null,"controls":["SV-222600"]},{"id":"controls/SV-222601.rb","title":null,"controls":["SV-222601"]},{"id":"controls/SV-222602.rb","title":null,"controls":["SV-222602"]},{"id":"controls/SV-222603.rb","title":null,"controls":["SV-222603"]},{"id":"controls/SV-222604.rb","title":null,"controls":["SV-222604"]},{"id":"controls/SV-222605.rb","title":null,"controls":["SV-222605"]},{"id":"controls/SV-222606.rb","title":null,"controls":["SV-222606"]},{"id":"controls/SV-222607.rb","title":null,"controls":["SV-222607"]},{"id":"controls/SV-222608.rb","title":null,"controls":["SV-222608"]},{"id":"controls/SV-222609.rb","title":null,"controls":["SV-222609"]},{"id":"controls/SV-222610.rb","title":null,"controls":["SV-222610"]},{"id":"controls/SV-222611.rb","title":null,"controls":["SV-222611"]},{"id":"controls/SV-222612.rb","title":null,"controls":["SV-222612"]},{"id":"controls/SV-222613.rb","title":null,"controls":["SV-222613"]},{"id":"controls/SV-222614.rb","title":null,"controls":["SV-222614"]},{"id":"controls/SV-222615.rb","title":null,"controls":["SV-222615"]},{"id":"controls/SV-222616.rb","title":null,"controls":["SV-222616"]},{"id":"controls/SV-222617.rb","title":null,"controls":["SV-222617"]},{"id":"controls/SV-222618.rb","title":null,"controls":["SV-222618"]},{"id":"controls/SV-222619.rb","title":null,"controls":["SV-222619"]},{"id":"controls/SV-222620.rb","title":null,"controls":["SV-222620"]},{"id":"controls/SV-222621.rb","title":null,"controls":["SV-222621"]},{"id":"controls/SV-222622.rb","title":null,"controls":["SV-222622"]},{"id":"controls/SV-222623.rb","title":null,"controls":["SV-222623"]},{"id":"controls/SV-222624.rb","title":null,"controls":["SV-222624"]},{"id":"controls/SV-222625.rb","title":null,"controls":["SV-222625"]},{"id":"controls/SV-222626.rb","title":null,"controls":["SV-222626"]},{"id":"controls/SV-222627.rb","title":null,"controls":["SV-222627"]},{"id":"controls/SV-222628.rb","title":null,"controls":["SV-222628"]},{"id":"controls/SV-222629.rb","title":null,"controls":["SV-222629"]},{"id":"controls/SV-222630.rb","title":null,"controls":["SV-222630"]},{"id":"controls/SV-222631.rb","title":null,"controls":["SV-222631"]},{"id":"controls/SV-222632.rb","title":null,"controls":["SV-222632"]},{"id":"controls/SV-222633.rb","title":null,"controls":["SV-222633"]},{"id":"controls/SV-222634.rb","title":null,"controls":["SV-222634"]},{"id":"controls/SV-222635.rb","title":null,"controls":["SV-222635"]},{"id":"controls/SV-222636.rb","title":null,"controls":["SV-222636"]},{"id":"controls/SV-222637.rb","title":null,"controls":["SV-222637"]},{"id":"controls/SV-222638.rb","title":null,"controls":["SV-222638"]},{"id":"controls/SV-222639.rb","title":null,"controls":["SV-222639"]},{"id":"controls/SV-222640.rb","title":null,"controls":["SV-222640"]},{"id":"controls/SV-222641.rb","title":null,"controls":["SV-222641"]},{"id":"controls/SV-222642.rb","title":null,"controls":["SV-222642"]},{"id":"controls/SV-222643.rb","title":null,"controls":["SV-222643"]},{"id":"controls/SV-222644.rb","title":null,"controls":["SV-222644"]},{"id":"controls/SV-222645.rb","title":null,"controls":["SV-222645"]},{"id":"controls/SV-222646.rb","title":null,"controls":["SV-222646"]},{"id":"controls/SV-222647.rb","title":null,"controls":["SV-222647"]},{"id":"controls/SV-222648.rb","title":null,"controls":["SV-222648"]},{"id":"controls/SV-222649.rb","title":null,"controls":["SV-222649"]},{"id":"controls/SV-222650.rb","title":null,"controls":["SV-222650"]},{"id":"controls/SV-222651.rb","title":null,"controls":["SV-222651"]},{"id":"controls/SV-222652.rb","title":null,"controls":["SV-222652"]},{"id":"controls/SV-222653.rb","title":null,"controls":["SV-222653"]},{"id":"controls/SV-222654.rb","title":null,"controls":["SV-222654"]},{"id":"controls/SV-222655.rb","title":null,"controls":["SV-222655"]},{"id":"controls/SV-222656.rb","title":null,"controls":["SV-222656"]},{"id":"controls/SV-222657.rb","title":null,"controls":["SV-222657"]},{"id":"controls/SV-222658.rb","title":null,"controls":["SV-222658"]},{"id":"controls/SV-222659.rb","title":null,"controls":["SV-222659"]},{"id":"controls/SV-222660.rb","title":null,"controls":["SV-222660"]},{"id":"controls/SV-222661.rb","title":null,"controls":["SV-222661"]},{"id":"controls/SV-222662.rb","title":null,"controls":["SV-222662"]},{"id":"controls/SV-222663.rb","title":null,"controls":["SV-222663"]},{"id":"controls/SV-222664.rb","title":null,"controls":["SV-222664"]},{"id":"controls/SV-222665.rb","title":null,"controls":["SV-222665"]},{"id":"controls/SV-222666.rb","title":null,"controls":["SV-222666"]},{"id":"controls/SV-222667.rb","title":null,"controls":["SV-222667"]},{"id":"controls/SV-222668.rb","title":null,"controls":["SV-222668"]},{"id":"controls/SV-222669.rb","title":null,"controls":["SV-222669"]},{"id":"controls/SV-222670.rb","title":null,"controls":["SV-222670"]},{"id":"controls/SV-222671.rb","title":null,"controls":["SV-222671"]},{"id":"controls/SV-222672.rb","title":null,"controls":["SV-222672"]},{"id":"controls/SV-222673.rb","title":null,"controls":["SV-222673"]},{"id":"controls/SV-254803.rb","title":null,"controls":["SV-254803"]}],"name":"Application_Security_Development_STIG","title":null,"maintainer":null,"copyright":null,"copyright_email":null,"license":null,"summary":null,"description":null,"version":"1.0.0","supports":[],"depends":[],"inspec_version":null,"inputs":[],"sha256":"b1dd0359d61c4287c1dd4f78e34210278619e8e86a631de3335e1c3bf1b2c741","status_message":"","status":"loaded","generator":{"name":"inspec","version":"6.6.0"}}
