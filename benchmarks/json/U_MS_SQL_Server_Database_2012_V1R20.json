{"controls":[{"id":"SV-53265","code":"control 'SV-53265' do\n  title 'SQL Server must protect data at rest and ensure confidentiality and integrity of data.'\n  desc 'This control is intended to address the confidentiality and integrity of information at rest in non-mobile devices and covers user information and system information.  Information at rest refers to the state of information when it is located on a secondary storage device (e.g., disk drive, tape drive) within an organizational information system. Applications and application users generate information throughout the course of their application use.\n\nUser-generated data, as well as, application-specific configuration data, needs to be protected. Configurations and/or rule sets for firewalls, gateways, intrusion detection/prevention systems, filtering routers, and authenticator content are examples of system information likely requiring protection. Organizations may choose to employ different mechanisms to achieve confidentiality and integrity protections, as appropriate.\n\nIf the confidentiality and integrity of SQL Server data is not protected, the data will be open to compromise and unauthorized modification.\n\nProtective measures include encryption, physical security of the facility where the storage devices reside, operating system file permissions, and organizational controls.  Each of these should be applied as necessary and appropriate.'\n  desc 'check', \"If the application owner and Authorizing Official have determined that encryption of data at rest is NOT required, this is not a finding.\n\nIf the application owner and Authorizing Official have determined that encryption of data at rest is required, \nensure the data on secondary devices is encrypted. If full-disk encryption is being used, this is not a finding.\n\nIf DBMS data encryption is required, ensure the data is encrypted before being put on the secondary device by executing:\n\nSELECT \n\td.name AS [Database Name],\n\tCASE e.encryption_state \n\t\tWHEN 0 THEN 'No database encryption key present, no encryption' \n\t\tWHEN 1 THEN 'Unencrypted' \n\t\tWHEN 2 THEN 'Encryption in progress' \n\t\tWHEN 3 THEN 'Encrypted' \n\t\tWHEN 4 THEN 'Key change in progress' \n\t\tWHEN 5 THEN 'Decryption in progress' \n\t\tWHEN 6 THEN 'Protection change in progress' \n\tEND AS [Encryption State]\nFROM sys.dm_database_encryption_keys e \nRIGHT JOIN sys.databases d ON DB_NAME(e.database_id) = d.name \nWHERE d.name NOT IN ('master','model','msdb')\nORDER BY 1\n;\n\nFor each user database where encryption is required, verify that encryption is in effect. If not, this is a finding.\n\nVerify that there are physical security measures, operating system access control lists and organizational controls appropriate to the sensitivity level of the data in the database(s).  If not, this is a finding.\"\n  desc 'fix', 'Apply appropriate controls to protect the confidentiality and integrity of data on a secondary device. \n\nWhere encryption is required, this can be done by full-disk encryption or by database encryption. To enable database encryption, create a master key, create a database encryption key, and protect it by using mechanisms tied to the master key, and then set encryption on.\n\nImplement physical security measures, operating system access control lists and organizational controls appropriate to the sensitivity level of the data in the database(s).'\n  impact 0.5\n  ref 'DPMS Target SQL Server Database 2012'\n  tag check_id: 'C-47566r6_chk'\n  tag severity: 'medium'\n  tag gid: 'V-40911'\n  tag rid: 'SV-53265r5_rule'\n  tag stig_id: 'SQL2-00-021300'\n  tag gtitle: 'SRG-APP-000231-DB-000154'\n  tag fix_id: 'F-46193r3_fix'\n  tag 'documentable'\n  tag cci: ['CCI-001199']\n  tag nist: ['SC-28']\nend","source_location":{"line":1,"ref":"U_MS_SQL_Server_Database_2012_V1R20/controls/SV-53265.rb"},"title":"SQL Server must protect data at rest and ensure confidentiality and integrity of data.","desc":"This control is intended to address the confidentiality and integrity of information at rest in non-mobile devices and covers user information and system information.  Information at rest refers to the state of information when it is located on a secondary storage device (e.g., disk drive, tape drive) within an organizational information system. Applications and application users generate information throughout the course of their application use.\n\nUser-generated data, as well as, application-specific configuration data, needs to be protected. Configurations and/or rule sets for firewalls, gateways, intrusion detection/prevention systems, filtering routers, and authenticator content are examples of system information likely requiring protection. Organizations may choose to employ different mechanisms to achieve confidentiality and integrity protections, as appropriate.\n\nIf the confidentiality and integrity of SQL Server data is not protected, the data will be open to compromise and unauthorized modification.\n\nProtective measures include encryption, physical security of the facility where the storage devices reside, operating system file permissions, and organizational controls.  Each of these should be applied as necessary and appropriate.","descriptions":{"default":"This control is intended to address the confidentiality and integrity of information at rest in non-mobile devices and covers user information and system information.  Information at rest refers to the state of information when it is located on a secondary storage device (e.g., disk drive, tape drive) within an organizational information system. Applications and application users generate information throughout the course of their application use.\n\nUser-generated data, as well as, application-specific configuration data, needs to be protected. Configurations and/or rule sets for firewalls, gateways, intrusion detection/prevention systems, filtering routers, and authenticator content are examples of system information likely requiring protection. Organizations may choose to employ different mechanisms to achieve confidentiality and integrity protections, as appropriate.\n\nIf the confidentiality and integrity of SQL Server data is not protected, the data will be open to compromise and unauthorized modification.\n\nProtective measures include encryption, physical security of the facility where the storage devices reside, operating system file permissions, and organizational controls.  Each of these should be applied as necessary and appropriate.","check":"If the application owner and Authorizing Official have determined that encryption of data at rest is NOT required, this is not a finding.\n\nIf the application owner and Authorizing Official have determined that encryption of data at rest is required, \nensure the data on secondary devices is encrypted. If full-disk encryption is being used, this is not a finding.\n\nIf DBMS data encryption is required, ensure the data is encrypted before being put on the secondary device by executing:\n\nSELECT \n\td.name AS [Database Name],\n\tCASE e.encryption_state \n\t\tWHEN 0 THEN 'No database encryption key present, no encryption' \n\t\tWHEN 1 THEN 'Unencrypted' \n\t\tWHEN 2 THEN 'Encryption in progress' \n\t\tWHEN 3 THEN 'Encrypted' \n\t\tWHEN 4 THEN 'Key change in progress' \n\t\tWHEN 5 THEN 'Decryption in progress' \n\t\tWHEN 6 THEN 'Protection change in progress' \n\tEND AS [Encryption State]\nFROM sys.dm_database_encryption_keys e \nRIGHT JOIN sys.databases d ON DB_NAME(e.database_id) = d.name \nWHERE d.name NOT IN ('master','model','msdb')\nORDER BY 1\n;\n\nFor each user database where encryption is required, verify that encryption is in effect. If not, this is a finding.\n\nVerify that there are physical security measures, operating system access control lists and organizational controls appropriate to the sensitivity level of the data in the database(s).  If not, this is a finding.","fix":"Apply appropriate controls to protect the confidentiality and integrity of data on a secondary device. \n\nWhere encryption is required, this can be done by full-disk encryption or by database encryption. To enable database encryption, create a master key, create a database encryption key, and protect it by using mechanisms tied to the master key, and then set encryption on.\n\nImplement physical security measures, operating system access control lists and organizational controls appropriate to the sensitivity level of the data in the database(s)."},"impact":0.5,"refs":[{"ref":"DPMS Target SQL Server Database 2012"}],"tags":{"check_id":"C-47566r6_chk","severity":"medium","gid":"V-40911","rid":"SV-53265r5_rule","stig_id":"SQL2-00-021300","gtitle":"SRG-APP-000231-DB-000154","fix_id":"F-46193r3_fix","documentable":null,"cci":["CCI-001199"],"nist":["SC-28"]}},{"id":"SV-53912","code":"control 'SV-53912' do\n  title 'SQL Server must maintain and support organization-defined security labels on stored information.'\n  desc 'Security attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese attributes are typically associated with internal data structures (e.g., records, buffers, files) within the information system and are used to enable the implementation of access control and flow control policies; reflect special dissemination, handling, or distribution instructions; or support other aspects of the information security policy.\n\nOne example includes marking data as classified or FOUO. These security attributes may be assigned manually or during data processing but, either way, it is imperative these assignments are maintained while the data is in storage. If the security attributes are lost when the data is stored, there is the risk of a data compromise.\n\nThe sensitivity marking or labeling of stored data items promotes the correct handling and protection of data.  Without such notification, the user may unwittingly disclose sensitive data to unauthorized users.\n\n(Earlier releases of this STIG suggested using the SQL Server Label Security Toolkit, from codeplex.com.  However, codeplex.com has been shut down, and it is unclear whether the Toolkit is still supported.  If the organization does have access to the Toolkit, it may still be used, provided the organization accepts responsibility for its support.)'\n  desc 'check', 'Review system documentation to determine if the labeling of sensitive data is required under organization-defined guidelines.\nIf the labeling of sensitive data is not required, this is NA.\n\nObtain system configuration settings to determine how data labeling is being performed. This can be through triggers or some other SQL-developed means or via a third-party tool. Spot check data and ensure the appropriate labels have been applied to stored data.   \n\nIf the labeling of sensitive data is required and is not being performed, this is a finding.'\n  desc 'fix', 'Develop SQL or application code or acquire a third party tool to perform data labeling.'\n  impact 0.5\n  ref 'DPMS Target SQL Server Database 2012'\n  tag check_id: 'C-47925r2_chk'\n  tag severity: 'medium'\n  tag gid: 'V-41389'\n  tag rid: 'SV-53912r4_rule'\n  tag stig_id: 'SQL2-00-000300'\n  tag gtitle: 'SRG-APP-000006-DB-000183'\n  tag fix_id: 'F-46813r5_fix'\n  tag 'documentable'\n  tag cci: ['CCI-002262']\n  tag nist: ['AC-16 a']\nend","source_location":{"line":1,"ref":"U_MS_SQL_Server_Database_2012_V1R20/controls/SV-53912.rb"},"title":"SQL Server must maintain and support organization-defined security labels on stored information.","desc":"Security attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese attributes are typically associated with internal data structures (e.g., records, buffers, files) within the information system and are used to enable the implementation of access control and flow control policies; reflect special dissemination, handling, or distribution instructions; or support other aspects of the information security policy.\n\nOne example includes marking data as classified or FOUO. These security attributes may be assigned manually or during data processing but, either way, it is imperative these assignments are maintained while the data is in storage. If the security attributes are lost when the data is stored, there is the risk of a data compromise.\n\nThe sensitivity marking or labeling of stored data items promotes the correct handling and protection of data.  Without such notification, the user may unwittingly disclose sensitive data to unauthorized users.\n\n(Earlier releases of this STIG suggested using the SQL Server Label Security Toolkit, from codeplex.com.  However, codeplex.com has been shut down, and it is unclear whether the Toolkit is still supported.  If the organization does have access to the Toolkit, it may still be used, provided the organization accepts responsibility for its support.)","descriptions":{"default":"Security attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese attributes are typically associated with internal data structures (e.g., records, buffers, files) within the information system and are used to enable the implementation of access control and flow control policies; reflect special dissemination, handling, or distribution instructions; or support other aspects of the information security policy.\n\nOne example includes marking data as classified or FOUO. These security attributes may be assigned manually or during data processing but, either way, it is imperative these assignments are maintained while the data is in storage. If the security attributes are lost when the data is stored, there is the risk of a data compromise.\n\nThe sensitivity marking or labeling of stored data items promotes the correct handling and protection of data.  Without such notification, the user may unwittingly disclose sensitive data to unauthorized users.\n\n(Earlier releases of this STIG suggested using the SQL Server Label Security Toolkit, from codeplex.com.  However, codeplex.com has been shut down, and it is unclear whether the Toolkit is still supported.  If the organization does have access to the Toolkit, it may still be used, provided the organization accepts responsibility for its support.)","check":"Review system documentation to determine if the labeling of sensitive data is required under organization-defined guidelines.\nIf the labeling of sensitive data is not required, this is NA.\n\nObtain system configuration settings to determine how data labeling is being performed. This can be through triggers or some other SQL-developed means or via a third-party tool. Spot check data and ensure the appropriate labels have been applied to stored data.   \n\nIf the labeling of sensitive data is required and is not being performed, this is a finding.","fix":"Develop SQL or application code or acquire a third party tool to perform data labeling."},"impact":0.5,"refs":[{"ref":"DPMS Target SQL Server Database 2012"}],"tags":{"check_id":"C-47925r2_chk","severity":"medium","gid":"V-41389","rid":"SV-53912r4_rule","stig_id":"SQL2-00-000300","gtitle":"SRG-APP-000006-DB-000183","fix_id":"F-46813r5_fix","documentable":null,"cci":["CCI-002262"],"nist":["AC-16 a"]}},{"id":"SV-53914","code":"control 'SV-53914' do\n  title 'SQL Server must maintain and support organization-defined security labels on information in process.'\n  desc 'Security attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese attributes are typically associated with internal data structures (e.g., records, buffers, files) within the application and are used to enable the implementation of access control and flow control policies; reflect special dissemination, handling, or distribution instructions; or support other aspects of the information security policy.\n\nOrganizations define the security attributes of their data (e.g., classified, FOUO). Applications generating and/or processing data assigned these organization-defined security attributes must maintain the binding of these attributes to the data when the data is transmitted.\n\nIf the application does not maintain the data security attributes when it transmits the data, there is a risk of data compromise.\n\nThe sensitivity marking or labeling of data items promotes the correct handling and protection of data. Without such notification, the user may unwittingly disclose sensitive data to unauthorized users. Security labels must be correctly maintained throughout transmission.\n\n(Earlier releases of this STIG suggested using the SQL Server Label Security Toolkit, from codeplex.com.  However, codeplex.com has been shut down, and it is unclear whether the Toolkit is still supported.  If the organization does have access to the Toolkit, it may still be used, provided the organization accepts responsibility for its support.)'\n  desc 'check', 'Review system documentation to determine if the labeling of sensitive data is required under organization-defined guidelines.\n\nIf the labeling of sensitive data is not required, this is NA.\n\nObtain system configuration settings to determine how data labeling is being performed. This can be through triggers or some other SQL-developed means or via a third-party tool.  \n\nIf the labeling of sensitive information in process is not being performed, this is a finding.'\n  desc 'fix', 'Develop SQL or application code or acquire a third party tool to perform data labeling.'\n  impact 0.5\n  ref 'DPMS Target SQL Server Database 2012'\n  tag check_id: 'C-47926r3_chk'\n  tag severity: 'medium'\n  tag gid: 'V-41391'\n  tag rid: 'SV-53914r4_rule'\n  tag stig_id: 'SQL2-00-000400'\n  tag gtitle: 'SRG-APP-000007-DB-000184'\n  tag fix_id: 'F-46814r6_fix'\n  tag 'documentable'\n  tag cci: ['CCI-002263']\n  tag nist: ['AC-16 a']\nend","source_location":{"line":1,"ref":"U_MS_SQL_Server_Database_2012_V1R20/controls/SV-53914.rb"},"title":"SQL Server must maintain and support organization-defined security labels on information in process.","desc":"Security attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese attributes are typically associated with internal data structures (e.g., records, buffers, files) within the application and are used to enable the implementation of access control and flow control policies; reflect special dissemination, handling, or distribution instructions; or support other aspects of the information security policy.\n\nOrganizations define the security attributes of their data (e.g., classified, FOUO). Applications generating and/or processing data assigned these organization-defined security attributes must maintain the binding of these attributes to the data when the data is transmitted.\n\nIf the application does not maintain the data security attributes when it transmits the data, there is a risk of data compromise.\n\nThe sensitivity marking or labeling of data items promotes the correct handling and protection of data. Without such notification, the user may unwittingly disclose sensitive data to unauthorized users. Security labels must be correctly maintained throughout transmission.\n\n(Earlier releases of this STIG suggested using the SQL Server Label Security Toolkit, from codeplex.com.  However, codeplex.com has been shut down, and it is unclear whether the Toolkit is still supported.  If the organization does have access to the Toolkit, it may still be used, provided the organization accepts responsibility for its support.)","descriptions":{"default":"Security attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese attributes are typically associated with internal data structures (e.g., records, buffers, files) within the application and are used to enable the implementation of access control and flow control policies; reflect special dissemination, handling, or distribution instructions; or support other aspects of the information security policy.\n\nOrganizations define the security attributes of their data (e.g., classified, FOUO). Applications generating and/or processing data assigned these organization-defined security attributes must maintain the binding of these attributes to the data when the data is transmitted.\n\nIf the application does not maintain the data security attributes when it transmits the data, there is a risk of data compromise.\n\nThe sensitivity marking or labeling of data items promotes the correct handling and protection of data. Without such notification, the user may unwittingly disclose sensitive data to unauthorized users. Security labels must be correctly maintained throughout transmission.\n\n(Earlier releases of this STIG suggested using the SQL Server Label Security Toolkit, from codeplex.com.  However, codeplex.com has been shut down, and it is unclear whether the Toolkit is still supported.  If the organization does have access to the Toolkit, it may still be used, provided the organization accepts responsibility for its support.)","check":"Review system documentation to determine if the labeling of sensitive data is required under organization-defined guidelines.\n\nIf the labeling of sensitive data is not required, this is NA.\n\nObtain system configuration settings to determine how data labeling is being performed. This can be through triggers or some other SQL-developed means or via a third-party tool.  \n\nIf the labeling of sensitive information in process is not being performed, this is a finding.","fix":"Develop SQL or application code or acquire a third party tool to perform data labeling."},"impact":0.5,"refs":[{"ref":"DPMS Target SQL Server Database 2012"}],"tags":{"check_id":"C-47926r3_chk","severity":"medium","gid":"V-41391","rid":"SV-53914r4_rule","stig_id":"SQL2-00-000400","gtitle":"SRG-APP-000007-DB-000184","fix_id":"F-46814r6_fix","documentable":null,"cci":["CCI-002263"],"nist":["AC-16 a"]}},{"id":"SV-53916","code":"control 'SV-53916' do\n  title 'SQL Server must maintain and support organization-defined security labels on data in transmission.'\n  desc 'Security attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese attributes are typically associated with internal data structures (e.g., records, buffers, files) within the application and are used to enable the implementation of access control and flow control policies; reflect special dissemination, handling, or distribution instructions; or support other aspects of the information security policy.\n\nOrganizations define the security attributes of their data (e.g., classified, FOUO). Applications generating and/or processing data assigned these organization-defined security attributes must maintain the binding of these attributes to the data when the data is transmitted.\n\nIf the application does not maintain the data security attributes when it transmits the data, there is a risk of data compromise.\n\nThe sensitivity marking or labeling of data items promotes the correct handling and protection of data. Without such notification, the user may unwittingly disclose sensitive data to unauthorized users. Security labels must be correctly maintained throughout transmission.\n\n(Earlier releases of this STIG suggested using the SQL Server Label Security Toolkit, from codeplex.com.  However, codeplex.com has been shut down, and it is unclear whether the Toolkit is still supported.  If the organization does have access to the Toolkit, it may still be used, provided the organization accepts responsibility for its support.)'\n  desc 'check', 'Review system documentation to determine if the labeling of sensitive data is required under organization-defined guidelines.\nIf the labeling of sensitive data is not required, this is NA.\n\nObtain system configuration settings to determine how data labeling is being performed. This can be through triggers or some other SQL-developed means or via a third-party tool.  \n\nIf the labeling of sensitive data in transmission is not being performed, this is a finding.'\n  desc 'fix', 'Develop SQL or application code or acquire a third party tool to perform data labeling.'\n  impact 0.5\n  ref 'DPMS Target SQL Server Database 2012'\n  tag check_id: 'C-47928r3_chk'\n  tag severity: 'medium'\n  tag gid: 'V-41392'\n  tag rid: 'SV-53916r4_rule'\n  tag stig_id: 'SQL2-00-000500'\n  tag gtitle: 'SRG-APP-000008-DB-000185'\n  tag fix_id: 'F-46816r4_fix'\n  tag 'documentable'\n  tag cci: ['CCI-002264']\n  tag nist: ['AC-16 a']\nend","source_location":{"line":1,"ref":"U_MS_SQL_Server_Database_2012_V1R20/controls/SV-53916.rb"},"title":"SQL Server must maintain and support organization-defined security labels on data in transmission.","desc":"Security attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese attributes are typically associated with internal data structures (e.g., records, buffers, files) within the application and are used to enable the implementation of access control and flow control policies; reflect special dissemination, handling, or distribution instructions; or support other aspects of the information security policy.\n\nOrganizations define the security attributes of their data (e.g., classified, FOUO). Applications generating and/or processing data assigned these organization-defined security attributes must maintain the binding of these attributes to the data when the data is transmitted.\n\nIf the application does not maintain the data security attributes when it transmits the data, there is a risk of data compromise.\n\nThe sensitivity marking or labeling of data items promotes the correct handling and protection of data. Without such notification, the user may unwittingly disclose sensitive data to unauthorized users. Security labels must be correctly maintained throughout transmission.\n\n(Earlier releases of this STIG suggested using the SQL Server Label Security Toolkit, from codeplex.com.  However, codeplex.com has been shut down, and it is unclear whether the Toolkit is still supported.  If the organization does have access to the Toolkit, it may still be used, provided the organization accepts responsibility for its support.)","descriptions":{"default":"Security attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese attributes are typically associated with internal data structures (e.g., records, buffers, files) within the application and are used to enable the implementation of access control and flow control policies; reflect special dissemination, handling, or distribution instructions; or support other aspects of the information security policy.\n\nOrganizations define the security attributes of their data (e.g., classified, FOUO). Applications generating and/or processing data assigned these organization-defined security attributes must maintain the binding of these attributes to the data when the data is transmitted.\n\nIf the application does not maintain the data security attributes when it transmits the data, there is a risk of data compromise.\n\nThe sensitivity marking or labeling of data items promotes the correct handling and protection of data. Without such notification, the user may unwittingly disclose sensitive data to unauthorized users. Security labels must be correctly maintained throughout transmission.\n\n(Earlier releases of this STIG suggested using the SQL Server Label Security Toolkit, from codeplex.com.  However, codeplex.com has been shut down, and it is unclear whether the Toolkit is still supported.  If the organization does have access to the Toolkit, it may still be used, provided the organization accepts responsibility for its support.)","check":"Review system documentation to determine if the labeling of sensitive data is required under organization-defined guidelines.\nIf the labeling of sensitive data is not required, this is NA.\n\nObtain system configuration settings to determine how data labeling is being performed. This can be through triggers or some other SQL-developed means or via a third-party tool.  \n\nIf the labeling of sensitive data in transmission is not being performed, this is a finding.","fix":"Develop SQL or application code or acquire a third party tool to perform data labeling."},"impact":0.5,"refs":[{"ref":"DPMS Target SQL Server Database 2012"}],"tags":{"check_id":"C-47928r3_chk","severity":"medium","gid":"V-41392","rid":"SV-53916r4_rule","stig_id":"SQL2-00-000500","gtitle":"SRG-APP-000008-DB-000185","fix_id":"F-46816r4_fix","documentable":null,"cci":["CCI-002264"],"nist":["AC-16 a"]}},{"id":"SV-53917","code":"control 'SV-53917' do\n  title 'SQL Server must allow authorized users to associate security labels to information in the database.'\n  desc 'Security attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese attributes are typically associated with internal data structures (e.g., records, buffers, files) within the information system and are used to enable the implementation of access control and flow control policies; reflect special dissemination, handling, or distribution instructions, or support other aspects of the information security policy.\n\nExamples of application security attributes are classified, FOUO, sensitive, etc.\n\nThroughout the course of normal usage, authorized users of applications that handle sensitive data will have the need to associate security attributes with information. Applications that maintain the binding of organization-defined security attributes to data must ensure authorized users can associate security attributes with information. For databases, this is accomplished via labeling.'\n  desc 'check', 'Review system documentation to determine if the labeling of sensitive data is required under organization-defined guidelines.\nIf the labeling of sensitive data is not required, this is NA.\n\nObtain system configuration setting to determine how data labeling is being performed. This can be through triggers or some other SQL-developed means or via a third-party tool. Determine how authorized users associate security information to data. If authorized users are not able to associate security labels to data, this is a finding.'\n  desc 'fix', 'Develop SQL code or acquire a third party tool to perform data labeling. SQL Server Label Security Toolkit can be downloaded from http://www.codeplex.com. This tool can satisfy all data labeling and security data labeling requirements.'\n  impact 0.5\n  ref 'DPMS Target SQL Server Database 2012'\n  tag check_id: 'C-47929r2_chk'\n  tag severity: 'medium'\n  tag gid: 'V-41393'\n  tag rid: 'SV-53917r3_rule'\n  tag stig_id: 'SQL2-00-000900'\n  tag gtitle: 'SRG-APP-000012-DB-000192'\n  tag fix_id: 'F-46817r3_fix'\n  tag 'documentable'\n  tag cci: ['CCI-002289']\n  tag nist: ['AC-16 (4)']\nend","source_location":{"line":1,"ref":"U_MS_SQL_Server_Database_2012_V1R20/controls/SV-53917.rb"},"title":"SQL Server must allow authorized users to associate security labels to information in the database.","desc":"Security attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese attributes are typically associated with internal data structures (e.g., records, buffers, files) within the information system and are used to enable the implementation of access control and flow control policies; reflect special dissemination, handling, or distribution instructions, or support other aspects of the information security policy.\n\nExamples of application security attributes are classified, FOUO, sensitive, etc.\n\nThroughout the course of normal usage, authorized users of applications that handle sensitive data will have the need to associate security attributes with information. Applications that maintain the binding of organization-defined security attributes to data must ensure authorized users can associate security attributes with information. For databases, this is accomplished via labeling.","descriptions":{"default":"Security attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese attributes are typically associated with internal data structures (e.g., records, buffers, files) within the information system and are used to enable the implementation of access control and flow control policies; reflect special dissemination, handling, or distribution instructions, or support other aspects of the information security policy.\n\nExamples of application security attributes are classified, FOUO, sensitive, etc.\n\nThroughout the course of normal usage, authorized users of applications that handle sensitive data will have the need to associate security attributes with information. Applications that maintain the binding of organization-defined security attributes to data must ensure authorized users can associate security attributes with information. For databases, this is accomplished via labeling.","check":"Review system documentation to determine if the labeling of sensitive data is required under organization-defined guidelines.\nIf the labeling of sensitive data is not required, this is NA.\n\nObtain system configuration setting to determine how data labeling is being performed. This can be through triggers or some other SQL-developed means or via a third-party tool. Determine how authorized users associate security information to data. If authorized users are not able to associate security labels to data, this is a finding.","fix":"Develop SQL code or acquire a third party tool to perform data labeling. SQL Server Label Security Toolkit can be downloaded from http://www.codeplex.com. This tool can satisfy all data labeling and security data labeling requirements."},"impact":0.5,"refs":[{"ref":"DPMS Target SQL Server Database 2012"}],"tags":{"check_id":"C-47929r2_chk","severity":"medium","gid":"V-41393","rid":"SV-53917r3_rule","stig_id":"SQL2-00-000900","gtitle":"SRG-APP-000012-DB-000192","fix_id":"F-46817r3_fix","documentable":null,"cci":["CCI-002289"],"nist":["AC-16 (4)"]}},{"id":"SV-53918","code":"control 'SV-53918' do\n  title 'SQL Server utilizing Discretionary Access Control (DAC) must enforce a policy that limits propagation of access rights.'\n  desc 'Discretionary Access Control (DAC) is based on the premise that individual users are \"owners\" of objects and therefore have discretion over who should be authorized to access the object and in which mode (e.g., read or write). Ownership is usually acquired as a consequence of creating the object or via specified ownership assignment.\n\nDAC allows the owner to determine who will have access to objects they control. An example of DAC includes user-controlled file permissions. DAC models have the potential for the access controls to propagate without limit, resulting in unauthorized access to said objects.\n\nWhen applications provide a discretionary access control mechanism, the application must be able to limit the propagation of those access rights.\n\nThe DBMS must ensure the recipient of object permissions possesses only the access intended. The database must enforce the ability to limit unauthorized rights propagation. If propagation is not prevented, users can continue to grant rights to other users without limit.'\n  desc 'check', \"Check for rights propagation assignment to database permissions by running the following query:\n\nUSE <name of database being reviewed>;\nSELECT * \nFROM sys.database_permissions\nWHERE state_desc = 'GRANT_WITH_GRANT_OPTION';\n\nIf any of the permissions listed have not been documented and approved as requiring GRANT_WITH_GRANT_OPTION, this is a finding.\"\n  desc 'fix', 'Document and obtain approval for each GRANT_WITH_GRANT_OPTION that is required.\n\nCorrect each unapproved GRANT_WITH_GRANT_OPTION with REVOKE and GRANT statements of the form (replacing \"UPDATE\" with the actual permission at issue):\nREVOKE UPDATE ON SampleTable FROM SampleUserOrRole CASCADE;\nGRANT UPDATE ON SampleTable TO SampleRole;  -- Note, no WITH GRANT OPTION clause here.'\n  impact 0.5\n  ref 'DPMS Target SQL Server Database 2012'\n  tag check_id: 'C-47931r3_chk'\n  tag severity: 'medium'\n  tag gid: 'V-41394'\n  tag rid: 'SV-53918r3_rule'\n  tag stig_id: 'SQL2-00-011050'\n  tag gtitle: 'SRG-APP-000085-DB-000038'\n  tag fix_id: 'F-46818r4_fix'\n  tag cci: ['CCI-002165']\n  tag nist: ['AC-3 (4)']\nend","source_location":{"line":1,"ref":"U_MS_SQL_Server_Database_2012_V1R20/controls/SV-53918.rb"},"title":"SQL Server utilizing Discretionary Access Control (DAC) must enforce a policy that limits propagation of access rights.","desc":"Discretionary Access Control (DAC) is based on the premise that individual users are \"owners\" of objects and therefore have discretion over who should be authorized to access the object and in which mode (e.g., read or write). Ownership is usually acquired as a consequence of creating the object or via specified ownership assignment.\n\nDAC allows the owner to determine who will have access to objects they control. An example of DAC includes user-controlled file permissions. DAC models have the potential for the access controls to propagate without limit, resulting in unauthorized access to said objects.\n\nWhen applications provide a discretionary access control mechanism, the application must be able to limit the propagation of those access rights.\n\nThe DBMS must ensure the recipient of object permissions possesses only the access intended. The database must enforce the ability to limit unauthorized rights propagation. If propagation is not prevented, users can continue to grant rights to other users without limit.","descriptions":{"default":"Discretionary Access Control (DAC) is based on the premise that individual users are \"owners\" of objects and therefore have discretion over who should be authorized to access the object and in which mode (e.g., read or write). Ownership is usually acquired as a consequence of creating the object or via specified ownership assignment.\n\nDAC allows the owner to determine who will have access to objects they control. An example of DAC includes user-controlled file permissions. DAC models have the potential for the access controls to propagate without limit, resulting in unauthorized access to said objects.\n\nWhen applications provide a discretionary access control mechanism, the application must be able to limit the propagation of those access rights.\n\nThe DBMS must ensure the recipient of object permissions possesses only the access intended. The database must enforce the ability to limit unauthorized rights propagation. If propagation is not prevented, users can continue to grant rights to other users without limit.","check":"Check for rights propagation assignment to database permissions by running the following query:\n\nUSE <name of database being reviewed>;\nSELECT * \nFROM sys.database_permissions\nWHERE state_desc = 'GRANT_WITH_GRANT_OPTION';\n\nIf any of the permissions listed have not been documented and approved as requiring GRANT_WITH_GRANT_OPTION, this is a finding.","fix":"Document and obtain approval for each GRANT_WITH_GRANT_OPTION that is required.\n\nCorrect each unapproved GRANT_WITH_GRANT_OPTION with REVOKE and GRANT statements of the form (replacing \"UPDATE\" with the actual permission at issue):\nREVOKE UPDATE ON SampleTable FROM SampleUserOrRole CASCADE;\nGRANT UPDATE ON SampleTable TO SampleRole;  -- Note, no WITH GRANT OPTION clause here."},"impact":0.5,"refs":[{"ref":"DPMS Target SQL Server Database 2012"}],"tags":{"check_id":"C-47931r3_chk","severity":"medium","gid":"V-41394","rid":"SV-53918r3_rule","stig_id":"SQL2-00-011050","gtitle":"SRG-APP-000085-DB-000038","fix_id":"F-46818r4_fix","cci":["CCI-002165"],"nist":["AC-3 (4)"]}},{"id":"SV-53920","code":"control 'SV-53920' do\n  title 'SQL Server must be protected from unauthorized access by developers.'\n  desc 'Applications employ the concept of least privilege for specific duties and information systems (including specific functions, ports, protocols, and services). The concept of least privilege is also applied to information system processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and information system accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of information systems.\n\nDevelopers granted elevated database and/or operating system privileges on production databases can affect the operation and/or security of the database system. Operating system and database privileges assigned to developers on production systems should not be allowed.'\n  desc 'check', \"Check the list of SQL Server users against the list of developer accounts by running the following SQL Server query:\n\nSELECT name AS 'Account Name'\n     , create_date AS 'Account Create Date'\n     , LOGINPROPERTY(name, 'PasswordLastSetTime') AS 'Password Last Set on'\nFROM sys.server_principals\nWHERE NOT TYPE IN ('C', 'R', 'U') \nAND NOT name IN ('##MS_PolicyEventProcessingLogin##', '##MS_PolicyTsqlExecutionLogin##')\nAND sid <> CONVERT(VARBINARY(85), 0x01) -- no 'sa' account\nAND is_disabled <> 1\nORDER BY name; \n\nFor each developer account found on a production machine, verify if the developer account can change or alter database objects or data in the production database. If any developer account can change or alter database objects or data in a production database, this is a finding.\"\n  desc 'fix', \"Remove unnecessary developer accounts from SQL Server instances hosting only production databases, by running the following SQL script:\n\nUSE master\nDROP LOGIN <'account name'>\"\n  impact 0.5\n  ref 'DPMS Target SQL Server Database 2012'\n  tag check_id: 'C-47932r4_chk'\n  tag severity: 'medium'\n  tag gid: 'V-41395'\n  tag rid: 'SV-53920r4_rule'\n  tag stig_id: 'SQL2-00-009200'\n  tag gtitle: 'SRG-APP-000062-DB-000014'\n  tag fix_id: 'F-46820r3_fix'\n  tag 'documentable'\n  tag cci: ['CCI-002220']\n  tag nist: ['AC-5 b']\nend","source_location":{"line":1,"ref":"U_MS_SQL_Server_Database_2012_V1R20/controls/SV-53920.rb"},"title":"SQL Server must be protected from unauthorized access by developers.","desc":"Applications employ the concept of least privilege for specific duties and information systems (including specific functions, ports, protocols, and services). The concept of least privilege is also applied to information system processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and information system accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of information systems.\n\nDevelopers granted elevated database and/or operating system privileges on production databases can affect the operation and/or security of the database system. Operating system and database privileges assigned to developers on production systems should not be allowed.","descriptions":{"default":"Applications employ the concept of least privilege for specific duties and information systems (including specific functions, ports, protocols, and services). The concept of least privilege is also applied to information system processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and information system accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of information systems.\n\nDevelopers granted elevated database and/or operating system privileges on production databases can affect the operation and/or security of the database system. Operating system and database privileges assigned to developers on production systems should not be allowed.","check":"Check the list of SQL Server users against the list of developer accounts by running the following SQL Server query:\n\nSELECT name AS 'Account Name'\n     , create_date AS 'Account Create Date'\n     , LOGINPROPERTY(name, 'PasswordLastSetTime') AS 'Password Last Set on'\nFROM sys.server_principals\nWHERE NOT TYPE IN ('C', 'R', 'U') \nAND NOT name IN ('##MS_PolicyEventProcessingLogin##', '##MS_PolicyTsqlExecutionLogin##')\nAND sid <> CONVERT(VARBINARY(85), 0x01) -- no 'sa' account\nAND is_disabled <> 1\nORDER BY name; \n\nFor each developer account found on a production machine, verify if the developer account can change or alter database objects or data in the production database. If any developer account can change or alter database objects or data in a production database, this is a finding.","fix":"Remove unnecessary developer accounts from SQL Server instances hosting only production databases, by running the following SQL script:\n\nUSE master\nDROP LOGIN <'account name'>"},"impact":0.5,"refs":[{"ref":"DPMS Target SQL Server Database 2012"}],"tags":{"check_id":"C-47932r4_chk","severity":"medium","gid":"V-41395","rid":"SV-53920r4_rule","stig_id":"SQL2-00-009200","gtitle":"SRG-APP-000062-DB-000014","fix_id":"F-46820r3_fix","documentable":null,"cci":["CCI-002220"],"nist":["AC-5 b"]}},{"id":"SV-53921","code":"control 'SV-53921' do\n  title 'SQL Server must be protected from unauthorized access by developers on shared production/development host systems.'\n  desc 'Applications employ the concept of least privilege for specific duties and information systems (including specific functions, ports, protocols, and services). The concept of least privilege is also applied to information system processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and information system accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of information systems.\n\nDevelopers granted elevated database and/or operating system privileges on systems that support both development and production databases can affect the operation and/or security of the production database system. Operating system and database privileges assigned to developers on shared development and production systems must be restricted.'\n  desc 'check', \"Identify whether SQL Server contains both development and production databases from the system documentation.\n\nIf SQL Server is not hosting both production and development databases, this is NA.\n\n\nIf SQL Server is hosting both development and production databases, but this is not clearly documented in the system documentation, this is a finding.\nCheck the list of SQL Server users against the list of developer accounts by running the following SQL Server query:\n\nSELECT name AS 'Account Name'\n     , create_date AS 'Account Create Date'\n     , LOGINPROPERTY(name, 'PasswordLastSetTime') AS 'Password Last Set on'\n  FROM sys.server_principals\n WHERE NOT TYPE IN ('C', 'R', 'U') -- ('C', 'G', 'K', 'R', 'S', 'U')\n  AND NOT name IN ('##MS_PolicyEventProcessingLogin##', '##MS_PolicyTsqlExecutionLogin##')\n  AND sid <> CONVERT(VARBINARY(85), 0x01) -- no 'sa' account\n  AND is_disabled <> 1\n ORDER BY name\n\n\nIf no developer user account is listed, this is not a finding.\n\nCheck each developer user account privilege listed above.\n\nNavigate to SQL Server Management Studio >> Object Explorer >> <'SQL Server name'> >> Security >> Logins >> right click <'developer account name'> >> Properties >> User >> Securables.\n\nIf any item in the 'Permission' listing, for each highlighted item that exists in the 'Securables' listing, grants production privileges, this is a finding.\n\nNavigate from 'Securables' to 'Server Roles'.\n\nIf any 'Server roles' are checked that grant production privileges, this is a finding.\n\nNavigate from 'Server Roles' to 'Users mapped to the login'.\n\nIf any checked 'Database role membership' of each highlighted and checked 'Database' are determined to be granting production privileges, this is a finding.\"\n  desc 'fix', \"Within the system documentation, clearly identify if SQL Server is hosting both development and production databases.\n\nRestrict developer privileges to production objects to only objects and data where those privileges are required and authorized by running the following scripts as needed:\n\nRemove the user from direct access to server permission by running the following script:\nUSE master\nREVOKE <'server permission name'> TO <'account name'> CASCADE\n\nRemove the user from user-defined role access by running the following script:\nUSE master\nALTER SERVER ROLE [<'server role name'>] DROP MEMBER <'user name'>\n\nRemove permissions from developer user accounts that grant permissions beyond the development database.\n\nNavigate to SQL Server Management Studio >> Object Explorer >> <'SQL Server name'> >> Security >> Logins >> right click <'administrator account name'> >> Properties >> User >> Securables.\n\nRemove 'Securables' permissions from accounts that are beyond what is required.\n\nNavigate from 'Securables' to 'Server Roles'.\n\nRemove 'Server Roles' permissions from accounts that are beyond what is required.\n\nNavigate from 'Server Roles' to 'Users mapped to the login'.\n\nRemove 'Users mapped to the login' permissions from accounts that are beyond what is required.\"\n  impact 0.5\n  ref 'DPMS Target SQL Server Database 2012'\n  tag check_id: 'C-47933r2_chk'\n  tag severity: 'medium'\n  tag gid: 'V-41396'\n  tag rid: 'SV-53921r2_rule'\n  tag stig_id: 'SQL2-00-009300'\n  tag gtitle: 'SRG-APP-000062-DB-000015'\n  tag fix_id: 'F-46821r2_fix'\n  tag 'documentable'\n  tag cci: ['CCI-002220']\n  tag nist: ['AC-5 b']\nend","source_location":{"line":1,"ref":"U_MS_SQL_Server_Database_2012_V1R20/controls/SV-53921.rb"},"title":"SQL Server must be protected from unauthorized access by developers on shared production/development host systems.","desc":"Applications employ the concept of least privilege for specific duties and information systems (including specific functions, ports, protocols, and services). The concept of least privilege is also applied to information system processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and information system accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of information systems.\n\nDevelopers granted elevated database and/or operating system privileges on systems that support both development and production databases can affect the operation and/or security of the production database system. Operating system and database privileges assigned to developers on shared development and production systems must be restricted.","descriptions":{"default":"Applications employ the concept of least privilege for specific duties and information systems (including specific functions, ports, protocols, and services). The concept of least privilege is also applied to information system processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and information system accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of information systems.\n\nDevelopers granted elevated database and/or operating system privileges on systems that support both development and production databases can affect the operation and/or security of the production database system. Operating system and database privileges assigned to developers on shared development and production systems must be restricted.","check":"Identify whether SQL Server contains both development and production databases from the system documentation.\n\nIf SQL Server is not hosting both production and development databases, this is NA.\n\n\nIf SQL Server is hosting both development and production databases, but this is not clearly documented in the system documentation, this is a finding.\nCheck the list of SQL Server users against the list of developer accounts by running the following SQL Server query:\n\nSELECT name AS 'Account Name'\n     , create_date AS 'Account Create Date'\n     , LOGINPROPERTY(name, 'PasswordLastSetTime') AS 'Password Last Set on'\n  FROM sys.server_principals\n WHERE NOT TYPE IN ('C', 'R', 'U') -- ('C', 'G', 'K', 'R', 'S', 'U')\n  AND NOT name IN ('##MS_PolicyEventProcessingLogin##', '##MS_PolicyTsqlExecutionLogin##')\n  AND sid <> CONVERT(VARBINARY(85), 0x01) -- no 'sa' account\n  AND is_disabled <> 1\n ORDER BY name\n\n\nIf no developer user account is listed, this is not a finding.\n\nCheck each developer user account privilege listed above.\n\nNavigate to SQL Server Management Studio >> Object Explorer >> <'SQL Server name'> >> Security >> Logins >> right click <'developer account name'> >> Properties >> User >> Securables.\n\nIf any item in the 'Permission' listing, for each highlighted item that exists in the 'Securables' listing, grants production privileges, this is a finding.\n\nNavigate from 'Securables' to 'Server Roles'.\n\nIf any 'Server roles' are checked that grant production privileges, this is a finding.\n\nNavigate from 'Server Roles' to 'Users mapped to the login'.\n\nIf any checked 'Database role membership' of each highlighted and checked 'Database' are determined to be granting production privileges, this is a finding.","fix":"Within the system documentation, clearly identify if SQL Server is hosting both development and production databases.\n\nRestrict developer privileges to production objects to only objects and data where those privileges are required and authorized by running the following scripts as needed:\n\nRemove the user from direct access to server permission by running the following script:\nUSE master\nREVOKE <'server permission name'> TO <'account name'> CASCADE\n\nRemove the user from user-defined role access by running the following script:\nUSE master\nALTER SERVER ROLE [<'server role name'>] DROP MEMBER <'user name'>\n\nRemove permissions from developer user accounts that grant permissions beyond the development database.\n\nNavigate to SQL Server Management Studio >> Object Explorer >> <'SQL Server name'> >> Security >> Logins >> right click <'administrator account name'> >> Properties >> User >> Securables.\n\nRemove 'Securables' permissions from accounts that are beyond what is required.\n\nNavigate from 'Securables' to 'Server Roles'.\n\nRemove 'Server Roles' permissions from accounts that are beyond what is required.\n\nNavigate from 'Server Roles' to 'Users mapped to the login'.\n\nRemove 'Users mapped to the login' permissions from accounts that are beyond what is required."},"impact":0.5,"refs":[{"ref":"DPMS Target SQL Server Database 2012"}],"tags":{"check_id":"C-47933r2_chk","severity":"medium","gid":"V-41396","rid":"SV-53921r2_rule","stig_id":"SQL2-00-009300","gtitle":"SRG-APP-000062-DB-000015","fix_id":"F-46821r2_fix","documentable":null,"cci":["CCI-002220"],"nist":["AC-5 b"]}},{"id":"SV-53922","code":"control 'SV-53922' do\n  title 'Administrative privileges, built-in server roles and built-in database roles must be assigned to the DBMS login accounts that require them via custom roles, and not directly.'\n  desc 'SQL Server must employ the concept of least privilege for specific duties and information systems (including specific functions, ports, protocols, and services). The concept of least privilege is also applied to information system processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and information system accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of information systems.\n\nPrivileges granted outside the role of the application user job function are more likely to go unmanaged or without oversight for authorization. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.\n\nSQL Server built-in administrative privileges, built-in server roles and built-in database roles must not be assigned directly to administrative user accounts (that is, server logins and database users). If administrative user accounts have direct access to administrative roles, this access must be removed, with the exception of administrative roles that the DBMS assigns to the special database principal [dbo], and will not allow to be altered.\n\nThe built-in server role \"sysadmin\" is a partial exception. This cannot be granted to a user-defined role, only to a login account. Most (not necessarily all) database administrators will need to be members of sysadmin. Without this, most DBCC commands and the system stored procedures/functions listed below are unavailable. The users who require such access must be documented and approved.'\n  desc 'check', %q(Check administrative accounts for direct database role membership:\n\nNavigate to SQL Server Management Studio >> Object Explorer >> <'SQL Server name'> >> Security >> Logins >> right click <'administrator account name'> >> Properties >> User Mapping >> <'highlight database'> >> review 'Database role membership' for each database.\n\nIf any administration accounts have a direct privilege to any 'Database role membership' that is part of the SQL Server system, this is a finding.\n\nCheck administrative accounts for direct server role membership:\n\nNavigate to SQL Server Management Studio >> Object Explorer >> <'SQL Server name'> >> Security >> Logins >> right click <'administrator account name'> >> Properties >> Server Roles.\n\nIf any administration accounts have direct access to any 'Server roles' privilege that is part of the SQL Server system, this is a finding.\n\nThe special database principal [dbo] is an exception.  It is mapped to the server login that is the database owner.  Some roles cannot be mapped to it or unmapped from it.  These role assignments are not a finding.\n\nThe built-in server role \"sysadmin\" is a partial exception.  See the Vulnerability Discussion.)\n  desc 'fix', %q(Navigate to SQL Server Management Studio >> Object Explorer >> <'SQL Server name'> >> Security >> Logins >> right click <'administrator account name'> >> Properties >> User Mapping >> <'highlight the database'> >> review 'Database role membership' each database.\n\nRemove 'Database role membership' by clicking the appropriate check box.\n\nNavigate to SQL Server Management Studio >> Object Explorer >> <'SQL Server name'> >> Security >> Logins >> right click <'administrator account name'> >> Properties >> Server Roles.\n\nRemove 'Server roles' by clicking the appropriate check box.\n\nThe special database principal [dbo] is an exception.  It is mapped to the server login that is the database owner.  Some roles cannot be mapped to it or unmapped from it.\n\nThe built-in server role \"sysadmin\" is a partial exception.  See the Vulnerability Discussion.)\n  impact 0.5\n  ref 'DPMS Target SQL Server Database 2012'\n  tag check_id: 'C-47934r9_chk'\n  tag severity: 'medium'\n  tag gid: 'V-41397'\n  tag rid: 'SV-53922r5_rule'\n  tag stig_id: 'SQL2-00-009500'\n  tag gtitle: 'SRG-APP-000062-DB-000034'\n  tag fix_id: 'F-46822r5_fix'\n  tag cci: ['CCI-002220']\n  tag nist: ['AC-5 b']\nend","source_location":{"line":1,"ref":"U_MS_SQL_Server_Database_2012_V1R20/controls/SV-53922.rb"},"title":"Administrative privileges, built-in server roles and built-in database roles must be assigned to the DBMS login accounts that require them via custom roles, and not directly.","desc":"SQL Server must employ the concept of least privilege for specific duties and information systems (including specific functions, ports, protocols, and services). The concept of least privilege is also applied to information system processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and information system accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of information systems.\n\nPrivileges granted outside the role of the application user job function are more likely to go unmanaged or without oversight for authorization. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.\n\nSQL Server built-in administrative privileges, built-in server roles and built-in database roles must not be assigned directly to administrative user accounts (that is, server logins and database users). If administrative user accounts have direct access to administrative roles, this access must be removed, with the exception of administrative roles that the DBMS assigns to the special database principal [dbo], and will not allow to be altered.\n\nThe built-in server role \"sysadmin\" is a partial exception. This cannot be granted to a user-defined role, only to a login account. Most (not necessarily all) database administrators will need to be members of sysadmin. Without this, most DBCC commands and the system stored procedures/functions listed below are unavailable. The users who require such access must be documented and approved.","descriptions":{"default":"SQL Server must employ the concept of least privilege for specific duties and information systems (including specific functions, ports, protocols, and services). The concept of least privilege is also applied to information system processes, ensuring that the processes operate at privilege levels no higher than necessary to accomplish required organizational missions and/or functions. Organizations consider the creation of additional processes, roles, and information system accounts as necessary to achieve least privilege. Organizations also apply least privilege concepts to the design, development, implementation, and operations of information systems.\n\nPrivileges granted outside the role of the application user job function are more likely to go unmanaged or without oversight for authorization. Maintenance of privileges using roles defined for discrete job functions offers improved oversight of application user privilege assignments and helps to protect against unauthorized privilege assignment.\n\nSQL Server built-in administrative privileges, built-in server roles and built-in database roles must not be assigned directly to administrative user accounts (that is, server logins and database users). If administrative user accounts have direct access to administrative roles, this access must be removed, with the exception of administrative roles that the DBMS assigns to the special database principal [dbo], and will not allow to be altered.\n\nThe built-in server role \"sysadmin\" is a partial exception. This cannot be granted to a user-defined role, only to a login account. Most (not necessarily all) database administrators will need to be members of sysadmin. Without this, most DBCC commands and the system stored procedures/functions listed below are unavailable. The users who require such access must be documented and approved.","check":"Check administrative accounts for direct database role membership:\n\nNavigate to SQL Server Management Studio >> Object Explorer >> <'SQL Server name'> >> Security >> Logins >> right click <'administrator account name'> >> Properties >> User Mapping >> <'highlight database'> >> review 'Database role membership' for each database.\n\nIf any administration accounts have a direct privilege to any 'Database role membership' that is part of the SQL Server system, this is a finding.\n\nCheck administrative accounts for direct server role membership:\n\nNavigate to SQL Server Management Studio >> Object Explorer >> <'SQL Server name'> >> Security >> Logins >> right click <'administrator account name'> >> Properties >> Server Roles.\n\nIf any administration accounts have direct access to any 'Server roles' privilege that is part of the SQL Server system, this is a finding.\n\nThe special database principal [dbo] is an exception.  It is mapped to the server login that is the database owner.  Some roles cannot be mapped to it or unmapped from it.  These role assignments are not a finding.\n\nThe built-in server role \"sysadmin\" is a partial exception.  See the Vulnerability Discussion.","fix":"Navigate to SQL Server Management Studio >> Object Explorer >> <'SQL Server name'> >> Security >> Logins >> right click <'administrator account name'> >> Properties >> User Mapping >> <'highlight the database'> >> review 'Database role membership' each database.\n\nRemove 'Database role membership' by clicking the appropriate check box.\n\nNavigate to SQL Server Management Studio >> Object Explorer >> <'SQL Server name'> >> Security >> Logins >> right click <'administrator account name'> >> Properties >> Server Roles.\n\nRemove 'Server roles' by clicking the appropriate check box.\n\nThe special database principal [dbo] is an exception.  It is mapped to the server login that is the database owner.  Some roles cannot be mapped to it or unmapped from it.\n\nThe built-in server role \"sysadmin\" is a partial exception.  See the Vulnerability Discussion."},"impact":0.5,"refs":[{"ref":"DPMS Target SQL Server Database 2012"}],"tags":{"check_id":"C-47934r9_chk","severity":"medium","gid":"V-41397","rid":"SV-53922r5_rule","stig_id":"SQL2-00-009500","gtitle":"SRG-APP-000062-DB-000034","fix_id":"F-46822r5_fix","cci":["CCI-002220"],"nist":["AC-5 b"]}},{"id":"SV-53925","code":"control 'SV-53925' do\n  title 'SQL Server job/batch queues must be reviewed regularly to detect unauthorized SQL Server job submissions.'\n  desc 'When dealing with unauthorized SQL Server job submissions, it should be noted any unauthorized job submissions to SQL Server job/batch queues can potentially have significant effects on the overall security of the system.\n\nIf SQL Server were to allow any user to make SQL Server job/batch queue submissions, then those submissions might lead to a compromise of system integrity and/or data. This requirement is contingent upon the SQL Server job/batch queue being review regularly for unauthorized submissions.\n\nAccordingly, only qualified and authorized individuals shall be allowed to obtain access to submit SQL Server jobs. Job/batch queue submissions must adhere to an organization-defined job submission process. \n\nUnmanaged changes that occur to SQL Server job/batch queues can lead to a compromised system.'\n  desc 'check', 'Check system documentation for procedures that are regularly implemented in an effort to detect unauthorized SQL Server job submissions.\n\nIf procedures that are regularly implemented are not documented in the system documentation, this is a finding.\n\nIf the procedures are not implemented regularly or do not detect for unauthorized SQL Server job submissions, this is a finding.\n\nReview Stored Procedures that are able to automatically execute jobs scheduled to start automatically at system startup by running the following query:\nSELECT name\n  FROM master.sys.procedures\n WHERE is_auto_executed = 1\n\nIf any Stored Procedures listed are not documented as authorized, this is a finding.  \n\nReview the SQL Server job history by running the following query:\n\nSELECT *   FROM msdb.dbo.sysjobhistory \n\n\nIf any jobs listed are not documented as authorized, this is a finding.'\n  desc 'fix', 'Document procedures, within the system documentation, that detect for unauthorized SQL Server job submissions.\n\nDevelop and implement procedures to detect for unauthorized SQL Server job submissions of Stored Procedures that are automatically executed and Agent jobs that are enabled.'\n  impact 0.5\n  ref 'DPMS Target SQL Server Database 2012'\n  tag check_id: 'C-47937r2_chk'\n  tag severity: 'medium'\n  tag gid: 'V-41399'\n  tag rid: 'SV-53925r2_rule'\n  tag stig_id: 'SQL2-00-023500'\n  tag gtitle: 'SRG-APP-999999-DB-000209'\n  tag fix_id: 'F-46825r2_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000366']\n  tag nist: ['CM-6 b']\nend","source_location":{"line":1,"ref":"U_MS_SQL_Server_Database_2012_V1R20/controls/SV-53925.rb"},"title":"SQL Server job/batch queues must be reviewed regularly to detect unauthorized SQL Server job submissions.","desc":"When dealing with unauthorized SQL Server job submissions, it should be noted any unauthorized job submissions to SQL Server job/batch queues can potentially have significant effects on the overall security of the system.\n\nIf SQL Server were to allow any user to make SQL Server job/batch queue submissions, then those submissions might lead to a compromise of system integrity and/or data. This requirement is contingent upon the SQL Server job/batch queue being review regularly for unauthorized submissions.\n\nAccordingly, only qualified and authorized individuals shall be allowed to obtain access to submit SQL Server jobs. Job/batch queue submissions must adhere to an organization-defined job submission process. \n\nUnmanaged changes that occur to SQL Server job/batch queues can lead to a compromised system.","descriptions":{"default":"When dealing with unauthorized SQL Server job submissions, it should be noted any unauthorized job submissions to SQL Server job/batch queues can potentially have significant effects on the overall security of the system.\n\nIf SQL Server were to allow any user to make SQL Server job/batch queue submissions, then those submissions might lead to a compromise of system integrity and/or data. This requirement is contingent upon the SQL Server job/batch queue being review regularly for unauthorized submissions.\n\nAccordingly, only qualified and authorized individuals shall be allowed to obtain access to submit SQL Server jobs. Job/batch queue submissions must adhere to an organization-defined job submission process. \n\nUnmanaged changes that occur to SQL Server job/batch queues can lead to a compromised system.","check":"Check system documentation for procedures that are regularly implemented in an effort to detect unauthorized SQL Server job submissions.\n\nIf procedures that are regularly implemented are not documented in the system documentation, this is a finding.\n\nIf the procedures are not implemented regularly or do not detect for unauthorized SQL Server job submissions, this is a finding.\n\nReview Stored Procedures that are able to automatically execute jobs scheduled to start automatically at system startup by running the following query:\nSELECT name\n  FROM master.sys.procedures\n WHERE is_auto_executed = 1\n\nIf any Stored Procedures listed are not documented as authorized, this is a finding.  \n\nReview the SQL Server job history by running the following query:\n\nSELECT *   FROM msdb.dbo.sysjobhistory \n\n\nIf any jobs listed are not documented as authorized, this is a finding.","fix":"Document procedures, within the system documentation, that detect for unauthorized SQL Server job submissions.\n\nDevelop and implement procedures to detect for unauthorized SQL Server job submissions of Stored Procedures that are automatically executed and Agent jobs that are enabled."},"impact":0.5,"refs":[{"ref":"DPMS Target SQL Server Database 2012"}],"tags":{"check_id":"C-47937r2_chk","severity":"medium","gid":"V-41399","rid":"SV-53925r2_rule","stig_id":"SQL2-00-023500","gtitle":"SRG-APP-999999-DB-000209","fix_id":"F-46825r2_fix","documentable":null,"cci":["CCI-000366"],"nist":["CM-6 b"]}},{"id":"SV-53928","code":"control 'SV-53928' do\n  title 'SQL Server must provide audit record generation capability for organization-defined auditable events within the database.'\n  desc 'Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.\n\nThe list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.\n\nOrganizations define which application components shall provide auditable events. \n\nThe DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system.'\n  desc 'check', 'Check to see that all required events are being audited.\nFrom the query prompt:\n     SELECT DISTINCT traceid FROM sys.fn_trace_getinfo(0);\nAll currently defined traces for the SQL server instance will be listed. If no traces are returned, this is a finding.\n\nDetermine the trace(s) being used for the auditing requirement. \nIn the following, replace # with a trace ID being used for the auditing requirements.\nFrom the query prompt:\n     SELECT DISTINCT(eventid) FROM sys.fn_trace_geteventinfo(#);\nThe following required event IDs should be listed:\n     14, 15, 18, 20, \n     102, 103, 104, 105, 106, 107, 108, 109, 110, \n     111, 112, 113, 115, 116, 117, 118, \n     128, 129, 130, \n     131, 132, 133, 134, 135, \n     152, 153, \n     170, 171, 172, 173, 175, 176, 177, 178.\nIf any of the audit event IDs required above is not listed, this is a finding.\n\nNotes:\n1. It is acceptable to have the required event IDs spread across multiple traces, provided all of the traces are always active, and the event IDs are grouped in a logical manner.\n2. It is acceptable, from an auditing point of view, to include the same event IDs in multiple traces.  However, the effect of this redundancy on performance, storage, and the consolidation of audit logs into a central repository, should be taken into account.\n3. It is acceptable to trace additional event IDs. This is the minimum list.\n4. Once this check is satisfied, the DBA may find it useful to disable or modify the default trace that is set up by the SQL Server installation process. (Note that the Fix does NOT include code to do this.)  \nUse the following query to obtain a list of all event IDs, and their meaning:\n     SELECT * FROM sys.trace_events; \n5. Because this check procedure is designed to address multiple requirements/vulnerabilities, it may appear to exceed the needs of some individual requirements.  However, it does represent the aggregate of all such requirements.\n6. Microsoft has flagged the trace techniques and tools used in this Check and Fix as deprecated.  They will be removed at some point after SQL Server 2014.  The replacement feature is Extended Events.  If Extended Events are in use, and cover all the required audit events listed above, this is not a finding.'\n  desc 'fix', 'Create a trace that meets all auditing requirements.\n\nThe script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events.'\n  impact 0.5\n  ref 'DPMS Target SQL Server Database 2012'\n  tag check_id: 'C-47940r7_chk'\n  tag severity: 'medium'\n  tag gid: 'V-41402'\n  tag rid: 'SV-53928r4_rule'\n  tag stig_id: 'SQL2-00-011200'\n  tag gtitle: 'SRG-APP-000089-DB-000064'\n  tag fix_id: 'F-46828r6_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000169']\n  tag nist: ['AU-12 a']\nend","source_location":{"line":1,"ref":"U_MS_SQL_Server_Database_2012_V1R20/controls/SV-53928.rb"},"title":"SQL Server must provide audit record generation capability for organization-defined auditable events within the database.","desc":"Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.\n\nThe list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.\n\nOrganizations define which application components shall provide auditable events. \n\nThe DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system.","descriptions":{"default":"Audit records can be generated from various components within the information system (e.g., network interface, hard disk, modem, etc.). From an application perspective, certain specific application functionalities may be audited as well.\n\nThe list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.  Examples are auditable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, file names involved, and access control or flow control rules invoked.\n\nOrganizations define which application components shall provide auditable events. \n\nThe DBMS must provide auditing for the list of events defined by the organization or risk negatively impacting forensic investigations into malicious behavior in the information system.","check":"Check to see that all required events are being audited.\nFrom the query prompt:\n     SELECT DISTINCT traceid FROM sys.fn_trace_getinfo(0);\nAll currently defined traces for the SQL server instance will be listed. If no traces are returned, this is a finding.\n\nDetermine the trace(s) being used for the auditing requirement. \nIn the following, replace # with a trace ID being used for the auditing requirements.\nFrom the query prompt:\n     SELECT DISTINCT(eventid) FROM sys.fn_trace_geteventinfo(#);\nThe following required event IDs should be listed:\n     14, 15, 18, 20, \n     102, 103, 104, 105, 106, 107, 108, 109, 110, \n     111, 112, 113, 115, 116, 117, 118, \n     128, 129, 130, \n     131, 132, 133, 134, 135, \n     152, 153, \n     170, 171, 172, 173, 175, 176, 177, 178.\nIf any of the audit event IDs required above is not listed, this is a finding.\n\nNotes:\n1. It is acceptable to have the required event IDs spread across multiple traces, provided all of the traces are always active, and the event IDs are grouped in a logical manner.\n2. It is acceptable, from an auditing point of view, to include the same event IDs in multiple traces.  However, the effect of this redundancy on performance, storage, and the consolidation of audit logs into a central repository, should be taken into account.\n3. It is acceptable to trace additional event IDs. This is the minimum list.\n4. Once this check is satisfied, the DBA may find it useful to disable or modify the default trace that is set up by the SQL Server installation process. (Note that the Fix does NOT include code to do this.)  \nUse the following query to obtain a list of all event IDs, and their meaning:\n     SELECT * FROM sys.trace_events; \n5. Because this check procedure is designed to address multiple requirements/vulnerabilities, it may appear to exceed the needs of some individual requirements.  However, it does represent the aggregate of all such requirements.\n6. Microsoft has flagged the trace techniques and tools used in this Check and Fix as deprecated.  They will be removed at some point after SQL Server 2014.  The replacement feature is Extended Events.  If Extended Events are in use, and cover all the required audit events listed above, this is not a finding.","fix":"Create a trace that meets all auditing requirements.\n\nThe script provided in the supplemental file, Trace.sql, can be used to do this; edit it as necessary to capture any additional, locally defined events."},"impact":0.5,"refs":[{"ref":"DPMS Target SQL Server Database 2012"}],"tags":{"check_id":"C-47940r7_chk","severity":"medium","gid":"V-41402","rid":"SV-53928r4_rule","stig_id":"SQL2-00-011200","gtitle":"SRG-APP-000089-DB-000064","fix_id":"F-46828r6_fix","documentable":null,"cci":["CCI-000169"],"nist":["AU-12 a"]}},{"id":"SV-53930","code":"control 'SV-53930' do\n  title 'SQL Server must be monitored to discover unauthorized changes to functions.'\n  desc 'When dealing with change control issues, it should be noted, any changes to the hardware, software, and/or firmware components of SQL Server and/or application can potentially have significant effects on the overall security of the system.\n\nIf SQL Server were to allow any user to make changes to software libraries, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.\n\nThis requirement is contingent upon the language in which the application is programmed, as many application architectures in use today incorporate their software libraries into, and make them inseparable from, their compiled distributions, rendering them static and version-dependent. However, this requirement does apply to applications with software libraries accessible and configurable, as in the case of interpreted languages.\n\nAccordingly, only qualified and authorized individuals shall be allowed to obtain access to SQL Server components for purposes of initiating changes, including upgrades and modifications.\n\nUnmanaged changes that occur to the SQL Server software libraries or configuration, such as Functions, can lead to unauthorized or compromised installations.'\n  desc 'check', \"Check the SQL Server configuration for a timed job that automatically checks all system and user-defined Functions for being modified by running the following SQL Server query:\nEXEC msdb.dbo.sp_help_job  @job_name = '<enter . . . job name>';\n\n(Alternatively, in SQL Server Management Studio, navigate to SQL Server Agent and examine the job from there.)\n\nIf a timed job or some other method is not implemented to check for Functions being modified, this is a finding.\"\n  desc 'fix', 'Configure a SQL Server timed job that automatically checks all system and user-defined Functions for being modified. \n\n(The supplemental file Track.sql, provided with this STIG, can be used to establish a monitoring job.  This should be supplemented with a process for informing the appropriate personnel.  Other techniques for achieving the same ends, such as the use of DDL triggers, are acceptable.)'\n  impact 0.5\n  ref 'DPMS Target SQL Server Database 2012'\n  tag check_id: 'C-47941r3_chk'\n  tag severity: 'medium'\n  tag gid: 'V-41403'\n  tag rid: 'SV-53930r4_rule'\n  tag stig_id: 'SQL2-00-014900'\n  tag gtitle: 'SRG-APP-000133-DB-000179'\n  tag fix_id: 'F-46831r2_fix'\n  tag cci: ['CCI-001499']\n  tag nist: ['CM-5 (6)']\nend","source_location":{"line":1,"ref":"U_MS_SQL_Server_Database_2012_V1R20/controls/SV-53930.rb"},"title":"SQL Server must be monitored to discover unauthorized changes to functions.","desc":"When dealing with change control issues, it should be noted, any changes to the hardware, software, and/or firmware components of SQL Server and/or application can potentially have significant effects on the overall security of the system.\n\nIf SQL Server were to allow any user to make changes to software libraries, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.\n\nThis requirement is contingent upon the language in which the application is programmed, as many application architectures in use today incorporate their software libraries into, and make them inseparable from, their compiled distributions, rendering them static and version-dependent. However, this requirement does apply to applications with software libraries accessible and configurable, as in the case of interpreted languages.\n\nAccordingly, only qualified and authorized individuals shall be allowed to obtain access to SQL Server components for purposes of initiating changes, including upgrades and modifications.\n\nUnmanaged changes that occur to the SQL Server software libraries or configuration, such as Functions, can lead to unauthorized or compromised installations.","descriptions":{"default":"When dealing with change control issues, it should be noted, any changes to the hardware, software, and/or firmware components of SQL Server and/or application can potentially have significant effects on the overall security of the system.\n\nIf SQL Server were to allow any user to make changes to software libraries, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.\n\nThis requirement is contingent upon the language in which the application is programmed, as many application architectures in use today incorporate their software libraries into, and make them inseparable from, their compiled distributions, rendering them static and version-dependent. However, this requirement does apply to applications with software libraries accessible and configurable, as in the case of interpreted languages.\n\nAccordingly, only qualified and authorized individuals shall be allowed to obtain access to SQL Server components for purposes of initiating changes, including upgrades and modifications.\n\nUnmanaged changes that occur to the SQL Server software libraries or configuration, such as Functions, can lead to unauthorized or compromised installations.","check":"Check the SQL Server configuration for a timed job that automatically checks all system and user-defined Functions for being modified by running the following SQL Server query:\nEXEC msdb.dbo.sp_help_job  @job_name = '<enter . . . job name>';\n\n(Alternatively, in SQL Server Management Studio, navigate to SQL Server Agent and examine the job from there.)\n\nIf a timed job or some other method is not implemented to check for Functions being modified, this is a finding.","fix":"Configure a SQL Server timed job that automatically checks all system and user-defined Functions for being modified. \n\n(The supplemental file Track.sql, provided with this STIG, can be used to establish a monitoring job.  This should be supplemented with a process for informing the appropriate personnel.  Other techniques for achieving the same ends, such as the use of DDL triggers, are acceptable.)"},"impact":0.5,"refs":[{"ref":"DPMS Target SQL Server Database 2012"}],"tags":{"check_id":"C-47941r3_chk","severity":"medium","gid":"V-41403","rid":"SV-53930r4_rule","stig_id":"SQL2-00-014900","gtitle":"SRG-APP-000133-DB-000179","fix_id":"F-46831r2_fix","cci":["CCI-001499"],"nist":["CM-5 (6)"]}},{"id":"SV-53931","code":"control 'SV-53931' do\n  title 'SQL Server must be monitored to discover unauthorized changes to triggers.'\n  desc 'When dealing with change control issues, it should be noted, any changes to the hardware, software, and/or firmware components of SQL Server and/or application can potentially have significant effects on the overall security of the system.\n\nIf SQL Server were to allow any user to make changes to software libraries, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.\n\nThis requirement is contingent upon the language in which the application is programmed, as many application architectures in use today incorporate their software libraries into, and make them inseparable from, their compiled distributions, rendering them static and version-dependent. However, this requirement does apply to applications with software libraries accessible and configurable, as in the case of interpreted languages.\n\nAccordingly, only qualified and authorized individuals shall be allowed to obtain access to SQL Server components for purposes of initiating changes, including upgrades and modifications.\n\nUnmanaged changes that occur to the SQL Server software libraries or configuration, such as Triggers, can lead to unauthorized or compromised installations.'\n  desc 'check', \"Check the SQL Server configuration for the timed job that automatically checks all system and user-defined Triggers for being modified by running the following SQL Server query:\nEXEC msdb.dbo.sp_help_job  @job_name = '<enter . . . job name>';\n\n(Alternatively, in SQL Server Management Studio, navigate to SQL Server Agent and examine the job from there.)\n\nIf such a job, or an alternative method of monitoring triggers for modification, does not exist, this is a finding.\"\n  desc 'fix', 'Configure a SQL Server timed job that automatically checks all system and user-defined Triggers for modification.\n\n(The supplemental file Track.sql, provided with this STIG, can be used to establish a monitoring job.  This should be supplemented with a process for informing the appropriate personnel.  Other techniques for achieving the same ends, such as the use of DDL triggers, are acceptable.)'\n  impact 0.5\n  ref 'DPMS Target SQL Server Database 2012'\n  tag check_id: 'C-47942r3_chk'\n  tag severity: 'medium'\n  tag gid: 'V-41404'\n  tag rid: 'SV-53931r4_rule'\n  tag stig_id: 'SQL2-00-015100'\n  tag gtitle: 'SRG-APP-000133-DB-000179'\n  tag fix_id: 'F-46832r2_fix'\n  tag 'documentable'\n  tag cci: ['CCI-001499']\n  tag nist: ['CM-5 (6)']\nend","source_location":{"line":1,"ref":"U_MS_SQL_Server_Database_2012_V1R20/controls/SV-53931.rb"},"title":"SQL Server must be monitored to discover unauthorized changes to triggers.","desc":"When dealing with change control issues, it should be noted, any changes to the hardware, software, and/or firmware components of SQL Server and/or application can potentially have significant effects on the overall security of the system.\n\nIf SQL Server were to allow any user to make changes to software libraries, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.\n\nThis requirement is contingent upon the language in which the application is programmed, as many application architectures in use today incorporate their software libraries into, and make them inseparable from, their compiled distributions, rendering them static and version-dependent. However, this requirement does apply to applications with software libraries accessible and configurable, as in the case of interpreted languages.\n\nAccordingly, only qualified and authorized individuals shall be allowed to obtain access to SQL Server components for purposes of initiating changes, including upgrades and modifications.\n\nUnmanaged changes that occur to the SQL Server software libraries or configuration, such as Triggers, can lead to unauthorized or compromised installations.","descriptions":{"default":"When dealing with change control issues, it should be noted, any changes to the hardware, software, and/or firmware components of SQL Server and/or application can potentially have significant effects on the overall security of the system.\n\nIf SQL Server were to allow any user to make changes to software libraries, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.\n\nThis requirement is contingent upon the language in which the application is programmed, as many application architectures in use today incorporate their software libraries into, and make them inseparable from, their compiled distributions, rendering them static and version-dependent. However, this requirement does apply to applications with software libraries accessible and configurable, as in the case of interpreted languages.\n\nAccordingly, only qualified and authorized individuals shall be allowed to obtain access to SQL Server components for purposes of initiating changes, including upgrades and modifications.\n\nUnmanaged changes that occur to the SQL Server software libraries or configuration, such as Triggers, can lead to unauthorized or compromised installations.","check":"Check the SQL Server configuration for the timed job that automatically checks all system and user-defined Triggers for being modified by running the following SQL Server query:\nEXEC msdb.dbo.sp_help_job  @job_name = '<enter . . . job name>';\n\n(Alternatively, in SQL Server Management Studio, navigate to SQL Server Agent and examine the job from there.)\n\nIf such a job, or an alternative method of monitoring triggers for modification, does not exist, this is a finding.","fix":"Configure a SQL Server timed job that automatically checks all system and user-defined Triggers for modification.\n\n(The supplemental file Track.sql, provided with this STIG, can be used to establish a monitoring job.  This should be supplemented with a process for informing the appropriate personnel.  Other techniques for achieving the same ends, such as the use of DDL triggers, are acceptable.)"},"impact":0.5,"refs":[{"ref":"DPMS Target SQL Server Database 2012"}],"tags":{"check_id":"C-47942r3_chk","severity":"medium","gid":"V-41404","rid":"SV-53931r4_rule","stig_id":"SQL2-00-015100","gtitle":"SRG-APP-000133-DB-000179","fix_id":"F-46832r2_fix","documentable":null,"cci":["CCI-001499"],"nist":["CM-5 (6)"]}},{"id":"SV-53933","code":"control 'SV-53933' do\n  title 'SQL Server must be monitored to discover unauthorized changes to stored procedures.'\n  desc 'When dealing with change control issues, it should be noted, any changes to the hardware, software, and/or firmware components of SQL Server and/or application can potentially have significant effects on the overall security of the system.\n\nIf SQL Server were to allow any user to make changes to software libraries, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.\n\nThis requirement is contingent upon the language in which the application is programmed, as many application architectures in use today incorporate their software libraries into, and make them inseparable from, their compiled distributions, rendering them static and version-dependent. However, this requirement does apply to applications with software libraries accessible and configurable, as in the case of interpreted languages.\n\nAccordingly, only qualified and authorized individuals shall be allowed to obtain access to SQL Server components for purposes of initiating changes, including upgrades and modifications.\n\nUnmanaged changes that occur to the SQL Server software libraries or configuration, such as Stored Procedures, can lead to unauthorized or compromised installations.'\n  desc 'check', \"Check for the existence of a job to monitor for changes to stored procedures:\nEXEC msdb.dbo.sp_help_job  @job_name = '<enter . . . job name>';\n\n(Alternatively, in SQL Server Management Studio, navigate to SQL Server Agent and examine the job from there.)\n\nIf such a job, or an alternative method of monitoring stored procedures for modification, does not exist, this is a finding.\"\n  desc 'fix', 'Configure a SQL Server timed job that automatically checks all system and user-defined Stored Procedures for modification.  \n\n(The supplemental file Track.sql, provided with this STIG, can be used to establish a monitoring job.  This should be supplemented with a process for informing the appropriate personnel.  Other techniques for achieving the same ends, such as the use of DDL triggers, are acceptable.)'\n  impact 0.5\n  ref 'DPMS Target SQL Server Database 2012'\n  tag check_id: 'C-47943r5_chk'\n  tag severity: 'medium'\n  tag gid: 'V-41406'\n  tag rid: 'SV-53933r4_rule'\n  tag stig_id: 'SQL2-00-015200'\n  tag gtitle: 'SRG-APP-000133-DB-000179'\n  tag fix_id: 'F-46833r2_fix'\n  tag 'documentable'\n  tag cci: ['CCI-001499']\n  tag nist: ['CM-5 (6)']\nend","source_location":{"line":1,"ref":"U_MS_SQL_Server_Database_2012_V1R20/controls/SV-53933.rb"},"title":"SQL Server must be monitored to discover unauthorized changes to stored procedures.","desc":"When dealing with change control issues, it should be noted, any changes to the hardware, software, and/or firmware components of SQL Server and/or application can potentially have significant effects on the overall security of the system.\n\nIf SQL Server were to allow any user to make changes to software libraries, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.\n\nThis requirement is contingent upon the language in which the application is programmed, as many application architectures in use today incorporate their software libraries into, and make them inseparable from, their compiled distributions, rendering them static and version-dependent. However, this requirement does apply to applications with software libraries accessible and configurable, as in the case of interpreted languages.\n\nAccordingly, only qualified and authorized individuals shall be allowed to obtain access to SQL Server components for purposes of initiating changes, including upgrades and modifications.\n\nUnmanaged changes that occur to the SQL Server software libraries or configuration, such as Stored Procedures, can lead to unauthorized or compromised installations.","descriptions":{"default":"When dealing with change control issues, it should be noted, any changes to the hardware, software, and/or firmware components of SQL Server and/or application can potentially have significant effects on the overall security of the system.\n\nIf SQL Server were to allow any user to make changes to software libraries, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.\n\nThis requirement is contingent upon the language in which the application is programmed, as many application architectures in use today incorporate their software libraries into, and make them inseparable from, their compiled distributions, rendering them static and version-dependent. However, this requirement does apply to applications with software libraries accessible and configurable, as in the case of interpreted languages.\n\nAccordingly, only qualified and authorized individuals shall be allowed to obtain access to SQL Server components for purposes of initiating changes, including upgrades and modifications.\n\nUnmanaged changes that occur to the SQL Server software libraries or configuration, such as Stored Procedures, can lead to unauthorized or compromised installations.","check":"Check for the existence of a job to monitor for changes to stored procedures:\nEXEC msdb.dbo.sp_help_job  @job_name = '<enter . . . job name>';\n\n(Alternatively, in SQL Server Management Studio, navigate to SQL Server Agent and examine the job from there.)\n\nIf such a job, or an alternative method of monitoring stored procedures for modification, does not exist, this is a finding.","fix":"Configure a SQL Server timed job that automatically checks all system and user-defined Stored Procedures for modification.  \n\n(The supplemental file Track.sql, provided with this STIG, can be used to establish a monitoring job.  This should be supplemented with a process for informing the appropriate personnel.  Other techniques for achieving the same ends, such as the use of DDL triggers, are acceptable.)"},"impact":0.5,"refs":[{"ref":"DPMS Target SQL Server Database 2012"}],"tags":{"check_id":"C-47943r5_chk","severity":"medium","gid":"V-41406","rid":"SV-53933r4_rule","stig_id":"SQL2-00-015200","gtitle":"SRG-APP-000133-DB-000179","fix_id":"F-46833r2_fix","documentable":null,"cci":["CCI-001499"],"nist":["CM-5 (6)"]}},{"id":"SV-53935","code":"control 'SV-53935' do\n  title 'Database objects must be owned by accounts authorized for ownership.'\n  desc 'SQL Server database ownership is a higher level privilege that grants full rights to everything in that database, including the right to grant privileges to others. SQL Server requires that the owner of a database object be a user, and only one user can be the assigned owner of a database object. This tends to minimize the risk that multiple users could gain unauthorized access, except the one individual who is the owner.\n\nWithin the database, object ownership implies full privileges to the owned object, including the privilege to assign access to the owned objects to other subjects. Unmanaged or uncontrolled ownership of databases can lead to unauthorized granting of privileges and database alterations.'\n  desc 'check', \"Review system documentation to identify SQL Server accounts authorized to own database objects.\n\nIf the SQL Server database ownership list does not exist or needs to be updated, this is a finding.\n\nRun the following SQL query to determine SQL Server ownership of all database objects:\nSELECT name AS 'Database name'\n     , SUSER_SNAME(owner_sid) AS 'Database Owner'\n     , state_desc AS 'Database state'\n  FROM sys.databases\"\n  desc 'fix', %q(Add and/or update system documentation to include any accounts authorized for object ownership and remove any account not authorized.\n\nReassign database ownership to authorized database owner account:\nNavigate to SQL Server Management Studio >> Object Explorer >> <'SQL Server name'> >> Databases >> right click <'database name'> >> Properties >> Files.\nSelect new database \"Owner\":\nNavigate to click on […] >> Select new Database Owner >> Browse… >> click on box to indicate account >> <'OK'> >> <'OK'> >> <'OK'>)\n  impact 0.5\n  ref 'DPMS Target SQL Server Database 2012'\n  tag check_id: 'C-47945r2_chk'\n  tag severity: 'medium'\n  tag gid: 'V-41407'\n  tag rid: 'SV-53935r2_rule'\n  tag stig_id: 'SQL2-00-015600'\n  tag gtitle: 'SRG-APP-000133-DB-000200'\n  tag fix_id: 'F-46835r2_fix'\n  tag 'documentable'\n  tag cci: ['CCI-001499']\n  tag nist: ['CM-5 (6)']\nend","source_location":{"line":1,"ref":"U_MS_SQL_Server_Database_2012_V1R20/controls/SV-53935.rb"},"title":"Database objects must be owned by accounts authorized for ownership.","desc":"SQL Server database ownership is a higher level privilege that grants full rights to everything in that database, including the right to grant privileges to others. SQL Server requires that the owner of a database object be a user, and only one user can be the assigned owner of a database object. This tends to minimize the risk that multiple users could gain unauthorized access, except the one individual who is the owner.\n\nWithin the database, object ownership implies full privileges to the owned object, including the privilege to assign access to the owned objects to other subjects. Unmanaged or uncontrolled ownership of databases can lead to unauthorized granting of privileges and database alterations.","descriptions":{"default":"SQL Server database ownership is a higher level privilege that grants full rights to everything in that database, including the right to grant privileges to others. SQL Server requires that the owner of a database object be a user, and only one user can be the assigned owner of a database object. This tends to minimize the risk that multiple users could gain unauthorized access, except the one individual who is the owner.\n\nWithin the database, object ownership implies full privileges to the owned object, including the privilege to assign access to the owned objects to other subjects. Unmanaged or uncontrolled ownership of databases can lead to unauthorized granting of privileges and database alterations.","check":"Review system documentation to identify SQL Server accounts authorized to own database objects.\n\nIf the SQL Server database ownership list does not exist or needs to be updated, this is a finding.\n\nRun the following SQL query to determine SQL Server ownership of all database objects:\nSELECT name AS 'Database name'\n     , SUSER_SNAME(owner_sid) AS 'Database Owner'\n     , state_desc AS 'Database state'\n  FROM sys.databases","fix":"Add and/or update system documentation to include any accounts authorized for object ownership and remove any account not authorized.\n\nReassign database ownership to authorized database owner account:\nNavigate to SQL Server Management Studio >> Object Explorer >> <'SQL Server name'> >> Databases >> right click <'database name'> >> Properties >> Files.\nSelect new database \"Owner\":\nNavigate to click on […] >> Select new Database Owner >> Browse… >> click on box to indicate account >> <'OK'> >> <'OK'> >> <'OK'>"},"impact":0.5,"refs":[{"ref":"DPMS Target SQL Server Database 2012"}],"tags":{"check_id":"C-47945r2_chk","severity":"medium","gid":"V-41407","rid":"SV-53935r2_rule","stig_id":"SQL2-00-015600","gtitle":"SRG-APP-000133-DB-000200","fix_id":"F-46835r2_fix","documentable":null,"cci":["CCI-001499"],"nist":["CM-5 (6)"]}},{"id":"SV-53937","code":"control 'SV-53937' do\n  title 'Unused database components and database objects must be removed.'\n  desc 'Information systems are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).\n\nIt is detrimental for applications to provide or install by default, functionality exceeding requirements or mission objectives. Examples include, but are not limited to, installing advertising software demonstrations or browser plug-ins not related to requirements or providing a wide array of functionality not required for every mission, yet cannot be disabled.\n\nApplications must adhere to the principles of least functionality by providing only essential capabilities.\n\nUnused and unnecessary SQL Server components increase the number of available attack vectors to SQL Server by introducing additional targets for attack. By minimizing the services and applications installed on the system, the number of potential vulnerabilities is reduced.'\n  desc 'check', 'Review the list of components or optional features installed with SQL Server.\nIf optional features or components are NOT installed, this is not a finding.\n\nIf unused components or features of SQL Server are installed, then review the system documentation to verify unused components or features are documented and authorized.\n\nIf any are not documented and authorized, this is a finding.'\n  desc 'fix', 'If any database components or objects of SQL Server are required for operation of applications that will be accessing SQL Server data or configuration, include them in the system documentation. If any unused components or objects of SQL Server are installed, uninstall or remove unused components or objects.'\n  impact 0.5\n  ref 'DPMS Target SQL Server Database 2012'\n  tag check_id: 'C-47946r3_chk'\n  tag severity: 'medium'\n  tag gid: 'V-41409'\n  tag rid: 'SV-53937r3_rule'\n  tag stig_id: 'SQL2-00-016900'\n  tag gtitle: 'SRG-APP-000141-DB-000091'\n  tag fix_id: 'F-46837r2_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000381']\n  tag nist: ['CM-7 a']\nend","source_location":{"line":1,"ref":"U_MS_SQL_Server_Database_2012_V1R20/controls/SV-53937.rb"},"title":"Unused database components and database objects must be removed.","desc":"Information systems are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).\n\nIt is detrimental for applications to provide or install by default, functionality exceeding requirements or mission objectives. Examples include, but are not limited to, installing advertising software demonstrations or browser plug-ins not related to requirements or providing a wide array of functionality not required for every mission, yet cannot be disabled.\n\nApplications must adhere to the principles of least functionality by providing only essential capabilities.\n\nUnused and unnecessary SQL Server components increase the number of available attack vectors to SQL Server by introducing additional targets for attack. By minimizing the services and applications installed on the system, the number of potential vulnerabilities is reduced.","descriptions":{"default":"Information systems are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).\n\nIt is detrimental for applications to provide or install by default, functionality exceeding requirements or mission objectives. Examples include, but are not limited to, installing advertising software demonstrations or browser plug-ins not related to requirements or providing a wide array of functionality not required for every mission, yet cannot be disabled.\n\nApplications must adhere to the principles of least functionality by providing only essential capabilities.\n\nUnused and unnecessary SQL Server components increase the number of available attack vectors to SQL Server by introducing additional targets for attack. By minimizing the services and applications installed on the system, the number of potential vulnerabilities is reduced.","check":"Review the list of components or optional features installed with SQL Server.\nIf optional features or components are NOT installed, this is not a finding.\n\nIf unused components or features of SQL Server are installed, then review the system documentation to verify unused components or features are documented and authorized.\n\nIf any are not documented and authorized, this is a finding.","fix":"If any database components or objects of SQL Server are required for operation of applications that will be accessing SQL Server data or configuration, include them in the system documentation. If any unused components or objects of SQL Server are installed, uninstall or remove unused components or objects."},"impact":0.5,"refs":[{"ref":"DPMS Target SQL Server Database 2012"}],"tags":{"check_id":"C-47946r3_chk","severity":"medium","gid":"V-41409","rid":"SV-53937r3_rule","stig_id":"SQL2-00-016900","gtitle":"SRG-APP-000141-DB-000091","fix_id":"F-46837r2_fix","documentable":null,"cci":["CCI-000381"],"nist":["CM-7 a"]}},{"id":"SV-53939","code":"control 'SV-53939' do\n  title 'SQL Server must encrypt information stored in the database.'\n  desc 'When data is written to digital media, such as hard drives, mobile computers, external/removable hard drives, personal digital assistants, flash/thumb drives, etc., there is risk of data loss and/or compromise.\n\nAn organizational assessment of risk guides the selection of media and associated information contained on that media requiring restricted access. Organizations need to document, in policy and procedures, the media requiring restricted access, individuals authorized to access the media, and the specific measures taken to restrict access.\n\nFewer protection measures are needed for media containing information determined by the organization to be in the public domain, to be publicly releasable, or to have limited or no adverse impact if accessed by other than authorized personnel. In these situations, it is assumed the physical access controls where the media resides provide adequate protection.\n\nAs part of a defense-in-depth strategy, the organization considers routinely encrypting information at rest on selected secondary storage devices. The decision whether to employ cryptography is the responsibility of the information owner/steward, who exercises discretion within the framework of applicable rules, policies and law. The selection of the cryptographic mechanisms used is based upon maintaining the confidentiality and integrity of the information.\n\nThe strength of mechanisms is commensurate with the classification and sensitivity of the information.\n\nInformation at rest, when not encrypted, is open to compromise from attackers who have gained unauthorized access to the data files.'\n  desc 'check', \"Review SQL Server's cryptographic settings to determine whether data stored in databases is encrypted according to organizational requirements and the system owner.\n\nIf all of the data on SQL Server is unclassified and encryption of information is not required, this requirement is NA.\n\nEnsure the data is encrypted by executing:\nUSE <databse name>;\nIF NOT EXISTS\n      (\n      SELECT 1\n      FROM sys.dm_database_encryption_keys\n      WHERE DB_NAME(database_id) = DB_NAME()\n      )\n      SELECT\n            DB_NAME() AS [Database Name],\n            'No database encryption key present, no encryption' AS [Encryption State]\nELSE\n      SELECT\n            DB_NAME(database_id) AS [Database Name],\n            CASE encryption_state\n                  WHEN 0 THEN 'No database encryption key present, no encryption'\n                  WHEN 1 THEN 'Unencrypted'\n                  WHEN 2 THEN 'Encryption in progress'\n                  WHEN 3 THEN 'Encrypted'\n                  WHEN 4 THEN 'Key change in progress'\n                  WHEN 5 THEN 'Decryption in progress'\n                  WHEN 6 THEN 'Protection change in progress'\n            END AS [Encryption State]\n      FROM sys.dm_database_encryption_keys\n      WHERE DB_NAME(database_id) = DB_NAME()\n;\n\nIf any database that is supposed to have encryption enabled is not listed as such, this is a finding.\n\nIf encryption is required by the information owner and an approved, NIST-certified cryptography is not used to encrypt stored sensitive information, this is a finding.\n\nVerify all sensitive information is encrypted: entire database, tables, columns and/or data elements, as required by the organization and the system owner.\"\n  desc 'fix', \"Use third-party tools or configure SQL Server to encrypt data stored in the database. Use only NIST-certified or NSA-approved cryptography to provide encryption.\n\nRun the following SQL script to create a certificate:\nUSE <'database name'>\nCREATE CERTIFICATE <'certificate name'>\n   ENCRYPTION BY PASSWORD = '<'password'>'\n   FROM FILE = <'path/file_name'>\n   WITH SUBJECT = 'name of person creating key',\n   EXPIRY_DATE = '<'expiration date: yyyymmdd'>'\n\nRun the following SQL script to create a symmetric key and assign an existing certificate:\nUSE <'database name'>\nCREATE SYMMETRIC KEY <'key name'>\n   WITH ALGORITHM = AES_256 \n   ENCRYPTION BY <'certificate name'>\n\nSet SQL Server configuration settings to encrypt databases, tables, columns, and/or data elements as required by the organization and the system owner.\n\nDocument all instances of acceptance of risk by the information owner where sensitive or classified data is not encrypted. Have the ISSO document assurance that the unencrypted sensitive or classified information is otherwise inaccessible to those who do not have need-to-know access to the data. Developers should consider using a record-specific encryption method to protect individual records. For example, by employing the session username or other individualized element as part of the encryption key, then decryption of a data element is only possible by that user or other data accessible only by that user. Data labeling can be helpful in implementation. Consider applying additional auditing of access to any unencrypted sensitive or classified data when accessed by users (with and/or without a need to know).\"\n  impact 0.5\n  ref 'DPMS Target SQL Server Database 2012'\n  tag check_id: 'C-47947r4_chk'\n  tag severity: 'medium'\n  tag gid: 'V-41411'\n  tag rid: 'SV-53939r5_rule'\n  tag stig_id: 'SQL2-00-019300'\n  tag gtitle: 'SRG-APP-000188-DB-000121'\n  tag fix_id: 'F-46838r4_fix'\n  tag 'documentable'\n  tag cci: ['CCI-002262']\n  tag nist: ['AC-16 a']\nend","source_location":{"line":1,"ref":"U_MS_SQL_Server_Database_2012_V1R20/controls/SV-53939.rb"},"title":"SQL Server must encrypt information stored in the database.","desc":"When data is written to digital media, such as hard drives, mobile computers, external/removable hard drives, personal digital assistants, flash/thumb drives, etc., there is risk of data loss and/or compromise.\n\nAn organizational assessment of risk guides the selection of media and associated information contained on that media requiring restricted access. Organizations need to document, in policy and procedures, the media requiring restricted access, individuals authorized to access the media, and the specific measures taken to restrict access.\n\nFewer protection measures are needed for media containing information determined by the organization to be in the public domain, to be publicly releasable, or to have limited or no adverse impact if accessed by other than authorized personnel. In these situations, it is assumed the physical access controls where the media resides provide adequate protection.\n\nAs part of a defense-in-depth strategy, the organization considers routinely encrypting information at rest on selected secondary storage devices. The decision whether to employ cryptography is the responsibility of the information owner/steward, who exercises discretion within the framework of applicable rules, policies and law. The selection of the cryptographic mechanisms used is based upon maintaining the confidentiality and integrity of the information.\n\nThe strength of mechanisms is commensurate with the classification and sensitivity of the information.\n\nInformation at rest, when not encrypted, is open to compromise from attackers who have gained unauthorized access to the data files.","descriptions":{"default":"When data is written to digital media, such as hard drives, mobile computers, external/removable hard drives, personal digital assistants, flash/thumb drives, etc., there is risk of data loss and/or compromise.\n\nAn organizational assessment of risk guides the selection of media and associated information contained on that media requiring restricted access. Organizations need to document, in policy and procedures, the media requiring restricted access, individuals authorized to access the media, and the specific measures taken to restrict access.\n\nFewer protection measures are needed for media containing information determined by the organization to be in the public domain, to be publicly releasable, or to have limited or no adverse impact if accessed by other than authorized personnel. In these situations, it is assumed the physical access controls where the media resides provide adequate protection.\n\nAs part of a defense-in-depth strategy, the organization considers routinely encrypting information at rest on selected secondary storage devices. The decision whether to employ cryptography is the responsibility of the information owner/steward, who exercises discretion within the framework of applicable rules, policies and law. The selection of the cryptographic mechanisms used is based upon maintaining the confidentiality and integrity of the information.\n\nThe strength of mechanisms is commensurate with the classification and sensitivity of the information.\n\nInformation at rest, when not encrypted, is open to compromise from attackers who have gained unauthorized access to the data files.","check":"Review SQL Server's cryptographic settings to determine whether data stored in databases is encrypted according to organizational requirements and the system owner.\n\nIf all of the data on SQL Server is unclassified and encryption of information is not required, this requirement is NA.\n\nEnsure the data is encrypted by executing:\nUSE <databse name>;\nIF NOT EXISTS\n      (\n      SELECT 1\n      FROM sys.dm_database_encryption_keys\n      WHERE DB_NAME(database_id) = DB_NAME()\n      )\n      SELECT\n            DB_NAME() AS [Database Name],\n            'No database encryption key present, no encryption' AS [Encryption State]\nELSE\n      SELECT\n            DB_NAME(database_id) AS [Database Name],\n            CASE encryption_state\n                  WHEN 0 THEN 'No database encryption key present, no encryption'\n                  WHEN 1 THEN 'Unencrypted'\n                  WHEN 2 THEN 'Encryption in progress'\n                  WHEN 3 THEN 'Encrypted'\n                  WHEN 4 THEN 'Key change in progress'\n                  WHEN 5 THEN 'Decryption in progress'\n                  WHEN 6 THEN 'Protection change in progress'\n            END AS [Encryption State]\n      FROM sys.dm_database_encryption_keys\n      WHERE DB_NAME(database_id) = DB_NAME()\n;\n\nIf any database that is supposed to have encryption enabled is not listed as such, this is a finding.\n\nIf encryption is required by the information owner and an approved, NIST-certified cryptography is not used to encrypt stored sensitive information, this is a finding.\n\nVerify all sensitive information is encrypted: entire database, tables, columns and/or data elements, as required by the organization and the system owner.","fix":"Use third-party tools or configure SQL Server to encrypt data stored in the database. Use only NIST-certified or NSA-approved cryptography to provide encryption.\n\nRun the following SQL script to create a certificate:\nUSE <'database name'>\nCREATE CERTIFICATE <'certificate name'>\n   ENCRYPTION BY PASSWORD = '<'password'>'\n   FROM FILE = <'path/file_name'>\n   WITH SUBJECT = 'name of person creating key',\n   EXPIRY_DATE = '<'expiration date: yyyymmdd'>'\n\nRun the following SQL script to create a symmetric key and assign an existing certificate:\nUSE <'database name'>\nCREATE SYMMETRIC KEY <'key name'>\n   WITH ALGORITHM = AES_256 \n   ENCRYPTION BY <'certificate name'>\n\nSet SQL Server configuration settings to encrypt databases, tables, columns, and/or data elements as required by the organization and the system owner.\n\nDocument all instances of acceptance of risk by the information owner where sensitive or classified data is not encrypted. Have the ISSO document assurance that the unencrypted sensitive or classified information is otherwise inaccessible to those who do not have need-to-know access to the data. Developers should consider using a record-specific encryption method to protect individual records. For example, by employing the session username or other individualized element as part of the encryption key, then decryption of a data element is only possible by that user or other data accessible only by that user. Data labeling can be helpful in implementation. Consider applying additional auditing of access to any unencrypted sensitive or classified data when accessed by users (with and/or without a need to know)."},"impact":0.5,"refs":[{"ref":"DPMS Target SQL Server Database 2012"}],"tags":{"check_id":"C-47947r4_chk","severity":"medium","gid":"V-41411","rid":"SV-53939r5_rule","stig_id":"SQL2-00-019300","gtitle":"SRG-APP-000188-DB-000121","fix_id":"F-46838r4_fix","documentable":null,"cci":["CCI-002262"],"nist":["AC-16 a"]}},{"id":"SV-53940","code":"control 'SV-53940' do\n  title 'SQL Server must implement required cryptographic protections using cryptographic modules complying with applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance.'\n  desc 'Cryptography is only as strong as the encryption modules/algorithms employed to encrypt the data.\n\nUse of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data.\n\nUse of cryptography to provide confidentiality and non-repudiation is not effective unless strong methods are employed with its use. Many earlier encryption methods and modules have been broken and/or overtaken by increasing computing power. The NIST FIPS 140-2 cryptographic standards provide proven methods and strengths to employ cryptography effectively.\n\nDetailed information on the NIST Cryptographic Module Validation Program (CMVP) is available at the following website:  http://csrc.nist.gov/groups/STM/cmvp/index.html.'\n  desc 'check', %q(If encryption is not required for this database, this is not a finding.\n\nRun the following SQL queries to review SQL Server's cryptographic settings for the database:\n\nUSE <database name> ;\nIF NOT EXISTS\n       (\n       SELECT 1 \n       FROM sys.dm_database_encryption_keys\n       WHERE DB_NAME(database_id) = DB_NAME()\n       )\n       SELECT \n             DB_NAME() AS [Database Name],\n             'No database encryption key present, no encryption' AS [Encryption State],\n                     NULL AS [Algorithm],\n                     NULL AS [Key Length]\nELSE\n       SELECT\n             DB_NAME(database_id) AS [Database Name],\n             CASE encryption_state \n                   WHEN 0 THEN 'No database encryption key present, no encryption' \n                   WHEN 1 THEN 'Unencrypted' \n                   WHEN 2 THEN 'Encryption in progress' \n                   WHEN 3 THEN 'Encrypted' \n                   WHEN 4 THEN 'Key change in progress' \n                   WHEN 5 THEN 'Decryption in progress' \n                   WHEN 6 THEN 'Protection change in progress' \n             END AS [Encryption State],\n                     key_algorithm AS [Algorithm],\n                     key_length AS [Key Length]\n       FROM sys.dm_database_encryption_keys\n       WHERE DB_NAME(database_id) = DB_NAME()\n\nSELECT DB_NAME() AS [Database], name, algorithm_desc \nFROM sys.symmetric_keys \nORDER BY name, algorithm_desc;\n\nNote:  The acceptable algorithms are:  \"AES 128\", \"AES 192\", \"AES 256\" and \"Triple DES\".\n\nIf SQL Server cryptographic algorithms are not listed or are found not to be compliant with applicable federal laws, Executive Orders, directives, policies, regulations, standards and guidance, this is a finding.\n\nIf the encryption state indicates that the database is unencrypted, this is a finding.)\n  desc 'fix', %q(Implement required cryptographic protections using cryptographic modules complying with applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance.\n\nEnsure the database is backed up.\n\nRun the following SQL to undo encryption and drop the existing database encryption key:\nUSE master;\nGO\nALTER DATABASE <database name> SET ENCRYPTION OFF;\nGO\nUSE <database name> ;\nGO\nDROP DATABASE ENCRYPTION KEY;\nGO\n\nRun the following SQL to drop a server certificate from the SQL Server instance:\nUSE master;\nGO\nDROP CERTIFICATE <certificate name>;\nGO\n\nIf applicable, run the following SQL to drop a symmetric key:\nUSE <database name>;\nGO\nDROP SYMMETRIC KEY <key name>;\nGO\n\nConfigure encryption to use approved encryption algorithms. Existing keys are not reconfigurable to use different algorithms.\n\nRun SQL along the lines of the following to import an externally-created server certificate (see Microsoft documentation for options and syntax details):\nUSE master;\nGO\nCREATE CERTIFICATE <certificate name>\n   FROM FILE = '<path\\file_name>'\n...\n;\nGO\n\nRun the following SQL to create a database encryption key and encrypt the database:\nUSE <database name>;\nGO\nCREATE DATABASE ENCRYPTION KEY \n   WITH ALGORITHM = AES_256 \n   ENCRYPTION BY SERVER CERTIFICATE <certificate name>;\nGO\nUSE master;\nGO\nALTER DATABASE <database name> SET ENCRYPTION ON;\nGO\n\nNote: The acceptable algorithms are: \"AES 128\", \"AES 192\", \"AES 256\" and \"Triple DES\".\n\nIf required, run the following SQL to create a symmetric key and assign an existing certificate:\nUSE <database name>;\nGO\nCREATE SYMMETRIC KEY <key name>\n   WITH ALGORITHM = AES_256 \n   ENCRYPTION BY CERTIFICATE <certificate name>;)\n  impact 0.5\n  ref 'DPMS Target SQL Server Database 2012'\n  tag check_id: 'C-47949r6_chk'\n  tag severity: 'medium'\n  tag gid: 'V-41412'\n  tag rid: 'SV-53940r5_rule'\n  tag stig_id: 'SQL2-00-019500'\n  tag gtitle: 'SRG-APP-000196-DB-000140'\n  tag fix_id: 'F-46839r9_fix'\n  tag 'documentable'\n  tag cci: ['CCI-002450']\n  tag nist: ['SC-13 b']\nend","source_location":{"line":1,"ref":"U_MS_SQL_Server_Database_2012_V1R20/controls/SV-53940.rb"},"title":"SQL Server must implement required cryptographic protections using cryptographic modules complying with applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance.","desc":"Cryptography is only as strong as the encryption modules/algorithms employed to encrypt the data.\n\nUse of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data.\n\nUse of cryptography to provide confidentiality and non-repudiation is not effective unless strong methods are employed with its use. Many earlier encryption methods and modules have been broken and/or overtaken by increasing computing power. The NIST FIPS 140-2 cryptographic standards provide proven methods and strengths to employ cryptography effectively.\n\nDetailed information on the NIST Cryptographic Module Validation Program (CMVP) is available at the following website:  http://csrc.nist.gov/groups/STM/cmvp/index.html.","descriptions":{"default":"Cryptography is only as strong as the encryption modules/algorithms employed to encrypt the data.\n\nUse of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data.\n\nUse of cryptography to provide confidentiality and non-repudiation is not effective unless strong methods are employed with its use. Many earlier encryption methods and modules have been broken and/or overtaken by increasing computing power. The NIST FIPS 140-2 cryptographic standards provide proven methods and strengths to employ cryptography effectively.\n\nDetailed information on the NIST Cryptographic Module Validation Program (CMVP) is available at the following website:  http://csrc.nist.gov/groups/STM/cmvp/index.html.","check":"If encryption is not required for this database, this is not a finding.\n\nRun the following SQL queries to review SQL Server's cryptographic settings for the database:\n\nUSE <database name> ;\nIF NOT EXISTS\n       (\n       SELECT 1 \n       FROM sys.dm_database_encryption_keys\n       WHERE DB_NAME(database_id) = DB_NAME()\n       )\n       SELECT \n             DB_NAME() AS [Database Name],\n             'No database encryption key present, no encryption' AS [Encryption State],\n                     NULL AS [Algorithm],\n                     NULL AS [Key Length]\nELSE\n       SELECT\n             DB_NAME(database_id) AS [Database Name],\n             CASE encryption_state \n                   WHEN 0 THEN 'No database encryption key present, no encryption' \n                   WHEN 1 THEN 'Unencrypted' \n                   WHEN 2 THEN 'Encryption in progress' \n                   WHEN 3 THEN 'Encrypted' \n                   WHEN 4 THEN 'Key change in progress' \n                   WHEN 5 THEN 'Decryption in progress' \n                   WHEN 6 THEN 'Protection change in progress' \n             END AS [Encryption State],\n                     key_algorithm AS [Algorithm],\n                     key_length AS [Key Length]\n       FROM sys.dm_database_encryption_keys\n       WHERE DB_NAME(database_id) = DB_NAME()\n\nSELECT DB_NAME() AS [Database], name, algorithm_desc \nFROM sys.symmetric_keys \nORDER BY name, algorithm_desc;\n\nNote:  The acceptable algorithms are:  \"AES 128\", \"AES 192\", \"AES 256\" and \"Triple DES\".\n\nIf SQL Server cryptographic algorithms are not listed or are found not to be compliant with applicable federal laws, Executive Orders, directives, policies, regulations, standards and guidance, this is a finding.\n\nIf the encryption state indicates that the database is unencrypted, this is a finding.","fix":"Implement required cryptographic protections using cryptographic modules complying with applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance.\n\nEnsure the database is backed up.\n\nRun the following SQL to undo encryption and drop the existing database encryption key:\nUSE master;\nGO\nALTER DATABASE <database name> SET ENCRYPTION OFF;\nGO\nUSE <database name> ;\nGO\nDROP DATABASE ENCRYPTION KEY;\nGO\n\nRun the following SQL to drop a server certificate from the SQL Server instance:\nUSE master;\nGO\nDROP CERTIFICATE <certificate name>;\nGO\n\nIf applicable, run the following SQL to drop a symmetric key:\nUSE <database name>;\nGO\nDROP SYMMETRIC KEY <key name>;\nGO\n\nConfigure encryption to use approved encryption algorithms. Existing keys are not reconfigurable to use different algorithms.\n\nRun SQL along the lines of the following to import an externally-created server certificate (see Microsoft documentation for options and syntax details):\nUSE master;\nGO\nCREATE CERTIFICATE <certificate name>\n   FROM FILE = '<path\\file_name>'\n...\n;\nGO\n\nRun the following SQL to create a database encryption key and encrypt the database:\nUSE <database name>;\nGO\nCREATE DATABASE ENCRYPTION KEY \n   WITH ALGORITHM = AES_256 \n   ENCRYPTION BY SERVER CERTIFICATE <certificate name>;\nGO\nUSE master;\nGO\nALTER DATABASE <database name> SET ENCRYPTION ON;\nGO\n\nNote: The acceptable algorithms are: \"AES 128\", \"AES 192\", \"AES 256\" and \"Triple DES\".\n\nIf required, run the following SQL to create a symmetric key and assign an existing certificate:\nUSE <database name>;\nGO\nCREATE SYMMETRIC KEY <key name>\n   WITH ALGORITHM = AES_256 \n   ENCRYPTION BY CERTIFICATE <certificate name>;"},"impact":0.5,"refs":[{"ref":"DPMS Target SQL Server Database 2012"}],"tags":{"check_id":"C-47949r6_chk","severity":"medium","gid":"V-41412","rid":"SV-53940r5_rule","stig_id":"SQL2-00-019500","gtitle":"SRG-APP-000196-DB-000140","fix_id":"F-46839r9_fix","documentable":null,"cci":["CCI-002450"],"nist":["SC-13 b"]}},{"id":"SV-53944","code":"control 'SV-53944' do\n  title 'The Database Master Key must be encrypted by the Service Master Key where required.'\n  desc 'When not encrypted by the Service Master Key, system administrators or application administrators may access and use the Database Master Key to view sensitive data that they are not authorized to view. Where alternate encryption means are not feasible, encryption by the Service Master Key may be necessary. To help protect sensitive data from unauthorized access by DBAs, mitigations may be in order. Mitigations may include automatic alerts or other audit events when the Database Master Key is accessed outside of the application or by a DBA account.'\n  desc 'check', 'From the query prompt:\nSELECT name\nFROM [master].sys.databases\nWHERE is_master_key_encrypted_by_server = 1\nAND owner_sid <> 1\nAND state = 0\nIf no databases are returned, this is not a finding.\nFor any databases returned, verify in the System Security Plan that encryption of the Database\nMaster Key using the Service Master Key is acceptable and approved by the Information Owner, and the encrypted data does not require additional protections to deter or detect DBA access. If not approved, this is a finding.\n\nIf approved and additional protections are required, then verify the additional requirements are in place in accordance with the System Security Plan. These may include additional auditing on access of the Database Master Key with alerts or other automated monitoring.\n\nIf the additional requirements are not in place, this is a finding.'\n  desc 'fix', 'Where possible, encrypt the Database Master Key with a password known only to the application administrator.\nWhere not possible, configure additional audit events or alerts to detect unauthorized access to the Database Master Key by users not authorized to view sensitive data.'\n  impact 0.5\n  ref 'DPMS Target SQL Server Database 2012'\n  tag check_id: 'C-47951r2_chk'\n  tag severity: 'medium'\n  tag gid: 'V-41415'\n  tag rid: 'SV-53944r3_rule'\n  tag stig_id: 'SQL2-00-024100'\n  tag gtitle: 'SRG-APP-000231-DB-000154'\n  tag fix_id: 'F-46843r2_fix'\n  tag cci: ['CCI-001199']\n  tag nist: ['SC-28']\nend","source_location":{"line":1,"ref":"U_MS_SQL_Server_Database_2012_V1R20/controls/SV-53944.rb"},"title":"The Database Master Key must be encrypted by the Service Master Key where required.","desc":"When not encrypted by the Service Master Key, system administrators or application administrators may access and use the Database Master Key to view sensitive data that they are not authorized to view. Where alternate encryption means are not feasible, encryption by the Service Master Key may be necessary. To help protect sensitive data from unauthorized access by DBAs, mitigations may be in order. Mitigations may include automatic alerts or other audit events when the Database Master Key is accessed outside of the application or by a DBA account.","descriptions":{"default":"When not encrypted by the Service Master Key, system administrators or application administrators may access and use the Database Master Key to view sensitive data that they are not authorized to view. Where alternate encryption means are not feasible, encryption by the Service Master Key may be necessary. To help protect sensitive data from unauthorized access by DBAs, mitigations may be in order. Mitigations may include automatic alerts or other audit events when the Database Master Key is accessed outside of the application or by a DBA account.","check":"From the query prompt:\nSELECT name\nFROM [master].sys.databases\nWHERE is_master_key_encrypted_by_server = 1\nAND owner_sid <> 1\nAND state = 0\nIf no databases are returned, this is not a finding.\nFor any databases returned, verify in the System Security Plan that encryption of the Database\nMaster Key using the Service Master Key is acceptable and approved by the Information Owner, and the encrypted data does not require additional protections to deter or detect DBA access. If not approved, this is a finding.\n\nIf approved and additional protections are required, then verify the additional requirements are in place in accordance with the System Security Plan. These may include additional auditing on access of the Database Master Key with alerts or other automated monitoring.\n\nIf the additional requirements are not in place, this is a finding.","fix":"Where possible, encrypt the Database Master Key with a password known only to the application administrator.\nWhere not possible, configure additional audit events or alerts to detect unauthorized access to the Database Master Key by users not authorized to view sensitive data."},"impact":0.5,"refs":[{"ref":"DPMS Target SQL Server Database 2012"}],"tags":{"check_id":"C-47951r2_chk","severity":"medium","gid":"V-41415","rid":"SV-53944r3_rule","stig_id":"SQL2-00-024100","gtitle":"SRG-APP-000231-DB-000154","fix_id":"F-46843r2_fix","cci":["CCI-001199"],"nist":["SC-28"]}},{"id":"SV-53945","code":"control 'SV-53945' do\n  title 'Database Master Key passwords must not be stored in credentials within the database.'\n  desc 'Storage of the Database Master Key password in a database credential allows decryption of sensitive data by privileged users who may not have a need-to-know requirement to access the\ndata.'\n  desc 'check', 'From the query prompt:\nSELECT COUNT(credential_id)\nFROM [master].sys.master_key_passwords\n\nIf count is not 0, this is a finding.'\n  desc 'fix', \"Use the stored procedure sp_control_dbmasterkey_password to remove any credentials that\nstore Database Master Key passwords.\nFrom the query prompt:\nEXEC SP_CONTROL_DBMASTERKEY_PASSWORD @db_name = '[database name]', @action\n= N'drop'\"\n  impact 0.5\n  ref 'DPMS Target SQL Server Database 2012'\n  tag check_id: 'C-47952r1_chk'\n  tag severity: 'medium'\n  tag gid: 'V-41416'\n  tag rid: 'SV-53945r2_rule'\n  tag stig_id: 'SQL2-00-024200'\n  tag gtitle: 'SRG-APP-000231-DB-000154'\n  tag fix_id: 'F-46845r2_fix'\n  tag 'documentable'\n  tag cci: ['CCI-001199']\n  tag nist: ['SC-28']\nend","source_location":{"line":1,"ref":"U_MS_SQL_Server_Database_2012_V1R20/controls/SV-53945.rb"},"title":"Database Master Key passwords must not be stored in credentials within the database.","desc":"Storage of the Database Master Key password in a database credential allows decryption of sensitive data by privileged users who may not have a need-to-know requirement to access the\ndata.","descriptions":{"default":"Storage of the Database Master Key password in a database credential allows decryption of sensitive data by privileged users who may not have a need-to-know requirement to access the\ndata.","check":"From the query prompt:\nSELECT COUNT(credential_id)\nFROM [master].sys.master_key_passwords\n\nIf count is not 0, this is a finding.","fix":"Use the stored procedure sp_control_dbmasterkey_password to remove any credentials that\nstore Database Master Key passwords.\nFrom the query prompt:\nEXEC SP_CONTROL_DBMASTERKEY_PASSWORD @db_name = '[database name]', @action\n= N'drop'"},"impact":0.5,"refs":[{"ref":"DPMS Target SQL Server Database 2012"}],"tags":{"check_id":"C-47952r1_chk","severity":"medium","gid":"V-41416","rid":"SV-53945r2_rule","stig_id":"SQL2-00-024200","gtitle":"SRG-APP-000231-DB-000154","fix_id":"F-46845r2_fix","documentable":null,"cci":["CCI-001199"],"nist":["SC-28"]}},{"id":"SV-53946","code":"control 'SV-53946' do\n  title 'Symmetric keys (other than the database master key) must use a DoD certificate to encrypt the key.'\n  desc 'Data within the database is protected by use of encryption. The symmetric keys are critical for this process. If the symmetric keys were to be compromised the data could be disclosed to unauthorized personnel.'\n  desc 'check', \"In a query tool:\nUSE <database name>;\nGO\nSELECT s.name, k.crypt_type_desc\nFROM sys.symmetric_keys s, sys.key_encryptions k\nWHERE s.symmetric_key_id = k.key_id\nAND s.name <> '##MS_DatabaseMasterKey##'\nAND k.crypt_type IN ('ESKP', 'ESKS')\nORDER BY s.name, k.crypt_type_desc;\nGO\n\nReview any symmetric keys that have been defined against the System Security Plan.\n\nIf any keys are defined that are not documented in the System Security Plan, this is a finding.\n\nReview the System Security Plan to review the encryption mechanism specified for each symmetric key. If the method does not indicate use of certificates, this is a finding.\n\nIf the certificate specified is not a DoD PKI certificate, this is a finding.\"\n  desc 'fix', 'Configure or alter symmetric keys to encrypt keys with certificates or authorized asymmetric keys.\nFrom the query prompt:\nALTER SYMMETRIC KEY [key name] ADD ENCRYPTION BY CERTIFICATE [certificate name]\nALTER SYMMETRIC KEY [key name] DROP ENCRYPTION BY [password, symmetric key or asymmetric key]\n\nThe symmetric key must specify a certificate or asymmetric key for encryption.'\n  impact 0.5\n  ref 'DPMS Target SQL Server Database 2012'\n  tag check_id: 'C-47953r6_chk'\n  tag severity: 'medium'\n  tag gid: 'V-41417'\n  tag rid: 'SV-53946r5_rule'\n  tag stig_id: 'SQL2-00-024300'\n  tag gtitle: 'SRG-APP-000231-DB-000154'\n  tag fix_id: 'F-46846r4_fix'\n  tag cci: ['CCI-001199']\n  tag nist: ['SC-28']\nend","source_location":{"line":1,"ref":"U_MS_SQL_Server_Database_2012_V1R20/controls/SV-53946.rb"},"title":"Symmetric keys (other than the database master key) must use a DoD certificate to encrypt the key.","desc":"Data within the database is protected by use of encryption. The symmetric keys are critical for this process. If the symmetric keys were to be compromised the data could be disclosed to unauthorized personnel.","descriptions":{"default":"Data within the database is protected by use of encryption. The symmetric keys are critical for this process. If the symmetric keys were to be compromised the data could be disclosed to unauthorized personnel.","check":"In a query tool:\nUSE <database name>;\nGO\nSELECT s.name, k.crypt_type_desc\nFROM sys.symmetric_keys s, sys.key_encryptions k\nWHERE s.symmetric_key_id = k.key_id\nAND s.name <> '##MS_DatabaseMasterKey##'\nAND k.crypt_type IN ('ESKP', 'ESKS')\nORDER BY s.name, k.crypt_type_desc;\nGO\n\nReview any symmetric keys that have been defined against the System Security Plan.\n\nIf any keys are defined that are not documented in the System Security Plan, this is a finding.\n\nReview the System Security Plan to review the encryption mechanism specified for each symmetric key. If the method does not indicate use of certificates, this is a finding.\n\nIf the certificate specified is not a DoD PKI certificate, this is a finding.","fix":"Configure or alter symmetric keys to encrypt keys with certificates or authorized asymmetric keys.\nFrom the query prompt:\nALTER SYMMETRIC KEY [key name] ADD ENCRYPTION BY CERTIFICATE [certificate name]\nALTER SYMMETRIC KEY [key name] DROP ENCRYPTION BY [password, symmetric key or asymmetric key]\n\nThe symmetric key must specify a certificate or asymmetric key for encryption."},"impact":0.5,"refs":[{"ref":"DPMS Target SQL Server Database 2012"}],"tags":{"check_id":"C-47953r6_chk","severity":"medium","gid":"V-41417","rid":"SV-53946r5_rule","stig_id":"SQL2-00-024300","gtitle":"SRG-APP-000231-DB-000154","fix_id":"F-46846r4_fix","cci":["CCI-001199"],"nist":["SC-28"]}},{"id":"SV-53949","code":"control 'SV-53949' do\n  title 'SQL Server must employ cryptographic mechanisms preventing the unauthorized disclosure of information at rest.'\n  desc 'This control is intended to address the confidentiality and integrity of information at rest in non-mobile devices and covers user information and system information. If the data is not encrypted, it is subject to compromise and unauthorized disclosure.\n\nNote:  the system databases (master, msdb, model, resource and tempdb) cannot be encrypted.\n\nThe decision whether to employ cryptography is the responsibility of the information owner/steward, who exercises discretion within the framework of applicable rules, policies and law.'\n  desc 'check', \"If this is a system database (master, msdb, resource, tempdb or model), this is not applicable (NA).\n\nIf the application owner and authorizing official have determined that the database does not require encryption, this is not a finding.\n\nEnsure the data is encrypted by executing:\nUSE <database name>;\nIF NOT EXISTS\n\t(\n\tSELECT 1 \n\tFROM sys.dm_database_encryption_keys\n\tWHERE DB_NAME(database_id) = DB_NAME()\n\t)\n\tSELECT \n\t\tDB_NAME() AS [Database Name],\n\t\t'No database encryption key present, no encryption' AS [Encryption State]\nELSE\n\tSELECT\n\t\tDB_NAME(database_id)  AS [Database Name],\n\t\tCASE encryption_state \n\t\t\tWHEN 0 THEN 'No database encryption key present, no encryption' \n\t\t\tWHEN 1 THEN 'Unencrypted' \n\t\t\tWHEN 2 THEN 'Encryption in progress' \n\t\t\tWHEN 3 THEN 'Encrypted' \n\t\t\tWHEN 4 THEN 'Key change in progress' \n\t\t\tWHEN 5 THEN 'Decryption in progress' \n\t\t\tWHEN 6 THEN 'Protection change in progress' \n\t\tEND AS [Encryption State] \n\tFROM sys.dm_database_encryption_keys\n\tWHERE DB_NAME(database_id) = DB_NAME()\n;\n\nFor each user database, ensure that encryption is in effect.  If not, this is a finding.\"\n  desc 'fix', 'Use encryption to protect the data. To enable database encryption, create a master key, create a database encryption key, and protect it by using mechanisms tied to the master key, and then set encryption on.'\n  impact 0.5\n  ref 'DPMS Target SQL Server Database 2012'\n  tag check_id: 'C-47955r7_chk'\n  tag severity: 'medium'\n  tag gid: 'V-41420'\n  tag rid: 'SV-53949r6_rule'\n  tag stig_id: 'SQL2-00-021400'\n  tag gtitle: 'SRG-APP-000232-DB-000155'\n  tag fix_id: 'F-46848r3_fix'\n  tag 'documentable'\n  tag cci: ['CCI-002476']\n  tag nist: ['SC-28 (1)']\nend","source_location":{"line":1,"ref":"U_MS_SQL_Server_Database_2012_V1R20/controls/SV-53949.rb"},"title":"SQL Server must employ cryptographic mechanisms preventing the unauthorized disclosure of information at rest.","desc":"This control is intended to address the confidentiality and integrity of information at rest in non-mobile devices and covers user information and system information. If the data is not encrypted, it is subject to compromise and unauthorized disclosure.\n\nNote:  the system databases (master, msdb, model, resource and tempdb) cannot be encrypted.\n\nThe decision whether to employ cryptography is the responsibility of the information owner/steward, who exercises discretion within the framework of applicable rules, policies and law.","descriptions":{"default":"This control is intended to address the confidentiality and integrity of information at rest in non-mobile devices and covers user information and system information. If the data is not encrypted, it is subject to compromise and unauthorized disclosure.\n\nNote:  the system databases (master, msdb, model, resource and tempdb) cannot be encrypted.\n\nThe decision whether to employ cryptography is the responsibility of the information owner/steward, who exercises discretion within the framework of applicable rules, policies and law.","check":"If this is a system database (master, msdb, resource, tempdb or model), this is not applicable (NA).\n\nIf the application owner and authorizing official have determined that the database does not require encryption, this is not a finding.\n\nEnsure the data is encrypted by executing:\nUSE <database name>;\nIF NOT EXISTS\n\t(\n\tSELECT 1 \n\tFROM sys.dm_database_encryption_keys\n\tWHERE DB_NAME(database_id) = DB_NAME()\n\t)\n\tSELECT \n\t\tDB_NAME() AS [Database Name],\n\t\t'No database encryption key present, no encryption' AS [Encryption State]\nELSE\n\tSELECT\n\t\tDB_NAME(database_id)  AS [Database Name],\n\t\tCASE encryption_state \n\t\t\tWHEN 0 THEN 'No database encryption key present, no encryption' \n\t\t\tWHEN 1 THEN 'Unencrypted' \n\t\t\tWHEN 2 THEN 'Encryption in progress' \n\t\t\tWHEN 3 THEN 'Encrypted' \n\t\t\tWHEN 4 THEN 'Key change in progress' \n\t\t\tWHEN 5 THEN 'Decryption in progress' \n\t\t\tWHEN 6 THEN 'Protection change in progress' \n\t\tEND AS [Encryption State] \n\tFROM sys.dm_database_encryption_keys\n\tWHERE DB_NAME(database_id) = DB_NAME()\n;\n\nFor each user database, ensure that encryption is in effect.  If not, this is a finding.","fix":"Use encryption to protect the data. To enable database encryption, create a master key, create a database encryption key, and protect it by using mechanisms tied to the master key, and then set encryption on."},"impact":0.5,"refs":[{"ref":"DPMS Target SQL Server Database 2012"}],"tags":{"check_id":"C-47955r7_chk","severity":"medium","gid":"V-41420","rid":"SV-53949r6_rule","stig_id":"SQL2-00-021400","gtitle":"SRG-APP-000232-DB-000155","fix_id":"F-46848r3_fix","documentable":null,"cci":["CCI-002476"],"nist":["SC-28 (1)"]}},{"id":"SV-53950","code":"control 'SV-53950' do\n  title 'SQL Server must prevent unauthorized and unintended information transfer via shared system resources.'\n  desc 'The purpose of this control is to prevent information, including encrypted representations of information, produced by the actions of a prior user/role (or the actions of a process acting on behalf of a prior user/role) from being available to any current user/role (or current process) that obtains access to a shared system resource (e.g., registers, main memory, secondary storage) after the resource has been released back to the information system. Control of information in shared resources is also referred to as object reuse.\n\nData used for the development and testing of applications often involves copying data from production. It is important that specific procedures exist for this process, so copies of sensitive data are not misplaced or left in a temporary location without the proper controls.'\n  desc 'check', 'Verify there are proper procedures in place for the transfer of development/test data from production. Review any scripts or code that exists for the movement of production data to development/test and verify copies of production data are not left in unprotected locations.\n\nIf there is no documented procedure for data movement from production to development/test, this is a finding.\n\nIf data movement code that copies from production to development/test does exist and leaves any copies of production data in unprotected locations, this is a finding.'\n  desc 'fix', 'Create and document a process for moving data from production to development/test systems and follow the process.\n\nModify any code used for moving data from production to development/test systems to ensure copies of production data are not left in unsecured locations.'\n  impact 0.5\n  ref 'DPMS Target SQL Server Database 2012'\n  tag check_id: 'C-47956r2_chk'\n  tag severity: 'medium'\n  tag gid: 'V-41421'\n  tag rid: 'SV-53950r2_rule'\n  tag stig_id: 'SQL2-00-021800'\n  tag gtitle: 'SRG-APP-000243-DB-000128'\n  tag fix_id: 'F-46850r2_fix'\n  tag 'documentable'\n  tag cci: ['CCI-001090']\n  tag nist: ['SC-4']\nend","source_location":{"line":1,"ref":"U_MS_SQL_Server_Database_2012_V1R20/controls/SV-53950.rb"},"title":"SQL Server must prevent unauthorized and unintended information transfer via shared system resources.","desc":"The purpose of this control is to prevent information, including encrypted representations of information, produced by the actions of a prior user/role (or the actions of a process acting on behalf of a prior user/role) from being available to any current user/role (or current process) that obtains access to a shared system resource (e.g., registers, main memory, secondary storage) after the resource has been released back to the information system. Control of information in shared resources is also referred to as object reuse.\n\nData used for the development and testing of applications often involves copying data from production. It is important that specific procedures exist for this process, so copies of sensitive data are not misplaced or left in a temporary location without the proper controls.","descriptions":{"default":"The purpose of this control is to prevent information, including encrypted representations of information, produced by the actions of a prior user/role (or the actions of a process acting on behalf of a prior user/role) from being available to any current user/role (or current process) that obtains access to a shared system resource (e.g., registers, main memory, secondary storage) after the resource has been released back to the information system. Control of information in shared resources is also referred to as object reuse.\n\nData used for the development and testing of applications often involves copying data from production. It is important that specific procedures exist for this process, so copies of sensitive data are not misplaced or left in a temporary location without the proper controls.","check":"Verify there are proper procedures in place for the transfer of development/test data from production. Review any scripts or code that exists for the movement of production data to development/test and verify copies of production data are not left in unprotected locations.\n\nIf there is no documented procedure for data movement from production to development/test, this is a finding.\n\nIf data movement code that copies from production to development/test does exist and leaves any copies of production data in unprotected locations, this is a finding.","fix":"Create and document a process for moving data from production to development/test systems and follow the process.\n\nModify any code used for moving data from production to development/test systems to ensure copies of production data are not left in unsecured locations."},"impact":0.5,"refs":[{"ref":"DPMS Target SQL Server Database 2012"}],"tags":{"check_id":"C-47956r2_chk","severity":"medium","gid":"V-41421","rid":"SV-53950r2_rule","stig_id":"SQL2-00-021800","gtitle":"SRG-APP-000243-DB-000128","fix_id":"F-46850r2_fix","documentable":null,"cci":["CCI-001090"],"nist":["SC-4"]}},{"id":"SV-53951","code":"control 'SV-53951' do\n  title 'SQL Server must protect against or limit the effects of the organization-defined types of Denial of Service (DoS) attacks.'\n  desc 'Application management includes the ability to control the number of users and user sessions utilizing an application. Limiting the number of allowed users, and sessions per user, is helpful in limiting risks related to DoS attacks.\n\nThis requirement addresses concurrent session control for a single information system account and does not address concurrent sessions by a single user via multiple system accounts.\n\nThis requirement may be met via the application or by utilizing information system session control provided by a web server with specialized session management capabilities. If it has been specified that this requirement will be handled by the application, the capability to limit the maximum number of concurrent single user sessions must be designed and built into the application.\n\nThe organization will need to define the maximum number of concurrent sessions for SQL Server accounts by account type, by account, or a combination thereof and SQL Server shall enforce this requirement.\n\nUnlimited concurrent connections to SQL Server could allow a successful DoS attack by exhausting connection resources.'\n  desc 'check', \"Check SQL Server settings for the number of concurrent Check SQL Server settings for the number of concurrent sessions by running the following script:\n\nUSE MASTER\nGO\n\nEXEC sys.sp_configure N'show advanced options', N'1'  RECONFIGURE WITH OVERRIDE\nGO\nEXEC sys.sp_configure N'user connections'\nEXEC sys.sp_configure N'show advanced options', N'0'  RECONFIGURE WITH OVERRIDE\nGO\n\nIf SQL Server settings for concurrent sessions is not lower than or equal to the organization-defined maximum number of sessions, this is a finding.\"\n  desc 'fix', \"Configure SQL Server number of concurrent sessions to the organization-defined maximum number of sessions by running the following script:\n\nUSE MASTER\nGO\n\nEXEC sys.sp_configure N'show advanced options', N'1'  RECONFIGURE WITH OVERRIDE\nGO\nEXEC sys.sp_configure N'user connections', <'maximum number of SQL Server concurrent connections'>\nEXEC sys.sp_configure N'show advanced options', N'0'  RECONFIGURE WITH OVERRIDE\nGO\"\n  impact 0.5\n  ref 'DPMS Target SQL Server Database 2012'\n  tag check_id: 'C-47957r2_chk'\n  tag severity: 'medium'\n  tag gid: 'V-41422'\n  tag rid: 'SV-53951r2_rule'\n  tag stig_id: 'SQL2-00-022000'\n  tag gtitle: 'SRG-APP-000245-DB-000132'\n  tag fix_id: 'F-46851r2_fix'\n  tag 'documentable'\n  tag cci: ['CCI-002385']\n  tag nist: ['SC-5 a']\nend","source_location":{"line":1,"ref":"U_MS_SQL_Server_Database_2012_V1R20/controls/SV-53951.rb"},"title":"SQL Server must protect against or limit the effects of the organization-defined types of Denial of Service (DoS) attacks.","desc":"Application management includes the ability to control the number of users and user sessions utilizing an application. Limiting the number of allowed users, and sessions per user, is helpful in limiting risks related to DoS attacks.\n\nThis requirement addresses concurrent session control for a single information system account and does not address concurrent sessions by a single user via multiple system accounts.\n\nThis requirement may be met via the application or by utilizing information system session control provided by a web server with specialized session management capabilities. If it has been specified that this requirement will be handled by the application, the capability to limit the maximum number of concurrent single user sessions must be designed and built into the application.\n\nThe organization will need to define the maximum number of concurrent sessions for SQL Server accounts by account type, by account, or a combination thereof and SQL Server shall enforce this requirement.\n\nUnlimited concurrent connections to SQL Server could allow a successful DoS attack by exhausting connection resources.","descriptions":{"default":"Application management includes the ability to control the number of users and user sessions utilizing an application. Limiting the number of allowed users, and sessions per user, is helpful in limiting risks related to DoS attacks.\n\nThis requirement addresses concurrent session control for a single information system account and does not address concurrent sessions by a single user via multiple system accounts.\n\nThis requirement may be met via the application or by utilizing information system session control provided by a web server with specialized session management capabilities. If it has been specified that this requirement will be handled by the application, the capability to limit the maximum number of concurrent single user sessions must be designed and built into the application.\n\nThe organization will need to define the maximum number of concurrent sessions for SQL Server accounts by account type, by account, or a combination thereof and SQL Server shall enforce this requirement.\n\nUnlimited concurrent connections to SQL Server could allow a successful DoS attack by exhausting connection resources.","check":"Check SQL Server settings for the number of concurrent Check SQL Server settings for the number of concurrent sessions by running the following script:\n\nUSE MASTER\nGO\n\nEXEC sys.sp_configure N'show advanced options', N'1'  RECONFIGURE WITH OVERRIDE\nGO\nEXEC sys.sp_configure N'user connections'\nEXEC sys.sp_configure N'show advanced options', N'0'  RECONFIGURE WITH OVERRIDE\nGO\n\nIf SQL Server settings for concurrent sessions is not lower than or equal to the organization-defined maximum number of sessions, this is a finding.","fix":"Configure SQL Server number of concurrent sessions to the organization-defined maximum number of sessions by running the following script:\n\nUSE MASTER\nGO\n\nEXEC sys.sp_configure N'show advanced options', N'1'  RECONFIGURE WITH OVERRIDE\nGO\nEXEC sys.sp_configure N'user connections', <'maximum number of SQL Server concurrent connections'>\nEXEC sys.sp_configure N'show advanced options', N'0'  RECONFIGURE WITH OVERRIDE\nGO"},"impact":0.5,"refs":[{"ref":"DPMS Target SQL Server Database 2012"}],"tags":{"check_id":"C-47957r2_chk","severity":"medium","gid":"V-41422","rid":"SV-53951r2_rule","stig_id":"SQL2-00-022000","gtitle":"SRG-APP-000245-DB-000132","fix_id":"F-46851r2_fix","documentable":null,"cci":["CCI-002385"],"nist":["SC-5 a"]}},{"id":"SV-53953","code":"control 'SV-53953' do\n  title 'SQL Server must check the validity of data inputs.'\n  desc 'Invalid user input occurs when a user inserts data or characters into an application’s data entry fields and the application is unprepared to process that data. This results in unanticipated application behavior potentially leading to an application or information system compromise. Invalid user input is one of the primary methods employed when attempting to compromise an application.\n\nSQL Server needs to validate the data user’s attempt to input to the application for processing. Rules for checking the valid syntax and semantics of information system inputs (e.g., character set, length, numerical range, acceptable values) are in place to verify inputs match specified definitions for format and content. Inputs passed to interpreters are prescreened to prevent the content from being unintentionally interpreted as commands.\n\nA poorly designed database system can have many problems. A common issue with these types of systems is the missed opportunity to use constraints.\n\nWhile this matter is of great importance to the secure operation of database management systems, the DBA in a typical installation will communicate with the application development/support staff to obtain assurance that this requirement is met.'\n  desc 'check', 'Review SQL Server field definitions, constraints, and foreign keys to determine whether or not data being input into the database is valid.\nIf field definitions are not reflective of the data, this is a finding.\n\nIf column data types are not assigned correctly where required within the database, this is a finding.\n\nIf columns do not contain reasonable constraints based on column use, this is a finding.'\n  desc 'fix', 'Use triggers, constraints, foreign keys, etc. to validate data input.\n\nModify SQL Server to properly use the correct column data types as required in the database.'\n  impact 0.5\n  ref 'DPMS Target SQL Server Database 2012'\n  tag check_id: 'C-47958r2_chk'\n  tag severity: 'medium'\n  tag gid: 'V-41424'\n  tag rid: 'SV-53953r3_rule'\n  tag stig_id: 'SQL2-00-022500'\n  tag gtitle: 'SRG-APP-000251-DB-000160'\n  tag fix_id: 'F-46852r2_fix'\n  tag 'documentable'\n  tag cci: ['CCI-001310']\n  tag nist: ['SI-10']\nend","source_location":{"line":1,"ref":"U_MS_SQL_Server_Database_2012_V1R20/controls/SV-53953.rb"},"title":"SQL Server must check the validity of data inputs.","desc":"Invalid user input occurs when a user inserts data or characters into an application’s data entry fields and the application is unprepared to process that data. This results in unanticipated application behavior potentially leading to an application or information system compromise. Invalid user input is one of the primary methods employed when attempting to compromise an application.\n\nSQL Server needs to validate the data user’s attempt to input to the application for processing. Rules for checking the valid syntax and semantics of information system inputs (e.g., character set, length, numerical range, acceptable values) are in place to verify inputs match specified definitions for format and content. Inputs passed to interpreters are prescreened to prevent the content from being unintentionally interpreted as commands.\n\nA poorly designed database system can have many problems. A common issue with these types of systems is the missed opportunity to use constraints.\n\nWhile this matter is of great importance to the secure operation of database management systems, the DBA in a typical installation will communicate with the application development/support staff to obtain assurance that this requirement is met.","descriptions":{"default":"Invalid user input occurs when a user inserts data or characters into an application’s data entry fields and the application is unprepared to process that data. This results in unanticipated application behavior potentially leading to an application or information system compromise. Invalid user input is one of the primary methods employed when attempting to compromise an application.\n\nSQL Server needs to validate the data user’s attempt to input to the application for processing. Rules for checking the valid syntax and semantics of information system inputs (e.g., character set, length, numerical range, acceptable values) are in place to verify inputs match specified definitions for format and content. Inputs passed to interpreters are prescreened to prevent the content from being unintentionally interpreted as commands.\n\nA poorly designed database system can have many problems. A common issue with these types of systems is the missed opportunity to use constraints.\n\nWhile this matter is of great importance to the secure operation of database management systems, the DBA in a typical installation will communicate with the application development/support staff to obtain assurance that this requirement is met.","check":"Review SQL Server field definitions, constraints, and foreign keys to determine whether or not data being input into the database is valid.\nIf field definitions are not reflective of the data, this is a finding.\n\nIf column data types are not assigned correctly where required within the database, this is a finding.\n\nIf columns do not contain reasonable constraints based on column use, this is a finding.","fix":"Use triggers, constraints, foreign keys, etc. to validate data input.\n\nModify SQL Server to properly use the correct column data types as required in the database."},"impact":0.5,"refs":[{"ref":"DPMS Target SQL Server Database 2012"}],"tags":{"check_id":"C-47958r2_chk","severity":"medium","gid":"V-41424","rid":"SV-53953r3_rule","stig_id":"SQL2-00-022500","gtitle":"SRG-APP-000251-DB-000160","fix_id":"F-46852r2_fix","documentable":null,"cci":["CCI-001310"],"nist":["SI-10"]}},{"id":"SV-75113","code":"control 'SV-75113' do\n  title 'In a database owned by a login not having administrative privileges at the instance level, the database property TRUSTWORTHY must be OFF unless required and authorized.'\n  desc \"SQL Server's fixed (built-in) server roles, especially [sysadmin], have powerful capabilities that could cause great harm if misused, so their use must be tightly controlled.\n\nThe SQL Server instance uses each database's TRUSTWORTHY property to guard against tampering that could enable unwarranted privilege escalation.  When TRUSTWORTHY is 0/False/Off, SQL Server prevents the database from accessing resources in other databases.  When TRUSTWORTHY is 1/True/On, SQL Server permits access to other databases (subject to other protections).  SQL Server sets TRUSTWORTHY OFF when it creates a new database.  SQL Server forces TRUSTWORTHY OFF, irrespective of its prior value, when an existing database is attached to it, to address the possibility that an adversary may have tampered with the database, introducing malicious code.  To set TRUSTWORTHY ON, an account with the [sysadmin] role must issue an ALTER DATABASE command.\n\nAlthough SQL Server itself treats this property conservatively, application installer programs may set TRUSTWORTHY ON and leave it on.  This provides an opportunity for misuse.\n\nWhen TRUSTWORTHY is ON, users of the database can take advantage of the database owner's privileges, by impersonating the owner.  This can have particularly serious consequences if the database owner is the [sa] login (which may have been renamed in accordance with SQL2-00-010200, and disabled in accordance with SQL2-00-017100, but nonetheless can be invoked in an EXECUTE AS USER = 'dbo' statement, or CREATE PROCEDURE ... WITH EXECUTE AS OWNER ...).   The [sa] login cannot be removed from the [sysadmin] role.  The user impersonating [sa] - or another [sysadmin] account - is then able to perform administrative actions across all databases under the instance, including making any himself or any other login a member of [sysadmin].\n\nMost of the other fixed server roles could be similarly abused.\n\nTherefore, TRUSTWORTHY must not be used on databases owned by logins that are members of the fixed server roles.  Further, if TRUSTWORTHY is to be used for any other database, the need must be documented and approved.\n\nThe system database [msdb] is an exception: it is required to be TRUSTWORTHY.\"\n  desc 'check', \"If the database is owned by an account that is directly or indirectly a member of a fixed (built-in) server role, this is not applicable (NA).\n\nRun the query:\nUSE <database name>;\nGO\nSELECT \n       DB_NAME()                  AS [Database], \n       SUSER_SNAME(D.owner_sid)   AS [Database Owner], \n       CASE WHEN D.is_trustworthy_on = 1 THEN 'ON' ELSE 'off' END\n                                  AS [Trustworthy]\nFROM\n       sys.databases D \nWHERE\n       D.[name] = DB_NAME()\nAND    DB_NAME() <> 'msdb'\nAND    D.is_trustworthy_on = 1;\nGO\nIf the query returns a row indicating that the TRUSTWORTHY setting is OFF, or returns no rows, this is not a finding. \n\nReview the system security plan to determine whether the need for TRUSTWORTHY is documented and approved.  If not, this is a finding.\"\n  desc 'fix', 'USE [master];\nGO\nALTER DATABASE <name> SET TRUSTWORTHY OFF;\nGO'\n  impact 0.5\n  ref 'DPMS Target SQL Server Database 2012'\n  tag check_id: 'C-61703r3_chk'\n  tag severity: 'medium'\n  tag gid: 'V-60671'\n  tag rid: 'SV-75113r1_rule'\n  tag stig_id: 'SQL2-00-015620'\n  tag gtitle: 'SRG-APP-000133-DB-000200'\n  tag fix_id: 'F-66461r1_fix'\n  tag 'documentable'\n  tag cci: ['CCI-001499']\n  tag nist: ['CM-5 (6)']\nend","source_location":{"line":1,"ref":"U_MS_SQL_Server_Database_2012_V1R20/controls/SV-75113.rb"},"title":"In a database owned by a login not having administrative privileges at the instance level, the database property TRUSTWORTHY must be OFF unless required and authorized.","desc":"SQL Server's fixed (built-in) server roles, especially [sysadmin], have powerful capabilities that could cause great harm if misused, so their use must be tightly controlled.\n\nThe SQL Server instance uses each database's TRUSTWORTHY property to guard against tampering that could enable unwarranted privilege escalation.  When TRUSTWORTHY is 0/False/Off, SQL Server prevents the database from accessing resources in other databases.  When TRUSTWORTHY is 1/True/On, SQL Server permits access to other databases (subject to other protections).  SQL Server sets TRUSTWORTHY OFF when it creates a new database.  SQL Server forces TRUSTWORTHY OFF, irrespective of its prior value, when an existing database is attached to it, to address the possibility that an adversary may have tampered with the database, introducing malicious code.  To set TRUSTWORTHY ON, an account with the [sysadmin] role must issue an ALTER DATABASE command.\n\nAlthough SQL Server itself treats this property conservatively, application installer programs may set TRUSTWORTHY ON and leave it on.  This provides an opportunity for misuse.\n\nWhen TRUSTWORTHY is ON, users of the database can take advantage of the database owner's privileges, by impersonating the owner.  This can have particularly serious consequences if the database owner is the [sa] login (which may have been renamed in accordance with SQL2-00-010200, and disabled in accordance with SQL2-00-017100, but nonetheless can be invoked in an EXECUTE AS USER = 'dbo' statement, or CREATE PROCEDURE ... WITH EXECUTE AS OWNER ...).   The [sa] login cannot be removed from the [sysadmin] role.  The user impersonating [sa] - or another [sysadmin] account - is then able to perform administrative actions across all databases under the instance, including making any himself or any other login a member of [sysadmin].\n\nMost of the other fixed server roles could be similarly abused.\n\nTherefore, TRUSTWORTHY must not be used on databases owned by logins that are members of the fixed server roles.  Further, if TRUSTWORTHY is to be used for any other database, the need must be documented and approved.\n\nThe system database [msdb] is an exception: it is required to be TRUSTWORTHY.","descriptions":{"default":"SQL Server's fixed (built-in) server roles, especially [sysadmin], have powerful capabilities that could cause great harm if misused, so their use must be tightly controlled.\n\nThe SQL Server instance uses each database's TRUSTWORTHY property to guard against tampering that could enable unwarranted privilege escalation.  When TRUSTWORTHY is 0/False/Off, SQL Server prevents the database from accessing resources in other databases.  When TRUSTWORTHY is 1/True/On, SQL Server permits access to other databases (subject to other protections).  SQL Server sets TRUSTWORTHY OFF when it creates a new database.  SQL Server forces TRUSTWORTHY OFF, irrespective of its prior value, when an existing database is attached to it, to address the possibility that an adversary may have tampered with the database, introducing malicious code.  To set TRUSTWORTHY ON, an account with the [sysadmin] role must issue an ALTER DATABASE command.\n\nAlthough SQL Server itself treats this property conservatively, application installer programs may set TRUSTWORTHY ON and leave it on.  This provides an opportunity for misuse.\n\nWhen TRUSTWORTHY is ON, users of the database can take advantage of the database owner's privileges, by impersonating the owner.  This can have particularly serious consequences if the database owner is the [sa] login (which may have been renamed in accordance with SQL2-00-010200, and disabled in accordance with SQL2-00-017100, but nonetheless can be invoked in an EXECUTE AS USER = 'dbo' statement, or CREATE PROCEDURE ... WITH EXECUTE AS OWNER ...).   The [sa] login cannot be removed from the [sysadmin] role.  The user impersonating [sa] - or another [sysadmin] account - is then able to perform administrative actions across all databases under the instance, including making any himself or any other login a member of [sysadmin].\n\nMost of the other fixed server roles could be similarly abused.\n\nTherefore, TRUSTWORTHY must not be used on databases owned by logins that are members of the fixed server roles.  Further, if TRUSTWORTHY is to be used for any other database, the need must be documented and approved.\n\nThe system database [msdb] is an exception: it is required to be TRUSTWORTHY.","check":"If the database is owned by an account that is directly or indirectly a member of a fixed (built-in) server role, this is not applicable (NA).\n\nRun the query:\nUSE <database name>;\nGO\nSELECT \n       DB_NAME()                  AS [Database], \n       SUSER_SNAME(D.owner_sid)   AS [Database Owner], \n       CASE WHEN D.is_trustworthy_on = 1 THEN 'ON' ELSE 'off' END\n                                  AS [Trustworthy]\nFROM\n       sys.databases D \nWHERE\n       D.[name] = DB_NAME()\nAND    DB_NAME() <> 'msdb'\nAND    D.is_trustworthy_on = 1;\nGO\nIf the query returns a row indicating that the TRUSTWORTHY setting is OFF, or returns no rows, this is not a finding. \n\nReview the system security plan to determine whether the need for TRUSTWORTHY is documented and approved.  If not, this is a finding.","fix":"USE [master];\nGO\nALTER DATABASE <name> SET TRUSTWORTHY OFF;\nGO"},"impact":0.5,"refs":[{"ref":"DPMS Target SQL Server Database 2012"}],"tags":{"check_id":"C-61703r3_chk","severity":"medium","gid":"V-60671","rid":"SV-75113r1_rule","stig_id":"SQL2-00-015620","gtitle":"SRG-APP-000133-DB-000200","fix_id":"F-66461r1_fix","documentable":null,"cci":["CCI-001499"],"nist":["CM-5 (6)"]}},{"id":"SV-75233","code":"control 'SV-75233' do\n  title 'In a database owned by [sa], or by any other login having administrative privileges at the instance level, the database property TRUSTWORTHY must be OFF.'\n  desc \"SQL Server's fixed (built-in) server roles, especially [sysadmin], have powerful capabilities that could cause great harm if misused, so their use must be tightly controlled.\n\nThe SQL Server instance uses each database's TRUSTWORTHY property to guard against tampering that could enable unwarranted privilege escalation.  When TRUSTWORTHY is 0/False/Off, SQL Server prevents the database from accessing resources in other databases.  When TRUSTWORTHY is 1/True/On, SQL Server permits access to other databases (subject to other protections).  SQL Server sets TRUSTWORTHY OFF when it creates a new database.  SQL Server forces TRUSTWORTHY OFF, irrespective of its prior value, when an existing database is attached to it, to address the possibility that an adversary may have tampered with the database, introducing malicious code.  To set TRUSTWORTHY ON, an account with the [sysadmin] role must issue an ALTER DATABASE command.\n\nAlthough SQL Server itself treats this property conservatively, application installer programs may set TRUSTWORTHY ON and leave it on.  This provides an opportunity for misuse.\n\nWhen TRUSTWORTHY is ON, users of the database can take advantage of the database owner's privileges, by impersonating the owner.  This can have particularly serious consequences if the database owner is the [sa] login (which may have been renamed in accordance with SQL2-00-010200, and disabled in accordance with SQL2-00-017100, but nonetheless can be invoked in an EXECUTE AS USER = 'dbo' statement, or CREATE PROCEDURE ... WITH EXECUTE AS OWNER ...).   The [sa] login cannot be removed from the [sysadmin] role.  The user impersonating [sa] - or another [sysadmin] account - is then able to perform administrative actions across all databases under the instance, including making any himself or any other login a member of [sysadmin].\n\nMost of the other fixed server roles could be similarly abused.\n\nTherefore, TRUSTWORTHY must not be used on databases owned by logins that are members of the fixed server roles.  Further, if TRUSTWORTHY is to be used for any other database, the need must be documented and approved.\n\nThe system database [msdb] is an exception: it is required to be TRUSTWORTHY.\"\n  desc 'check', \"USE <database name>;\nGO\nWITH FixedServerRoles(RoleName) AS\n(\n\tSELECT 'sysadmin'\n\tUNION SELECT 'securityadmin'\n\tUNION SELECT 'serveradmin'\n\tUNION SELECT 'setupadmin'\n\tUNION SELECT 'processadmin'\n\tUNION SELECT 'diskadmin'\n\tUNION SELECT 'dbcreator'\n\tUNION SELECT 'bulkadmin'\n)\nSELECT \n\tDB_NAME() AS [Database], \n\tSUSER_SNAME(D.owner_sid) AS [Database Owner], \n\tF.RoleName AS [Fixed Server Role],\n\tCASE WHEN D.is_trustworthy_on = 1 THEN 'ON' ELSE 'off' END\n\t\tAS [Trustworthy]\t\nFROM\n\tFixedServerRoles F\n\tINNER JOIN sys.databases D ON D.Name = DB_NAME()\nWHERE \n\tIS_SRVROLEMEMBER(F.RoleName, SUSER_SNAME(D.owner_sid)) = 1\nAND\tDB_NAME()  <>  'msdb'\nAND\tD.is_trustworthy_on = 1;\nGO\nIf the query returns any rows, this is a finding.\"\n  desc 'fix', \"Set the TRUSTWORTHY property OFF; or remove the database owner from the fixed server role(s); or change the database owner.\n\n\nTo set the TRUSTWORTHY property OFF:\nUSE [master];\nGO\nALTER DATABASE <name> SET TRUSTWORTHY OFF;\nGO\nVerify that this produced the intended result by re-running the query specified in the Check.\n\n\nTo determine the path or paths by which the database owner is assigned the fixed server role or roles, run this query:\n\nUSE <database name>;\nGO\nWITH C AS\n(\nSELECT \n\tP.name\t\tAS [Parent Server Role],\n\tCAST('Fixed' AS varchar(8))\n\t\t\t\tAS [Server Role Type],\n\tM.name\t\tAS [Member],\n\tM.type_desc\tAS [Member Type],\n\tP.name \t\tAS [Root],\n\t1\t\t\tAS [Level]\nFROM\n\t[sys].[server_role_members] X\n\tINNER JOIN [sys].[server_principals] P ON P.principal_id = X.role_principal_id\n\tINNER JOIN [sys].[server_principals] M ON M.principal_id = X.member_principal_id\nWHERE\n\tP.is_fixed_role = 1\nUNION ALL\nSELECT \n\tP.name\t\tAS [Parent Server Role],\n\tCASE WHEN M.is_fixed_role = 1 THEN CAST('Fixed' AS varchar(8)) ELSE CAST('Custom' AS varchar(8)) END\n\t\t\t\tAS [Server Role Type],\n\tM.name\t\tAS [Member],\n\tM.type_desc\tAS [Member Type],\n\tC.[Root]\tAS [Root],\n\tC.[Level] + 1\tAS [Level]\nFROM\n\t[sys].[server_role_members] X\n\tINNER JOIN [sys].[server_principals] P ON P.principal_id = X.role_principal_id\n\tINNER JOIN [sys].[server_principals] M ON M.principal_id = X.member_principal_id\n\tINNER JOIN C ON P.name = C.Member\n)\n,\nB AS\n(\nSELECT \n\tC.[Member] AS [Leaf],\n\tC.[Root],\n\tC.[Parent Server Role],\n\tC.[Server Role Type],\n\tC.[Member],\n\tC.[Member Type],\n\tC.[Level]\nFROM C \nWHERE\n\tC.[Member Type] NOT LIKE '%ROLE%'\nUNION ALL\nSELECT  \n\tB.[Leaf],\n\tC.[Root],\n\tC.[Parent Server Role],\n\tC.[Server Role Type],\n\tC.[Member],\n\tC.[Member Type],\n\tC.[Level]\nFROM C\nINNER JOIN B\n\tON\tC.[Member] = B.[Parent Server Role]\n\tAND\tC.[Level] = B.[Level] - 1\n\tAND\tC.[Root] = B.[Root]\n)\nSELECT\n\tDB_NAME()\tAS [Database],  \n\tB.[Leaf]\tAS [Owner Login],\n\tB.[Root]\tAS[Top-Level Server Role],\n\tB.[Parent Server Role],\n\tB.[Server Role Type],\n\tB.[Member],\n\tB.[Member Type],\n\tB.[Level]\nFROM B \nWHERE B.[Leaf] = (SELECT SUSER_SNAME(D.owner_sid) FROM sys.databases D WHERE D.Name = DB_NAME())\nORDER BY B.[Root], B.[Level], B.[Parent Server Role], B.[Member]\n;\nGO\n\nTo remove the database owner from a fixed server role or a custom server role:\nUSE [master];\nGO\nALTER SERVER ROLE <fixed/custom server role name>\n\tDROP MEMBER <database owner name>;\nGO\nVerify that this produced the intended result by re-running the Check query.\n\n\nTo change the database owner:\nUSE [master];\nGO\nALTER AUTHORIZATION ON DATABASE::<DB name> TO <new owner name>;\nGO\nVerify that this produced the intended result by re-running the Check query.\"\n  impact 0.5\n  ref 'DPMS Target SQL Server Database 2012'\n  tag check_id: 'C-61705r2_chk'\n  tag severity: 'medium'\n  tag gid: 'V-60781'\n  tag rid: 'SV-75233r1_rule'\n  tag stig_id: 'SQL2-00-015610'\n  tag gtitle: 'SRG-APP-000133-DB-000200'\n  tag fix_id: 'F-66463r5_fix'\n  tag 'documentable'\n  tag cci: ['CCI-001499']\n  tag nist: ['CM-5 (6)']\nend","source_location":{"line":1,"ref":"U_MS_SQL_Server_Database_2012_V1R20/controls/SV-75233.rb"},"title":"In a database owned by [sa], or by any other login having administrative privileges at the instance level, the database property TRUSTWORTHY must be OFF.","desc":"SQL Server's fixed (built-in) server roles, especially [sysadmin], have powerful capabilities that could cause great harm if misused, so their use must be tightly controlled.\n\nThe SQL Server instance uses each database's TRUSTWORTHY property to guard against tampering that could enable unwarranted privilege escalation.  When TRUSTWORTHY is 0/False/Off, SQL Server prevents the database from accessing resources in other databases.  When TRUSTWORTHY is 1/True/On, SQL Server permits access to other databases (subject to other protections).  SQL Server sets TRUSTWORTHY OFF when it creates a new database.  SQL Server forces TRUSTWORTHY OFF, irrespective of its prior value, when an existing database is attached to it, to address the possibility that an adversary may have tampered with the database, introducing malicious code.  To set TRUSTWORTHY ON, an account with the [sysadmin] role must issue an ALTER DATABASE command.\n\nAlthough SQL Server itself treats this property conservatively, application installer programs may set TRUSTWORTHY ON and leave it on.  This provides an opportunity for misuse.\n\nWhen TRUSTWORTHY is ON, users of the database can take advantage of the database owner's privileges, by impersonating the owner.  This can have particularly serious consequences if the database owner is the [sa] login (which may have been renamed in accordance with SQL2-00-010200, and disabled in accordance with SQL2-00-017100, but nonetheless can be invoked in an EXECUTE AS USER = 'dbo' statement, or CREATE PROCEDURE ... WITH EXECUTE AS OWNER ...).   The [sa] login cannot be removed from the [sysadmin] role.  The user impersonating [sa] - or another [sysadmin] account - is then able to perform administrative actions across all databases under the instance, including making any himself or any other login a member of [sysadmin].\n\nMost of the other fixed server roles could be similarly abused.\n\nTherefore, TRUSTWORTHY must not be used on databases owned by logins that are members of the fixed server roles.  Further, if TRUSTWORTHY is to be used for any other database, the need must be documented and approved.\n\nThe system database [msdb] is an exception: it is required to be TRUSTWORTHY.","descriptions":{"default":"SQL Server's fixed (built-in) server roles, especially [sysadmin], have powerful capabilities that could cause great harm if misused, so their use must be tightly controlled.\n\nThe SQL Server instance uses each database's TRUSTWORTHY property to guard against tampering that could enable unwarranted privilege escalation.  When TRUSTWORTHY is 0/False/Off, SQL Server prevents the database from accessing resources in other databases.  When TRUSTWORTHY is 1/True/On, SQL Server permits access to other databases (subject to other protections).  SQL Server sets TRUSTWORTHY OFF when it creates a new database.  SQL Server forces TRUSTWORTHY OFF, irrespective of its prior value, when an existing database is attached to it, to address the possibility that an adversary may have tampered with the database, introducing malicious code.  To set TRUSTWORTHY ON, an account with the [sysadmin] role must issue an ALTER DATABASE command.\n\nAlthough SQL Server itself treats this property conservatively, application installer programs may set TRUSTWORTHY ON and leave it on.  This provides an opportunity for misuse.\n\nWhen TRUSTWORTHY is ON, users of the database can take advantage of the database owner's privileges, by impersonating the owner.  This can have particularly serious consequences if the database owner is the [sa] login (which may have been renamed in accordance with SQL2-00-010200, and disabled in accordance with SQL2-00-017100, but nonetheless can be invoked in an EXECUTE AS USER = 'dbo' statement, or CREATE PROCEDURE ... WITH EXECUTE AS OWNER ...).   The [sa] login cannot be removed from the [sysadmin] role.  The user impersonating [sa] - or another [sysadmin] account - is then able to perform administrative actions across all databases under the instance, including making any himself or any other login a member of [sysadmin].\n\nMost of the other fixed server roles could be similarly abused.\n\nTherefore, TRUSTWORTHY must not be used on databases owned by logins that are members of the fixed server roles.  Further, if TRUSTWORTHY is to be used for any other database, the need must be documented and approved.\n\nThe system database [msdb] is an exception: it is required to be TRUSTWORTHY.","check":"USE <database name>;\nGO\nWITH FixedServerRoles(RoleName) AS\n(\n\tSELECT 'sysadmin'\n\tUNION SELECT 'securityadmin'\n\tUNION SELECT 'serveradmin'\n\tUNION SELECT 'setupadmin'\n\tUNION SELECT 'processadmin'\n\tUNION SELECT 'diskadmin'\n\tUNION SELECT 'dbcreator'\n\tUNION SELECT 'bulkadmin'\n)\nSELECT \n\tDB_NAME() AS [Database], \n\tSUSER_SNAME(D.owner_sid) AS [Database Owner], \n\tF.RoleName AS [Fixed Server Role],\n\tCASE WHEN D.is_trustworthy_on = 1 THEN 'ON' ELSE 'off' END\n\t\tAS [Trustworthy]\t\nFROM\n\tFixedServerRoles F\n\tINNER JOIN sys.databases D ON D.Name = DB_NAME()\nWHERE \n\tIS_SRVROLEMEMBER(F.RoleName, SUSER_SNAME(D.owner_sid)) = 1\nAND\tDB_NAME()  <>  'msdb'\nAND\tD.is_trustworthy_on = 1;\nGO\nIf the query returns any rows, this is a finding.","fix":"Set the TRUSTWORTHY property OFF; or remove the database owner from the fixed server role(s); or change the database owner.\n\n\nTo set the TRUSTWORTHY property OFF:\nUSE [master];\nGO\nALTER DATABASE <name> SET TRUSTWORTHY OFF;\nGO\nVerify that this produced the intended result by re-running the query specified in the Check.\n\n\nTo determine the path or paths by which the database owner is assigned the fixed server role or roles, run this query:\n\nUSE <database name>;\nGO\nWITH C AS\n(\nSELECT \n\tP.name\t\tAS [Parent Server Role],\n\tCAST('Fixed' AS varchar(8))\n\t\t\t\tAS [Server Role Type],\n\tM.name\t\tAS [Member],\n\tM.type_desc\tAS [Member Type],\n\tP.name \t\tAS [Root],\n\t1\t\t\tAS [Level]\nFROM\n\t[sys].[server_role_members] X\n\tINNER JOIN [sys].[server_principals] P ON P.principal_id = X.role_principal_id\n\tINNER JOIN [sys].[server_principals] M ON M.principal_id = X.member_principal_id\nWHERE\n\tP.is_fixed_role = 1\nUNION ALL\nSELECT \n\tP.name\t\tAS [Parent Server Role],\n\tCASE WHEN M.is_fixed_role = 1 THEN CAST('Fixed' AS varchar(8)) ELSE CAST('Custom' AS varchar(8)) END\n\t\t\t\tAS [Server Role Type],\n\tM.name\t\tAS [Member],\n\tM.type_desc\tAS [Member Type],\n\tC.[Root]\tAS [Root],\n\tC.[Level] + 1\tAS [Level]\nFROM\n\t[sys].[server_role_members] X\n\tINNER JOIN [sys].[server_principals] P ON P.principal_id = X.role_principal_id\n\tINNER JOIN [sys].[server_principals] M ON M.principal_id = X.member_principal_id\n\tINNER JOIN C ON P.name = C.Member\n)\n,\nB AS\n(\nSELECT \n\tC.[Member] AS [Leaf],\n\tC.[Root],\n\tC.[Parent Server Role],\n\tC.[Server Role Type],\n\tC.[Member],\n\tC.[Member Type],\n\tC.[Level]\nFROM C \nWHERE\n\tC.[Member Type] NOT LIKE '%ROLE%'\nUNION ALL\nSELECT  \n\tB.[Leaf],\n\tC.[Root],\n\tC.[Parent Server Role],\n\tC.[Server Role Type],\n\tC.[Member],\n\tC.[Member Type],\n\tC.[Level]\nFROM C\nINNER JOIN B\n\tON\tC.[Member] = B.[Parent Server Role]\n\tAND\tC.[Level] = B.[Level] - 1\n\tAND\tC.[Root] = B.[Root]\n)\nSELECT\n\tDB_NAME()\tAS [Database],  \n\tB.[Leaf]\tAS [Owner Login],\n\tB.[Root]\tAS[Top-Level Server Role],\n\tB.[Parent Server Role],\n\tB.[Server Role Type],\n\tB.[Member],\n\tB.[Member Type],\n\tB.[Level]\nFROM B \nWHERE B.[Leaf] = (SELECT SUSER_SNAME(D.owner_sid) FROM sys.databases D WHERE D.Name = DB_NAME())\nORDER BY B.[Root], B.[Level], B.[Parent Server Role], B.[Member]\n;\nGO\n\nTo remove the database owner from a fixed server role or a custom server role:\nUSE [master];\nGO\nALTER SERVER ROLE <fixed/custom server role name>\n\tDROP MEMBER <database owner name>;\nGO\nVerify that this produced the intended result by re-running the Check query.\n\n\nTo change the database owner:\nUSE [master];\nGO\nALTER AUTHORIZATION ON DATABASE::<DB name> TO <new owner name>;\nGO\nVerify that this produced the intended result by re-running the Check query."},"impact":0.5,"refs":[{"ref":"DPMS Target SQL Server Database 2012"}],"tags":{"check_id":"C-61705r2_chk","severity":"medium","gid":"V-60781","rid":"SV-75233r1_rule","stig_id":"SQL2-00-015610","gtitle":"SRG-APP-000133-DB-000200","fix_id":"F-66463r5_fix","documentable":null,"cci":["CCI-001499"],"nist":["CM-5 (6)"]}},{"id":"SV-85249","code":"control 'SV-85249' do\n  title 'Appropriate staff must be alerted when the amount of storage space used by the SQL Server transaction log file(s) exceeds an organization-defined value.'\n  desc 'It is important for the appropriate personnel to be aware if the system is at risk of failing to record transaction log data.  The transaction log is the heart of a SQL Server database.  If it fails, processing will stop.  It must always have enough available storage space to cope with peak load.  Administrators must be warned about abnormally high space consumption soon enough to take corrective action before all space is used up.'\n  desc 'check', 'Review system documentation and/or organizational procedures to determine the threshold value for the storage used by the transaction log, above which staff must be alerted.  The threshold may be expressed as an absolute quantity, or a percentage of total available space.\n\nIf this threshold has not been defined, this is a finding.\n\nIf monitoring software is in use, and has been configured to alert system and database administrators when the threshold is exceeded, this is not a finding.\n\nIf manual procedures exist for frequently checking the space used and alerting system and database administrators, and there is evidence that the procedures are adhered to, this is not a finding.\n\nOtherwise, this is a finding.'\n  desc 'fix', 'Decide on, and document, the threshold value for alerting administrators to a shortage of storage for the transaction log.\n\nEstablish automated or manual monitoring and alerting.'\n  impact 0.3\n  ref 'DPMS Target SQL Server Database 2012'\n  tag check_id: 'C-71297r2_chk'\n  tag severity: 'low'\n  tag gid: 'V-70627'\n  tag rid: 'SV-85249r2_rule'\n  tag stig_id: 'SQL2-00-017510'\n  tag gtitle: 'SRG-APP-000144-DB-000101'\n  tag fix_id: 'F-77185r1_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000553']\n  tag nist: ['CP-10 (2)']\nend","source_location":{"line":1,"ref":"U_MS_SQL_Server_Database_2012_V1R20/controls/SV-85249.rb"},"title":"Appropriate staff must be alerted when the amount of storage space used by the SQL Server transaction log file(s) exceeds an organization-defined value.","desc":"It is important for the appropriate personnel to be aware if the system is at risk of failing to record transaction log data.  The transaction log is the heart of a SQL Server database.  If it fails, processing will stop.  It must always have enough available storage space to cope with peak load.  Administrators must be warned about abnormally high space consumption soon enough to take corrective action before all space is used up.","descriptions":{"default":"It is important for the appropriate personnel to be aware if the system is at risk of failing to record transaction log data.  The transaction log is the heart of a SQL Server database.  If it fails, processing will stop.  It must always have enough available storage space to cope with peak load.  Administrators must be warned about abnormally high space consumption soon enough to take corrective action before all space is used up.","check":"Review system documentation and/or organizational procedures to determine the threshold value for the storage used by the transaction log, above which staff must be alerted.  The threshold may be expressed as an absolute quantity, or a percentage of total available space.\n\nIf this threshold has not been defined, this is a finding.\n\nIf monitoring software is in use, and has been configured to alert system and database administrators when the threshold is exceeded, this is not a finding.\n\nIf manual procedures exist for frequently checking the space used and alerting system and database administrators, and there is evidence that the procedures are adhered to, this is not a finding.\n\nOtherwise, this is a finding.","fix":"Decide on, and document, the threshold value for alerting administrators to a shortage of storage for the transaction log.\n\nEstablish automated or manual monitoring and alerting."},"impact":0.3,"refs":[{"ref":"DPMS Target SQL Server Database 2012"}],"tags":{"check_id":"C-71297r2_chk","severity":"low","gid":"V-70627","rid":"SV-85249r2_rule","stig_id":"SQL2-00-017510","gtitle":"SRG-APP-000144-DB-000101","fix_id":"F-77185r1_fix","documentable":null,"cci":["CCI-000553"],"nist":["CP-10 (2)"]}}],"groups":[{"id":"controls/SV-53265.rb","title":null,"controls":["SV-53265"]},{"id":"controls/SV-53912.rb","title":null,"controls":["SV-53912"]},{"id":"controls/SV-53914.rb","title":null,"controls":["SV-53914"]},{"id":"controls/SV-53916.rb","title":null,"controls":["SV-53916"]},{"id":"controls/SV-53917.rb","title":null,"controls":["SV-53917"]},{"id":"controls/SV-53918.rb","title":null,"controls":["SV-53918"]},{"id":"controls/SV-53920.rb","title":null,"controls":["SV-53920"]},{"id":"controls/SV-53921.rb","title":null,"controls":["SV-53921"]},{"id":"controls/SV-53922.rb","title":null,"controls":["SV-53922"]},{"id":"controls/SV-53925.rb","title":null,"controls":["SV-53925"]},{"id":"controls/SV-53928.rb","title":null,"controls":["SV-53928"]},{"id":"controls/SV-53930.rb","title":null,"controls":["SV-53930"]},{"id":"controls/SV-53931.rb","title":null,"controls":["SV-53931"]},{"id":"controls/SV-53933.rb","title":null,"controls":["SV-53933"]},{"id":"controls/SV-53935.rb","title":null,"controls":["SV-53935"]},{"id":"controls/SV-53937.rb","title":null,"controls":["SV-53937"]},{"id":"controls/SV-53939.rb","title":null,"controls":["SV-53939"]},{"id":"controls/SV-53940.rb","title":null,"controls":["SV-53940"]},{"id":"controls/SV-53944.rb","title":null,"controls":["SV-53944"]},{"id":"controls/SV-53945.rb","title":null,"controls":["SV-53945"]},{"id":"controls/SV-53946.rb","title":null,"controls":["SV-53946"]},{"id":"controls/SV-53949.rb","title":null,"controls":["SV-53949"]},{"id":"controls/SV-53950.rb","title":null,"controls":["SV-53950"]},{"id":"controls/SV-53951.rb","title":null,"controls":["SV-53951"]},{"id":"controls/SV-53953.rb","title":null,"controls":["SV-53953"]},{"id":"controls/SV-75113.rb","title":null,"controls":["SV-75113"]},{"id":"controls/SV-75233.rb","title":null,"controls":["SV-75233"]},{"id":"controls/SV-85249.rb","title":null,"controls":["SV-85249"]}],"name":"MS_SQL_Server_Database_2012","title":null,"maintainer":null,"copyright":null,"copyright_email":null,"license":null,"summary":null,"description":null,"version":"1.0.0","supports":[],"depends":[],"inspec_version":null,"inputs":[],"sha256":"0c7a0aa6a6627673455e1f2c208f332764db72fd101ac39af436dbdb2ad01998","status_message":"","status":"loaded","generator":{"name":"inspec","version":"6.6.0"}}
