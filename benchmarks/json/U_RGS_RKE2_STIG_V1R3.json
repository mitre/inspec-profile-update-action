{"controls":[{"id":"SV-254553","code":"control 'SV-254553' do\n  title 'Rancher RKE2 must protect authenticity of communications sessions with the use of FIPS-validated 140-2 or 140-3 security requirements for cryptographic modules.'\n  desc 'Use strong TLS settings.\n\nRKE2 uses FIPS validated BoringCrypto modules. RKE2 Server can prohibit the use of SSL and unauthorized versions of TLS protocols to properly secure communication. There is a lot of traffic between RKE2 nodes to deploy, update, and delete resources so it is important to set strong TLS settings on top of this default feature. It is also important to use approved cypher suites. This ensures the protection of the transmitted information, confidentiality, and integrity so that the attacker cannot read or alter this communication.\n\nThe use of unsupported protocol exposes vulnerabilities to the Kubernetes by rogue traffic interceptions, man-in-the-middle attacks, and impersonation of users or services from the container platform runtime, registry, and key store.\n\nTo enable the enforcement of minimum version of TLS and cipher suites to be used by the various components of RKE2, the settings \"tls-min-version\" and \"tls-cipher-suites\" must be set.\n\nFurther documentation of the FIPS modules can be found here: https://docs.rke2.io/security/fips_support.\n\n'\n  desc 'check', 'Use strong TLS settings. \n\nOn an RKE2 server, run each command: \n\n/bin/ps -ef | grep kube-apiserver | grep -v grep\n\n/bin/ps -ef | grep kube-controller-manager | grep -v grep \n\n/bin/ps -ef | grep kube-scheduler | grep -v grep\n\nFor each, look for the existence of tls-min-version (use this command for an aid \"| grep tls-min-version\"): \nIf the setting \"tls-min-version\" is not configured or it is set to \"VersionTLS10\" or \"VersionTLS11\", this is a finding.\n\nFor each, look for the existence of the tls-cipher-suites. \nIf \"tls-cipher-suites\" is not set for all servers, or does not contain the following, this is a finding: \n\n--tls-cipher-suites=TLS_AES_128_GCM_SHA256, TLS_AES_256_GCM_SHA384,\nTLS_CHACHA20_POLY1305_SHA256, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, \nTLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,\nTLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, \nTLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305, \nTLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,\nTLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, \n124 | P a g eTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,\nTLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256, TLS_RSA_WITH_3DES_EDE_CBC_SHA,\nTLS_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_128_GCM_SHA256, \nTLS_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_256_GCM_SHA384'\n  desc 'fix', 'Use strong TLS settings.\n\nEdit the RKE2 Server configuration file on all RKE2 Server hosts, located at /etc/rancher/rke2/config.yaml, to contain the following:\n\nkube-controller-manager-arg: \n- \"tls-min-version=VersionTLS12\" [or higher]\n- \"tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\"\nkube-scheduler-arg: \n- \"tls-min-version=VersionTLS12\"\n- \"tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\"\nkube-apiserver-arg: \n- \"tls-min-version=VersionTLS12\"\n- \"tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\"\n\nOnce configuration file is updated, restart the RKE2 Server. Run the command:\nsystemctl restart rke2-server'\n  impact 0.7\n  ref 'DPMS Target RGS RKE2'\n  tag check_id: 'C-58037r894450_chk'\n  tag severity: 'high'\n  tag gid: 'V-254553'\n  tag rid: 'SV-254553r894451_rule'\n  tag stig_id: 'CNTR-R2-000010'\n  tag gtitle: 'SRG-APP-000014-CTR-000035'\n  tag fix_id: 'F-57986r859228_fix'\n  tag satisfies: ['SRG-APP-000014-CTR-000035', 'SRG-APP-000014-CTR-000040', 'SRG-APP-000219-CTR-000550', 'SRG-APP-000441-CTR-001090', 'SRG-APP-000442-CTR-001095', 'SRG-APP-000514-CTR-001315', 'SRG-APP-000560-CTR-001340', 'SRG-APP-000605-CTR-001380', 'SRG-APP-000610-CTR-001385', 'SRG-APP-000635-CTR-001405', 'SRG-APP-000645-CTR-001410']\n  tag 'documentable'\n  tag cci: ['CCI-000068', 'CCI-000185', 'CCI-000382', 'CCI-000803', 'CCI-001184', 'CCI-001453', 'CCI-002420', 'CCI-002422', 'CCI-002450']\n  tag nist: ['AC-17 (2)', 'IA-5 (2) (b) (1)', 'CM-7 b', 'IA-7', 'SC-23', 'AC-17 (2)', 'SC-8 (2)', 'SC-8 (2)', 'SC-13 b']\nend","source_location":{"line":1,"ref":"U_RGS_RKE2_STIG_V1R3/controls/SV-254553.rb"},"title":"Rancher RKE2 must protect authenticity of communications sessions with the use of FIPS-validated 140-2 or 140-3 security requirements for cryptographic modules.","desc":"Use strong TLS settings.\n\nRKE2 uses FIPS validated BoringCrypto modules. RKE2 Server can prohibit the use of SSL and unauthorized versions of TLS protocols to properly secure communication. There is a lot of traffic between RKE2 nodes to deploy, update, and delete resources so it is important to set strong TLS settings on top of this default feature. It is also important to use approved cypher suites. This ensures the protection of the transmitted information, confidentiality, and integrity so that the attacker cannot read or alter this communication.\n\nThe use of unsupported protocol exposes vulnerabilities to the Kubernetes by rogue traffic interceptions, man-in-the-middle attacks, and impersonation of users or services from the container platform runtime, registry, and key store.\n\nTo enable the enforcement of minimum version of TLS and cipher suites to be used by the various components of RKE2, the settings \"tls-min-version\" and \"tls-cipher-suites\" must be set.\n\nFurther documentation of the FIPS modules can be found here: https://docs.rke2.io/security/fips_support.\n\n","descriptions":{"default":"Use strong TLS settings.\n\nRKE2 uses FIPS validated BoringCrypto modules. RKE2 Server can prohibit the use of SSL and unauthorized versions of TLS protocols to properly secure communication. There is a lot of traffic between RKE2 nodes to deploy, update, and delete resources so it is important to set strong TLS settings on top of this default feature. It is also important to use approved cypher suites. This ensures the protection of the transmitted information, confidentiality, and integrity so that the attacker cannot read or alter this communication.\n\nThe use of unsupported protocol exposes vulnerabilities to the Kubernetes by rogue traffic interceptions, man-in-the-middle attacks, and impersonation of users or services from the container platform runtime, registry, and key store.\n\nTo enable the enforcement of minimum version of TLS and cipher suites to be used by the various components of RKE2, the settings \"tls-min-version\" and \"tls-cipher-suites\" must be set.\n\nFurther documentation of the FIPS modules can be found here: https://docs.rke2.io/security/fips_support.\n\n","check":"Use strong TLS settings. \n\nOn an RKE2 server, run each command: \n\n/bin/ps -ef | grep kube-apiserver | grep -v grep\n\n/bin/ps -ef | grep kube-controller-manager | grep -v grep \n\n/bin/ps -ef | grep kube-scheduler | grep -v grep\n\nFor each, look for the existence of tls-min-version (use this command for an aid \"| grep tls-min-version\"): \nIf the setting \"tls-min-version\" is not configured or it is set to \"VersionTLS10\" or \"VersionTLS11\", this is a finding.\n\nFor each, look for the existence of the tls-cipher-suites. \nIf \"tls-cipher-suites\" is not set for all servers, or does not contain the following, this is a finding: \n\n--tls-cipher-suites=TLS_AES_128_GCM_SHA256, TLS_AES_256_GCM_SHA384,\nTLS_CHACHA20_POLY1305_SHA256, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, \nTLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,\nTLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, \nTLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305, \nTLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,\nTLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, \n124 | P a g eTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,\nTLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256, TLS_RSA_WITH_3DES_EDE_CBC_SHA,\nTLS_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_128_GCM_SHA256, \nTLS_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_256_GCM_SHA384","fix":"Use strong TLS settings.\n\nEdit the RKE2 Server configuration file on all RKE2 Server hosts, located at /etc/rancher/rke2/config.yaml, to contain the following:\n\nkube-controller-manager-arg: \n- \"tls-min-version=VersionTLS12\" [or higher]\n- \"tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\"\nkube-scheduler-arg: \n- \"tls-min-version=VersionTLS12\"\n- \"tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\"\nkube-apiserver-arg: \n- \"tls-min-version=VersionTLS12\"\n- \"tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\"\n\nOnce configuration file is updated, restart the RKE2 Server. Run the command:\nsystemctl restart rke2-server"},"impact":0.7,"refs":[{"ref":"DPMS Target RGS RKE2"}],"tags":{"check_id":"C-58037r894450_chk","severity":"high","gid":"V-254553","rid":"SV-254553r894451_rule","stig_id":"CNTR-R2-000010","gtitle":"SRG-APP-000014-CTR-000035","fix_id":"F-57986r859228_fix","satisfies":["SRG-APP-000014-CTR-000035","SRG-APP-000014-CTR-000040","SRG-APP-000219-CTR-000550","SRG-APP-000441-CTR-001090","SRG-APP-000442-CTR-001095","SRG-APP-000514-CTR-001315","SRG-APP-000560-CTR-001340","SRG-APP-000605-CTR-001380","SRG-APP-000610-CTR-001385","SRG-APP-000635-CTR-001405","SRG-APP-000645-CTR-001410"],"documentable":null,"cci":["CCI-000068","CCI-000185","CCI-000382","CCI-000803","CCI-001184","CCI-001453","CCI-002420","CCI-002422","CCI-002450"],"nist":["AC-17 (2)","IA-5 (2) (b) (1)","CM-7 b","IA-7","SC-23","AC-17 (2)","SC-8 (2)","SC-8 (2)","SC-13 b"]}},{"id":"SV-254554","code":"control 'SV-254554' do\n  title 'RKE2 must use a centralized user management solution to support account management functions.'\n  desc 'The Kubernetes Controller Manager is a background process that embeds core control loops regulating cluster system state through the API Server. Every process executed in a pod has an associated service account. By default, service accounts use the same credentials for authentication. Implementing the default settings poses a high risk to the Kubernetes Controller Manager. Setting the use-service-account-credential value lowers the attack surface by generating unique service accounts settings for each controller instance.'\n  desc 'check', 'Ensure use-service-account-credentials argument is set correctly.\n\nRun this command on the RKE2 Control Plane:\n/bin/ps -ef | grep kube-controller-manager | grep -v grep\n\nIf --use-service-account-credentials argument is not set to \"true\" or is not configured, this is a finding.'\n  desc 'fix', 'Edit the RKE2 Configuration File /etc/rancher/rke2/config.yaml on the RKE2 Control Plane and set the following \"kube-controller-manager-arg\" argument:\n- use-service-account-credentials=true\n\nOnce the configuration file is updated, restart the RKE2 Server. Run the command:\nsystemctl restart rke2-server'\n  impact 0.5\n  ref 'DPMS Target RGS RKE2'\n  tag check_id: 'C-58038r859230_chk'\n  tag severity: 'medium'\n  tag gid: 'V-254554'\n  tag rid: 'SV-254554r918252_rule'\n  tag stig_id: 'CNTR-R2-000030'\n  tag gtitle: 'SRG-APP-000023-CTR-000055'\n  tag fix_id: 'F-57987r918225_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000015']\n  tag nist: ['AC-2 (1)']\nend","source_location":{"line":1,"ref":"U_RGS_RKE2_STIG_V1R3/controls/SV-254554.rb"},"title":"RKE2 must use a centralized user management solution to support account management functions.","desc":"The Kubernetes Controller Manager is a background process that embeds core control loops regulating cluster system state through the API Server. Every process executed in a pod has an associated service account. By default, service accounts use the same credentials for authentication. Implementing the default settings poses a high risk to the Kubernetes Controller Manager. Setting the use-service-account-credential value lowers the attack surface by generating unique service accounts settings for each controller instance.","descriptions":{"default":"The Kubernetes Controller Manager is a background process that embeds core control loops regulating cluster system state through the API Server. Every process executed in a pod has an associated service account. By default, service accounts use the same credentials for authentication. Implementing the default settings poses a high risk to the Kubernetes Controller Manager. Setting the use-service-account-credential value lowers the attack surface by generating unique service accounts settings for each controller instance.","check":"Ensure use-service-account-credentials argument is set correctly.\n\nRun this command on the RKE2 Control Plane:\n/bin/ps -ef | grep kube-controller-manager | grep -v grep\n\nIf --use-service-account-credentials argument is not set to \"true\" or is not configured, this is a finding.","fix":"Edit the RKE2 Configuration File /etc/rancher/rke2/config.yaml on the RKE2 Control Plane and set the following \"kube-controller-manager-arg\" argument:\n- use-service-account-credentials=true\n\nOnce the configuration file is updated, restart the RKE2 Server. Run the command:\nsystemctl restart rke2-server"},"impact":0.5,"refs":[{"ref":"DPMS Target RGS RKE2"}],"tags":{"check_id":"C-58038r859230_chk","severity":"medium","gid":"V-254554","rid":"SV-254554r918252_rule","stig_id":"CNTR-R2-000030","gtitle":"SRG-APP-000023-CTR-000055","fix_id":"F-57987r918225_fix","documentable":null,"cci":["CCI-000015"],"nist":["AC-2 (1)"]}},{"id":"SV-254555","code":"control 'SV-254555' do\n  title 'Rancher RKE2 components must be configured in accordance with the security configuration settings based on DoD security configuration or implementation guidance, including SRGs, STIGs, NSA configuration guides, CTOs, and DTMs.'\n  desc 'Once an attacker establishes access to a system, the attacker often attempts to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to modify an existing account. Auditing of account creation is one method for mitigating this risk. A comprehensive account management process will ensure an audit trail documents the creation of application user accounts and, as required, notifies administrators and/or application when accounts are created. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.\n\nWithin Rancher RKE2, audit data can be generated from any of the deployed container platform components. This audit data is important when there are issues, such as security incidents, that must be investigated. To make the audit data worthwhile for the investigation of events, it is necessary to know where within the container platform the event occurred.\n\nTo address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access/auditing mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to offload those access control functions and focus on core application features and functionality.\n\n'\n  desc 'check', %q(Audit logging and policies:\n\n1. On all hosts running RKE2 Server, run the command: \n/bin/ps -ef | grep kube-apiserver | grep -v grep\n\nIf --audit-policy-file is not set, this is a finding.      \nIf --audit-log-mode is not = \"blocking-strict\", this is a finding.                                                                                                                                                                                                                                                            \n\n2. Ensure the RKE2 Server configuration file on all RKE2 Server hosts, located at /etc/rancher/rke2/config.yaml, contains CIS profile setting. Run the following command:\ncat /etc/rancher/rke2/config.yaml \n\nIf a value for profile is not found, this is a finding. (Example: \"profile: cis-1.6\" )                                                                                                                                                                                                                                                                                                          \n\n3. Check the contents of the audit-policy file.                                                                                                                                                                                                                                                                                                                                               \nBy default, RKE2 expects the audit-policy file to be located at /etc/rancher/rke2/audit-policy.yaml; however, this location can be overridden in the /etc/rancher/rke2/config.yaml file with argument 'kube-apiserver-arg: \"audit-policy-file=/etc/rancher/rke2/audit-policy.yaml\"'.\n\nIf the audit policy file does not exist or does not look like the following, this is a finding.                                                                                                                                                                                                                                                            \n# Log all requests at the RequestResponse level.\napiVersion: audit.k8s.io/vX (Where X is the latest apiVersion)                                                                                            \nkind: Policy\nrules:                          \n- level: RequestResponse)\n  desc 'fix', \"Audit logging and policies:\n\nEdit the /etc/rancher/rke2/config.yaml file, and enable the audit policy:\naudit-policy-file: /etc/rancher/rke2/audit-policy.yaml\n\n1. Edit the RKE2 Server configuration file on all RKE2 Server hosts, located at /etc/rancher/rke2/config.yaml, so that it contains required configuration. \n\n--audit-policy-file= Path to the file that defines the audit policy configuration. (Example: /etc/rancher/rke2/audit-policy.yaml)\n--audit-log-mode=blocking-strict\n\nIf configuration file is updated, restart the RKE2 Server. Run the command:\nsystemctl restart rke2-server\n\n2. Edit the RKE2 Server configuration file on all RKE2 Server hosts, located at /etc/rancher/rke2/config.yaml, so that it contains required configuration. For example:\n\nprofile: cis-1.6\n\nIf configuration file is updated, restart the RKE2 Server. Run the command:\nsystemctl restart rke2-server\n\n3. Edit the audit policy file, by default located at /etc/rancher/rke2/audit-policy.yaml to look like below:\n\n#Log all requests at the RequestResponse level.\napiVersion: audit.k8s.io/v1\nkind: Policy\nrules:\n- level: RequestResponse\n\nIf configuration files are updated on a host, restart the RKE2 Service. Run the command:\n'systemctl restart rke2-server' for server hosts and\n'systemctl restart rke2-agent' for agent hosts.\"\n  impact 0.5\n  ref 'DPMS Target RGS RKE2'\n  tag check_id: 'C-58039r894452_chk'\n  tag severity: 'medium'\n  tag gid: 'V-254555'\n  tag rid: 'SV-254555r894454_rule'\n  tag stig_id: 'CNTR-R2-000060'\n  tag gtitle: 'SRG-APP-000026-CTR-000070'\n  tag fix_id: 'F-57988r894453_fix'\n  tag satisfies: ['SRG-APP-000026-CTR-000070', 'SRG-APP-000027-CTR-000075', 'SRG-APP-000028-CTR-000080', 'SRG-APP-000092-CTR-000165', 'SRG-APP-000095-CTR-000170', 'SRG-APP-000096-CTR-000175', 'SRG-APP-000097-CTR-000180', 'SRG-APP-000098-CTR-000185', 'SRG-APP-000099-CTR-000190', 'SRG-APP-000100-CTR-000195', 'SRG-APP-000101-CTR-000205', 'SRG-APP-000319-CTR-000745', 'SRG-APP-000320-CTR-000750', 'SRG-APP-000343-CTR-000780', 'SRG-APP-000358-CTR-000805', 'SRG-APP-000374-CTR-000865', 'SRG-APP-000375-CTR-000870', 'SRG-APP-000381-CTR-000905', 'SRG-APP-000409-CTR-000990', 'SRG-APP-000492-CTR-001220', 'SRG-APP-000493-CTR-001225', 'SRG-APP-000494-CTR-001230', 'SRG-APP-000495-CTR-001235', 'SRG-APP-000496-CTR-001240', 'SRG-APP-000497-CTR-001245', 'SRG-APP-000498-CTR-001250', 'SRG-APP-000499-CTR-001255', 'SRG-APP-000500-CTR-001260', 'SRG-APP-000501-CTR-001265', 'SRG-APP-000502-CTR-001270', 'SRG-APP-000503-CTR-001275', 'SRG-APP-000504-CTR-001280', 'SRG-APP-000505-CTR-001285', 'SRG-APP-000506-CTR-001290', 'SRG-APP-000507-CTR-001295', 'SRG-APP-000508-CTR-001300', 'SRG-APP-000509-CTR-001305', 'SRG-APP-000510-CTR-001310', 'SRG-APP-000516-CTR-000790', 'SRG-APP-00516-CTR-001325']\n  tag 'documentable'\n  tag cci: ['CCI-000018', 'CCI-000130', 'CCI-000131', 'CCI-000132', 'CCI-000133', 'CCI-000134', 'CCI-000135', 'CCI-000172', 'CCI-000366', 'CCI-001403', 'CCI-001404', 'CCI-001464', 'CCI-001487', 'CCI-001814', 'CCI-001851', 'CCI-001889', 'CCI-001890', 'CCI-002130', 'CCI-002234', 'CCI-002884']\n  tag nist: ['AC-2 (4)', 'AU-3 a', 'AU-3 b', 'AU-3 c', 'AU-3 d', 'AU-3 e', 'AU-3 (1)', 'AU-12 c', 'CM-6 b', 'AC-2 (4)', 'AC-2 (4)', 'AU-14 (1)', 'AU-3 f', 'CM-5 (1)', 'AU-4 (1)', 'AU-8 b', 'AU-8 b', 'AC-2 (4)', 'AC-6 (9)', 'MA-4 (1) (a)']\nend","source_location":{"line":1,"ref":"U_RGS_RKE2_STIG_V1R3/controls/SV-254555.rb"},"title":"Rancher RKE2 components must be configured in accordance with the security configuration settings based on DoD security configuration or implementation guidance, including SRGs, STIGs, NSA configuration guides, CTOs, and DTMs.","desc":"Once an attacker establishes access to a system, the attacker often attempts to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to modify an existing account. Auditing of account creation is one method for mitigating this risk. A comprehensive account management process will ensure an audit trail documents the creation of application user accounts and, as required, notifies administrators and/or application when accounts are created. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.\n\nWithin Rancher RKE2, audit data can be generated from any of the deployed container platform components. This audit data is important when there are issues, such as security incidents, that must be investigated. To make the audit data worthwhile for the investigation of events, it is necessary to know where within the container platform the event occurred.\n\nTo address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access/auditing mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to offload those access control functions and focus on core application features and functionality.\n\n","descriptions":{"default":"Once an attacker establishes access to a system, the attacker often attempts to create a persistent method of re-establishing access. One way to accomplish this is for the attacker to modify an existing account. Auditing of account creation is one method for mitigating this risk. A comprehensive account management process will ensure an audit trail documents the creation of application user accounts and, as required, notifies administrators and/or application when accounts are created. Such a process greatly reduces the risk that accounts will be surreptitiously created and provides logging that can be used for forensic purposes.\n\nWithin Rancher RKE2, audit data can be generated from any of the deployed container platform components. This audit data is important when there are issues, such as security incidents, that must be investigated. To make the audit data worthwhile for the investigation of events, it is necessary to know where within the container platform the event occurred.\n\nTo address access requirements, many application developers choose to integrate their applications with enterprise-level authentication/access/auditing mechanisms that meet or exceed access control policy requirements. Such integration allows the application developer to offload those access control functions and focus on core application features and functionality.\n\n","check":"Audit logging and policies:\n\n1. On all hosts running RKE2 Server, run the command: \n/bin/ps -ef | grep kube-apiserver | grep -v grep\n\nIf --audit-policy-file is not set, this is a finding.      \nIf --audit-log-mode is not = \"blocking-strict\", this is a finding.                                                                                                                                                                                                                                                            \n\n2. Ensure the RKE2 Server configuration file on all RKE2 Server hosts, located at /etc/rancher/rke2/config.yaml, contains CIS profile setting. Run the following command:\ncat /etc/rancher/rke2/config.yaml \n\nIf a value for profile is not found, this is a finding. (Example: \"profile: cis-1.6\" )                                                                                                                                                                                                                                                                                                          \n\n3. Check the contents of the audit-policy file.                                                                                                                                                                                                                                                                                                                                               \nBy default, RKE2 expects the audit-policy file to be located at /etc/rancher/rke2/audit-policy.yaml; however, this location can be overridden in the /etc/rancher/rke2/config.yaml file with argument 'kube-apiserver-arg: \"audit-policy-file=/etc/rancher/rke2/audit-policy.yaml\"'.\n\nIf the audit policy file does not exist or does not look like the following, this is a finding.                                                                                                                                                                                                                                                            \n# Log all requests at the RequestResponse level.\napiVersion: audit.k8s.io/vX (Where X is the latest apiVersion)                                                                                            \nkind: Policy\nrules:                          \n- level: RequestResponse","fix":"Audit logging and policies:\n\nEdit the /etc/rancher/rke2/config.yaml file, and enable the audit policy:\naudit-policy-file: /etc/rancher/rke2/audit-policy.yaml\n\n1. Edit the RKE2 Server configuration file on all RKE2 Server hosts, located at /etc/rancher/rke2/config.yaml, so that it contains required configuration. \n\n--audit-policy-file= Path to the file that defines the audit policy configuration. (Example: /etc/rancher/rke2/audit-policy.yaml)\n--audit-log-mode=blocking-strict\n\nIf configuration file is updated, restart the RKE2 Server. Run the command:\nsystemctl restart rke2-server\n\n2. Edit the RKE2 Server configuration file on all RKE2 Server hosts, located at /etc/rancher/rke2/config.yaml, so that it contains required configuration. For example:\n\nprofile: cis-1.6\n\nIf configuration file is updated, restart the RKE2 Server. Run the command:\nsystemctl restart rke2-server\n\n3. Edit the audit policy file, by default located at /etc/rancher/rke2/audit-policy.yaml to look like below:\n\n#Log all requests at the RequestResponse level.\napiVersion: audit.k8s.io/v1\nkind: Policy\nrules:\n- level: RequestResponse\n\nIf configuration files are updated on a host, restart the RKE2 Service. Run the command:\n'systemctl restart rke2-server' for server hosts and\n'systemctl restart rke2-agent' for agent hosts."},"impact":0.5,"refs":[{"ref":"DPMS Target RGS RKE2"}],"tags":{"check_id":"C-58039r894452_chk","severity":"medium","gid":"V-254555","rid":"SV-254555r894454_rule","stig_id":"CNTR-R2-000060","gtitle":"SRG-APP-000026-CTR-000070","fix_id":"F-57988r894453_fix","satisfies":["SRG-APP-000026-CTR-000070","SRG-APP-000027-CTR-000075","SRG-APP-000028-CTR-000080","SRG-APP-000092-CTR-000165","SRG-APP-000095-CTR-000170","SRG-APP-000096-CTR-000175","SRG-APP-000097-CTR-000180","SRG-APP-000098-CTR-000185","SRG-APP-000099-CTR-000190","SRG-APP-000100-CTR-000195","SRG-APP-000101-CTR-000205","SRG-APP-000319-CTR-000745","SRG-APP-000320-CTR-000750","SRG-APP-000343-CTR-000780","SRG-APP-000358-CTR-000805","SRG-APP-000374-CTR-000865","SRG-APP-000375-CTR-000870","SRG-APP-000381-CTR-000905","SRG-APP-000409-CTR-000990","SRG-APP-000492-CTR-001220","SRG-APP-000493-CTR-001225","SRG-APP-000494-CTR-001230","SRG-APP-000495-CTR-001235","SRG-APP-000496-CTR-001240","SRG-APP-000497-CTR-001245","SRG-APP-000498-CTR-001250","SRG-APP-000499-CTR-001255","SRG-APP-000500-CTR-001260","SRG-APP-000501-CTR-001265","SRG-APP-000502-CTR-001270","SRG-APP-000503-CTR-001275","SRG-APP-000504-CTR-001280","SRG-APP-000505-CTR-001285","SRG-APP-000506-CTR-001290","SRG-APP-000507-CTR-001295","SRG-APP-000508-CTR-001300","SRG-APP-000509-CTR-001305","SRG-APP-000510-CTR-001310","SRG-APP-000516-CTR-000790","SRG-APP-00516-CTR-001325"],"documentable":null,"cci":["CCI-000018","CCI-000130","CCI-000131","CCI-000132","CCI-000133","CCI-000134","CCI-000135","CCI-000172","CCI-000366","CCI-001403","CCI-001404","CCI-001464","CCI-001487","CCI-001814","CCI-001851","CCI-001889","CCI-001890","CCI-002130","CCI-002234","CCI-002884"],"nist":["AC-2 (4)","AU-3 a","AU-3 b","AU-3 c","AU-3 d","AU-3 e","AU-3 (1)","AU-12 c","CM-6 b","AC-2 (4)","AC-2 (4)","AU-14 (1)","AU-3 f","CM-5 (1)","AU-4 (1)","AU-8 b","AU-8 b","AC-2 (4)","AC-6 (9)","MA-4 (1) (a)"]}},{"id":"SV-254556","code":"control 'SV-254556' do\n  title 'The Kubernetes Controller Manager must have secure binding.'\n  desc 'Limiting the number of attack vectors and implementing authentication and encryption on the endpoints available to external sources is paramount when securing the overall Kubernetes cluster. The Controller Manager API service exposes port 10252/TCP by default for health and metrics information use. This port does not encrypt or authenticate connections. If this port is exposed externally, an attacker can use this port to attack the entire Kubernetes cluster. By setting the bind address to only localhost (i.e., 127.0.0.1), only those internal services that require health and metrics information can access the Control Manager API.'\n  desc 'check', 'Ensure bind-address is set correctly. \n\nRun this command on the RKE2 Control Plane:\n/bin/ps -ef | grep kube-controller-manager | grep -v grep\n\nIf --bind-address is not set to \"127.0.0.1\" or is not configured, this is a finding.'\n  desc 'fix', 'Edit the RKE2 Configuration File /etc/rancher/rke2/config.yaml on the RKE2 Control Plane and set the following \"kube-controller-manager-arg\" argument:\n- bind-address=127.0.0.1\n\nOnce the configuration file is updated, restart the RKE2 Server. Run the command:\nsystemctl restart rke2-server'\n  impact 0.5\n  ref 'DPMS Target RGS RKE2'\n  tag check_id: 'C-58040r859236_chk'\n  tag severity: 'medium'\n  tag gid: 'V-254556'\n  tag rid: 'SV-254556r918253_rule'\n  tag stig_id: 'CNTR-R2-000100'\n  tag gtitle: 'SRG-APP-000033-CTR-000090'\n  tag fix_id: 'F-57989r918227_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000213']\n  tag nist: ['AC-3']\nend","source_location":{"line":1,"ref":"U_RGS_RKE2_STIG_V1R3/controls/SV-254556.rb"},"title":"The Kubernetes Controller Manager must have secure binding.","desc":"Limiting the number of attack vectors and implementing authentication and encryption on the endpoints available to external sources is paramount when securing the overall Kubernetes cluster. The Controller Manager API service exposes port 10252/TCP by default for health and metrics information use. This port does not encrypt or authenticate connections. If this port is exposed externally, an attacker can use this port to attack the entire Kubernetes cluster. By setting the bind address to only localhost (i.e., 127.0.0.1), only those internal services that require health and metrics information can access the Control Manager API.","descriptions":{"default":"Limiting the number of attack vectors and implementing authentication and encryption on the endpoints available to external sources is paramount when securing the overall Kubernetes cluster. The Controller Manager API service exposes port 10252/TCP by default for health and metrics information use. This port does not encrypt or authenticate connections. If this port is exposed externally, an attacker can use this port to attack the entire Kubernetes cluster. By setting the bind address to only localhost (i.e., 127.0.0.1), only those internal services that require health and metrics information can access the Control Manager API.","check":"Ensure bind-address is set correctly. \n\nRun this command on the RKE2 Control Plane:\n/bin/ps -ef | grep kube-controller-manager | grep -v grep\n\nIf --bind-address is not set to \"127.0.0.1\" or is not configured, this is a finding.","fix":"Edit the RKE2 Configuration File /etc/rancher/rke2/config.yaml on the RKE2 Control Plane and set the following \"kube-controller-manager-arg\" argument:\n- bind-address=127.0.0.1\n\nOnce the configuration file is updated, restart the RKE2 Server. Run the command:\nsystemctl restart rke2-server"},"impact":0.5,"refs":[{"ref":"DPMS Target RGS RKE2"}],"tags":{"check_id":"C-58040r859236_chk","severity":"medium","gid":"V-254556","rid":"SV-254556r918253_rule","stig_id":"CNTR-R2-000100","gtitle":"SRG-APP-000033-CTR-000090","fix_id":"F-57989r918227_fix","documentable":null,"cci":["CCI-000213"],"nist":["AC-3"]}},{"id":"SV-254557","code":"control 'SV-254557' do\n  title 'The Kubernetes Kubelet must have anonymous authentication disabled.'\n  desc 'RKE2 registry is used to store images and is the keeper of truth for trusted images within the platform. To guarantee the images integrity, access to the registry must be limited to those individuals who need to perform tasks to the images such as the update, creation, or deletion of images. Without this control access, images can be deleted that are in use by RKE2 causing a denial of service (DoS), and images can be modified or introduced without going through the testing and validation process allowing for the intentional or unintentional introduction of containers with flaws and vulnerabilities.\n\nBy allowing anonymous connections, the controls put in place to secure the Kubelet can be bypassed. Setting anonymous authentication to \"false\" also disables unauthenticated requests from kubelets.\n\nWhile there are instances where anonymous connections may be needed (e.g., health checks) and Role-Based Access Controls (RBAC) are in place to limit the anonymous access, this access must be disabled and only enabled when necessary.'\n  desc 'check', 'Ensure anonymous-auth is set correctly so anonymous requests will be rejected.\n\nRun this command on each node:\n/bin/ps -ef | grep kubelet | grep -v grep\n\nIf --anonymous-auth is set to \"true\" or is not configured, this is a finding.'\n  desc 'fix', 'Edit the Kubernetes Kubelet file etc/rancher/rke2/config.yaml on the RKE2 Control Plane and set the following:\n--anonymous-auth=false\n\nOnce configuration file is updated, restart the RKE2 Agent. Run the command:\nsystemctl restart rke2-agent'\n  impact 0.5\n  ref 'DPMS Target RGS RKE2'\n  tag check_id: 'C-58041r859239_chk'\n  tag severity: 'medium'\n  tag gid: 'V-254557'\n  tag rid: 'SV-254557r879530_rule'\n  tag stig_id: 'CNTR-R2-000110'\n  tag gtitle: 'SRG-APP-000033-CTR-000090'\n  tag fix_id: 'F-57990r859240_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000213']\n  tag nist: ['AC-3']\nend","source_location":{"line":1,"ref":"U_RGS_RKE2_STIG_V1R3/controls/SV-254557.rb"},"title":"The Kubernetes Kubelet must have anonymous authentication disabled.","desc":"RKE2 registry is used to store images and is the keeper of truth for trusted images within the platform. To guarantee the images integrity, access to the registry must be limited to those individuals who need to perform tasks to the images such as the update, creation, or deletion of images. Without this control access, images can be deleted that are in use by RKE2 causing a denial of service (DoS), and images can be modified or introduced without going through the testing and validation process allowing for the intentional or unintentional introduction of containers with flaws and vulnerabilities.\n\nBy allowing anonymous connections, the controls put in place to secure the Kubelet can be bypassed. Setting anonymous authentication to \"false\" also disables unauthenticated requests from kubelets.\n\nWhile there are instances where anonymous connections may be needed (e.g., health checks) and Role-Based Access Controls (RBAC) are in place to limit the anonymous access, this access must be disabled and only enabled when necessary.","descriptions":{"default":"RKE2 registry is used to store images and is the keeper of truth for trusted images within the platform. To guarantee the images integrity, access to the registry must be limited to those individuals who need to perform tasks to the images such as the update, creation, or deletion of images. Without this control access, images can be deleted that are in use by RKE2 causing a denial of service (DoS), and images can be modified or introduced without going through the testing and validation process allowing for the intentional or unintentional introduction of containers with flaws and vulnerabilities.\n\nBy allowing anonymous connections, the controls put in place to secure the Kubelet can be bypassed. Setting anonymous authentication to \"false\" also disables unauthenticated requests from kubelets.\n\nWhile there are instances where anonymous connections may be needed (e.g., health checks) and Role-Based Access Controls (RBAC) are in place to limit the anonymous access, this access must be disabled and only enabled when necessary.","check":"Ensure anonymous-auth is set correctly so anonymous requests will be rejected.\n\nRun this command on each node:\n/bin/ps -ef | grep kubelet | grep -v grep\n\nIf --anonymous-auth is set to \"true\" or is not configured, this is a finding.","fix":"Edit the Kubernetes Kubelet file etc/rancher/rke2/config.yaml on the RKE2 Control Plane and set the following:\n--anonymous-auth=false\n\nOnce configuration file is updated, restart the RKE2 Agent. Run the command:\nsystemctl restart rke2-agent"},"impact":0.5,"refs":[{"ref":"DPMS Target RGS RKE2"}],"tags":{"check_id":"C-58041r859239_chk","severity":"medium","gid":"V-254557","rid":"SV-254557r879530_rule","stig_id":"CNTR-R2-000110","gtitle":"SRG-APP-000033-CTR-000090","fix_id":"F-57990r859240_fix","documentable":null,"cci":["CCI-000213"],"nist":["AC-3"]}},{"id":"SV-254558","code":"control 'SV-254558' do\n  title 'The Kubernetes API server must have the insecure port flag disabled.'\n  desc %q(By default, the API server will listen on two ports. One port is the secure port and the other port is called the \"localhost port\". This port is also called the \"insecure port\", port 8080. Any requests to this port bypass authentication and authorization checks. If this port is left open, anyone who gains access to the host on which the master is running can bypass all authorization and authentication mechanisms put in place, and have full control over the entire cluster.\n\nClose the insecure port by setting the API server's --insecure-port flag to \"0\", ensuring that the --insecure-bind-address is not set.)\n  desc 'check', 'Ensure insecure-port is set correctly.\n\nIf running v1.20 through v1.23, this is default configuration so no change is necessary if not configured. \nIf running v1.24, this check is Not Applicable.\n\nRun this command on the RKE2 Control Plane:\n/bin/ps -ef | grep kube-apiserver | grep -v grep\n\nIf --insecure-port is not set to \"0\" or is not configured, this is a finding.'\n  desc 'fix', 'Edit the RKE2 Server configuration file on all RKE2 Server hosts, located at /etc/rancher/rke2/config.yaml, to contain the following:\n\nkube-apiserver-arg:\n- insecure-port=0\n\nOnce configuration file is updated, restart the RKE2 Server. Run the command:\nsystemctl restart rke2-server'\n  impact 0.7\n  ref 'DPMS Target RGS RKE2'\n  tag check_id: 'C-58042r894455_chk'\n  tag severity: 'high'\n  tag gid: 'V-254558'\n  tag rid: 'SV-254558r894457_rule'\n  tag stig_id: 'CNTR-R2-000120'\n  tag gtitle: 'SRG-APP-000033-CTR-000095'\n  tag fix_id: 'F-57991r894456_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000213']\n  tag nist: ['AC-3']\nend","source_location":{"line":1,"ref":"U_RGS_RKE2_STIG_V1R3/controls/SV-254558.rb"},"title":"The Kubernetes API server must have the insecure port flag disabled.","desc":"By default, the API server will listen on two ports. One port is the secure port and the other port is called the \"localhost port\". This port is also called the \"insecure port\", port 8080. Any requests to this port bypass authentication and authorization checks. If this port is left open, anyone who gains access to the host on which the master is running can bypass all authorization and authentication mechanisms put in place, and have full control over the entire cluster.\n\nClose the insecure port by setting the API server's --insecure-port flag to \"0\", ensuring that the --insecure-bind-address is not set.","descriptions":{"default":"By default, the API server will listen on two ports. One port is the secure port and the other port is called the \"localhost port\". This port is also called the \"insecure port\", port 8080. Any requests to this port bypass authentication and authorization checks. If this port is left open, anyone who gains access to the host on which the master is running can bypass all authorization and authentication mechanisms put in place, and have full control over the entire cluster.\n\nClose the insecure port by setting the API server's --insecure-port flag to \"0\", ensuring that the --insecure-bind-address is not set.","check":"Ensure insecure-port is set correctly.\n\nIf running v1.20 through v1.23, this is default configuration so no change is necessary if not configured. \nIf running v1.24, this check is Not Applicable.\n\nRun this command on the RKE2 Control Plane:\n/bin/ps -ef | grep kube-apiserver | grep -v grep\n\nIf --insecure-port is not set to \"0\" or is not configured, this is a finding.","fix":"Edit the RKE2 Server configuration file on all RKE2 Server hosts, located at /etc/rancher/rke2/config.yaml, to contain the following:\n\nkube-apiserver-arg:\n- insecure-port=0\n\nOnce configuration file is updated, restart the RKE2 Server. Run the command:\nsystemctl restart rke2-server"},"impact":0.7,"refs":[{"ref":"DPMS Target RGS RKE2"}],"tags":{"check_id":"C-58042r894455_chk","severity":"high","gid":"V-254558","rid":"SV-254558r894457_rule","stig_id":"CNTR-R2-000120","gtitle":"SRG-APP-000033-CTR-000095","fix_id":"F-57991r894456_fix","documentable":null,"cci":["CCI-000213"],"nist":["AC-3"]}},{"id":"SV-254559","code":"control 'SV-254559' do\n  title 'The Kubernetes Kubelet must have the read-only port flag disabled.'\n  desc %q(Kubelet serves a small REST API with read access to port 10255. The read-only port for Kubernetes provides no authentication or authorization security control. Providing unrestricted access on port 10255 exposes Kubernetes pods and containers to malicious attacks or compromise. Port 10255 is deprecated and should be disabled. \n\nClose the read-only-port by setting the API server's read-only port flag to \"0\".)\n  desc 'check', 'Ensure read-only-port is set correctly so anonymous requests will be rejected.\n\nRun this command on each node:\n/bin/ps -ef | grep kubelet | grep -v grep\n\nIf --read-only-port is not set to \"0\" or is not configured, this is a finding.'\n  desc 'fix', 'Edit the Kubernetes Kubelet file etc/rancher/rke2/config.yaml on the RKE2 Control Plane and set the following:\n--read-only-port=0\n\nOnce configuration file is updated, restart the RKE2 Agent. Run the command:\nsystemctl restart rke2-agent'\n  impact 0.7\n  ref 'DPMS Target RGS RKE2'\n  tag check_id: 'C-58043r870253_chk'\n  tag severity: 'high'\n  tag gid: 'V-254559'\n  tag rid: 'SV-254559r879530_rule'\n  tag stig_id: 'CNTR-R2-000130'\n  tag gtitle: 'SRG-APP-000033-CTR-000095'\n  tag fix_id: 'F-57992r859246_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000213']\n  tag nist: ['AC-3']\nend","source_location":{"line":1,"ref":"U_RGS_RKE2_STIG_V1R3/controls/SV-254559.rb"},"title":"The Kubernetes Kubelet must have the read-only port flag disabled.","desc":"Kubelet serves a small REST API with read access to port 10255. The read-only port for Kubernetes provides no authentication or authorization security control. Providing unrestricted access on port 10255 exposes Kubernetes pods and containers to malicious attacks or compromise. Port 10255 is deprecated and should be disabled. \n\nClose the read-only-port by setting the API server's read-only port flag to \"0\".","descriptions":{"default":"Kubelet serves a small REST API with read access to port 10255. The read-only port for Kubernetes provides no authentication or authorization security control. Providing unrestricted access on port 10255 exposes Kubernetes pods and containers to malicious attacks or compromise. Port 10255 is deprecated and should be disabled. \n\nClose the read-only-port by setting the API server's read-only port flag to \"0\".","check":"Ensure read-only-port is set correctly so anonymous requests will be rejected.\n\nRun this command on each node:\n/bin/ps -ef | grep kubelet | grep -v grep\n\nIf --read-only-port is not set to \"0\" or is not configured, this is a finding.","fix":"Edit the Kubernetes Kubelet file etc/rancher/rke2/config.yaml on the RKE2 Control Plane and set the following:\n--read-only-port=0\n\nOnce configuration file is updated, restart the RKE2 Agent. Run the command:\nsystemctl restart rke2-agent"},"impact":0.7,"refs":[{"ref":"DPMS Target RGS RKE2"}],"tags":{"check_id":"C-58043r870253_chk","severity":"high","gid":"V-254559","rid":"SV-254559r879530_rule","stig_id":"CNTR-R2-000130","gtitle":"SRG-APP-000033-CTR-000095","fix_id":"F-57992r859246_fix","documentable":null,"cci":["CCI-000213"],"nist":["AC-3"]}},{"id":"SV-254560","code":"control 'SV-254560' do\n  title 'The Kubernetes API server must have the insecure bind address not set.'\n  desc %q(By default, the API server will listen on two ports and addresses. One address is the secure address and the other address is called the \"insecure bind\" address and is set by default to localhost. Any requests to this address bypass authentication and authorization checks. If this insecure bind address is set to localhost, anyone who gains access to the host on which the master is running can bypass all authorization and authentication mechanisms put in place and have full control over the entire cluster.\n\nClose or set the insecure bind address by setting the API server's --insecure-bind-address flag to an IP or leave it unset and ensure that the --insecure-bind-port is not set.)\n  desc 'check', 'If running rke2 Kubernetes version > 1.20, this requirement is not applicable (NA).\n\nEnsure insecure-bind-address is set correctly. \n\nRun the command:\nps -ef | grep kube-apiserver\n\nIf the setting insecure-bind-address is found and set to \"localhost\", this is a finding.'\n  desc 'fix', 'If running rke2 Kubernetes version > 1.20, this requirement is NA.\n\nUpgrade to a supported version of RKE2 Kubernetes.'\n  impact 0.7\n  ref 'DPMS Target RGS RKE2'\n  tag check_id: 'C-58044r918229_chk'\n  tag severity: 'high'\n  tag gid: 'V-254560'\n  tag rid: 'SV-254560r918254_rule'\n  tag stig_id: 'CNTR-R2-000140'\n  tag gtitle: 'SRG-APP-000033-CTR-000095'\n  tag fix_id: 'F-57993r918230_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000213']\n  tag nist: ['AC-3']\nend","source_location":{"line":1,"ref":"U_RGS_RKE2_STIG_V1R3/controls/SV-254560.rb"},"title":"The Kubernetes API server must have the insecure bind address not set.","desc":"By default, the API server will listen on two ports and addresses. One address is the secure address and the other address is called the \"insecure bind\" address and is set by default to localhost. Any requests to this address bypass authentication and authorization checks. If this insecure bind address is set to localhost, anyone who gains access to the host on which the master is running can bypass all authorization and authentication mechanisms put in place and have full control over the entire cluster.\n\nClose or set the insecure bind address by setting the API server's --insecure-bind-address flag to an IP or leave it unset and ensure that the --insecure-bind-port is not set.","descriptions":{"default":"By default, the API server will listen on two ports and addresses. One address is the secure address and the other address is called the \"insecure bind\" address and is set by default to localhost. Any requests to this address bypass authentication and authorization checks. If this insecure bind address is set to localhost, anyone who gains access to the host on which the master is running can bypass all authorization and authentication mechanisms put in place and have full control over the entire cluster.\n\nClose or set the insecure bind address by setting the API server's --insecure-bind-address flag to an IP or leave it unset and ensure that the --insecure-bind-port is not set.","check":"If running rke2 Kubernetes version > 1.20, this requirement is not applicable (NA).\n\nEnsure insecure-bind-address is set correctly. \n\nRun the command:\nps -ef | grep kube-apiserver\n\nIf the setting insecure-bind-address is found and set to \"localhost\", this is a finding.","fix":"If running rke2 Kubernetes version > 1.20, this requirement is NA.\n\nUpgrade to a supported version of RKE2 Kubernetes."},"impact":0.7,"refs":[{"ref":"DPMS Target RGS RKE2"}],"tags":{"check_id":"C-58044r918229_chk","severity":"high","gid":"V-254560","rid":"SV-254560r918254_rule","stig_id":"CNTR-R2-000140","gtitle":"SRG-APP-000033-CTR-000095","fix_id":"F-57993r918230_fix","documentable":null,"cci":["CCI-000213"],"nist":["AC-3"]}},{"id":"SV-254561","code":"control 'SV-254561' do\n  title 'The Kubernetes kubelet must enable explicit authorization.'\n  desc 'Kubelet is the primary agent on each node. The API server communicates with each kubelet to perform tasks such as starting/stopping pods. By default, kubelets allow all authenticated requests, even anonymous ones, without requiring any authorization checks from the API server. This default behavior bypasses any authorization controls put in place to limit what users may perform within the Kubernetes cluster. To change this behavior, the default setting of AlwaysAllow for the authorization mode must be set to \"Webhook\".'\n  desc 'check', 'Ensure authorization-mode is set correctly in the kubelet on each rke2 node.\n\nRun this command on each node:\n/bin/ps -ef | grep kubelet | grep -v grep\n\nIf --authorization-mode is not set to \"Webhook\" or is not configured, this is a finding.'\n  desc 'fix', 'Edit the RKE2 Configuration File /etc/rancher/rke2/config.yaml on every RKE2 node and set the following \"kubelet-arg\" argument:\n\n- authorization-mode=Webhook\n\nOnce the configuration file is updated, restart the RKE2 Server or Agent. Run the command:\nsystemctl restart rke2-server or systemctl restart rke2-agent'\n  impact 0.7\n  ref 'DPMS Target RGS RKE2'\n  tag check_id: 'C-58045r918232_chk'\n  tag severity: 'high'\n  tag gid: 'V-254561'\n  tag rid: 'SV-254561r918255_rule'\n  tag stig_id: 'CNTR-R2-000150'\n  tag gtitle: 'SRG-APP-000033-CTR-000095'\n  tag fix_id: 'F-57994r918233_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000213']\n  tag nist: ['AC-3']\nend","source_location":{"line":1,"ref":"U_RGS_RKE2_STIG_V1R3/controls/SV-254561.rb"},"title":"The Kubernetes kubelet must enable explicit authorization.","desc":"Kubelet is the primary agent on each node. The API server communicates with each kubelet to perform tasks such as starting/stopping pods. By default, kubelets allow all authenticated requests, even anonymous ones, without requiring any authorization checks from the API server. This default behavior bypasses any authorization controls put in place to limit what users may perform within the Kubernetes cluster. To change this behavior, the default setting of AlwaysAllow for the authorization mode must be set to \"Webhook\".","descriptions":{"default":"Kubelet is the primary agent on each node. The API server communicates with each kubelet to perform tasks such as starting/stopping pods. By default, kubelets allow all authenticated requests, even anonymous ones, without requiring any authorization checks from the API server. This default behavior bypasses any authorization controls put in place to limit what users may perform within the Kubernetes cluster. To change this behavior, the default setting of AlwaysAllow for the authorization mode must be set to \"Webhook\".","check":"Ensure authorization-mode is set correctly in the kubelet on each rke2 node.\n\nRun this command on each node:\n/bin/ps -ef | grep kubelet | grep -v grep\n\nIf --authorization-mode is not set to \"Webhook\" or is not configured, this is a finding.","fix":"Edit the RKE2 Configuration File /etc/rancher/rke2/config.yaml on every RKE2 node and set the following \"kubelet-arg\" argument:\n\n- authorization-mode=Webhook\n\nOnce the configuration file is updated, restart the RKE2 Server or Agent. Run the command:\nsystemctl restart rke2-server or systemctl restart rke2-agent"},"impact":0.7,"refs":[{"ref":"DPMS Target RGS RKE2"}],"tags":{"check_id":"C-58045r918232_chk","severity":"high","gid":"V-254561","rid":"SV-254561r918255_rule","stig_id":"CNTR-R2-000150","gtitle":"SRG-APP-000033-CTR-000095","fix_id":"F-57994r918233_fix","documentable":null,"cci":["CCI-000213"],"nist":["AC-3"]}},{"id":"SV-254562","code":"control 'SV-254562' do\n  title 'The Kubernetes API server must have anonymous authentication disabled.'\n  desc 'The Kubernetes API Server controls Kubernetes via an API interface. A user who has access to the API essentially has root access to the entire Kubernetes cluster. To control access, users must be authenticated and authorized. By allowing anonymous connections, the controls put in place to secure the API can be bypassed.\n\nSetting anonymous authentication to \"false\" also disables unauthenticated requests from kubelets.\n\nWhile there are instances where anonymous connections may be needed (e.g., health checks) and Role-Based Access Controls (RBAC) are in place to limit the anonymous access, this access should be disabled, and only enabled when necessary.'\n  desc 'check', 'Ensure anonymous-auth argument is set correctly.\n\nRun this command on the RKE2 Control Plane:\n/bin/ps -ef | grep kube-apiserver | grep -v grep\n\nIf --anonymous-auth is set to \"true\" or is not configured, this is a finding.'\n  desc 'fix', 'Edit the RKE2 Configuration File /etc/rancher/rke2/config.yaml on the RKE2 Control Plane and set the following \"kube-apiserver-arg\" argument:\n\n- anonymous-auth=false\n\nOnce the configuration file is updated, restart the RKE2 Server. Run the command:\nsystemctl restart rke2-server'\n  impact 0.7\n  ref 'DPMS Target RGS RKE2'\n  tag check_id: 'C-58046r859254_chk'\n  tag severity: 'high'\n  tag gid: 'V-254562'\n  tag rid: 'SV-254562r918256_rule'\n  tag stig_id: 'CNTR-R2-000160'\n  tag gtitle: 'SRG-APP-000033-CTR-000100'\n  tag fix_id: 'F-57995r918235_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000213']\n  tag nist: ['AC-3']\nend","source_location":{"line":1,"ref":"U_RGS_RKE2_STIG_V1R3/controls/SV-254562.rb"},"title":"The Kubernetes API server must have anonymous authentication disabled.","desc":"The Kubernetes API Server controls Kubernetes via an API interface. A user who has access to the API essentially has root access to the entire Kubernetes cluster. To control access, users must be authenticated and authorized. By allowing anonymous connections, the controls put in place to secure the API can be bypassed.\n\nSetting anonymous authentication to \"false\" also disables unauthenticated requests from kubelets.\n\nWhile there are instances where anonymous connections may be needed (e.g., health checks) and Role-Based Access Controls (RBAC) are in place to limit the anonymous access, this access should be disabled, and only enabled when necessary.","descriptions":{"default":"The Kubernetes API Server controls Kubernetes via an API interface. A user who has access to the API essentially has root access to the entire Kubernetes cluster. To control access, users must be authenticated and authorized. By allowing anonymous connections, the controls put in place to secure the API can be bypassed.\n\nSetting anonymous authentication to \"false\" also disables unauthenticated requests from kubelets.\n\nWhile there are instances where anonymous connections may be needed (e.g., health checks) and Role-Based Access Controls (RBAC) are in place to limit the anonymous access, this access should be disabled, and only enabled when necessary.","check":"Ensure anonymous-auth argument is set correctly.\n\nRun this command on the RKE2 Control Plane:\n/bin/ps -ef | grep kube-apiserver | grep -v grep\n\nIf --anonymous-auth is set to \"true\" or is not configured, this is a finding.","fix":"Edit the RKE2 Configuration File /etc/rancher/rke2/config.yaml on the RKE2 Control Plane and set the following \"kube-apiserver-arg\" argument:\n\n- anonymous-auth=false\n\nOnce the configuration file is updated, restart the RKE2 Server. Run the command:\nsystemctl restart rke2-server"},"impact":0.7,"refs":[{"ref":"DPMS Target RGS RKE2"}],"tags":{"check_id":"C-58046r859254_chk","severity":"high","gid":"V-254562","rid":"SV-254562r918256_rule","stig_id":"CNTR-R2-000160","gtitle":"SRG-APP-000033-CTR-000100","fix_id":"F-57995r918235_fix","documentable":null,"cci":["CCI-000213"],"nist":["AC-3"]}},{"id":"SV-254563","code":"control 'SV-254563' do\n  title 'All audit records must identify any containers associated with the event within Rancher RKE2.'\n  desc 'Ensure that the --audit-log-maxage argument is set to 30 or as appropriate.\n\nRetaining logs for at least 30 days ensures that you can go back in time and investigate or correlate any events. Set your audit log retention period to 30 days or as per your business requirements.\nResult: Pass'\n  desc 'check', 'Ensure audit-log-maxage is set correctly.\n\nRun the below command on the RKE2 Control Plane:\n/bin/ps -ef | grep kube-apiserver | grep -v grep\n\nIf --audit-log-maxage argument is not set to at least 30 or is not configured, this is a finding. \n(By default, RKE2 sets the --audit-log-maxage argument parameter to 30.)'\n  desc 'fix', 'Edit the RKE2 Configuration File /etc/rancher/rke2/config.yaml on the RKE2 Control Plane and set the following \"kube-apiserver-arg\" argument:\n\n- audit-log-maxage=30\n\nOnce the configuration file is updated, restart the RKE2 Server. Run the command:\nsystemctl restart rke2-server'\n  impact 0.5\n  ref 'DPMS Target RGS RKE2'\n  tag check_id: 'C-58047r859257_chk'\n  tag severity: 'medium'\n  tag gid: 'V-254563'\n  tag rid: 'SV-254563r918257_rule'\n  tag stig_id: 'CNTR-R2-000320'\n  tag gtitle: 'SRG-APP-000100-CTR-000200'\n  tag fix_id: 'F-57996r918237_fix'\n  tag 'documentable'\n  tag cci: ['CCI-001487']\n  tag nist: ['AU-3 f']\nend","source_location":{"line":1,"ref":"U_RGS_RKE2_STIG_V1R3/controls/SV-254563.rb"},"title":"All audit records must identify any containers associated with the event within Rancher RKE2.","desc":"Ensure that the --audit-log-maxage argument is set to 30 or as appropriate.\n\nRetaining logs for at least 30 days ensures that you can go back in time and investigate or correlate any events. Set your audit log retention period to 30 days or as per your business requirements.\nResult: Pass","descriptions":{"default":"Ensure that the --audit-log-maxage argument is set to 30 or as appropriate.\n\nRetaining logs for at least 30 days ensures that you can go back in time and investigate or correlate any events. Set your audit log retention period to 30 days or as per your business requirements.\nResult: Pass","check":"Ensure audit-log-maxage is set correctly.\n\nRun the below command on the RKE2 Control Plane:\n/bin/ps -ef | grep kube-apiserver | grep -v grep\n\nIf --audit-log-maxage argument is not set to at least 30 or is not configured, this is a finding. \n(By default, RKE2 sets the --audit-log-maxage argument parameter to 30.)","fix":"Edit the RKE2 Configuration File /etc/rancher/rke2/config.yaml on the RKE2 Control Plane and set the following \"kube-apiserver-arg\" argument:\n\n- audit-log-maxage=30\n\nOnce the configuration file is updated, restart the RKE2 Server. Run the command:\nsystemctl restart rke2-server"},"impact":0.5,"refs":[{"ref":"DPMS Target RGS RKE2"}],"tags":{"check_id":"C-58047r859257_chk","severity":"medium","gid":"V-254563","rid":"SV-254563r918257_rule","stig_id":"CNTR-R2-000320","gtitle":"SRG-APP-000100-CTR-000200","fix_id":"F-57996r918237_fix","documentable":null,"cci":["CCI-001487"],"nist":["AU-3 f"]}},{"id":"SV-254564","code":"control 'SV-254564' do\n  title 'Configuration and authentication files for Rancher RKE2 must be protected.'\n  desc 'There are various configuration files, logs, access credentials, and other files stored on the host filesystem that contain sensitive information. \n\nThese files could potentially put at risk, along with other specific workloads and components:\n- API server\n- proxy\n- scheduler\n- controller\n- etcd\n- Kubernetes administrator account information\n- audit log access, modification, and deletion\n- application access, modification, and deletion\n- container runtime files\n\nIf an attacker can gain access to these files, changes can be made to open vulnerabilities and bypass user authorizations inherent within Kubernetes with RBAC implemented. It is crucial to ensure user permissions are enforced down through to the operating system. Protecting file permissions will ensure that if a nonprivileged user gains access to the system they will still not be able to access protected information from the cluster API, cluster configuration, and sensitive cluster information. This control relies on the underlying operating system also having been properly configured to allow only least privileged access to perform required operations.\n\n'\n  desc 'check', 'File system permissions:\n1. Ensure correct permissions of the files in /etc/rancher/rke2:\ncd /etc/rancher/rke2\nls -l\n\nall owners are root:root\nall permissions are 0600\n\n2. Ensure correct permissions of the files in /var/lib/rancher/rke2:\ncd /var/lib/rancher/rke2\nls -l \n\nall owners are root:root\n\n3. Ensure correct permissions of the files and directories in /var/lib/rancher/rke2/agent:\ncd /var/lib/rancher/rke2/agent\nls -l\n\nowners and group are root:root\nFile permissions set to 0640 for the following:\nrke2controller.kubeconfig\nkubelet.kubeconfig\nkubeproxy.kubeconfig\n\nCertificate file permissions set to 0600\nclient-ca.crt\nclient-kubelet.crt\nclient-kube-proxy.crt\nclient-rke2-controller.crt\nserver-ca.crt\nserving-kubelet.crt\n\nKey file permissions set to 0600\nclient-kubelet.key\nserving-kubelet.key\nclient-rke2-controller.key\nclient-kube-proxy.key\n\nThe directory permissions to 0700 \npod-manifests\netc \n\n4. Ensure correct permissions of the files in /var/lib/rancher/rke2/bin:\ncd /var/lib/rancher/rke2/bin\nls -l\n\nall owners are root:root\nall files are 0750\n\n5. Ensure correct permissions of the directory /var/lib/rancher/rke2/data:\ncd /var/lib/rancher/rke2\nls -l\n\nall owners are root:root\npermissions are 0750\n\n6. Ensure correct permissions of each file in /var/lib/rancher/rke2/data:\ncd /var/lib/rancher/rke2/data\nls -l\n\nall owners are root:root\nall files are 0640\n\n7. Ensure correct permissions of /var/lib/rancher/rke2/server:\ncd /var/lib/rancher/rke2/server\nls -l \n\nall owners are root:root\n\nThe following directories are set to 0700:\ncred\ndb\ntls \n\nThe following directories are set to 0750:\nlogs \n\nThe following directories are set to 0751:\nmanifests \n\nThe following file is set to 0600:\ntoken \n\n8. Ensure the RKE2 Server configuration file on all RKE2 Server hosts contains the following:\n(cat /etc/rancher/rke2/config.yaml)\nwrite-kubeconfig-mode: \"0640\"\n\nIf any of the permissions specified above do not match the required level, this is a finding.'\n  desc 'fix', 'File system permissions:\n1. Fix permissions of the files in /etc/rancher/rke2:\ncd /etc/rancher/rke2\nchmod 0600 ./*\nchown root:root ./*\nls -l\n\n2. Fix permissions of the files in /var/lib/rancher/rke2:\ncd /var/lib/rancher/rke2\nchown root:root ./*\nls -l \n\n3. Fix permissions of the files and directories in /var/lib/rancher/rke2/agent:\ncd /var/lib/rancher/rke2/agent\nchown root:root ./*\nchmod 0700 pod-manifests\nchmod 0700 etc\nfind . -maxdepth 1 -type f -name \"*.kubeconfig\" -exec chmod 0640 {} \\\\;\nfind . -maxdepth 1 -type f -name \"*.crt\" -exec chmod 0600 {} \\\\;\nfind . -maxdepth 1 -type f -name \"*.key\" -exec chmod 0600 {} \\\\;\nls -l\n\n4. Fix permissions of the files in /var/lib/rancher/rke2/bin:\ncd /var/lib/rancher/rke2/agent/bin\nchown root:root ./*\nchmod 0750 ./*\nls -l\n\n5. Fix permissions directory of /var/lib/rancher/rke2/data:\ncd /var/lib/rancher/rke2/agent\nchown root:root data\nchmod 0750 data\nls -l\n\n6. Fix permissions of files in /var/lib/rancher/rke2/data:\ncd /var/lib/rancher/rke2/data\nchown root:root ./*\nchmod 0640 ./*\nls -l\n\n7. Fix permissions in /var/lib/rancher/rke2/server:\ncd /var/lib/rancher/rke2/server\nchown root:root ./*\nchmod 0700 cred\nchmod 0700 db\nchmod 0700 tls\nchmod 0751 manifests\nchmod 0750 logs\nchmod 0600 token\nls -l\n\nEdit the RKE2 Server configuration file on all RKE2 Server hosts, located at /etc/rancher/rke2/config.yaml, to contain the following:\n\nwrite-kubeconfig-mode: \"0640\"\n\nOnce the configuration file is updated, restart the RKE2 Server. Run the command:\nsystemctl restart rke2-server'\n  impact 0.5\n  ref 'DPMS Target RGS RKE2'\n  tag check_id: 'C-58048r918239_chk'\n  tag severity: 'medium'\n  tag gid: 'V-254564'\n  tag rid: 'SV-254564r918258_rule'\n  tag stig_id: 'CNTR-R2-000520'\n  tag gtitle: 'SRG-APP-000133-CTR-000300'\n  tag fix_id: 'F-57997r918240_fix'\n  tag satisfies: ['SRG-APP-000133-CTR-000300', 'SRG-APP-000133-CTR-000295', 'SRG-APP-000133-CTR-000305', 'SRG-APP-000133-CTR-000310']\n  tag 'documentable'\n  tag cci: ['CCI-001499']\n  tag nist: ['CM-5 (6)']\nend","source_location":{"line":1,"ref":"U_RGS_RKE2_STIG_V1R3/controls/SV-254564.rb"},"title":"Configuration and authentication files for Rancher RKE2 must be protected.","desc":"There are various configuration files, logs, access credentials, and other files stored on the host filesystem that contain sensitive information. \n\nThese files could potentially put at risk, along with other specific workloads and components:\n- API server\n- proxy\n- scheduler\n- controller\n- etcd\n- Kubernetes administrator account information\n- audit log access, modification, and deletion\n- application access, modification, and deletion\n- container runtime files\n\nIf an attacker can gain access to these files, changes can be made to open vulnerabilities and bypass user authorizations inherent within Kubernetes with RBAC implemented. It is crucial to ensure user permissions are enforced down through to the operating system. Protecting file permissions will ensure that if a nonprivileged user gains access to the system they will still not be able to access protected information from the cluster API, cluster configuration, and sensitive cluster information. This control relies on the underlying operating system also having been properly configured to allow only least privileged access to perform required operations.\n\n","descriptions":{"default":"There are various configuration files, logs, access credentials, and other files stored on the host filesystem that contain sensitive information. \n\nThese files could potentially put at risk, along with other specific workloads and components:\n- API server\n- proxy\n- scheduler\n- controller\n- etcd\n- Kubernetes administrator account information\n- audit log access, modification, and deletion\n- application access, modification, and deletion\n- container runtime files\n\nIf an attacker can gain access to these files, changes can be made to open vulnerabilities and bypass user authorizations inherent within Kubernetes with RBAC implemented. It is crucial to ensure user permissions are enforced down through to the operating system. Protecting file permissions will ensure that if a nonprivileged user gains access to the system they will still not be able to access protected information from the cluster API, cluster configuration, and sensitive cluster information. This control relies on the underlying operating system also having been properly configured to allow only least privileged access to perform required operations.\n\n","check":"File system permissions:\n1. Ensure correct permissions of the files in /etc/rancher/rke2:\ncd /etc/rancher/rke2\nls -l\n\nall owners are root:root\nall permissions are 0600\n\n2. Ensure correct permissions of the files in /var/lib/rancher/rke2:\ncd /var/lib/rancher/rke2\nls -l \n\nall owners are root:root\n\n3. Ensure correct permissions of the files and directories in /var/lib/rancher/rke2/agent:\ncd /var/lib/rancher/rke2/agent\nls -l\n\nowners and group are root:root\nFile permissions set to 0640 for the following:\nrke2controller.kubeconfig\nkubelet.kubeconfig\nkubeproxy.kubeconfig\n\nCertificate file permissions set to 0600\nclient-ca.crt\nclient-kubelet.crt\nclient-kube-proxy.crt\nclient-rke2-controller.crt\nserver-ca.crt\nserving-kubelet.crt\n\nKey file permissions set to 0600\nclient-kubelet.key\nserving-kubelet.key\nclient-rke2-controller.key\nclient-kube-proxy.key\n\nThe directory permissions to 0700 \npod-manifests\netc \n\n4. Ensure correct permissions of the files in /var/lib/rancher/rke2/bin:\ncd /var/lib/rancher/rke2/bin\nls -l\n\nall owners are root:root\nall files are 0750\n\n5. Ensure correct permissions of the directory /var/lib/rancher/rke2/data:\ncd /var/lib/rancher/rke2\nls -l\n\nall owners are root:root\npermissions are 0750\n\n6. Ensure correct permissions of each file in /var/lib/rancher/rke2/data:\ncd /var/lib/rancher/rke2/data\nls -l\n\nall owners are root:root\nall files are 0640\n\n7. Ensure correct permissions of /var/lib/rancher/rke2/server:\ncd /var/lib/rancher/rke2/server\nls -l \n\nall owners are root:root\n\nThe following directories are set to 0700:\ncred\ndb\ntls \n\nThe following directories are set to 0750:\nlogs \n\nThe following directories are set to 0751:\nmanifests \n\nThe following file is set to 0600:\ntoken \n\n8. Ensure the RKE2 Server configuration file on all RKE2 Server hosts contains the following:\n(cat /etc/rancher/rke2/config.yaml)\nwrite-kubeconfig-mode: \"0640\"\n\nIf any of the permissions specified above do not match the required level, this is a finding.","fix":"File system permissions:\n1. Fix permissions of the files in /etc/rancher/rke2:\ncd /etc/rancher/rke2\nchmod 0600 ./*\nchown root:root ./*\nls -l\n\n2. Fix permissions of the files in /var/lib/rancher/rke2:\ncd /var/lib/rancher/rke2\nchown root:root ./*\nls -l \n\n3. Fix permissions of the files and directories in /var/lib/rancher/rke2/agent:\ncd /var/lib/rancher/rke2/agent\nchown root:root ./*\nchmod 0700 pod-manifests\nchmod 0700 etc\nfind . -maxdepth 1 -type f -name \"*.kubeconfig\" -exec chmod 0640 {} \\;\nfind . -maxdepth 1 -type f -name \"*.crt\" -exec chmod 0600 {} \\;\nfind . -maxdepth 1 -type f -name \"*.key\" -exec chmod 0600 {} \\;\nls -l\n\n4. Fix permissions of the files in /var/lib/rancher/rke2/bin:\ncd /var/lib/rancher/rke2/agent/bin\nchown root:root ./*\nchmod 0750 ./*\nls -l\n\n5. Fix permissions directory of /var/lib/rancher/rke2/data:\ncd /var/lib/rancher/rke2/agent\nchown root:root data\nchmod 0750 data\nls -l\n\n6. Fix permissions of files in /var/lib/rancher/rke2/data:\ncd /var/lib/rancher/rke2/data\nchown root:root ./*\nchmod 0640 ./*\nls -l\n\n7. Fix permissions in /var/lib/rancher/rke2/server:\ncd /var/lib/rancher/rke2/server\nchown root:root ./*\nchmod 0700 cred\nchmod 0700 db\nchmod 0700 tls\nchmod 0751 manifests\nchmod 0750 logs\nchmod 0600 token\nls -l\n\nEdit the RKE2 Server configuration file on all RKE2 Server hosts, located at /etc/rancher/rke2/config.yaml, to contain the following:\n\nwrite-kubeconfig-mode: \"0640\"\n\nOnce the configuration file is updated, restart the RKE2 Server. Run the command:\nsystemctl restart rke2-server"},"impact":0.5,"refs":[{"ref":"DPMS Target RGS RKE2"}],"tags":{"check_id":"C-58048r918239_chk","severity":"medium","gid":"V-254564","rid":"SV-254564r918258_rule","stig_id":"CNTR-R2-000520","gtitle":"SRG-APP-000133-CTR-000300","fix_id":"F-57997r918240_fix","satisfies":["SRG-APP-000133-CTR-000300","SRG-APP-000133-CTR-000295","SRG-APP-000133-CTR-000305","SRG-APP-000133-CTR-000310"],"documentable":null,"cci":["CCI-001499"],"nist":["CM-5 (6)"]}},{"id":"SV-254565","code":"control 'SV-254565' do\n  title 'Rancher RKE2 must be configured with only essential configurations.'\n  desc 'It is important to disable any unnecessary components to reduce any potential attack surfaces. \n\nRKE2 allows disabling the following components:\n- rke2-canal\n- rke2-coredns\n- rke2-ingress-nginx\n- rke2-kube-proxy\n- rke2-metrics-server\n\nIf utilizing any of these components presents a security risk, or if any of the components are not required then they can be disabled by using the \"disable\" flag.\n\nIf any of the components are not required, they can be disabled by using the \"disable\" flag.\n\n'\n  desc 'check', 'Ensure the RKE2 Server configuration file on all RKE2 Server hosts contains a \"disable\" flag only if there are default RKE2 components that need to be disabled. \n\nIf there are no default components that need to be disabled, this is not a finding.\n\nRun this command on the RKE2 Control Plane:\ncat /etc/rancher/rke2/config.yaml\n\nRKE2 allows disabling the following components. If any of the components are not required, they can be disabled:\n- rke2-canal\n- rke2-coredns\n- rke2-ingress-nginx\n- rke2-kube-proxy\n- rke2-metrics-server\n\nIf services not in use are enabled, this is a finding.'\n  desc 'fix', 'Disable unnecessary RKE2 components.\n\nEdit the RKE2 Server configuration file on all RKE2 Server hosts, located at /etc/rancher/rke2/config.yaml, so that it contains a \"disable\" flag if any default RKE2 components are unnecessary. \n\nExample:\ndisable: rke2-canal\ndisable: rke2-coredns\ndisable: rke2-ingress-nginx\ndisable: rke2-kube-proxy\ndisable: rke2-metrics-server\n\nOnce the configuration file is updated, restart the RKE2 Server. Run the command:\nsystemctl restart rke2-server'\n  impact 0.5\n  ref 'DPMS Target RGS RKE2'\n  tag check_id: 'C-58049r918242_chk'\n  tag severity: 'medium'\n  tag gid: 'V-254565'\n  tag rid: 'SV-254565r918259_rule'\n  tag stig_id: 'CNTR-R2-000550'\n  tag gtitle: 'SRG-APP-000141-CTR-000315'\n  tag fix_id: 'F-57998r918243_fix'\n  tag satisfies: ['SRG-APP-000141-CTR-000315', 'SRG-APP-000384-CTR-000915']\n  tag 'documentable'\n  tag cci: ['CCI-000381', 'CCI-001764']\n  tag nist: ['CM-7 a', 'CM-7 (2)']\nend","source_location":{"line":1,"ref":"U_RGS_RKE2_STIG_V1R3/controls/SV-254565.rb"},"title":"Rancher RKE2 must be configured with only essential configurations.","desc":"It is important to disable any unnecessary components to reduce any potential attack surfaces. \n\nRKE2 allows disabling the following components:\n- rke2-canal\n- rke2-coredns\n- rke2-ingress-nginx\n- rke2-kube-proxy\n- rke2-metrics-server\n\nIf utilizing any of these components presents a security risk, or if any of the components are not required then they can be disabled by using the \"disable\" flag.\n\nIf any of the components are not required, they can be disabled by using the \"disable\" flag.\n\n","descriptions":{"default":"It is important to disable any unnecessary components to reduce any potential attack surfaces. \n\nRKE2 allows disabling the following components:\n- rke2-canal\n- rke2-coredns\n- rke2-ingress-nginx\n- rke2-kube-proxy\n- rke2-metrics-server\n\nIf utilizing any of these components presents a security risk, or if any of the components are not required then they can be disabled by using the \"disable\" flag.\n\nIf any of the components are not required, they can be disabled by using the \"disable\" flag.\n\n","check":"Ensure the RKE2 Server configuration file on all RKE2 Server hosts contains a \"disable\" flag only if there are default RKE2 components that need to be disabled. \n\nIf there are no default components that need to be disabled, this is not a finding.\n\nRun this command on the RKE2 Control Plane:\ncat /etc/rancher/rke2/config.yaml\n\nRKE2 allows disabling the following components. If any of the components are not required, they can be disabled:\n- rke2-canal\n- rke2-coredns\n- rke2-ingress-nginx\n- rke2-kube-proxy\n- rke2-metrics-server\n\nIf services not in use are enabled, this is a finding.","fix":"Disable unnecessary RKE2 components.\n\nEdit the RKE2 Server configuration file on all RKE2 Server hosts, located at /etc/rancher/rke2/config.yaml, so that it contains a \"disable\" flag if any default RKE2 components are unnecessary. \n\nExample:\ndisable: rke2-canal\ndisable: rke2-coredns\ndisable: rke2-ingress-nginx\ndisable: rke2-kube-proxy\ndisable: rke2-metrics-server\n\nOnce the configuration file is updated, restart the RKE2 Server. Run the command:\nsystemctl restart rke2-server"},"impact":0.5,"refs":[{"ref":"DPMS Target RGS RKE2"}],"tags":{"check_id":"C-58049r918242_chk","severity":"medium","gid":"V-254565","rid":"SV-254565r918259_rule","stig_id":"CNTR-R2-000550","gtitle":"SRG-APP-000141-CTR-000315","fix_id":"F-57998r918243_fix","satisfies":["SRG-APP-000141-CTR-000315","SRG-APP-000384-CTR-000915"],"documentable":null,"cci":["CCI-000381","CCI-001764"],"nist":["CM-7 a","CM-7 (2)"]}},{"id":"SV-254566","code":"control 'SV-254566' do\n  title 'Rancher RKE2 runtime must enforce ports, protocols, and services that adhere to the PPSM CAL.'\n  desc 'Ports, protocols, and services within the RKE2 runtime must be controlled and conform to the PPSM CAL. Those ports, protocols, and services that fall outside the PPSM CAL must be blocked by the runtime. Instructions on the PPSM can be found in DoD Instruction 8551.01 Policy.\n\nRKE2 sets most ports and services configuration upon initiation, however, these ports can be changed after the fact to non-compliant configurations. It is important to verify core component configurations for compliance.\n\nAPI Server, Scheduler, Controller, ETCD, and User Pods should all be checked to ensure proper PPS configuration.\n\n'\n  desc 'check', 'Check Ports, Protocols, and Services (PPS)\nChange to the /var/lib/rancher/rke2/agent/pod-manifests directory on the Kubernetes RKE2 Control Plane. \nRun the command:\ngrep kube-apiserver.yaml -I -insecure-port\ngrep kube-apiserver.yaml -I -secure-port\ngrep kube-apiserver.yaml -I -etcd-servers *\n\nReview findings against the most recent PPSM CAL:\nhttps://cyber.mil/ppsm/cal/\n\nAny manifest and namespace PPS or services configuration not in compliance with PPSM CAL is a finding.\n\nIf there are any ports, protocols, and services in the system documentation not in compliance with the CAL PPSM, this is a finding. Any PPS not set in the system documentation is a finding.\n\nVerify API Server network boundary with the PPS associated with the CAL Assurance Categories. Any PPS not in compliance with the CAL Assurance Category requirements is a finding.\nReview findings against the most recent PPSM CAL:\nhttps://cyber.mil/ppsm/cal/\n\nRunning these commands individually will show what ports are currently configured to be used by each of the core components. Inspect this output and ensure only proper ports are being utilized. If any ports not defined as the proper ports are being used, this is a finding.\n\n/var/lib/rancher/rke2/bin/kubectl get po -n kube-system -l component=kube-controller-manager -o=jsonpath=\"{.items[*].spec.containers[*].args}\"\n\n/var/lib/rancher/rke2/bin/kubectl get po -n kube-system -l component=kube-scheduler -o=jsonpath=\"{.items[*].spec.containers[*].args}\"\n\n/var/lib/rancher/rke2/bin/kubectl get po -n kube-system -l component=kube-apiserver -o=jsonpath=\"{.items[*].spec.containers[*].args}\" | grep tls-min-version\n\nVerify user pods:\nUser pods will also need to be inspected to ensure compliance. This will need to be on a case-by-case basis.\ncat /var/lib/rancher/rke2/server/db/etcd/config\nIf any ports not defined as the proper ports are being used, this is a finding.'\n  desc 'fix', 'Review the documentation covering how to set these PPSs and update this configuration file:\n\n /etc/rancher/rke2/config.yaml\n\nOnce configuration file is updated, restart the RKE2 Server. Run the command:\nsystemctl restart rke2-server'\n  impact 0.5\n  ref 'DPMS Target RGS RKE2'\n  tag check_id: 'C-58050r894458_chk'\n  tag severity: 'medium'\n  tag gid: 'V-254566'\n  tag rid: 'SV-254566r894459_rule'\n  tag stig_id: 'CNTR-R2-000580'\n  tag gtitle: 'SRG-APP-000142-CTR-000325'\n  tag fix_id: 'F-57999r859267_fix'\n  tag satisfies: ['SRG-APP-000142-CTR-000325', 'SRG-APP-000142-CTR-000330', 'SRG-APP-000383-CTR-000910']\n  tag 'documentable'\n  tag cci: ['CCI-000382', 'CCI-001762']\n  tag nist: ['CM-7 b', 'CM-7 (1) (b)']\nend","source_location":{"line":1,"ref":"U_RGS_RKE2_STIG_V1R3/controls/SV-254566.rb"},"title":"Rancher RKE2 runtime must enforce ports, protocols, and services that adhere to the PPSM CAL.","desc":"Ports, protocols, and services within the RKE2 runtime must be controlled and conform to the PPSM CAL. Those ports, protocols, and services that fall outside the PPSM CAL must be blocked by the runtime. Instructions on the PPSM can be found in DoD Instruction 8551.01 Policy.\n\nRKE2 sets most ports and services configuration upon initiation, however, these ports can be changed after the fact to non-compliant configurations. It is important to verify core component configurations for compliance.\n\nAPI Server, Scheduler, Controller, ETCD, and User Pods should all be checked to ensure proper PPS configuration.\n\n","descriptions":{"default":"Ports, protocols, and services within the RKE2 runtime must be controlled and conform to the PPSM CAL. Those ports, protocols, and services that fall outside the PPSM CAL must be blocked by the runtime. Instructions on the PPSM can be found in DoD Instruction 8551.01 Policy.\n\nRKE2 sets most ports and services configuration upon initiation, however, these ports can be changed after the fact to non-compliant configurations. It is important to verify core component configurations for compliance.\n\nAPI Server, Scheduler, Controller, ETCD, and User Pods should all be checked to ensure proper PPS configuration.\n\n","check":"Check Ports, Protocols, and Services (PPS)\nChange to the /var/lib/rancher/rke2/agent/pod-manifests directory on the Kubernetes RKE2 Control Plane. \nRun the command:\ngrep kube-apiserver.yaml -I -insecure-port\ngrep kube-apiserver.yaml -I -secure-port\ngrep kube-apiserver.yaml -I -etcd-servers *\n\nReview findings against the most recent PPSM CAL:\nhttps://cyber.mil/ppsm/cal/\n\nAny manifest and namespace PPS or services configuration not in compliance with PPSM CAL is a finding.\n\nIf there are any ports, protocols, and services in the system documentation not in compliance with the CAL PPSM, this is a finding. Any PPS not set in the system documentation is a finding.\n\nVerify API Server network boundary with the PPS associated with the CAL Assurance Categories. Any PPS not in compliance with the CAL Assurance Category requirements is a finding.\nReview findings against the most recent PPSM CAL:\nhttps://cyber.mil/ppsm/cal/\n\nRunning these commands individually will show what ports are currently configured to be used by each of the core components. Inspect this output and ensure only proper ports are being utilized. If any ports not defined as the proper ports are being used, this is a finding.\n\n/var/lib/rancher/rke2/bin/kubectl get po -n kube-system -l component=kube-controller-manager -o=jsonpath=\"{.items[*].spec.containers[*].args}\"\n\n/var/lib/rancher/rke2/bin/kubectl get po -n kube-system -l component=kube-scheduler -o=jsonpath=\"{.items[*].spec.containers[*].args}\"\n\n/var/lib/rancher/rke2/bin/kubectl get po -n kube-system -l component=kube-apiserver -o=jsonpath=\"{.items[*].spec.containers[*].args}\" | grep tls-min-version\n\nVerify user pods:\nUser pods will also need to be inspected to ensure compliance. This will need to be on a case-by-case basis.\ncat /var/lib/rancher/rke2/server/db/etcd/config\nIf any ports not defined as the proper ports are being used, this is a finding.","fix":"Review the documentation covering how to set these PPSs and update this configuration file:\n\n /etc/rancher/rke2/config.yaml\n\nOnce configuration file is updated, restart the RKE2 Server. Run the command:\nsystemctl restart rke2-server"},"impact":0.5,"refs":[{"ref":"DPMS Target RGS RKE2"}],"tags":{"check_id":"C-58050r894458_chk","severity":"medium","gid":"V-254566","rid":"SV-254566r894459_rule","stig_id":"CNTR-R2-000580","gtitle":"SRG-APP-000142-CTR-000325","fix_id":"F-57999r859267_fix","satisfies":["SRG-APP-000142-CTR-000325","SRG-APP-000142-CTR-000330","SRG-APP-000383-CTR-000910"],"documentable":null,"cci":["CCI-000382","CCI-001762"],"nist":["CM-7 b","CM-7 (1) (b)"]}},{"id":"SV-254567","code":"control 'SV-254567' do\n  title 'Rancher RKE2 must store only cryptographic representations of passwords.'\n  desc 'Secrets, such as passwords, keys, tokens, and certificates should not be stored as environment variables. These environment variables are accessible inside RKE2 by the \"Get Pod\" API call, and by any system, such as CI/CD pipeline, which has access to the definition file of the container. Secrets must be mounted from files or stored within password vaults.'\n  desc 'check', 'On the RKE2 Control Plane, run the following commands:\n\nkubectl get pods -A\nkubectl get jobs -A\nkubectl get cronjobs -A\n\nThis will output all running pods, jobs, and cronjobs. \n\nEvaluate each of the above commands using the respective commands below:\n\nkubectl get pod -n <namespace> <pod> -o yaml\nkubectl get job -n <namespace> <job> -o yaml\nkubectl get cronjob -n <namespace> <cronjob> -o yaml\n\nIf any contain sensitive values as environment variables, this is a finding.'\n  desc 'fix', 'Any secrets stored as environment variables must be moved to the secret files with the proper protections and enforcements or placed within a password vault.'\n  impact 0.5\n  ref 'DPMS Target RGS RKE2'\n  tag check_id: 'C-58051r894460_chk'\n  tag severity: 'medium'\n  tag gid: 'V-254567'\n  tag rid: 'SV-254567r894461_rule'\n  tag stig_id: 'CNTR-R2-000800'\n  tag gtitle: 'SRG-APP-000171-CTR-000435'\n  tag fix_id: 'F-58000r859270_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000196']\n  tag nist: ['IA-5 (1) (c)']\nend","source_location":{"line":1,"ref":"U_RGS_RKE2_STIG_V1R3/controls/SV-254567.rb"},"title":"Rancher RKE2 must store only cryptographic representations of passwords.","desc":"Secrets, such as passwords, keys, tokens, and certificates should not be stored as environment variables. These environment variables are accessible inside RKE2 by the \"Get Pod\" API call, and by any system, such as CI/CD pipeline, which has access to the definition file of the container. Secrets must be mounted from files or stored within password vaults.","descriptions":{"default":"Secrets, such as passwords, keys, tokens, and certificates should not be stored as environment variables. These environment variables are accessible inside RKE2 by the \"Get Pod\" API call, and by any system, such as CI/CD pipeline, which has access to the definition file of the container. Secrets must be mounted from files or stored within password vaults.","check":"On the RKE2 Control Plane, run the following commands:\n\nkubectl get pods -A\nkubectl get jobs -A\nkubectl get cronjobs -A\n\nThis will output all running pods, jobs, and cronjobs. \n\nEvaluate each of the above commands using the respective commands below:\n\nkubectl get pod -n <namespace> <pod> -o yaml\nkubectl get job -n <namespace> <job> -o yaml\nkubectl get cronjob -n <namespace> <cronjob> -o yaml\n\nIf any contain sensitive values as environment variables, this is a finding.","fix":"Any secrets stored as environment variables must be moved to the secret files with the proper protections and enforcements or placed within a password vault."},"impact":0.5,"refs":[{"ref":"DPMS Target RGS RKE2"}],"tags":{"check_id":"C-58051r894460_chk","severity":"medium","gid":"V-254567","rid":"SV-254567r894461_rule","stig_id":"CNTR-R2-000800","gtitle":"SRG-APP-000171-CTR-000435","fix_id":"F-58000r859270_fix","documentable":null,"cci":["CCI-000196"],"nist":["IA-5 (1) (c)"]}},{"id":"SV-254568","code":"control 'SV-254568' do\n  title 'Rancher RKE2 must terminate all network connections associated with a communications session at the end of the session, or as follows: for in-band management sessions (privileged sessions), the session must be terminated after five minutes of inactivity.'\n  desc 'Terminating an idle session within a short time period reduces the window of opportunity for unauthorized personnel to take control of a management session enabled on the console or console port that has been left unattended. In addition, quickly terminating an idle session will also free up resources committed by the managed network element. \n\nTerminating network connections associated with communications sessions includes, for example, de-allocating associated TCP/IP address/port pairs at the operating system level, or de-allocating networking assignments at the application level if multiple application sessions are using a single, operating-system-level network connection. This does not mean that the application terminates all sessions or network access; it only ends the inactive session and releases the resources associated with that session.'\n  desc 'check', 'Ensure streaming-connection-idle-timeout argument is set correctly.\n\nRun this command on each node:\n/bin/ps -ef | grep kubelet | grep -v grep\n\nIf --streaming-connection-idle-timeout is set to < \"5m\" or the parameter is not configured, this is a finding.'\n  desc 'fix', 'Edit the RKE2 Server configuration file on all RKE2 Server hosts, located at /etc/rancher/rke2/config.yaml, to contain the following:\n\nkubelet-arg:\n- streaming-connection-idle-timeout=5m\n\nOnce configuration file is updated, restart the RKE2 Agent. Run the command:\nsystemctl restart rke2-agent'\n  impact 0.5\n  ref 'DPMS Target RGS RKE2'\n  tag check_id: 'C-58052r894462_chk'\n  tag severity: 'medium'\n  tag gid: 'V-254568'\n  tag rid: 'SV-254568r894464_rule'\n  tag stig_id: 'CNTR-R2-000890'\n  tag gtitle: 'SRG-APP-000190-CTR-000500'\n  tag fix_id: 'F-58001r894463_fix'\n  tag 'documentable'\n  tag cci: ['CCI-001133']\n  tag nist: ['SC-10']\nend","source_location":{"line":1,"ref":"U_RGS_RKE2_STIG_V1R3/controls/SV-254568.rb"},"title":"Rancher RKE2 must terminate all network connections associated with a communications session at the end of the session, or as follows: for in-band management sessions (privileged sessions), the session must be terminated after five minutes of inactivity.","desc":"Terminating an idle session within a short time period reduces the window of opportunity for unauthorized personnel to take control of a management session enabled on the console or console port that has been left unattended. In addition, quickly terminating an idle session will also free up resources committed by the managed network element. \n\nTerminating network connections associated with communications sessions includes, for example, de-allocating associated TCP/IP address/port pairs at the operating system level, or de-allocating networking assignments at the application level if multiple application sessions are using a single, operating-system-level network connection. This does not mean that the application terminates all sessions or network access; it only ends the inactive session and releases the resources associated with that session.","descriptions":{"default":"Terminating an idle session within a short time period reduces the window of opportunity for unauthorized personnel to take control of a management session enabled on the console or console port that has been left unattended. In addition, quickly terminating an idle session will also free up resources committed by the managed network element. \n\nTerminating network connections associated with communications sessions includes, for example, de-allocating associated TCP/IP address/port pairs at the operating system level, or de-allocating networking assignments at the application level if multiple application sessions are using a single, operating-system-level network connection. This does not mean that the application terminates all sessions or network access; it only ends the inactive session and releases the resources associated with that session.","check":"Ensure streaming-connection-idle-timeout argument is set correctly.\n\nRun this command on each node:\n/bin/ps -ef | grep kubelet | grep -v grep\n\nIf --streaming-connection-idle-timeout is set to < \"5m\" or the parameter is not configured, this is a finding.","fix":"Edit the RKE2 Server configuration file on all RKE2 Server hosts, located at /etc/rancher/rke2/config.yaml, to contain the following:\n\nkubelet-arg:\n- streaming-connection-idle-timeout=5m\n\nOnce configuration file is updated, restart the RKE2 Agent. Run the command:\nsystemctl restart rke2-agent"},"impact":0.5,"refs":[{"ref":"DPMS Target RGS RKE2"}],"tags":{"check_id":"C-58052r894462_chk","severity":"medium","gid":"V-254568","rid":"SV-254568r894464_rule","stig_id":"CNTR-R2-000890","gtitle":"SRG-APP-000190-CTR-000500","fix_id":"F-58001r894463_fix","documentable":null,"cci":["CCI-001133"],"nist":["SC-10"]}},{"id":"SV-254569","code":"control 'SV-254569' do\n  title 'Rancher RKE2 runtime must isolate security functions from nonsecurity functions.'\n  desc \"RKE2 runs as isolated as possible.\n\nRKE2 is a container-based Kubernetes distribution. A container image is essentially a complete and executable version of an application, which relies only on the host's OS kernel. Running containers use resource isolation features in the OS kernel, such as cgroups in Linux, to run multiple independent containers on the same OS. Unless part of the core RKE2 system or configured explicitly, containers managed by RKE2 should not have access to host resources.\n\nProper hardening of the surrounding environment is independent of RKE2 but ensures overall security stature.\n\nWhen Kubernetes launches a container, there are several mechanisms available to ensure complete deployments:\n- When a primary container process fails it is destroyed rebooted.\n- When Liveness checks fail for the container deployment it is destroyed rebooted.\n- If a readiness check fails at any point after the deployment the container is destroyed rebooted.\n- Kubernetes has the ability to rollback a deployment configuration to a previous state if a deployment fails.\n- Failover traffic to a working replica if any of the previous problems are encountered.\n\nSystem kernel is responsible for memory, disk, and task management. The kernel provides a gateway between the system hardware and software. Kubernetes requires kernel access to allocate resources to the Control Plane. Threat actors that penetrate the system kernel can inject malicious code or hijack the Kubernetes architecture. It is vital to implement protections through Kubernetes components to reduce the attack surface.\"\n  desc 'check', 'Ensure protect-kernel-defaults argument is set correctly.\n\nRun this command on each node:\n/bin/ps -ef | grep kubelet | grep -v grep\n\nIf --protect-kernel-defaults is not set to \"true\" or is not configured, this is a finding.'\n  desc 'fix', 'Edit the Kubernetes Kubelet file etc/rancher/rke2/config.yaml on the RKE2 Control Plane and set the following:\n --protect-kernel-defaults=true\n\nOnce configuration file is updated, restart the RKE2 Agent. Run the command:\nsystemctl restart rke2-agent'\n  impact 0.5\n  ref 'DPMS Target RGS RKE2'\n  tag check_id: 'C-58053r859275_chk'\n  tag severity: 'medium'\n  tag gid: 'V-254569'\n  tag rid: 'SV-254569r879643_rule'\n  tag stig_id: 'CNTR-R2-000940'\n  tag gtitle: 'SRG-APP-000233-CTR-000585'\n  tag fix_id: 'F-58002r859276_fix'\n  tag 'documentable'\n  tag cci: ['CCI-001084']\n  tag nist: ['SC-3']\nend","source_location":{"line":1,"ref":"U_RGS_RKE2_STIG_V1R3/controls/SV-254569.rb"},"title":"Rancher RKE2 runtime must isolate security functions from nonsecurity functions.","desc":"RKE2 runs as isolated as possible.\n\nRKE2 is a container-based Kubernetes distribution. A container image is essentially a complete and executable version of an application, which relies only on the host's OS kernel. Running containers use resource isolation features in the OS kernel, such as cgroups in Linux, to run multiple independent containers on the same OS. Unless part of the core RKE2 system or configured explicitly, containers managed by RKE2 should not have access to host resources.\n\nProper hardening of the surrounding environment is independent of RKE2 but ensures overall security stature.\n\nWhen Kubernetes launches a container, there are several mechanisms available to ensure complete deployments:\n- When a primary container process fails it is destroyed rebooted.\n- When Liveness checks fail for the container deployment it is destroyed rebooted.\n- If a readiness check fails at any point after the deployment the container is destroyed rebooted.\n- Kubernetes has the ability to rollback a deployment configuration to a previous state if a deployment fails.\n- Failover traffic to a working replica if any of the previous problems are encountered.\n\nSystem kernel is responsible for memory, disk, and task management. The kernel provides a gateway between the system hardware and software. Kubernetes requires kernel access to allocate resources to the Control Plane. Threat actors that penetrate the system kernel can inject malicious code or hijack the Kubernetes architecture. It is vital to implement protections through Kubernetes components to reduce the attack surface.","descriptions":{"default":"RKE2 runs as isolated as possible.\n\nRKE2 is a container-based Kubernetes distribution. A container image is essentially a complete and executable version of an application, which relies only on the host's OS kernel. Running containers use resource isolation features in the OS kernel, such as cgroups in Linux, to run multiple independent containers on the same OS. Unless part of the core RKE2 system or configured explicitly, containers managed by RKE2 should not have access to host resources.\n\nProper hardening of the surrounding environment is independent of RKE2 but ensures overall security stature.\n\nWhen Kubernetes launches a container, there are several mechanisms available to ensure complete deployments:\n- When a primary container process fails it is destroyed rebooted.\n- When Liveness checks fail for the container deployment it is destroyed rebooted.\n- If a readiness check fails at any point after the deployment the container is destroyed rebooted.\n- Kubernetes has the ability to rollback a deployment configuration to a previous state if a deployment fails.\n- Failover traffic to a working replica if any of the previous problems are encountered.\n\nSystem kernel is responsible for memory, disk, and task management. The kernel provides a gateway between the system hardware and software. Kubernetes requires kernel access to allocate resources to the Control Plane. Threat actors that penetrate the system kernel can inject malicious code or hijack the Kubernetes architecture. It is vital to implement protections through Kubernetes components to reduce the attack surface.","check":"Ensure protect-kernel-defaults argument is set correctly.\n\nRun this command on each node:\n/bin/ps -ef | grep kubelet | grep -v grep\n\nIf --protect-kernel-defaults is not set to \"true\" or is not configured, this is a finding.","fix":"Edit the Kubernetes Kubelet file etc/rancher/rke2/config.yaml on the RKE2 Control Plane and set the following:\n --protect-kernel-defaults=true\n\nOnce configuration file is updated, restart the RKE2 Agent. Run the command:\nsystemctl restart rke2-agent"},"impact":0.5,"refs":[{"ref":"DPMS Target RGS RKE2"}],"tags":{"check_id":"C-58053r859275_chk","severity":"medium","gid":"V-254569","rid":"SV-254569r879643_rule","stig_id":"CNTR-R2-000940","gtitle":"SRG-APP-000233-CTR-000585","fix_id":"F-58002r859276_fix","documentable":null,"cci":["CCI-001084"],"nist":["SC-3"]}},{"id":"SV-254570","code":"control 'SV-254570' do\n  title 'Rancher RKE2 runtime must maintain separate execution domains for each container by assigning each container a separate address space to prevent unauthorized and unintended information transfer via shared system resources.'\n  desc 'Separating user functionality from management functionality is a requirement for all the components within the Kubernetes Control Plane. Without the separation, users may have access to management functions that can degrade the Kubernetes architecture and the services being offered, and can offer a method to bypass testing and validation of functions before introduced into a production environment.\n\n'\n  desc 'check', 'System namespaces are reserved and isolated.\n\nTo view the available namespaces, run the command: \nkubectl get namespaces\n\nThe namespaces to be validated include:\ndefault\nkube-public\nkube-system\nkube-node-lease\n\nFor the default namespace, execute the commands:\nkubectl config set-context --current --namespace=default \nkubectl get all \n\nFor the kube-public namespace, execute the commands:\nkubectl config set-context --current --namespace=kube-public\nkubectl get all                                                                                                                                                                                                                                                                                                                                        \n                                                                                                                                                                                                                                                                                                                                                       \nFor the kube-node-lease namespace, execute the commands:\nkubectl config set-context --current --namespace=kube-node-lease\nkubectl get all                                                                                                                                                                                                                                                                                                                                        \n                                                                                                                                                                                                                                                                                                                                                       \nThe only return values are the Kubernetes service objects (e.g., service/kubernetes).\n                                                                                                                            \nFor the kube-system namespace, execute the commands:\nkubectl config set-context --current --namespace=kube-system                                                                                                                                                                                                                                                                                           \nkubectl get all \n\nThe values returned include the following resources:                                                                                                                                                                                                                                                                           \n- ETCD                                                                                                                                                                                                                                                                                                                                                 \n- Helm\n- Kubernetes API Server\n- Kubernetes Controller Manager \n- Kubernetes Proxy\n- Kubernetes Scheduler \n- Kubernetes Networking Components\n- Ingress Controller Components \n- Metrics Server\n\nIf a return value from the \"kubectl get all\" command is not the Kubernetes service or one from the above lists, this is a finding.'\n  desc 'fix', 'System namespaces are reserved and isolated.\n\nA resource cannot move to a new namespace; the resource must be deleted and recreated in the new namespace.\n\nkubectl delete <resource_type> <resource_name>\nkubectl create -f <resource.yaml> --namespace=<user_created_namespace>'\n  impact 0.5\n  ref 'DPMS Target RGS RKE2'\n  tag check_id: 'C-58054r870259_chk'\n  tag severity: 'medium'\n  tag gid: 'V-254570'\n  tag rid: 'SV-254570r879649_rule'\n  tag stig_id: 'CNTR-R2-000970'\n  tag gtitle: 'SRG-APP-000243-CTR-000600'\n  tag fix_id: 'F-58003r870260_fix'\n  tag satisfies: ['SRG-APP-000243-CTR-000600', 'SRG-APP-000431-CTR-001065', 'SRG-APP-000211-CTR-000530', 'SRG-APP-000243-CTR-000595']\n  tag 'documentable'\n  tag cci: ['CCI-001082', 'CCI-001090', 'CCI-002530']\n  tag nist: ['SC-2', 'SC-4', 'SC-39']\nend","source_location":{"line":1,"ref":"U_RGS_RKE2_STIG_V1R3/controls/SV-254570.rb"},"title":"Rancher RKE2 runtime must maintain separate execution domains for each container by assigning each container a separate address space to prevent unauthorized and unintended information transfer via shared system resources.","desc":"Separating user functionality from management functionality is a requirement for all the components within the Kubernetes Control Plane. Without the separation, users may have access to management functions that can degrade the Kubernetes architecture and the services being offered, and can offer a method to bypass testing and validation of functions before introduced into a production environment.\n\n","descriptions":{"default":"Separating user functionality from management functionality is a requirement for all the components within the Kubernetes Control Plane. Without the separation, users may have access to management functions that can degrade the Kubernetes architecture and the services being offered, and can offer a method to bypass testing and validation of functions before introduced into a production environment.\n\n","check":"System namespaces are reserved and isolated.\n\nTo view the available namespaces, run the command: \nkubectl get namespaces\n\nThe namespaces to be validated include:\ndefault\nkube-public\nkube-system\nkube-node-lease\n\nFor the default namespace, execute the commands:\nkubectl config set-context --current --namespace=default \nkubectl get all \n\nFor the kube-public namespace, execute the commands:\nkubectl config set-context --current --namespace=kube-public\nkubectl get all                                                                                                                                                                                                                                                                                                                                        \n                                                                                                                                                                                                                                                                                                                                                       \nFor the kube-node-lease namespace, execute the commands:\nkubectl config set-context --current --namespace=kube-node-lease\nkubectl get all                                                                                                                                                                                                                                                                                                                                        \n                                                                                                                                                                                                                                                                                                                                                       \nThe only return values are the Kubernetes service objects (e.g., service/kubernetes).\n                                                                                                                            \nFor the kube-system namespace, execute the commands:\nkubectl config set-context --current --namespace=kube-system                                                                                                                                                                                                                                                                                           \nkubectl get all \n\nThe values returned include the following resources:                                                                                                                                                                                                                                                                           \n- ETCD                                                                                                                                                                                                                                                                                                                                                 \n- Helm\n- Kubernetes API Server\n- Kubernetes Controller Manager \n- Kubernetes Proxy\n- Kubernetes Scheduler \n- Kubernetes Networking Components\n- Ingress Controller Components \n- Metrics Server\n\nIf a return value from the \"kubectl get all\" command is not the Kubernetes service or one from the above lists, this is a finding.","fix":"System namespaces are reserved and isolated.\n\nA resource cannot move to a new namespace; the resource must be deleted and recreated in the new namespace.\n\nkubectl delete <resource_type> <resource_name>\nkubectl create -f <resource.yaml> --namespace=<user_created_namespace>"},"impact":0.5,"refs":[{"ref":"DPMS Target RGS RKE2"}],"tags":{"check_id":"C-58054r870259_chk","severity":"medium","gid":"V-254570","rid":"SV-254570r879649_rule","stig_id":"CNTR-R2-000970","gtitle":"SRG-APP-000243-CTR-000600","fix_id":"F-58003r870260_fix","satisfies":["SRG-APP-000243-CTR-000600","SRG-APP-000431-CTR-001065","SRG-APP-000211-CTR-000530","SRG-APP-000243-CTR-000595"],"documentable":null,"cci":["CCI-001082","CCI-001090","CCI-002530"],"nist":["SC-2","SC-4","SC-39"]}},{"id":"SV-254571","code":"control 'SV-254571' do\n  title 'Rancher RKE2 must prevent nonprivileged users from executing privileged functions to include disabling, circumventing, or altering implemented security safeguards/countermeasures.'\n  desc 'Admission controllers intercept requests to the Kubernetes API before an object is instantiated. Enabling the admissions webhook allows for Kubernetes to apply policies against objects that are to be created, read, updated or deleted.\n\nAdmissions controllers can be used for:\n- Prevent pod’s ability to run privileged containers\n- Prevent pod’s ability to use privileged escalation\n- Controlling pod’s access to volume types\n- Controlling pod’s access to host file system\n- Controlling pod’s usage of host networking objects and configuration\n\n'\n  desc 'check', 'If using RKE2 v1.24 or older:\n\nOn the Server Node, run the command:\n\nkubectl get podsecuritypolicy\n\nFor any pod security policies listed, with the exception of system-unrestricted-psp (which is required for core Kubernetes functionality), edit the policy with the command:\n\nkubectl edit podsecuritypolicy policyname\nWhere policyname is the name of the policy\n\nReview the runAsUser, supplementalGroups, and fsGroup sections of the policy.\n\nIf any of these sections are missing, this is a finding.\n\nIf the rule within the runAsUser section is not set to \"MustRunAsNonRoot\", this is a finding.\n\nIf the ranges within the supplementalGroups section has min set to \"0\" or min is missing, this is a finding.\n\nIf the ranges within the fsGroup section have a min set to \"0\" or the min is missing, this is a finding.\n\nIf using RKE2 v1.25 or newer:\n\nOn each controlplane node, validate that the file \"/etc/rancher/rke2/rke2-pss.yaml\" exists and the default configuration settings match the following:\n\n    defaults:\n      audit: restricted\n      audit-version: latest\n      enforce: restricted\n      enforce-version: latest\n      warn: restricted\n      warn-version: latest\n\nIf the configuration file differs from the above, this is a finding.'\n  desc 'fix', %q(If using RKE2 v1.24 or older:\n\nOn each Control Plane node, create the following policy to a file called restricted.yml.\n\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\nname: restricted\nannotations:\nseccomp.security.alpha.kubernetes.io/allowedProfileNames: 'docker/default,runtime/default'\napparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default'\nseccomp.security.alpha.kubernetes.io/defaultProfileName: 'runtime/default'\napparmor.security.beta.kubernetes.io/defaultProfileName: 'runtime/default'\nspec:\nprivileged: false\n#Required to prevent escalations to root.\nallowPrivilegeEscalation: false\n#This is redundant with non-root + disallow privilege escalation,\n# but we can provide it for defense in depth.\nrequiredDropCapabilities:\n- ALL\n# Allow core volume types.\nvolumes:\n- 'configMap'\n- 'emptyDir'\n- 'projected'\n- 'secret'\n- 'downwardAPI'\n# Assume that persistentVolumes set up by the cluster admin are safe to use.\n- 'persistentVolumeClaim'\nhostNetwork: false\nhostIPC: false\nhostPID: false\nrunAsUser:\n# Require the container to run without root privileges.\nrule: 'MustRunAsNonRoot'\nseLinux:\n# This policy assumes the nodes are using AppArmor rather than SELinux.\nrule: 'RunAsAny'\nsupplementalGroups:\nrule: 'MustRunAs'\nranges:\n# Forbid adding the root group.\n- min: 1\nmax: 65535\nfsGroup:\nrule: 'MustRunAs'\nranges:\n# Forbid adding the root group.\n- min: 1\nmax: 65535\nreadOnlyRootFilesystem: false\n\nTo implement the policy, run the command:\n\nkubectl create -f restricted.yml\"\n\nIf using RKE v1.25 or newer:\n\nOn each Control Plane node, create the file \"/etc/rancher/rke2/rke2-pss.yaml\" and add the following content:\n\napiVersion: apiserver.config.k8s.io/v1\nkind: AdmissionConfiguration\nplugins:\n- name: PodSecurity\n  configuration:\n    apiVersion: pod-security.admission.config.k8s.io/v1beta1\n    kind: PodSecurityConfiguration\n    defaults:\n      enforce: \"restricted\"\n      enforce-version: \"latest\"\n      audit: \"restricted\"\n      audit-version: \"latest\"\n      warn: \"restricted\"\n      warn-version: \"latest\"\n    exemptions:\n      usernames: []\n      runtimeClasses: []\n      namespaces: [kube-system, cis-operator-system, tigera-operator]\n\nEnsure the namespace exemptions contain only namespaces requiring access to capabilities outside of the restricted settings above.\n\nOnce the file is created, restart the Control Plane nodes with:\n\nsystemctl restart rke2-server)\n  impact 0.5\n  ref 'DPMS Target RGS RKE2'\n  tag check_id: 'C-58055r918245_chk'\n  tag severity: 'medium'\n  tag gid: 'V-254571'\n  tag rid: 'SV-254571r918260_rule'\n  tag stig_id: 'CNTR-R2-001130'\n  tag gtitle: 'SRG-APP-000340-CTR-000770'\n  tag fix_id: 'F-58004r918246_fix'\n  tag satisfies: ['SRG-APP-000340-CTR-000770', 'SRG-APP-000342-CTR-000775']\n  tag 'documentable'\n  tag cci: ['CCI-002233', 'CCI-002235']\n  tag nist: ['AC-6 (8)', 'AC-6 (10)']\nend","source_location":{"line":1,"ref":"U_RGS_RKE2_STIG_V1R3/controls/SV-254571.rb"},"title":"Rancher RKE2 must prevent nonprivileged users from executing privileged functions to include disabling, circumventing, or altering implemented security safeguards/countermeasures.","desc":"Admission controllers intercept requests to the Kubernetes API before an object is instantiated. Enabling the admissions webhook allows for Kubernetes to apply policies against objects that are to be created, read, updated or deleted.\n\nAdmissions controllers can be used for:\n- Prevent pod’s ability to run privileged containers\n- Prevent pod’s ability to use privileged escalation\n- Controlling pod’s access to volume types\n- Controlling pod’s access to host file system\n- Controlling pod’s usage of host networking objects and configuration\n\n","descriptions":{"default":"Admission controllers intercept requests to the Kubernetes API before an object is instantiated. Enabling the admissions webhook allows for Kubernetes to apply policies against objects that are to be created, read, updated or deleted.\n\nAdmissions controllers can be used for:\n- Prevent pod’s ability to run privileged containers\n- Prevent pod’s ability to use privileged escalation\n- Controlling pod’s access to volume types\n- Controlling pod’s access to host file system\n- Controlling pod’s usage of host networking objects and configuration\n\n","check":"If using RKE2 v1.24 or older:\n\nOn the Server Node, run the command:\n\nkubectl get podsecuritypolicy\n\nFor any pod security policies listed, with the exception of system-unrestricted-psp (which is required for core Kubernetes functionality), edit the policy with the command:\n\nkubectl edit podsecuritypolicy policyname\nWhere policyname is the name of the policy\n\nReview the runAsUser, supplementalGroups, and fsGroup sections of the policy.\n\nIf any of these sections are missing, this is a finding.\n\nIf the rule within the runAsUser section is not set to \"MustRunAsNonRoot\", this is a finding.\n\nIf the ranges within the supplementalGroups section has min set to \"0\" or min is missing, this is a finding.\n\nIf the ranges within the fsGroup section have a min set to \"0\" or the min is missing, this is a finding.\n\nIf using RKE2 v1.25 or newer:\n\nOn each controlplane node, validate that the file \"/etc/rancher/rke2/rke2-pss.yaml\" exists and the default configuration settings match the following:\n\n    defaults:\n      audit: restricted\n      audit-version: latest\n      enforce: restricted\n      enforce-version: latest\n      warn: restricted\n      warn-version: latest\n\nIf the configuration file differs from the above, this is a finding.","fix":"If using RKE2 v1.24 or older:\n\nOn each Control Plane node, create the following policy to a file called restricted.yml.\n\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\nname: restricted\nannotations:\nseccomp.security.alpha.kubernetes.io/allowedProfileNames: 'docker/default,runtime/default'\napparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default'\nseccomp.security.alpha.kubernetes.io/defaultProfileName: 'runtime/default'\napparmor.security.beta.kubernetes.io/defaultProfileName: 'runtime/default'\nspec:\nprivileged: false\n#Required to prevent escalations to root.\nallowPrivilegeEscalation: false\n#This is redundant with non-root + disallow privilege escalation,\n# but we can provide it for defense in depth.\nrequiredDropCapabilities:\n- ALL\n# Allow core volume types.\nvolumes:\n- 'configMap'\n- 'emptyDir'\n- 'projected'\n- 'secret'\n- 'downwardAPI'\n# Assume that persistentVolumes set up by the cluster admin are safe to use.\n- 'persistentVolumeClaim'\nhostNetwork: false\nhostIPC: false\nhostPID: false\nrunAsUser:\n# Require the container to run without root privileges.\nrule: 'MustRunAsNonRoot'\nseLinux:\n# This policy assumes the nodes are using AppArmor rather than SELinux.\nrule: 'RunAsAny'\nsupplementalGroups:\nrule: 'MustRunAs'\nranges:\n# Forbid adding the root group.\n- min: 1\nmax: 65535\nfsGroup:\nrule: 'MustRunAs'\nranges:\n# Forbid adding the root group.\n- min: 1\nmax: 65535\nreadOnlyRootFilesystem: false\n\nTo implement the policy, run the command:\n\nkubectl create -f restricted.yml\"\n\nIf using RKE v1.25 or newer:\n\nOn each Control Plane node, create the file \"/etc/rancher/rke2/rke2-pss.yaml\" and add the following content:\n\napiVersion: apiserver.config.k8s.io/v1\nkind: AdmissionConfiguration\nplugins:\n- name: PodSecurity\n  configuration:\n    apiVersion: pod-security.admission.config.k8s.io/v1beta1\n    kind: PodSecurityConfiguration\n    defaults:\n      enforce: \"restricted\"\n      enforce-version: \"latest\"\n      audit: \"restricted\"\n      audit-version: \"latest\"\n      warn: \"restricted\"\n      warn-version: \"latest\"\n    exemptions:\n      usernames: []\n      runtimeClasses: []\n      namespaces: [kube-system, cis-operator-system, tigera-operator]\n\nEnsure the namespace exemptions contain only namespaces requiring access to capabilities outside of the restricted settings above.\n\nOnce the file is created, restart the Control Plane nodes with:\n\nsystemctl restart rke2-server"},"impact":0.5,"refs":[{"ref":"DPMS Target RGS RKE2"}],"tags":{"check_id":"C-58055r918245_chk","severity":"medium","gid":"V-254571","rid":"SV-254571r918260_rule","stig_id":"CNTR-R2-001130","gtitle":"SRG-APP-000340-CTR-000770","fix_id":"F-58004r918246_fix","satisfies":["SRG-APP-000340-CTR-000770","SRG-APP-000342-CTR-000775"],"documentable":null,"cci":["CCI-002233","CCI-002235"],"nist":["AC-6 (8)","AC-6 (10)"]}},{"id":"SV-254572","code":"control 'SV-254572' do\n  title 'Rancher RKE2 must prohibit the installation of patches, updates, and instantiation of container images without explicit privileged status.'\n  desc 'Controlling access to those users and roles responsible for patching and updating RKE2 reduces the risk of untested or potentially malicious software from being installed within the platform. This access may be separate from the access required to install container images into the registry and those access requirements required to instantiate an image into a service. Explicit privileges (escalated or administrative privileges) provide the regular user with explicit capabilities and control that exceeds the rights of a regular user.\n\nKubernetes uses the API Server to control communication to the other services that makeup Kubernetes. The use of authorizations and not the default of \"AlwaysAllow\" enables the Kubernetes functions control to only the groups that need them.\n\nTo control access, the API server must have one of the following options set for the authorization mode:\n    --authorization-mode=ABAC Attribute-Based Access Control (ABAC) mode allows a user to configure policies using local files.\n    --authorization-mode=RBAC Role-based access control (RBAC) mode allows a user to create and store policies using the Kubernetes API.\n    --authorization-mode=Webhook\nWebHook is an HTTP callback mode that allows a user to manage authorization using a remote REST endpoint.\n    --authorization-mode=Node \nNode authorization is a special-purpose authorization mode that specifically authorizes API requests made by kubelets.\n    --authorization-mode=AlwaysDeny \nThis flag blocks all requests. Use this flag only for testing.\n\n'\n  desc 'check', 'Ensure authorization-mode is set correctly in the apiserver.\n\nRun this command on the RKE2 Control Plane:\n/bin/ps -ef | grep kube-apiserver | grep -v grep\n\nIf  --authorization-mode is not set to \"RBAC,Node\" or is not configured, this is a finding.\n(By default, RKE2 sets Node,RBAC as the parameter to the --authorization-mode argument.)'\n  desc 'fix', 'Edit the /var/lib/rancher/rke2/agent/pod-manifests/kube-apiserver.yaml file. \n--authorization-mode=RBAC,Node\n\nOnce configuration file is updated, restart the RKE2 Server. Run the command:\nsystemctl restart rke2-server'\n  impact 0.5\n  ref 'DPMS Target RGS RKE2'\n  tag check_id: 'C-58056r859284_chk'\n  tag severity: 'medium'\n  tag gid: 'V-254572'\n  tag rid: 'SV-254572r879751_rule'\n  tag stig_id: 'CNTR-R2-001270'\n  tag gtitle: 'SRG-APP-000378-CTR-000880'\n  tag fix_id: 'F-58005r859285_fix'\n  tag satisfies: ['SRG-APP-000378-CTR-000880', 'SRG-APP-000378-CTR-000885']\n  tag 'documentable'\n  tag cci: ['CCI-001812']\n  tag nist: ['CM-11 (2)']\nend","source_location":{"line":1,"ref":"U_RGS_RKE2_STIG_V1R3/controls/SV-254572.rb"},"title":"Rancher RKE2 must prohibit the installation of patches, updates, and instantiation of container images without explicit privileged status.","desc":"Controlling access to those users and roles responsible for patching and updating RKE2 reduces the risk of untested or potentially malicious software from being installed within the platform. This access may be separate from the access required to install container images into the registry and those access requirements required to instantiate an image into a service. Explicit privileges (escalated or administrative privileges) provide the regular user with explicit capabilities and control that exceeds the rights of a regular user.\n\nKubernetes uses the API Server to control communication to the other services that makeup Kubernetes. The use of authorizations and not the default of \"AlwaysAllow\" enables the Kubernetes functions control to only the groups that need them.\n\nTo control access, the API server must have one of the following options set for the authorization mode:\n    --authorization-mode=ABAC Attribute-Based Access Control (ABAC) mode allows a user to configure policies using local files.\n    --authorization-mode=RBAC Role-based access control (RBAC) mode allows a user to create and store policies using the Kubernetes API.\n    --authorization-mode=Webhook\nWebHook is an HTTP callback mode that allows a user to manage authorization using a remote REST endpoint.\n    --authorization-mode=Node \nNode authorization is a special-purpose authorization mode that specifically authorizes API requests made by kubelets.\n    --authorization-mode=AlwaysDeny \nThis flag blocks all requests. Use this flag only for testing.\n\n","descriptions":{"default":"Controlling access to those users and roles responsible for patching and updating RKE2 reduces the risk of untested or potentially malicious software from being installed within the platform. This access may be separate from the access required to install container images into the registry and those access requirements required to instantiate an image into a service. Explicit privileges (escalated or administrative privileges) provide the regular user with explicit capabilities and control that exceeds the rights of a regular user.\n\nKubernetes uses the API Server to control communication to the other services that makeup Kubernetes. The use of authorizations and not the default of \"AlwaysAllow\" enables the Kubernetes functions control to only the groups that need them.\n\nTo control access, the API server must have one of the following options set for the authorization mode:\n    --authorization-mode=ABAC Attribute-Based Access Control (ABAC) mode allows a user to configure policies using local files.\n    --authorization-mode=RBAC Role-based access control (RBAC) mode allows a user to create and store policies using the Kubernetes API.\n    --authorization-mode=Webhook\nWebHook is an HTTP callback mode that allows a user to manage authorization using a remote REST endpoint.\n    --authorization-mode=Node \nNode authorization is a special-purpose authorization mode that specifically authorizes API requests made by kubelets.\n    --authorization-mode=AlwaysDeny \nThis flag blocks all requests. Use this flag only for testing.\n\n","check":"Ensure authorization-mode is set correctly in the apiserver.\n\nRun this command on the RKE2 Control Plane:\n/bin/ps -ef | grep kube-apiserver | grep -v grep\n\nIf  --authorization-mode is not set to \"RBAC,Node\" or is not configured, this is a finding.\n(By default, RKE2 sets Node,RBAC as the parameter to the --authorization-mode argument.)","fix":"Edit the /var/lib/rancher/rke2/agent/pod-manifests/kube-apiserver.yaml file. \n--authorization-mode=RBAC,Node\n\nOnce configuration file is updated, restart the RKE2 Server. Run the command:\nsystemctl restart rke2-server"},"impact":0.5,"refs":[{"ref":"DPMS Target RGS RKE2"}],"tags":{"check_id":"C-58056r859284_chk","severity":"medium","gid":"V-254572","rid":"SV-254572r879751_rule","stig_id":"CNTR-R2-001270","gtitle":"SRG-APP-000378-CTR-000880","fix_id":"F-58005r859285_fix","satisfies":["SRG-APP-000378-CTR-000880","SRG-APP-000378-CTR-000885"],"documentable":null,"cci":["CCI-001812"],"nist":["CM-11 (2)"]}},{"id":"SV-254573","code":"control 'SV-254573' do\n  title 'Rancher RKE2 keystore must implement encryption to prevent unauthorized disclosure of information at rest within Rancher RKE2.'\n  desc 'Encrypting secrets at rest in etcd.\n\nBy default, RKE2 will create an encryption key and configuration file and pass these to the Kubernetes API server. The result is that RKE2 automatically encrypts Kubernetes Secret objects when writing them to etcd.'\n  desc 'check', 'Review the encryption configuration file.\n\nAs root or with root permissions, run the following command:\nview /var/lib/rancher/rke2/server/cred/encryption-config.json\n\nEnsure the RKE2 configuration file on all RKE2 servers, located at /etc/rancher/rke2/config.yaml, does NOT contain:\n\nsecrets-encryption: false\n\nIf secrets encryption is turned off, this is a finding.'\n  desc 'fix', 'Enable secrets encryption.\n\nEdit the RKE2 configuration file on all RKE2 servers, located at /etc/rancher/rke2/config.yaml, so that it contains:\n\nsecrets-encryption: true'\n  impact 0.5\n  ref 'DPMS Target RGS RKE2'\n  tag check_id: 'C-58057r859287_chk'\n  tag severity: 'medium'\n  tag gid: 'V-254573'\n  tag rid: 'SV-254573r918261_rule'\n  tag stig_id: 'CNTR-R2-001500'\n  tag gtitle: 'SRG-APP-000429-CTR-001060'\n  tag fix_id: 'F-58006r918248_fix'\n  tag 'documentable'\n  tag cci: ['CCI-002476']\n  tag nist: ['SC-28 (1)']\nend","source_location":{"line":1,"ref":"U_RGS_RKE2_STIG_V1R3/controls/SV-254573.rb"},"title":"Rancher RKE2 keystore must implement encryption to prevent unauthorized disclosure of information at rest within Rancher RKE2.","desc":"Encrypting secrets at rest in etcd.\n\nBy default, RKE2 will create an encryption key and configuration file and pass these to the Kubernetes API server. The result is that RKE2 automatically encrypts Kubernetes Secret objects when writing them to etcd.","descriptions":{"default":"Encrypting secrets at rest in etcd.\n\nBy default, RKE2 will create an encryption key and configuration file and pass these to the Kubernetes API server. The result is that RKE2 automatically encrypts Kubernetes Secret objects when writing them to etcd.","check":"Review the encryption configuration file.\n\nAs root or with root permissions, run the following command:\nview /var/lib/rancher/rke2/server/cred/encryption-config.json\n\nEnsure the RKE2 configuration file on all RKE2 servers, located at /etc/rancher/rke2/config.yaml, does NOT contain:\n\nsecrets-encryption: false\n\nIf secrets encryption is turned off, this is a finding.","fix":"Enable secrets encryption.\n\nEdit the RKE2 configuration file on all RKE2 servers, located at /etc/rancher/rke2/config.yaml, so that it contains:\n\nsecrets-encryption: true"},"impact":0.5,"refs":[{"ref":"DPMS Target RGS RKE2"}],"tags":{"check_id":"C-58057r859287_chk","severity":"medium","gid":"V-254573","rid":"SV-254573r918261_rule","stig_id":"CNTR-R2-001500","gtitle":"SRG-APP-000429-CTR-001060","fix_id":"F-58006r918248_fix","documentable":null,"cci":["CCI-002476"],"nist":["SC-28 (1)"]}},{"id":"SV-254574","code":"control 'SV-254574' do\n  title 'Rancher RKE2 must remove old components after updated versions have been installed.'\n  desc 'Previous versions of Rancher RKE2 components that are not removed after updates have been installed may be exploited by adversaries by causing older components to execute which contain vulnerabilities. When these components are deleted, the likelihood of this happening is removed.'\n  desc 'check', %q(To view all pods and the images used to create the pods, from the RKE2 Control Plane, run the following command:\n\nkubectl get pods --all-namespaces -o jsonpath=\"{..image}\" | \\\ntr -s '[[:space:]]' '\\n' | \\\nsort | \\\nuniq -c\n\nReview the images used for pods running within Kubernetes.\nIf there are multiple versions of the same image, this is a finding.)\n  desc 'fix', 'Remove any old pods that are using older images. On the RKE2 Control Plane, run the command:\n\nkubectl delete pod podname\n(Note: \"podname\" is the name of the pod to delete.)\n\nRun the command:\nsystemctl restart rke2-server'\n  impact 0.5\n  ref 'DPMS Target RGS RKE2'\n  tag check_id: 'C-58058r859290_chk'\n  tag severity: 'medium'\n  tag gid: 'V-254574'\n  tag rid: 'SV-254574r879825_rule'\n  tag stig_id: 'CNTR-R2-001580'\n  tag gtitle: 'SRG-APP-000454-CTR-001110'\n  tag fix_id: 'F-58007r859291_fix'\n  tag 'documentable'\n  tag cci: ['CCI-002617']\n  tag nist: ['SI-2 (6)']\nend","source_location":{"line":1,"ref":"U_RGS_RKE2_STIG_V1R3/controls/SV-254574.rb"},"title":"Rancher RKE2 must remove old components after updated versions have been installed.","desc":"Previous versions of Rancher RKE2 components that are not removed after updates have been installed may be exploited by adversaries by causing older components to execute which contain vulnerabilities. When these components are deleted, the likelihood of this happening is removed.","descriptions":{"default":"Previous versions of Rancher RKE2 components that are not removed after updates have been installed may be exploited by adversaries by causing older components to execute which contain vulnerabilities. When these components are deleted, the likelihood of this happening is removed.","check":"To view all pods and the images used to create the pods, from the RKE2 Control Plane, run the following command:\n\nkubectl get pods --all-namespaces -o jsonpath=\"{..image}\" | \\\ntr -s '[[:space:]]' '\\n' | \\\nsort | \\\nuniq -c\n\nReview the images used for pods running within Kubernetes.\nIf there are multiple versions of the same image, this is a finding.","fix":"Remove any old pods that are using older images. On the RKE2 Control Plane, run the command:\n\nkubectl delete pod podname\n(Note: \"podname\" is the name of the pod to delete.)\n\nRun the command:\nsystemctl restart rke2-server"},"impact":0.5,"refs":[{"ref":"DPMS Target RGS RKE2"}],"tags":{"check_id":"C-58058r859290_chk","severity":"medium","gid":"V-254574","rid":"SV-254574r879825_rule","stig_id":"CNTR-R2-001580","gtitle":"SRG-APP-000454-CTR-001110","fix_id":"F-58007r859291_fix","documentable":null,"cci":["CCI-002617"],"nist":["SI-2 (6)"]}},{"id":"SV-254575","code":"control 'SV-254575' do\n  title 'Rancher RKE2 registry must contain the latest images with most recent updates and execute within Rancher RKE2 runtime as authorized by IAVM, CTOs, DTMs, and STIGs.'\n  desc 'Software supporting RKE2, images in the registry must stay up to date with the latest patches, service packs, and hot fixes. Not updating RKE2 and container images will expose the organization to vulnerabilities.\n\nFlaws discovered during security assessments, continuous monitoring, incident response activities, or information system error handling must also be addressed expeditiously.\n\nOrganization-defined time periods for updating security-relevant container platform components may vary based on a variety of factors including, for example, the security category of the information system or the criticality of the update (i.e., severity of the vulnerability related to the discovered flaw).\n\nThis requirement will apply to software patch management solutions used to install patches across the enclave and to applications themselves that are not part of that patch management solution. For example, many browsers today provide the capability to install their own patch software. Patch criticality, as well as system criticality will vary. Therefore, the tactical situations regarding the patch management process will also vary. This means that the time period utilized must be a configurable parameter. Time frames for application of security-relevant software updates may be dependent upon the Information Assurance Vulnerability Management (IAVM) process.\n\nRKE2 components will be configured to check for and install security-relevant software updates within an identified time period from the availability of the update. RKE2 registry will ensure the images are current. The specific time period will be defined by an authoritative source (e.g., IAVM, CTOs, DTMs, and STIGs).'\n  desc 'check', %q(Authenticate on the RKE2 Control Plane.\n\nVerify all nodes in the cluster are running a supported version of RKE2 Kubernetes. \nRun command:\n\nkubectl get nodes\n\nIf any nodes are running an unsupported version of RKE2 Kubernetes, this is a finding.\n\nVerify all images running in the cluster are patched to the latest version.\nRun command:\n\nkubectl get pods --all-namespaces -o jsonpath=\"{.items[*].spec.containers[*].image}\" | tr -s '[[:space:]]' '\\n' | sort | uniq -c\n\nIf any images running in the cluster are not the latest version, this is a finding.\n\nNote: Kubernetes release support levels can be found at: https://kubernetes.io/releases/)\n  desc 'fix', 'Upgrade RKE2 to the supported version. Institute and adhere to the policies and procedures to ensure that patches are consistently applied within the time allowed.'\n  impact 0.5\n  ref 'DPMS Target RGS RKE2'\n  tag check_id: 'C-58059r918250_chk'\n  tag severity: 'medium'\n  tag gid: 'V-254575'\n  tag rid: 'SV-254575r918262_rule'\n  tag stig_id: 'CNTR-R2-001620'\n  tag gtitle: 'SRG-APP-000456-CTR-001125'\n  tag fix_id: 'F-58008r859294_fix'\n  tag 'documentable'\n  tag cci: ['CCI-002605']\n  tag nist: ['SI-2 c']\nend","source_location":{"line":1,"ref":"U_RGS_RKE2_STIG_V1R3/controls/SV-254575.rb"},"title":"Rancher RKE2 registry must contain the latest images with most recent updates and execute within Rancher RKE2 runtime as authorized by IAVM, CTOs, DTMs, and STIGs.","desc":"Software supporting RKE2, images in the registry must stay up to date with the latest patches, service packs, and hot fixes. Not updating RKE2 and container images will expose the organization to vulnerabilities.\n\nFlaws discovered during security assessments, continuous monitoring, incident response activities, or information system error handling must also be addressed expeditiously.\n\nOrganization-defined time periods for updating security-relevant container platform components may vary based on a variety of factors including, for example, the security category of the information system or the criticality of the update (i.e., severity of the vulnerability related to the discovered flaw).\n\nThis requirement will apply to software patch management solutions used to install patches across the enclave and to applications themselves that are not part of that patch management solution. For example, many browsers today provide the capability to install their own patch software. Patch criticality, as well as system criticality will vary. Therefore, the tactical situations regarding the patch management process will also vary. This means that the time period utilized must be a configurable parameter. Time frames for application of security-relevant software updates may be dependent upon the Information Assurance Vulnerability Management (IAVM) process.\n\nRKE2 components will be configured to check for and install security-relevant software updates within an identified time period from the availability of the update. RKE2 registry will ensure the images are current. The specific time period will be defined by an authoritative source (e.g., IAVM, CTOs, DTMs, and STIGs).","descriptions":{"default":"Software supporting RKE2, images in the registry must stay up to date with the latest patches, service packs, and hot fixes. Not updating RKE2 and container images will expose the organization to vulnerabilities.\n\nFlaws discovered during security assessments, continuous monitoring, incident response activities, or information system error handling must also be addressed expeditiously.\n\nOrganization-defined time periods for updating security-relevant container platform components may vary based on a variety of factors including, for example, the security category of the information system or the criticality of the update (i.e., severity of the vulnerability related to the discovered flaw).\n\nThis requirement will apply to software patch management solutions used to install patches across the enclave and to applications themselves that are not part of that patch management solution. For example, many browsers today provide the capability to install their own patch software. Patch criticality, as well as system criticality will vary. Therefore, the tactical situations regarding the patch management process will also vary. This means that the time period utilized must be a configurable parameter. Time frames for application of security-relevant software updates may be dependent upon the Information Assurance Vulnerability Management (IAVM) process.\n\nRKE2 components will be configured to check for and install security-relevant software updates within an identified time period from the availability of the update. RKE2 registry will ensure the images are current. The specific time period will be defined by an authoritative source (e.g., IAVM, CTOs, DTMs, and STIGs).","check":"Authenticate on the RKE2 Control Plane.\n\nVerify all nodes in the cluster are running a supported version of RKE2 Kubernetes. \nRun command:\n\nkubectl get nodes\n\nIf any nodes are running an unsupported version of RKE2 Kubernetes, this is a finding.\n\nVerify all images running in the cluster are patched to the latest version.\nRun command:\n\nkubectl get pods --all-namespaces -o jsonpath=\"{.items[*].spec.containers[*].image}\" | tr -s '[[:space:]]' '\\n' | sort | uniq -c\n\nIf any images running in the cluster are not the latest version, this is a finding.\n\nNote: Kubernetes release support levels can be found at: https://kubernetes.io/releases/","fix":"Upgrade RKE2 to the supported version. Institute and adhere to the policies and procedures to ensure that patches are consistently applied within the time allowed."},"impact":0.5,"refs":[{"ref":"DPMS Target RGS RKE2"}],"tags":{"check_id":"C-58059r918250_chk","severity":"medium","gid":"V-254575","rid":"SV-254575r918262_rule","stig_id":"CNTR-R2-001620","gtitle":"SRG-APP-000456-CTR-001125","fix_id":"F-58008r859294_fix","documentable":null,"cci":["CCI-002605"],"nist":["SI-2 c"]}}],"groups":[{"id":"controls/SV-254553.rb","title":null,"controls":["SV-254553"]},{"id":"controls/SV-254554.rb","title":null,"controls":["SV-254554"]},{"id":"controls/SV-254555.rb","title":null,"controls":["SV-254555"]},{"id":"controls/SV-254556.rb","title":null,"controls":["SV-254556"]},{"id":"controls/SV-254557.rb","title":null,"controls":["SV-254557"]},{"id":"controls/SV-254558.rb","title":null,"controls":["SV-254558"]},{"id":"controls/SV-254559.rb","title":null,"controls":["SV-254559"]},{"id":"controls/SV-254560.rb","title":null,"controls":["SV-254560"]},{"id":"controls/SV-254561.rb","title":null,"controls":["SV-254561"]},{"id":"controls/SV-254562.rb","title":null,"controls":["SV-254562"]},{"id":"controls/SV-254563.rb","title":null,"controls":["SV-254563"]},{"id":"controls/SV-254564.rb","title":null,"controls":["SV-254564"]},{"id":"controls/SV-254565.rb","title":null,"controls":["SV-254565"]},{"id":"controls/SV-254566.rb","title":null,"controls":["SV-254566"]},{"id":"controls/SV-254567.rb","title":null,"controls":["SV-254567"]},{"id":"controls/SV-254568.rb","title":null,"controls":["SV-254568"]},{"id":"controls/SV-254569.rb","title":null,"controls":["SV-254569"]},{"id":"controls/SV-254570.rb","title":null,"controls":["SV-254570"]},{"id":"controls/SV-254571.rb","title":null,"controls":["SV-254571"]},{"id":"controls/SV-254572.rb","title":null,"controls":["SV-254572"]},{"id":"controls/SV-254573.rb","title":null,"controls":["SV-254573"]},{"id":"controls/SV-254574.rb","title":null,"controls":["SV-254574"]},{"id":"controls/SV-254575.rb","title":null,"controls":["SV-254575"]}],"name":"RGS_RKE2_STIG","title":null,"maintainer":null,"copyright":null,"copyright_email":null,"license":null,"summary":null,"description":null,"version":"1.0.0","supports":[],"depends":[],"inspec_version":null,"inputs":[],"sha256":"2dcb0d3829d872bb265cac43b1678e7fd11ce8bc0a352a28c5ebd3e62177f26c","status_message":"","status":"loaded","generator":{"name":"inspec","version":"6.6.0"}}
