{"controls":[{"id":"SV-255301","code":"control 'SV-255301' do\n  title 'Azure SQL Databases must integrate with Azure Active Directory for providing account management and automation for all users, groups, roles, and any other principals.'\n  desc \"Enterprise environments make account management for applications and databases challenging and complex. A manual process for account management functions adds the risk of a potential oversight or other error. Managing accounts for the same person in multiple places is inefficient and prone to problems with consistency and synchronization.\n\nA comprehensive application account management process that includes automation helps to ensure that accounts designated as requiring attention are consistently and promptly addressed. \n\nExamples include, but are not limited to, using automation to take action on multiple accounts designated as inactive, suspended, or terminated, or by disabling accounts located in noncentralized account stores, such as multiple servers. Account management functions can also include assignment of group or role membership; identifying account type; specifying user access authorizations (i.e., privileges); account removal, update, or termination; and administrative alerts. The use of automated mechanisms can include, for example, using email or text messaging to notify account managers when users are terminated or transferred; using the information system to monitor account usage; and using automated telephone notification to report atypical system account usage.\n\nSQL DB must be configured to automatically utilize organization-level account management functions, and these functions must immediately enforce the organization's current account policy. \n\nAutomation may comprise differing technologies, that when placed together, contain an overall mechanism supporting an organization's automated account management requirements.\"\n  desc 'check', %q(Determine if Azure SQL Database is configured to use Azure Active Directory authentication only.\n\nOnly Azure Active Directory will be used to authenticate to the server. SQL authentication will be disabled, including SQL Server administrators and users. \n\nIn a PowerShell or Cloud Shell interface, run the statement: \n\naz sql server ad-only-auth get --resource-group myresource --name myserver\n\nOR\n\nGet-AzSqlServerActiveDirectoryOnlyAuthentication  -ServerName myserver -ResourceGroupName myresource\n\nIf the returned value in the \"AzureADOnlyAuthentication\" column is \"True\", this is not a finding. \n\nIf Mixed mode (both SQL Server authentication and Windows authentication) is in use and the need for mixed mode has not been documented and approved, this is a finding. \n\nFrom the documentation, obtain the list of accounts authorized to be managed by Azure SQL Database. \n\nDetermine the accounts (SQL Logins) actually managed by Azure SQL Database. Run the statement: \n\nSELECT name\nFROM sys.database_principals\nWHERE type_desc = 'SQL_USER'\nAND authentication_type_desc = 'INSTANCE'; \n\nIf any accounts listed by the query are not listed in the documentation, this is a finding.\n\nRisk must be accepted by the ISSO/ISSM.\n\nMore information regarding this process is available at: \nhttps://docs.microsoft.com/en-us/azure/azure-sql/database/authentication-azure-ad-only-authentication)\n  desc 'fix', 'If mixed mode is required, document the need and justification; describe the measures taken to ensure the use of Azure SQL Database authentication is kept to a minimum; describe the measures taken to safeguard passwords; list or describe the SQL Logins used; and obtain official approval.\n\nIf mixed mode is not required: \nFor each account being managed by SQL DB but not requiring it, drop or disable the SQL Database user. Replace it with an appropriately configured account, as needed.\n\nTo drop a User in the SSMS Object Explorer: \nNavigate to Databases, choose database, then select Security >> Users. Right-click on the User name and then click \"Delete\".\n\nTo drop a User via a query: \nChange the context to the database_name to be evaluates;\nDROP USER <user_name>;\n\nTo enable AzureADOnlyAuthentication, in a PowerShell or Cloud Shell interface, run the statement: \naz sql server ad-only-auth enable --resource-group myresource --name myserver\n\nOR\n\nEnable-AzSqlServerActiveDirectoryOnlyAuthentication -ServerName myserver -ResourceGroupName myresource\n\nMore information regarding this process is available at: \nhttps://docs.microsoft.com/en-us/azure/azure-sql/database/authentication-azure-ad-only-authentication'\n  impact 0.7\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-58974r871027_chk'\n  tag severity: 'high'\n  tag gid: 'V-255301'\n  tag rid: 'SV-255301r871029_rule'\n  tag stig_id: 'ASQL-00-000100'\n  tag gtitle: 'SRG-APP-000023-DB-000001'\n  tag fix_id: 'F-58918r871028_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000015']\n  tag nist: ['AC-2 (1)']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255301.rb"},"title":"Azure SQL Databases must integrate with Azure Active Directory for providing account management and automation for all users, groups, roles, and any other principals.","desc":"Enterprise environments make account management for applications and databases challenging and complex. A manual process for account management functions adds the risk of a potential oversight or other error. Managing accounts for the same person in multiple places is inefficient and prone to problems with consistency and synchronization.\n\nA comprehensive application account management process that includes automation helps to ensure that accounts designated as requiring attention are consistently and promptly addressed. \n\nExamples include, but are not limited to, using automation to take action on multiple accounts designated as inactive, suspended, or terminated, or by disabling accounts located in noncentralized account stores, such as multiple servers. Account management functions can also include assignment of group or role membership; identifying account type; specifying user access authorizations (i.e., privileges); account removal, update, or termination; and administrative alerts. The use of automated mechanisms can include, for example, using email or text messaging to notify account managers when users are terminated or transferred; using the information system to monitor account usage; and using automated telephone notification to report atypical system account usage.\n\nSQL DB must be configured to automatically utilize organization-level account management functions, and these functions must immediately enforce the organization's current account policy. \n\nAutomation may comprise differing technologies, that when placed together, contain an overall mechanism supporting an organization's automated account management requirements.","descriptions":{"default":"Enterprise environments make account management for applications and databases challenging and complex. A manual process for account management functions adds the risk of a potential oversight or other error. Managing accounts for the same person in multiple places is inefficient and prone to problems with consistency and synchronization.\n\nA comprehensive application account management process that includes automation helps to ensure that accounts designated as requiring attention are consistently and promptly addressed. \n\nExamples include, but are not limited to, using automation to take action on multiple accounts designated as inactive, suspended, or terminated, or by disabling accounts located in noncentralized account stores, such as multiple servers. Account management functions can also include assignment of group or role membership; identifying account type; specifying user access authorizations (i.e., privileges); account removal, update, or termination; and administrative alerts. The use of automated mechanisms can include, for example, using email or text messaging to notify account managers when users are terminated or transferred; using the information system to monitor account usage; and using automated telephone notification to report atypical system account usage.\n\nSQL DB must be configured to automatically utilize organization-level account management functions, and these functions must immediately enforce the organization's current account policy. \n\nAutomation may comprise differing technologies, that when placed together, contain an overall mechanism supporting an organization's automated account management requirements.","check":"Determine if Azure SQL Database is configured to use Azure Active Directory authentication only.\n\nOnly Azure Active Directory will be used to authenticate to the server. SQL authentication will be disabled, including SQL Server administrators and users. \n\nIn a PowerShell or Cloud Shell interface, run the statement: \n\naz sql server ad-only-auth get --resource-group myresource --name myserver\n\nOR\n\nGet-AzSqlServerActiveDirectoryOnlyAuthentication  -ServerName myserver -ResourceGroupName myresource\n\nIf the returned value in the \"AzureADOnlyAuthentication\" column is \"True\", this is not a finding. \n\nIf Mixed mode (both SQL Server authentication and Windows authentication) is in use and the need for mixed mode has not been documented and approved, this is a finding. \n\nFrom the documentation, obtain the list of accounts authorized to be managed by Azure SQL Database. \n\nDetermine the accounts (SQL Logins) actually managed by Azure SQL Database. Run the statement: \n\nSELECT name\nFROM sys.database_principals\nWHERE type_desc = 'SQL_USER'\nAND authentication_type_desc = 'INSTANCE'; \n\nIf any accounts listed by the query are not listed in the documentation, this is a finding.\n\nRisk must be accepted by the ISSO/ISSM.\n\nMore information regarding this process is available at: \nhttps://docs.microsoft.com/en-us/azure/azure-sql/database/authentication-azure-ad-only-authentication","fix":"If mixed mode is required, document the need and justification; describe the measures taken to ensure the use of Azure SQL Database authentication is kept to a minimum; describe the measures taken to safeguard passwords; list or describe the SQL Logins used; and obtain official approval.\n\nIf mixed mode is not required: \nFor each account being managed by SQL DB but not requiring it, drop or disable the SQL Database user. Replace it with an appropriately configured account, as needed.\n\nTo drop a User in the SSMS Object Explorer: \nNavigate to Databases, choose database, then select Security >> Users. Right-click on the User name and then click \"Delete\".\n\nTo drop a User via a query: \nChange the context to the database_name to be evaluates;\nDROP USER <user_name>;\n\nTo enable AzureADOnlyAuthentication, in a PowerShell or Cloud Shell interface, run the statement: \naz sql server ad-only-auth enable --resource-group myresource --name myserver\n\nOR\n\nEnable-AzSqlServerActiveDirectoryOnlyAuthentication -ServerName myserver -ResourceGroupName myresource\n\nMore information regarding this process is available at: \nhttps://docs.microsoft.com/en-us/azure/azure-sql/database/authentication-azure-ad-only-authentication"},"impact":0.7,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-58974r871027_chk","severity":"high","gid":"V-255301","rid":"SV-255301r871029_rule","stig_id":"ASQL-00-000100","gtitle":"SRG-APP-000023-DB-000001","fix_id":"F-58918r871028_fix","documentable":null,"cci":["CCI-000015"],"nist":["AC-2 (1)"]}},{"id":"SV-255302","code":"control 'SV-255302' do\n  title 'Azure SQL Database must enforce approved authorizations for logical access to database information and system resources in accordance with applicable access control policies.'\n  desc \"Enterprise environments make account management for applications and databases challenging and complex. A manual process for account management functions adds the risk of a potential oversight or other error. Managing accounts for the same person in multiple places is inefficient and prone to problems with consistency and synchronization.\n\nA comprehensive application account management process that includes automation helps to ensure that accounts designated as requiring attention are consistently and promptly addressed. \n\nExamples include, but are not limited to, using automation to take action on multiple accounts designated as inactive, suspended, or terminated, or by disabling accounts located in noncentralized account stores, such as multiple servers. Account management functions can also include assignment of group or role membership; identifying account type; specifying user access authorizations (i.e., privileges); account removal, update, or termination; and administrative alerts. The use of automated mechanisms can include, for example, using email or text messaging to notify account managers when users are terminated or transferred; using the information system to monitor account usage; and using automated telephone notification to report atypical system account usage.\n\nAzure SQL Database must be configured to automatically utilize organization-level account management functions, and these functions must immediately enforce the organization's current account policy. \n\nAutomation may be comprised of differing technologies that when placed together contain an overall mechanism supporting an organization's automated account management requirements.\"\n  desc 'check', \"Review the system documentation to determine the required levels of protection for securables in the database, by type of user.   \n\nReview the permissions actually in place in the database. \n\nExecute the following query to find permissions assigned:\n\nSELECT DISTINCT [Finding] = 'Database '   \n\t+ QUOTENAME(DB_NAME()) + ' '       \n\t+ CASE WHEN dbp.type = 'r' THEN 'Role ' ELSE 'User ' END      \n\t+ QUOTENAME(dbp.name)      \n\t+ CASE WHEN dbp.type = 'r' THEN ' owning schema ' ELSE ' in db role ' END \n\t+ QUOTENAME(ISNULL(dbp2.name,'-')) + ' has db permission ' + QUOTENAME(ISNULL(dbper.permission_name,'-'))       --\n\t+ ' on object ' + QUOTENAME(ISNULL(OBJECT_NAME(dbper.major_id),'-'))    \n\t+ ' on object ' + QUOTENAME(ISNULL(CASE WHEN dbper.major_id = 0 THEN 'Database' ELSE OBJECT_NAME(dbper.major_id) END,'-'))       \n\t+ '.' COLLATE SQL_Latin1_General_CP1_CI_AS  \nFROM sys.database_principals dbp LEFT JOIN sys.database_role_members dbrm \n\tON dbp.principal_Id = dbrm.member_principal_Id LEFT JOIN sys.database_principals dbp2 \n\tON dbrm.role_principal_id = dbp2.principal_id LEFT JOIN sys.database_permissions dbper \n\tON dbper.grantee_principal_id = dbp.principal_id  \nWHERE dbp.type IN ('u','s','g','r') /*Windows/Sql/Groups */\n\tAND NOT (dbp.name = 'public' AND dbper.permission_name IN ('select','execute') \n\tAND  DB_NAME() = 'master') /*ignore public permissions in master*/\n\tAND NOT (dbp.name = 'public' AND dbper.permission_name IN ('select','execute') \n\tAND OBJECT_SCHEMA_NAME(major_id, DB_ID()) = 'sys')      AND ( /*Filter out duplicate permissions in each database except for the base master database*/\n\tdbp2.name IS NOT NULL /* This seems to filter out permissions granted to a role.*/\n\tAND dbper.permission_name IS NOT NULL \n\tAND dbper.major_id IS NOT NULL          \n\tOR DB_NAME() = 'master')\n\nIf the actual permissions do not match the documented requirements, this is a finding.\"\n  desc 'fix', 'Use GRANT, REVOKE, DENY, ALTER ROLE … ADD MEMBER … and/or ALTER ROLE …. DROP MEMBER statements to add and remove permissions on database-level securables, bringing them in line with the documented requirements.\n\nReferences:\nRevoke:\nhttps://docs.microsoft.com/en-us/sql/t-sql/statements/revoke-transact-sql?view=azuresqldb-current\n\nDeny:\nhttps://docs.microsoft.com/en-us/sql/t-sql/statements/deny-transact-sql?view=azuresqldb-current\n\nDROP MEMBER:\nhttps://docs.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/sp-droprolemember-transact-sql?view=azuresqldb-current'\n  impact 0.7\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-58975r871030_chk'\n  tag severity: 'high'\n  tag gid: 'V-255302'\n  tag rid: 'SV-255302r871032_rule'\n  tag stig_id: 'ASQL-00-000200'\n  tag gtitle: 'SRG-APP-000033-DB-000084'\n  tag fix_id: 'F-58919r871031_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000015']\n  tag nist: ['AC-2 (1)']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255302.rb"},"title":"Azure SQL Database must enforce approved authorizations for logical access to database information and system resources in accordance with applicable access control policies.","desc":"Enterprise environments make account management for applications and databases challenging and complex. A manual process for account management functions adds the risk of a potential oversight or other error. Managing accounts for the same person in multiple places is inefficient and prone to problems with consistency and synchronization.\n\nA comprehensive application account management process that includes automation helps to ensure that accounts designated as requiring attention are consistently and promptly addressed. \n\nExamples include, but are not limited to, using automation to take action on multiple accounts designated as inactive, suspended, or terminated, or by disabling accounts located in noncentralized account stores, such as multiple servers. Account management functions can also include assignment of group or role membership; identifying account type; specifying user access authorizations (i.e., privileges); account removal, update, or termination; and administrative alerts. The use of automated mechanisms can include, for example, using email or text messaging to notify account managers when users are terminated or transferred; using the information system to monitor account usage; and using automated telephone notification to report atypical system account usage.\n\nAzure SQL Database must be configured to automatically utilize organization-level account management functions, and these functions must immediately enforce the organization's current account policy. \n\nAutomation may be comprised of differing technologies that when placed together contain an overall mechanism supporting an organization's automated account management requirements.","descriptions":{"default":"Enterprise environments make account management for applications and databases challenging and complex. A manual process for account management functions adds the risk of a potential oversight or other error. Managing accounts for the same person in multiple places is inefficient and prone to problems with consistency and synchronization.\n\nA comprehensive application account management process that includes automation helps to ensure that accounts designated as requiring attention are consistently and promptly addressed. \n\nExamples include, but are not limited to, using automation to take action on multiple accounts designated as inactive, suspended, or terminated, or by disabling accounts located in noncentralized account stores, such as multiple servers. Account management functions can also include assignment of group or role membership; identifying account type; specifying user access authorizations (i.e., privileges); account removal, update, or termination; and administrative alerts. The use of automated mechanisms can include, for example, using email or text messaging to notify account managers when users are terminated or transferred; using the information system to monitor account usage; and using automated telephone notification to report atypical system account usage.\n\nAzure SQL Database must be configured to automatically utilize organization-level account management functions, and these functions must immediately enforce the organization's current account policy. \n\nAutomation may be comprised of differing technologies that when placed together contain an overall mechanism supporting an organization's automated account management requirements.","check":"Review the system documentation to determine the required levels of protection for securables in the database, by type of user.   \n\nReview the permissions actually in place in the database. \n\nExecute the following query to find permissions assigned:\n\nSELECT DISTINCT [Finding] = 'Database '   \n\t+ QUOTENAME(DB_NAME()) + ' '       \n\t+ CASE WHEN dbp.type = 'r' THEN 'Role ' ELSE 'User ' END      \n\t+ QUOTENAME(dbp.name)      \n\t+ CASE WHEN dbp.type = 'r' THEN ' owning schema ' ELSE ' in db role ' END \n\t+ QUOTENAME(ISNULL(dbp2.name,'-')) + ' has db permission ' + QUOTENAME(ISNULL(dbper.permission_name,'-'))       --\n\t+ ' on object ' + QUOTENAME(ISNULL(OBJECT_NAME(dbper.major_id),'-'))    \n\t+ ' on object ' + QUOTENAME(ISNULL(CASE WHEN dbper.major_id = 0 THEN 'Database' ELSE OBJECT_NAME(dbper.major_id) END,'-'))       \n\t+ '.' COLLATE SQL_Latin1_General_CP1_CI_AS  \nFROM sys.database_principals dbp LEFT JOIN sys.database_role_members dbrm \n\tON dbp.principal_Id = dbrm.member_principal_Id LEFT JOIN sys.database_principals dbp2 \n\tON dbrm.role_principal_id = dbp2.principal_id LEFT JOIN sys.database_permissions dbper \n\tON dbper.grantee_principal_id = dbp.principal_id  \nWHERE dbp.type IN ('u','s','g','r') /*Windows/Sql/Groups */\n\tAND NOT (dbp.name = 'public' AND dbper.permission_name IN ('select','execute') \n\tAND  DB_NAME() = 'master') /*ignore public permissions in master*/\n\tAND NOT (dbp.name = 'public' AND dbper.permission_name IN ('select','execute') \n\tAND OBJECT_SCHEMA_NAME(major_id, DB_ID()) = 'sys')      AND ( /*Filter out duplicate permissions in each database except for the base master database*/\n\tdbp2.name IS NOT NULL /* This seems to filter out permissions granted to a role.*/\n\tAND dbper.permission_name IS NOT NULL \n\tAND dbper.major_id IS NOT NULL          \n\tOR DB_NAME() = 'master')\n\nIf the actual permissions do not match the documented requirements, this is a finding.","fix":"Use GRANT, REVOKE, DENY, ALTER ROLE … ADD MEMBER … and/or ALTER ROLE …. DROP MEMBER statements to add and remove permissions on database-level securables, bringing them in line with the documented requirements.\n\nReferences:\nRevoke:\nhttps://docs.microsoft.com/en-us/sql/t-sql/statements/revoke-transact-sql?view=azuresqldb-current\n\nDeny:\nhttps://docs.microsoft.com/en-us/sql/t-sql/statements/deny-transact-sql?view=azuresqldb-current\n\nDROP MEMBER:\nhttps://docs.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/sp-droprolemember-transact-sql?view=azuresqldb-current"},"impact":0.7,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-58975r871030_chk","severity":"high","gid":"V-255302","rid":"SV-255302r871032_rule","stig_id":"ASQL-00-000200","gtitle":"SRG-APP-000033-DB-000084","fix_id":"F-58919r871031_fix","documentable":null,"cci":["CCI-000015"],"nist":["AC-2 (1)"]}},{"id":"SV-255303","code":"control 'SV-255303' do\n  title 'Azure SQL Database must enforce approved authorizations for logical access to server information and system resources in accordance with applicable access control policies.'\n  desc 'Authentication with a DOD-approved PKI certificate does not necessarily imply authorization to access Azure SQL Database. To mitigate the risk of unauthorized access to sensitive information by entities that have been issued certificates by DOD-approved PKIs, all DOD systems, including databases, must be properly configured to implement access control policies.\n\nSuccessful authentication must not automatically give an entity access to an asset or security boundary. Authorization procedures and controls must be implemented to ensure each authenticated entity also has a validated and current authorization. Authorization is the process of determining whether an entity, once authenticated, is permitted to access a specific asset. Information systems use access control policies and enforcement mechanisms to implement this requirement.\n\nAccess control policies include identity-based policies, role-based policies, and attribute-based policies. Access enforcement mechanisms include access control lists, access control matrices, and cryptography. These policies and mechanisms must be employed by the application to control access between users (or processes acting on behalf of users) and objects (e.g., devices, files, records, processes, programs, and domains) in the information system.\n\nThis requirement is applicable to access control enforcement applications, a category that includes database management systems. If Azure SQL Database does not follow applicable policy when approving access, it may be in conflict with networks or other applications in the information system. This may result in users either gaining or being denied access inappropriately and in conflict with applicable policy.'\n  desc 'check', \"Review the system documentation to determine the required levels of protection for DBMS server securables, by type of login.\n\nReview the permissions actually in place on the server.\n\nExecute the following query to find permissions in place on the server:\nSELECT DISTINCT QUOTENAME(sp.name) + ' in server role '\n    + QUOTENAME(ISNULL(sp2.name,'Public')) + ' has '\n    + QUOTENAME(ISNULL(class_desc,'server'))+ ':'\n+ QUOTENAME(ISNULL(object_name(major_id),'~')) + ' permission '\n    + QUOTENAME(ISNULL(srvper.permission_name,'-'))\n    + '.' COLLATE SQL_Latin1_General_CP1_CI_AS Finding\n, object_name(major_id) ObjectName\nFROM sys.database_principals sp\nLEFT JOIN sys.database_role_members srm ON sp.principal_id = srm.member_principal_id\nLEFT JOIN sys.database_principals sp2 ON srm.role_principal_id = sp2.principal_id\nLEFT JOIN sys.database_permissions srvper ON srvper.grantee_principal_id = sp.principal_id\nWHERE sp.type IN ('u','s','g') --Windows/Sql/Groups\nAND sp.principal_id <> 1\n\nIf the actual permissions do not match the documented requirements, this is a finding.\"\n  desc 'fix', 'Use GRANT, REVOKE, DENY, ALTER SERVER ROLE … ADD MEMBER … and/or ALTER SERVER ROLE …. DROP MEMBER statements to add and remove permissions on server-level securables, bringing them in line with the documented requirements.\n\nReferences:\nRevoke:\nhttps://docs.microsoft.com/en-us/sql/t-sql/statements/revoke-transact-sql?view=azuresqldb-current\n\nDeny:\nhttps://docs.microsoft.com/en-us/sql/t-sql/statements/deny-transact-sql?view=azuresqldb-current\n\nDROP MEMBER:\nhttps://docs.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/sp-droprolemember-transact-sql?view=azuresqldb-current'\n  impact 0.7\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-58976r871033_chk'\n  tag severity: 'high'\n  tag gid: 'V-255303'\n  tag rid: 'SV-255303r871035_rule'\n  tag stig_id: 'ASQL-00-000300'\n  tag gtitle: 'SRG-APP-000033-DB-000084'\n  tag fix_id: 'F-58920r871034_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000213']\n  tag nist: ['AC-3']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255303.rb"},"title":"Azure SQL Database must enforce approved authorizations for logical access to server information and system resources in accordance with applicable access control policies.","desc":"Authentication with a DOD-approved PKI certificate does not necessarily imply authorization to access Azure SQL Database. To mitigate the risk of unauthorized access to sensitive information by entities that have been issued certificates by DOD-approved PKIs, all DOD systems, including databases, must be properly configured to implement access control policies.\n\nSuccessful authentication must not automatically give an entity access to an asset or security boundary. Authorization procedures and controls must be implemented to ensure each authenticated entity also has a validated and current authorization. Authorization is the process of determining whether an entity, once authenticated, is permitted to access a specific asset. Information systems use access control policies and enforcement mechanisms to implement this requirement.\n\nAccess control policies include identity-based policies, role-based policies, and attribute-based policies. Access enforcement mechanisms include access control lists, access control matrices, and cryptography. These policies and mechanisms must be employed by the application to control access between users (or processes acting on behalf of users) and objects (e.g., devices, files, records, processes, programs, and domains) in the information system.\n\nThis requirement is applicable to access control enforcement applications, a category that includes database management systems. If Azure SQL Database does not follow applicable policy when approving access, it may be in conflict with networks or other applications in the information system. This may result in users either gaining or being denied access inappropriately and in conflict with applicable policy.","descriptions":{"default":"Authentication with a DOD-approved PKI certificate does not necessarily imply authorization to access Azure SQL Database. To mitigate the risk of unauthorized access to sensitive information by entities that have been issued certificates by DOD-approved PKIs, all DOD systems, including databases, must be properly configured to implement access control policies.\n\nSuccessful authentication must not automatically give an entity access to an asset or security boundary. Authorization procedures and controls must be implemented to ensure each authenticated entity also has a validated and current authorization. Authorization is the process of determining whether an entity, once authenticated, is permitted to access a specific asset. Information systems use access control policies and enforcement mechanisms to implement this requirement.\n\nAccess control policies include identity-based policies, role-based policies, and attribute-based policies. Access enforcement mechanisms include access control lists, access control matrices, and cryptography. These policies and mechanisms must be employed by the application to control access between users (or processes acting on behalf of users) and objects (e.g., devices, files, records, processes, programs, and domains) in the information system.\n\nThis requirement is applicable to access control enforcement applications, a category that includes database management systems. If Azure SQL Database does not follow applicable policy when approving access, it may be in conflict with networks or other applications in the information system. This may result in users either gaining or being denied access inappropriately and in conflict with applicable policy.","check":"Review the system documentation to determine the required levels of protection for DBMS server securables, by type of login.\n\nReview the permissions actually in place on the server.\n\nExecute the following query to find permissions in place on the server:\nSELECT DISTINCT QUOTENAME(sp.name) + ' in server role '\n    + QUOTENAME(ISNULL(sp2.name,'Public')) + ' has '\n    + QUOTENAME(ISNULL(class_desc,'server'))+ ':'\n+ QUOTENAME(ISNULL(object_name(major_id),'~')) + ' permission '\n    + QUOTENAME(ISNULL(srvper.permission_name,'-'))\n    + '.' COLLATE SQL_Latin1_General_CP1_CI_AS Finding\n, object_name(major_id) ObjectName\nFROM sys.database_principals sp\nLEFT JOIN sys.database_role_members srm ON sp.principal_id = srm.member_principal_id\nLEFT JOIN sys.database_principals sp2 ON srm.role_principal_id = sp2.principal_id\nLEFT JOIN sys.database_permissions srvper ON srvper.grantee_principal_id = sp.principal_id\nWHERE sp.type IN ('u','s','g') --Windows/Sql/Groups\nAND sp.principal_id <> 1\n\nIf the actual permissions do not match the documented requirements, this is a finding.","fix":"Use GRANT, REVOKE, DENY, ALTER SERVER ROLE … ADD MEMBER … and/or ALTER SERVER ROLE …. DROP MEMBER statements to add and remove permissions on server-level securables, bringing them in line with the documented requirements.\n\nReferences:\nRevoke:\nhttps://docs.microsoft.com/en-us/sql/t-sql/statements/revoke-transact-sql?view=azuresqldb-current\n\nDeny:\nhttps://docs.microsoft.com/en-us/sql/t-sql/statements/deny-transact-sql?view=azuresqldb-current\n\nDROP MEMBER:\nhttps://docs.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/sp-droprolemember-transact-sql?view=azuresqldb-current"},"impact":0.7,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-58976r871033_chk","severity":"high","gid":"V-255303","rid":"SV-255303r871035_rule","stig_id":"ASQL-00-000300","gtitle":"SRG-APP-000033-DB-000084","fix_id":"F-58920r871034_fix","documentable":null,"cci":["CCI-000213"],"nist":["AC-3"]}},{"id":"SV-255304","code":"control 'SV-255304' do\n  title 'Azure SQL Database must protect against a user falsely repudiating by ensuring only clearly unique Active Directory user accounts can connect to the database.'\n  desc \"Nonrepudiation of actions taken is required in order to maintain data integrity. Examples of particular actions taken by individuals include creating information, sending a message, approving information (e.g., indicating concurrence or signing a contract), and receiving a message. \n\nNonrepudiation protects against later claims by a user of not having created, modified, or deleted a particular data item or collection of data in the database. \n\nIn designing a database, the organization must define the types of data and the user actions that must be protected from repudiation. The implementation must then include building audit features into the application data tables and configuring Azure SQL Database's audit tools to capture the necessary audit trail. Design and implementation also must ensure that applications pass individual user identification to Azure SQL Database, even where the application connects to Azure SQL Database with a standard, shared account.\"\n  desc 'check', \"Obtain the list of authorized Azure SQL Database accounts in the system documentation. \n\nDetermine if any accounts are shared. A shared account is defined as a username and password that are used by multiple individuals to log in to Azure SQL Database. Azure Active Directory accounts are not shared accounts as the group itself does not have a password. \n\nIf accounts are determined to be shared, determine if individuals are first individually authenticated. \n\nIf individuals are not individually authenticated before using the shared account (e.g., by the operating system or possibly by an application making calls to the database), this is a finding. \n\nThe key is individual accountability. If this can be traced, this is not a finding. \n\nIf accounts are determined to be shared, determine if they are directly accessible to end users. If so, this is a finding. \n\nReview contents of audit logs and data tables to confirm that the identity of the individual user performing the action is captured. \n\nIf shared identifiers are found, and not accompanied by individual identifiers, this is a finding.\n\nIf collecting and keeping historical versions of a table is NOT required, this is not a finding.\n\nFind all of the temporal tables in the database using the following query:\n\nSELECT SCHEMA_NAME(T.schema_id) AS schema_name, T.name AS table_name, T.temporal_type_desc, SCHEMA_NAME(H.schema_id) + '.' + H.name AS history_table\nFROM sys.tables T\nJOIN sys.tables H ON T.history_table_id = H.object_id\nWHERE T.temporal_type != 0\nORDER BY schema_name, table_name\n\nUsing the system documentation, determine which tables are required to be temporal tables.\n\nIf any tables listed in the documentation are not in the list created by running the above statement, this is a finding.\n\nEnsure a field exists documenting the login and/or user who last modified the record, if this does not exist, this is a finding.\"\n  desc 'fix', \"Remove user-accessible shared accounts and use individual user IDs. \n\nBuild/configure applications to ensure successful individual authentication prior to shared account access. \n\nEnsure each user's identity is received and used in audit data in all relevant circumstances. \n\nDesign, develop, and implement a method to log use of any account to which more than one person has access. Restrict interactive access to shared accounts to the fewest persons possible.\"\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-58977r871036_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255304'\n  tag rid: 'SV-255304r871038_rule'\n  tag stig_id: 'ASQL-00-000400'\n  tag gtitle: 'SRG-APP-000080-DB-000063'\n  tag fix_id: 'F-58921r871037_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000166']\n  tag nist: ['AU-10']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255304.rb"},"title":"Azure SQL Database must protect against a user falsely repudiating by ensuring only clearly unique Active Directory user accounts can connect to the database.","desc":"Nonrepudiation of actions taken is required in order to maintain data integrity. Examples of particular actions taken by individuals include creating information, sending a message, approving information (e.g., indicating concurrence or signing a contract), and receiving a message. \n\nNonrepudiation protects against later claims by a user of not having created, modified, or deleted a particular data item or collection of data in the database. \n\nIn designing a database, the organization must define the types of data and the user actions that must be protected from repudiation. The implementation must then include building audit features into the application data tables and configuring Azure SQL Database's audit tools to capture the necessary audit trail. Design and implementation also must ensure that applications pass individual user identification to Azure SQL Database, even where the application connects to Azure SQL Database with a standard, shared account.","descriptions":{"default":"Nonrepudiation of actions taken is required in order to maintain data integrity. Examples of particular actions taken by individuals include creating information, sending a message, approving information (e.g., indicating concurrence or signing a contract), and receiving a message. \n\nNonrepudiation protects against later claims by a user of not having created, modified, or deleted a particular data item or collection of data in the database. \n\nIn designing a database, the organization must define the types of data and the user actions that must be protected from repudiation. The implementation must then include building audit features into the application data tables and configuring Azure SQL Database's audit tools to capture the necessary audit trail. Design and implementation also must ensure that applications pass individual user identification to Azure SQL Database, even where the application connects to Azure SQL Database with a standard, shared account.","check":"Obtain the list of authorized Azure SQL Database accounts in the system documentation. \n\nDetermine if any accounts are shared. A shared account is defined as a username and password that are used by multiple individuals to log in to Azure SQL Database. Azure Active Directory accounts are not shared accounts as the group itself does not have a password. \n\nIf accounts are determined to be shared, determine if individuals are first individually authenticated. \n\nIf individuals are not individually authenticated before using the shared account (e.g., by the operating system or possibly by an application making calls to the database), this is a finding. \n\nThe key is individual accountability. If this can be traced, this is not a finding. \n\nIf accounts are determined to be shared, determine if they are directly accessible to end users. If so, this is a finding. \n\nReview contents of audit logs and data tables to confirm that the identity of the individual user performing the action is captured. \n\nIf shared identifiers are found, and not accompanied by individual identifiers, this is a finding.\n\nIf collecting and keeping historical versions of a table is NOT required, this is not a finding.\n\nFind all of the temporal tables in the database using the following query:\n\nSELECT SCHEMA_NAME(T.schema_id) AS schema_name, T.name AS table_name, T.temporal_type_desc, SCHEMA_NAME(H.schema_id) + '.' + H.name AS history_table\nFROM sys.tables T\nJOIN sys.tables H ON T.history_table_id = H.object_id\nWHERE T.temporal_type != 0\nORDER BY schema_name, table_name\n\nUsing the system documentation, determine which tables are required to be temporal tables.\n\nIf any tables listed in the documentation are not in the list created by running the above statement, this is a finding.\n\nEnsure a field exists documenting the login and/or user who last modified the record, if this does not exist, this is a finding.","fix":"Remove user-accessible shared accounts and use individual user IDs. \n\nBuild/configure applications to ensure successful individual authentication prior to shared account access. \n\nEnsure each user's identity is received and used in audit data in all relevant circumstances. \n\nDesign, develop, and implement a method to log use of any account to which more than one person has access. Restrict interactive access to shared accounts to the fewest persons possible."},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-58977r871036_chk","severity":"medium","gid":"V-255304","rid":"SV-255304r871038_rule","stig_id":"ASQL-00-000400","gtitle":"SRG-APP-000080-DB-000063","fix_id":"F-58921r871037_fix","documentable":null,"cci":["CCI-000166"],"nist":["AU-10"]}},{"id":"SV-255305","code":"control 'SV-255305' do\n  title 'Azure SQL Database must protect against a user falsely repudiating by use of system-versioned tables (Temporal Tables).'\n  desc \"Nonrepudiation of actions taken is required in order to maintain data integrity. Examples of particular actions taken by individuals include creating information, sending a message, approving information (e.g., indicating concurrence or signing a contract), and receiving a message. \n\nNonrepudiation protects against later claims by a user of not having created, modified, or deleted a particular data item or collection of data in the database. \n\nIn designing a database, the organization must define the types of data and the user actions that must be protected from repudiation. The implementation must then include building audit features into the application data tables and configuring the DBMS's audit tools to capture the necessary audit trail. Design and implementation also must ensure that applications pass individual user identification to the DBMS, even where the application connects to the DBMS with a standard, shared account. \n\nIf the computer account of a remote computer is granted access to SQL Server, any service or scheduled task running as NT AUTHORITY\\\\SYSTEM or NT AUTHORITY\\\\NETWORK SERVICE can log into the instance and perform actions. These actions cannot be traced back to a specific user or process.\"\n  desc 'check', %q(Check the server documentation to determine if collecting and keeping historical versions of a table is required.\n\nIf collecting and keeping historical versions of a table is NOT required, this is not a finding.\n\nFind all of the temporal tables in the database using the following query:\n\nSELECT SCHEMA_NAME(T.schema_id) AS schema_name, T.name AS table_name, T.temporal_type_desc, SCHEMA_NAME(H.schema_id) + '.' + H.name AS history_table\nFROM sys.tables T\nJOIN sys.tables H ON T.history_table_id = H.object_id\nWHERE T.temporal_type != 0\nORDER BY schema_name, table_name\n\nUsing the system documentation, determine which tables are required to be temporal tables.\n\nIf any tables listed in the documentation are not in the list created by running the above statement, this is a finding.\n\nEnsure a field exists documenting the login and/or user who last modified the record. If this does not exist, this is a finding.\n\nReview the system documentation to determine the history retention period. \nNavigate to the table in Object Explorer. Right-click on the table, and then select Script Table As >> CREATE To >> New Query Editor Window.\n\nLocate the line that contains \"SYSTEM_VERSIONING\".\nLocate the text that states \"HISTORY_RETENTION_PERIOD\".\n\nIf this text is missing, or is set to a value less than the documented history retention period, this is a finding.)\n  desc 'fix', \"Alter sensitive tables to utilize system versioning.\n\n--Alter non-temporal table to define periods for system versioning\nALTER TABLE <MyTableName>\nADD PERIOD FOR SYSTEM_TIME (SysStartTime, SysEndTime),\nSysStartTime datetime2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL\n    DEFAULT SYSUTCDATETIME(),\nSysEndTime datetime2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL\n    DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.99999999') ;\n\n--Enable system versioning with 1 year retention for historical data\nALTER TABLE <MyTableName>\nSET (SYSTEM_VERSIONING = ON (HISTORY_RETENTION_PERIOD = 1 YEAR)) ;\n\nhttps://docs.microsoft.com/en-us/sql/t-sql/statements/alter-table-transact-sql?view=azuresqldb-current#system_versioning\"\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-58978r871039_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255305'\n  tag rid: 'SV-255305r871041_rule'\n  tag stig_id: 'ASQL-00-000500'\n  tag gtitle: 'SRG-APP-000080-DB-000063'\n  tag fix_id: 'F-58922r871040_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000166']\n  tag nist: ['AU-10']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255305.rb"},"title":"Azure SQL Database must protect against a user falsely repudiating by use of system-versioned tables (Temporal Tables).","desc":"Nonrepudiation of actions taken is required in order to maintain data integrity. Examples of particular actions taken by individuals include creating information, sending a message, approving information (e.g., indicating concurrence or signing a contract), and receiving a message. \n\nNonrepudiation protects against later claims by a user of not having created, modified, or deleted a particular data item or collection of data in the database. \n\nIn designing a database, the organization must define the types of data and the user actions that must be protected from repudiation. The implementation must then include building audit features into the application data tables and configuring the DBMS's audit tools to capture the necessary audit trail. Design and implementation also must ensure that applications pass individual user identification to the DBMS, even where the application connects to the DBMS with a standard, shared account. \n\nIf the computer account of a remote computer is granted access to SQL Server, any service or scheduled task running as NT AUTHORITY\\SYSTEM or NT AUTHORITY\\NETWORK SERVICE can log into the instance and perform actions. These actions cannot be traced back to a specific user or process.","descriptions":{"default":"Nonrepudiation of actions taken is required in order to maintain data integrity. Examples of particular actions taken by individuals include creating information, sending a message, approving information (e.g., indicating concurrence or signing a contract), and receiving a message. \n\nNonrepudiation protects against later claims by a user of not having created, modified, or deleted a particular data item or collection of data in the database. \n\nIn designing a database, the organization must define the types of data and the user actions that must be protected from repudiation. The implementation must then include building audit features into the application data tables and configuring the DBMS's audit tools to capture the necessary audit trail. Design and implementation also must ensure that applications pass individual user identification to the DBMS, even where the application connects to the DBMS with a standard, shared account. \n\nIf the computer account of a remote computer is granted access to SQL Server, any service or scheduled task running as NT AUTHORITY\\SYSTEM or NT AUTHORITY\\NETWORK SERVICE can log into the instance and perform actions. These actions cannot be traced back to a specific user or process.","check":"Check the server documentation to determine if collecting and keeping historical versions of a table is required.\n\nIf collecting and keeping historical versions of a table is NOT required, this is not a finding.\n\nFind all of the temporal tables in the database using the following query:\n\nSELECT SCHEMA_NAME(T.schema_id) AS schema_name, T.name AS table_name, T.temporal_type_desc, SCHEMA_NAME(H.schema_id) + '.' + H.name AS history_table\nFROM sys.tables T\nJOIN sys.tables H ON T.history_table_id = H.object_id\nWHERE T.temporal_type != 0\nORDER BY schema_name, table_name\n\nUsing the system documentation, determine which tables are required to be temporal tables.\n\nIf any tables listed in the documentation are not in the list created by running the above statement, this is a finding.\n\nEnsure a field exists documenting the login and/or user who last modified the record. If this does not exist, this is a finding.\n\nReview the system documentation to determine the history retention period. \nNavigate to the table in Object Explorer. Right-click on the table, and then select Script Table As >> CREATE To >> New Query Editor Window.\n\nLocate the line that contains \"SYSTEM_VERSIONING\".\nLocate the text that states \"HISTORY_RETENTION_PERIOD\".\n\nIf this text is missing, or is set to a value less than the documented history retention period, this is a finding.","fix":"Alter sensitive tables to utilize system versioning.\n\n--Alter non-temporal table to define periods for system versioning\nALTER TABLE <MyTableName>\nADD PERIOD FOR SYSTEM_TIME (SysStartTime, SysEndTime),\nSysStartTime datetime2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL\n    DEFAULT SYSUTCDATETIME(),\nSysEndTime datetime2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL\n    DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.99999999') ;\n\n--Enable system versioning with 1 year retention for historical data\nALTER TABLE <MyTableName>\nSET (SYSTEM_VERSIONING = ON (HISTORY_RETENTION_PERIOD = 1 YEAR)) ;\n\nhttps://docs.microsoft.com/en-us/sql/t-sql/statements/alter-table-transact-sql?view=azuresqldb-current#system_versioning"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-58978r871039_chk","severity":"medium","gid":"V-255305","rid":"SV-255305r871041_rule","stig_id":"ASQL-00-000500","gtitle":"SRG-APP-000080-DB-000063","fix_id":"F-58922r871040_fix","documentable":null,"cci":["CCI-000166"],"nist":["AU-10"]}},{"id":"SV-255306","code":"control 'SV-255306' do\n  title 'Database objects (including but not limited to tables, indexes, storage, stored procedures, functions, triggers, links to software external to Azure SQL Database, etc.) must be owned by database/Azure SQL Database principals authorized for ownership.'\n  desc \"Within the database, object ownership implies full privileges to the owned object, including the privilege to assign access to the owned objects to other subjects. Database functions and procedures can be coded using definer's rights. This allows anyone who utilizes the object to perform the actions if they were the owner. If not properly managed, this can lead to privileged actions being taken by unauthorized individuals.\"\n  desc 'check', 'Review system documentation to identify Azure SQL Database accounts authorized to own database objects. \n\nIf the Azure SQL Database ownership list does not exist or needs to be updated, this is a finding. \n\nThe following query can be of use in making this determination: \n\n;with objects_cte as\n(SELECT o.name, o.type_desc,\nCASE\nWHEN o.principal_id is null then s.principal_id\nELSE o.principal_id\nEND as principal_id\nFROM sys.objects o\nINNER JOIN sys.schemas s\nON o.schema_id = s.schema_id\nWHERE o.is_ms_shipped = 0\n)\nSELECT cte.name, cte.type_desc, dp.name as ObjectOwner \nFROM objects_cte cte\nINNER JOIN sys.database_principals dp\nON cte.principal_id = dp.principal_id\nORDER BY dp.name, cte.name\n\nIf any of the listed owners is not authorized, this is a finding.'\n  desc 'fix', 'Document and obtain approval for any account(s) authorized for object ownership.\n\nIf necessary, use the ALTER AUTHORIZATION command to change object ownership to an authorized account. Example provided below. \n\nALTER AUTHORIZATION ON OBJECT::test.table TO AuthorizedUser;\n\nhttps://docs.microsoft.com/en-us/sql/t-sql/statements/alter-authorization-transact-sql'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-58979r871042_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255306'\n  tag rid: 'SV-255306r871044_rule'\n  tag stig_id: 'ASQL-00-001300'\n  tag gtitle: 'SRG-APP-000133-DB-000200'\n  tag fix_id: 'F-58923r871043_fix'\n  tag 'documentable'\n  tag cci: ['CCI-001499']\n  tag nist: ['CM-5 (6)']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255306.rb"},"title":"Database objects (including but not limited to tables, indexes, storage, stored procedures, functions, triggers, links to software external to Azure SQL Database, etc.) must be owned by database/Azure SQL Database principals authorized for ownership.","desc":"Within the database, object ownership implies full privileges to the owned object, including the privilege to assign access to the owned objects to other subjects. Database functions and procedures can be coded using definer's rights. This allows anyone who utilizes the object to perform the actions if they were the owner. If not properly managed, this can lead to privileged actions being taken by unauthorized individuals.","descriptions":{"default":"Within the database, object ownership implies full privileges to the owned object, including the privilege to assign access to the owned objects to other subjects. Database functions and procedures can be coded using definer's rights. This allows anyone who utilizes the object to perform the actions if they were the owner. If not properly managed, this can lead to privileged actions being taken by unauthorized individuals.","check":"Review system documentation to identify Azure SQL Database accounts authorized to own database objects. \n\nIf the Azure SQL Database ownership list does not exist or needs to be updated, this is a finding. \n\nThe following query can be of use in making this determination: \n\n;with objects_cte as\n(SELECT o.name, o.type_desc,\nCASE\nWHEN o.principal_id is null then s.principal_id\nELSE o.principal_id\nEND as principal_id\nFROM sys.objects o\nINNER JOIN sys.schemas s\nON o.schema_id = s.schema_id\nWHERE o.is_ms_shipped = 0\n)\nSELECT cte.name, cte.type_desc, dp.name as ObjectOwner \nFROM objects_cte cte\nINNER JOIN sys.database_principals dp\nON cte.principal_id = dp.principal_id\nORDER BY dp.name, cte.name\n\nIf any of the listed owners is not authorized, this is a finding.","fix":"Document and obtain approval for any account(s) authorized for object ownership.\n\nIf necessary, use the ALTER AUTHORIZATION command to change object ownership to an authorized account. Example provided below. \n\nALTER AUTHORIZATION ON OBJECT::test.table TO AuthorizedUser;\n\nhttps://docs.microsoft.com/en-us/sql/t-sql/statements/alter-authorization-transact-sql"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-58979r871042_chk","severity":"medium","gid":"V-255306","rid":"SV-255306r871044_rule","stig_id":"ASQL-00-001300","gtitle":"SRG-APP-000133-DB-000200","fix_id":"F-58923r871043_fix","documentable":null,"cci":["CCI-001499"],"nist":["CM-5 (6)"]}},{"id":"SV-255307","code":"control 'SV-255307' do\n  title 'The role(s)/group(s) used to modify database structure (including but not necessarily limited to tables, indexes, storage, etc.) and logic modules (stored procedures, functions, triggers, links to software external to Azure SQL Database, etc.) must be restricted to authorized users.'\n  desc 'If the Azure SQL Database were to allow any user to make changes to database structure or logic, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.\n\nAccordingly, only qualified and authorized individuals will be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications.\n\nUnmanaged changes that occur to the database software libraries or configuration can lead to unauthorized or compromised installations.'\n  desc 'check', \"Obtain a listing of users and roles who are authorized to modify database structure and logic modules from the server documentation.\n\nExecute the following query to obtain a list of database principals:\nSELECT P.type_desc AS principal_type, P.name AS principal_name, O.type_desc,\nCASE class\nWHEN 0 THEN DB_NAME()\nWHEN 1 THEN OBJECT_SCHEMA_NAME(major_id) + '.' + OBJECT_NAME(major_id)\nWHEN 3 THEN SCHEMA_NAME(major_id)\nELSE class_desc + '(' + CAST(major_id AS nvarchar) + ')'\nEND AS securable_name, DP.state_desc, DP.permission_name\nFROM sys.database_permissions DP\nJOIN sys.database_principals P ON DP.grantee_principal_id = P.principal_id\nLEFT OUTER JOIN sys.all_objects O ON O.object_id = DP.major_id AND O.type IN ('TR','TA','P','X','RF','PC','IF','FN','TF','U')\nWHERE DP.type IN ('AL','ALTG') AND DP.class IN (0, 1, 53)\n\nExecute the following query to obtain a list of role memberships:\nSELECT R.name AS role_name, M.type_desc AS principal_type, M.name AS principal_name\nFROM sys.database_principals R\nJOIN sys.database_role_members DRM ON R.principal_id = DRM.role_principal_id\nJOIN sys.database_principals M ON DRM.member_principal_id = M.principal_id\nWHERE R.name IN ('db_ddladmin','db_owner')\nAND M.name != 'dbo'\n\nIf unauthorized access to the principal(s)/role(s) has been granted, this is a finding.\"\n  desc 'fix', 'Document and obtain approval for any nonadministrative user(s) who require the ability to modify database structure and logic modules.\n\nIf necessary, use the ALTER ROLE and/or REVOKE commands to remove unauthorized users access to modify database structure. Examples provided below.\n\nALTER ROLE ddladmin DROP MEMBER UnauthorizedUser;  \n\nREVOKE SELECT ON OBJECT::test.table FROM UnauthorizedUser;\n\nhttps://docs.microsoft.com/en-us/sql/t-sql/statements/alter-role-transact-sql\n\nhttps://docs.microsoft.com/en-us/sql/t-sql/statements/revoke-transact-sql'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-58980r871045_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255307'\n  tag rid: 'SV-255307r871047_rule'\n  tag stig_id: 'ASQL-00-001400'\n  tag gtitle: 'SRG-APP-000133-DB-000362'\n  tag fix_id: 'F-58924r871046_fix'\n  tag 'documentable'\n  tag cci: ['CCI-001499']\n  tag nist: ['CM-5 (6)']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255307.rb"},"title":"The role(s)/group(s) used to modify database structure (including but not necessarily limited to tables, indexes, storage, etc.) and logic modules (stored procedures, functions, triggers, links to software external to Azure SQL Database, etc.) must be restricted to authorized users.","desc":"If the Azure SQL Database were to allow any user to make changes to database structure or logic, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.\n\nAccordingly, only qualified and authorized individuals will be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications.\n\nUnmanaged changes that occur to the database software libraries or configuration can lead to unauthorized or compromised installations.","descriptions":{"default":"If the Azure SQL Database were to allow any user to make changes to database structure or logic, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.\n\nAccordingly, only qualified and authorized individuals will be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications.\n\nUnmanaged changes that occur to the database software libraries or configuration can lead to unauthorized or compromised installations.","check":"Obtain a listing of users and roles who are authorized to modify database structure and logic modules from the server documentation.\n\nExecute the following query to obtain a list of database principals:\nSELECT P.type_desc AS principal_type, P.name AS principal_name, O.type_desc,\nCASE class\nWHEN 0 THEN DB_NAME()\nWHEN 1 THEN OBJECT_SCHEMA_NAME(major_id) + '.' + OBJECT_NAME(major_id)\nWHEN 3 THEN SCHEMA_NAME(major_id)\nELSE class_desc + '(' + CAST(major_id AS nvarchar) + ')'\nEND AS securable_name, DP.state_desc, DP.permission_name\nFROM sys.database_permissions DP\nJOIN sys.database_principals P ON DP.grantee_principal_id = P.principal_id\nLEFT OUTER JOIN sys.all_objects O ON O.object_id = DP.major_id AND O.type IN ('TR','TA','P','X','RF','PC','IF','FN','TF','U')\nWHERE DP.type IN ('AL','ALTG') AND DP.class IN (0, 1, 53)\n\nExecute the following query to obtain a list of role memberships:\nSELECT R.name AS role_name, M.type_desc AS principal_type, M.name AS principal_name\nFROM sys.database_principals R\nJOIN sys.database_role_members DRM ON R.principal_id = DRM.role_principal_id\nJOIN sys.database_principals M ON DRM.member_principal_id = M.principal_id\nWHERE R.name IN ('db_ddladmin','db_owner')\nAND M.name != 'dbo'\n\nIf unauthorized access to the principal(s)/role(s) has been granted, this is a finding.","fix":"Document and obtain approval for any nonadministrative user(s) who require the ability to modify database structure and logic modules.\n\nIf necessary, use the ALTER ROLE and/or REVOKE commands to remove unauthorized users access to modify database structure. Examples provided below.\n\nALTER ROLE ddladmin DROP MEMBER UnauthorizedUser;  \n\nREVOKE SELECT ON OBJECT::test.table FROM UnauthorizedUser;\n\nhttps://docs.microsoft.com/en-us/sql/t-sql/statements/alter-role-transact-sql\n\nhttps://docs.microsoft.com/en-us/sql/t-sql/statements/revoke-transact-sql"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-58980r871045_chk","severity":"medium","gid":"V-255307","rid":"SV-255307r871047_rule","stig_id":"ASQL-00-001400","gtitle":"SRG-APP-000133-DB-000362","fix_id":"F-58924r871046_fix","documentable":null,"cci":["CCI-001499"],"nist":["CM-5 (6)"]}},{"id":"SV-255308","code":"control 'SV-255308' do\n  title 'The Azure SQL Database must isolate security functions from nonsecurity functions.'\n  desc 'An isolation boundary provides access control and protects the integrity of the hardware, software, and firmware that perform security functions. \n\nSecurity functions are the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based.\n\nDevelopers and implementers can increase the assurance in security functions by employing well-defined security policy models; structured, disciplined, and rigorous hardware and software development techniques; and sound system/security engineering principles. \n\nDatabase Management Systems typically separate security functionality from nonsecurity functionality via separate databases or schemas. Database objects or code implementing security functionality should not be commingled with objects or code implementing application logic. When security and nonsecurity functionality are commingled, users who have access to nonsecurity functionality may be able to access security functionality.'\n  desc 'check', 'Determine elements of security functionality (lists of permissions, additional authentication information, stored procedures, application specific auditing, etc.) being housed inside Azure SQL Database.\n\nFor any elements found, check Azure SQL Database to determine if these objects or code implementing security functionality are located in a separate security domain, such as a separate database, schema, or table created specifically for security functionality.\n\nReview the database structure to determine where security related functionality is stored. If security-related database objects or code are not kept separate, this is a finding.'\n  desc 'fix', 'Check the server documentation, locate security-related database objects and code in a separate database, schema, table, or other separate security domain from database objects and code implementing application logic. \n\nSchemas are analogous to separate namespaces or containers used to store database objects. Security permissions apply to schemas, making them an important tool for separating and protecting database objects based on access rights. Schemas reduce the work required, and improve the flexibility, for security-related administration of a database.\n\nUser-schema separation allows for more flexibility in managing database object permissions. A schema is a named container for database objects, which allows the user group objects into separate namespaces.\n\nWhere possible, locate security-related database objects and code in a separate database, schema, or other separate security domain from database objects and code implementing application logic. In all cases, use GRANT, REVOKE, DENY, ALTER ROLE … ADD MEMBER … and/or ALTER ROLE …. DROP MEMBER statements to add and remove permissions on server-level and database-level security-related objects to provide effective isolation.'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-58981r871048_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255308'\n  tag rid: 'SV-255308r871050_rule'\n  tag stig_id: 'ASQL-00-001900'\n  tag gtitle: 'SRG-APP-000233-DB-000124'\n  tag fix_id: 'F-58925r871049_fix'\n  tag 'documentable'\n  tag cci: ['CCI-001084']\n  tag nist: ['SC-3']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255308.rb"},"title":"The Azure SQL Database must isolate security functions from nonsecurity functions.","desc":"An isolation boundary provides access control and protects the integrity of the hardware, software, and firmware that perform security functions. \n\nSecurity functions are the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based.\n\nDevelopers and implementers can increase the assurance in security functions by employing well-defined security policy models; structured, disciplined, and rigorous hardware and software development techniques; and sound system/security engineering principles. \n\nDatabase Management Systems typically separate security functionality from nonsecurity functionality via separate databases or schemas. Database objects or code implementing security functionality should not be commingled with objects or code implementing application logic. When security and nonsecurity functionality are commingled, users who have access to nonsecurity functionality may be able to access security functionality.","descriptions":{"default":"An isolation boundary provides access control and protects the integrity of the hardware, software, and firmware that perform security functions. \n\nSecurity functions are the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based.\n\nDevelopers and implementers can increase the assurance in security functions by employing well-defined security policy models; structured, disciplined, and rigorous hardware and software development techniques; and sound system/security engineering principles. \n\nDatabase Management Systems typically separate security functionality from nonsecurity functionality via separate databases or schemas. Database objects or code implementing security functionality should not be commingled with objects or code implementing application logic. When security and nonsecurity functionality are commingled, users who have access to nonsecurity functionality may be able to access security functionality.","check":"Determine elements of security functionality (lists of permissions, additional authentication information, stored procedures, application specific auditing, etc.) being housed inside Azure SQL Database.\n\nFor any elements found, check Azure SQL Database to determine if these objects or code implementing security functionality are located in a separate security domain, such as a separate database, schema, or table created specifically for security functionality.\n\nReview the database structure to determine where security related functionality is stored. If security-related database objects or code are not kept separate, this is a finding.","fix":"Check the server documentation, locate security-related database objects and code in a separate database, schema, table, or other separate security domain from database objects and code implementing application logic. \n\nSchemas are analogous to separate namespaces or containers used to store database objects. Security permissions apply to schemas, making them an important tool for separating and protecting database objects based on access rights. Schemas reduce the work required, and improve the flexibility, for security-related administration of a database.\n\nUser-schema separation allows for more flexibility in managing database object permissions. A schema is a named container for database objects, which allows the user group objects into separate namespaces.\n\nWhere possible, locate security-related database objects and code in a separate database, schema, or other separate security domain from database objects and code implementing application logic. In all cases, use GRANT, REVOKE, DENY, ALTER ROLE … ADD MEMBER … and/or ALTER ROLE …. DROP MEMBER statements to add and remove permissions on server-level and database-level security-related objects to provide effective isolation."},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-58981r871048_chk","severity":"medium","gid":"V-255308","rid":"SV-255308r871050_rule","stig_id":"ASQL-00-001900","gtitle":"SRG-APP-000233-DB-000124","fix_id":"F-58925r871049_fix","documentable":null,"cci":["CCI-001084"],"nist":["SC-3"]}},{"id":"SV-255309","code":"control 'SV-255309' do\n  title 'Azure SQL Database contents must be protected from unauthorized and unintended information transfer by enforcement of a data-transfer policy.'\n  desc 'Applications, including DBMSs, must prevent unauthorized and unintended information transfer via shared system resources.\n\nData used for the development and testing of applications often involves copying data from production. It is important that specific procedures exist for this process, to include the conditions under which such transfer may take place, where the copies may reside, and the rules for ensuring sensitive data are not exposed.\n\nCopies of sensitive data must not be misplaced or left in a temporary location without the proper controls.'\n  desc 'check', 'Review the procedures for the refreshing of development/test data from production.\n\nReview any scripts or code that exists for the movement of production data to development/test systems, or to any other location or for any other purpose. Verify that copies of production data are not left in unprotected locations.\n\nIf the code that exists for data movement does not comply with the organization-defined data transfer policy and/or fails to remove any copies of production data from unprotected locations, this is a finding.'\n  desc 'fix', 'Modify any code used for moving data from production to development/test systems to comply with the organization-defined data transfer policy, and to ensure copies of production data are not left in unsecured locations.'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-58982r871051_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255309'\n  tag rid: 'SV-255309r871053_rule'\n  tag stig_id: 'ASQL-00-002000'\n  tag gtitle: 'SRG-APP-000243-DB-000128'\n  tag fix_id: 'F-58926r871052_fix'\n  tag 'documentable'\n  tag cci: ['CCI-001090']\n  tag nist: ['SC-4']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255309.rb"},"title":"Azure SQL Database contents must be protected from unauthorized and unintended information transfer by enforcement of a data-transfer policy.","desc":"Applications, including DBMSs, must prevent unauthorized and unintended information transfer via shared system resources.\n\nData used for the development and testing of applications often involves copying data from production. It is important that specific procedures exist for this process, to include the conditions under which such transfer may take place, where the copies may reside, and the rules for ensuring sensitive data are not exposed.\n\nCopies of sensitive data must not be misplaced or left in a temporary location without the proper controls.","descriptions":{"default":"Applications, including DBMSs, must prevent unauthorized and unintended information transfer via shared system resources.\n\nData used for the development and testing of applications often involves copying data from production. It is important that specific procedures exist for this process, to include the conditions under which such transfer may take place, where the copies may reside, and the rules for ensuring sensitive data are not exposed.\n\nCopies of sensitive data must not be misplaced or left in a temporary location without the proper controls.","check":"Review the procedures for the refreshing of development/test data from production.\n\nReview any scripts or code that exists for the movement of production data to development/test systems, or to any other location or for any other purpose. Verify that copies of production data are not left in unprotected locations.\n\nIf the code that exists for data movement does not comply with the organization-defined data transfer policy and/or fails to remove any copies of production data from unprotected locations, this is a finding.","fix":"Modify any code used for moving data from production to development/test systems to comply with the organization-defined data transfer policy, and to ensure copies of production data are not left in unsecured locations."},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-58982r871051_chk","severity":"medium","gid":"V-255309","rid":"SV-255309r871053_rule","stig_id":"ASQL-00-002000","gtitle":"SRG-APP-000243-DB-000128","fix_id":"F-58926r871052_fix","documentable":null,"cci":["CCI-001090"],"nist":["SC-4"]}},{"id":"SV-255310","code":"control 'SV-255310' do\n  title 'Azure SQL Database must check the validity of all data inputs except those specifically identified by the organization.'\n  desc \"Invalid user input occurs when a user inserts data or characters into an application's data entry fields and the application is unprepared to process that data. This results in unanticipated application behavior, potentially leading to an application or information system compromise. Invalid user input is one of the primary methods employed when attempting to compromise an application.\n\nWith respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.\n\nEven when no such hijacking takes place, invalid input that gets recorded in the database, whether accidental or malicious, reduces the reliability and usability of the system. Available protections include data types, referential constraints, uniqueness constraints, range checking, and application-specific logic. Application-specific logic can be implemented within the database in stored procedures and triggers, where appropriate.\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered.\"\n  desc 'check', 'Review Azure SQL Database code (stored procedures, functions, triggers), application code, settings, column and field definitions, and constraints to determine whether the database is protected against invalid input. \n\nIf code exists that allows invalid data to be acted upon or input into the database, this is a finding. \n\nIf column/field definitions are not reflective of the data, this is a finding. \n\nIf columns/fields do not contain constraints and validity checking where required, this is a finding. \n\nWhere a column/field is noted in the system documentation as necessarily free-form, even though its name and context suggest that it should be strongly typed and constrained, the absence of these protections is not a finding. \n\nWhere a column/field is clearly identified by name, caption or context as Notes, Comments, Description, Text, etc., the absence of these protections is not a finding.'\n  desc 'fix', 'Use parameterized queries, constraints, foreign keys, etc., to validate data input. \n\nModify Azure SQL Database to properly use the correct column data types as required in the database.'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-58983r871054_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255310'\n  tag rid: 'SV-255310r871056_rule'\n  tag stig_id: 'ASQL-00-002100'\n  tag gtitle: 'SRG-APP-000251-DB-000160'\n  tag fix_id: 'F-58927r871055_fix'\n  tag 'documentable'\n  tag cci: ['CCI-001310']\n  tag nist: ['SI-10']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255310.rb"},"title":"Azure SQL Database must check the validity of all data inputs except those specifically identified by the organization.","desc":"Invalid user input occurs when a user inserts data or characters into an application's data entry fields and the application is unprepared to process that data. This results in unanticipated application behavior, potentially leading to an application or information system compromise. Invalid user input is one of the primary methods employed when attempting to compromise an application.\n\nWith respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.\n\nEven when no such hijacking takes place, invalid input that gets recorded in the database, whether accidental or malicious, reduces the reliability and usability of the system. Available protections include data types, referential constraints, uniqueness constraints, range checking, and application-specific logic. Application-specific logic can be implemented within the database in stored procedures and triggers, where appropriate.\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered.","descriptions":{"default":"Invalid user input occurs when a user inserts data or characters into an application's data entry fields and the application is unprepared to process that data. This results in unanticipated application behavior, potentially leading to an application or information system compromise. Invalid user input is one of the primary methods employed when attempting to compromise an application.\n\nWith respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.\n\nEven when no such hijacking takes place, invalid input that gets recorded in the database, whether accidental or malicious, reduces the reliability and usability of the system. Available protections include data types, referential constraints, uniqueness constraints, range checking, and application-specific logic. Application-specific logic can be implemented within the database in stored procedures and triggers, where appropriate.\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered.","check":"Review Azure SQL Database code (stored procedures, functions, triggers), application code, settings, column and field definitions, and constraints to determine whether the database is protected against invalid input. \n\nIf code exists that allows invalid data to be acted upon or input into the database, this is a finding. \n\nIf column/field definitions are not reflective of the data, this is a finding. \n\nIf columns/fields do not contain constraints and validity checking where required, this is a finding. \n\nWhere a column/field is noted in the system documentation as necessarily free-form, even though its name and context suggest that it should be strongly typed and constrained, the absence of these protections is not a finding. \n\nWhere a column/field is clearly identified by name, caption or context as Notes, Comments, Description, Text, etc., the absence of these protections is not a finding.","fix":"Use parameterized queries, constraints, foreign keys, etc., to validate data input. \n\nModify Azure SQL Database to properly use the correct column data types as required in the database."},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-58983r871054_chk","severity":"medium","gid":"V-255310","rid":"SV-255310r871056_rule","stig_id":"ASQL-00-002100","gtitle":"SRG-APP-000251-DB-000160","fix_id":"F-58927r871055_fix","documentable":null,"cci":["CCI-001310"],"nist":["SI-10"]}},{"id":"SV-255311","code":"control 'SV-255311' do\n  title 'The Azure SQL Database and associated applications must reserve the use of dynamic code execution for situations that require it.'\n  desc 'With respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. In such cases, the attacker deduces the manner in which SQL statements are being processed, either from inside knowledge or by observing system behavior in response to invalid inputs. When the attacker identifies scenarios where SQL queries are being assembled by application code (which may be within the database or separate from it) and executed dynamically, the attacker is then able to craft input strings that subvert the intent of the query. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.\n\nThe principal protection against code injection is not to use dynamic execution except where it provides necessary functionality that cannot be utilized otherwise. Use strongly typed data items rather than general-purpose strings as input parameters to task-specific, pre-compiled stored procedures and functions (and triggers).\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered.'\n  desc 'check', \"Review the system documentation to obtain a listing of stored procedures and functions that utilize dynamic code execution. Execute the following query:\n\nDECLARE @tblDynamicQuery TABLE (ID INT identity(1,1), ProcToExecuteDynSQL VARCHAR(500))\nINSERT INTO @tblDynamicQuery(ProcToExecuteDynSQL) values('EXEC[ (]@')\nINSERT INTO @tblDynamicQuery(ProcToExecuteDynSQL) values('EXECUTE[ (]@')\nINSERT INTO @tblDynamicQuery(ProcToExecuteDynSQL) values('SP_EXECUTESQL[ (]@')\n\nSELECT \n   QUOTENAME(DB_Name()) DB_Name,\n   QUOTENAME(SCHEMA_NAME([schema_id])) + '.' + QUOTENAME(name) Name, QUOTENAME(type_desc)  ObjectType\nFROM sys.objects o\nWHERE o.is_ms_shipped = 0 and \no.object_id IN (\n   SELECT m.object_id\n   FROM sys.sql_modules m \n   JOIN @tblDynamicQuery dsql ON REPLACE(REPLACE(REPLACE(m.definition,CHAR(32),'()'),')(',''),'()',CHAR(32)) like '%' + dsql.ProcToExecuteDynSQL + '%')\n\nIf any procedures or functions are returned that are not documented, this is a finding.\"\n  desc 'fix', 'Where dynamic code execution is employed in circumstances where the objective could practically be satisfied by static execution with strongly typed parameters, modify the code to do so.'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-58984r871057_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255311'\n  tag rid: 'SV-255311r871059_rule'\n  tag stig_id: 'ASQL-00-002200'\n  tag gtitle: 'SRG-APP-000251-DB-000391'\n  tag fix_id: 'F-58928r871058_fix'\n  tag 'documentable'\n  tag cci: ['CCI-001310']\n  tag nist: ['SI-10']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255311.rb"},"title":"The Azure SQL Database and associated applications must reserve the use of dynamic code execution for situations that require it.","desc":"With respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. In such cases, the attacker deduces the manner in which SQL statements are being processed, either from inside knowledge or by observing system behavior in response to invalid inputs. When the attacker identifies scenarios where SQL queries are being assembled by application code (which may be within the database or separate from it) and executed dynamically, the attacker is then able to craft input strings that subvert the intent of the query. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.\n\nThe principal protection against code injection is not to use dynamic execution except where it provides necessary functionality that cannot be utilized otherwise. Use strongly typed data items rather than general-purpose strings as input parameters to task-specific, pre-compiled stored procedures and functions (and triggers).\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered.","descriptions":{"default":"With respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. In such cases, the attacker deduces the manner in which SQL statements are being processed, either from inside knowledge or by observing system behavior in response to invalid inputs. When the attacker identifies scenarios where SQL queries are being assembled by application code (which may be within the database or separate from it) and executed dynamically, the attacker is then able to craft input strings that subvert the intent of the query. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.\n\nThe principal protection against code injection is not to use dynamic execution except where it provides necessary functionality that cannot be utilized otherwise. Use strongly typed data items rather than general-purpose strings as input parameters to task-specific, pre-compiled stored procedures and functions (and triggers).\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered.","check":"Review the system documentation to obtain a listing of stored procedures and functions that utilize dynamic code execution. Execute the following query:\n\nDECLARE @tblDynamicQuery TABLE (ID INT identity(1,1), ProcToExecuteDynSQL VARCHAR(500))\nINSERT INTO @tblDynamicQuery(ProcToExecuteDynSQL) values('EXEC[ (]@')\nINSERT INTO @tblDynamicQuery(ProcToExecuteDynSQL) values('EXECUTE[ (]@')\nINSERT INTO @tblDynamicQuery(ProcToExecuteDynSQL) values('SP_EXECUTESQL[ (]@')\n\nSELECT \n   QUOTENAME(DB_Name()) DB_Name,\n   QUOTENAME(SCHEMA_NAME([schema_id])) + '.' + QUOTENAME(name) Name, QUOTENAME(type_desc)  ObjectType\nFROM sys.objects o\nWHERE o.is_ms_shipped = 0 and \no.object_id IN (\n   SELECT m.object_id\n   FROM sys.sql_modules m \n   JOIN @tblDynamicQuery dsql ON REPLACE(REPLACE(REPLACE(m.definition,CHAR(32),'()'),')(',''),'()',CHAR(32)) like '%' + dsql.ProcToExecuteDynSQL + '%')\n\nIf any procedures or functions are returned that are not documented, this is a finding.","fix":"Where dynamic code execution is employed in circumstances where the objective could practically be satisfied by static execution with strongly typed parameters, modify the code to do so."},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-58984r871057_chk","severity":"medium","gid":"V-255311","rid":"SV-255311r871059_rule","stig_id":"ASQL-00-002200","gtitle":"SRG-APP-000251-DB-000391","fix_id":"F-58928r871058_fix","documentable":null,"cci":["CCI-001310"],"nist":["SI-10"]}},{"id":"SV-255312","code":"control 'SV-255312' do\n  title 'The Azure SQL Database and associated applications, when making use of dynamic code execution, must scan input data for invalid values that may indicate a code injection attack.'\n  desc \"With respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. In such cases, the attacker deduces the manner in which SQL statements are being processed, either from inside knowledge or by observing system behavior in response to invalid inputs. When the attacker identifies scenarios where SQL queries are being assembled by application code (which may be within the database or separate from it) and executed dynamically, the attacker is then able to craft input strings that subvert the intent of the query. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.\n\nThe principal protection against code injection is not to use dynamic execution except where it provides necessary functionality that cannot be utilized otherwise. Use strongly typed data items rather than general-purpose strings as input parameters to task-specific, pre-compiled stored procedures and functions (and triggers).\n\nWhen dynamic execution is necessary, ways to mitigate the risk include the following, which should be implemented both in the on-screen application and at the database level, in the stored procedures:\n-- Allow strings as input only when necessary. \n-- Rely on data typing to validate numbers, dates, etc. Do not accept invalid values. If substituting other values for them, think carefully about whether this could be subverted.\n-- Limit the size of input strings to what is truly necessary.\n-- If single quotes/apostrophes, double quotes, semicolons, equals signs, angle brackets, or square brackets will never be valid as input, reject them.\n-- If comment markers will never be valid as input, reject them. In SQL, these are -- or /* */ \n-- If HTML and XML tags, entities, comments, etc., will never be valid, reject them.\n-- If wildcards are present, reject them unless truly necessary. In SQL these are the underscore and the percentage sign, and the word ESCAPE is also a clue that wildcards are in use.\n-- If SQL key words, such as SELECT, INSERT, UPDATE, DELETE, CREATE, ALTER, DROP, ESCAPE, UNION, GRANT, REVOKE, DENY, MODIFY will never be valid, reject them. Use case-insensitive comparisons when searching for these. Bear in mind that some of these words, particularly Grant (as a person's name), could also be valid input. \n-- If there are range limits on the values that may be entered, enforce those limits.\n-- Institute procedures for inspection of programs for correct use of dynamic coding, by a party other than the developer.\n-- Conduct rigorous testing of program modules that use dynamic coding, searching for ways to subvert the intended use.\n-- Record the inspection and testing in the system documentation.\n-- Bear in mind that all this applies not only to screen input, but also to the values in an incoming message to a web service or to a stored procedure called by a software component that has not itself been hardened in these ways. Not only can the caller be subject to such vulnerabilities; it may itself be the attacker.\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered.\"\n  desc 'check', \"Review the system documentation to obtain a listing of stored procedures and functions that utilize dynamic code execution. Execute the following query:\n\nDECLARE @tblDynamicQuery TABLE (ID INT identity(1,1), ProcToExecuteDynSQL VARCHAR(500))\nINSERT INTO @tblDynamicQuery(ProcToExecuteDynSQL) values('EXEC[ (]@')\nINSERT INTO @tblDynamicQuery(ProcToExecuteDynSQL) values('EXECUTE[ (]@')\nINSERT INTO @tblDynamicQuery(ProcToExecuteDynSQL) values('SP_EXECUTESQL[ (]@')\n\nSELECT \n   QUOTENAME(DB_Name()) DB_Name,\n   QUOTENAME(SCHEMA_NAME([schema_id])) + '.' + QUOTENAME(name) Name, QUOTENAME(type_desc)  ObjectType\nFROM sys.objects o\nWHERE o.is_ms_shipped = 0 and \no.object_id IN (\n   SELECT m.object_id\n   FROM sys.sql_modules m \n   JOIN @tblDynamicQuery dsql ON REPLACE(REPLACE(REPLACE(m.definition,CHAR(32),'()'),')(',''),'()',CHAR(32)) like '%' + dsql.ProcToExecuteDynSQL + '%')\n\nIf any procedures or functions are returned that are not documented, this is a finding.\"\n  desc 'fix', 'Where dynamic code execution is used, modify the code to implement protections against code injection.'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-58985r871060_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255312'\n  tag rid: 'SV-255312r871062_rule'\n  tag stig_id: 'ASQL-00-002300'\n  tag gtitle: 'SRG-APP-000251-DB-000392'\n  tag fix_id: 'F-58929r871061_fix'\n  tag 'documentable'\n  tag cci: ['CCI-001310']\n  tag nist: ['SI-10']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255312.rb"},"title":"The Azure SQL Database and associated applications, when making use of dynamic code execution, must scan input data for invalid values that may indicate a code injection attack.","desc":"With respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. In such cases, the attacker deduces the manner in which SQL statements are being processed, either from inside knowledge or by observing system behavior in response to invalid inputs. When the attacker identifies scenarios where SQL queries are being assembled by application code (which may be within the database or separate from it) and executed dynamically, the attacker is then able to craft input strings that subvert the intent of the query. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.\n\nThe principal protection against code injection is not to use dynamic execution except where it provides necessary functionality that cannot be utilized otherwise. Use strongly typed data items rather than general-purpose strings as input parameters to task-specific, pre-compiled stored procedures and functions (and triggers).\n\nWhen dynamic execution is necessary, ways to mitigate the risk include the following, which should be implemented both in the on-screen application and at the database level, in the stored procedures:\n-- Allow strings as input only when necessary. \n-- Rely on data typing to validate numbers, dates, etc. Do not accept invalid values. If substituting other values for them, think carefully about whether this could be subverted.\n-- Limit the size of input strings to what is truly necessary.\n-- If single quotes/apostrophes, double quotes, semicolons, equals signs, angle brackets, or square brackets will never be valid as input, reject them.\n-- If comment markers will never be valid as input, reject them. In SQL, these are -- or /* */ \n-- If HTML and XML tags, entities, comments, etc., will never be valid, reject them.\n-- If wildcards are present, reject them unless truly necessary. In SQL these are the underscore and the percentage sign, and the word ESCAPE is also a clue that wildcards are in use.\n-- If SQL key words, such as SELECT, INSERT, UPDATE, DELETE, CREATE, ALTER, DROP, ESCAPE, UNION, GRANT, REVOKE, DENY, MODIFY will never be valid, reject them. Use case-insensitive comparisons when searching for these. Bear in mind that some of these words, particularly Grant (as a person's name), could also be valid input. \n-- If there are range limits on the values that may be entered, enforce those limits.\n-- Institute procedures for inspection of programs for correct use of dynamic coding, by a party other than the developer.\n-- Conduct rigorous testing of program modules that use dynamic coding, searching for ways to subvert the intended use.\n-- Record the inspection and testing in the system documentation.\n-- Bear in mind that all this applies not only to screen input, but also to the values in an incoming message to a web service or to a stored procedure called by a software component that has not itself been hardened in these ways. Not only can the caller be subject to such vulnerabilities; it may itself be the attacker.\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered.","descriptions":{"default":"With respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. In such cases, the attacker deduces the manner in which SQL statements are being processed, either from inside knowledge or by observing system behavior in response to invalid inputs. When the attacker identifies scenarios where SQL queries are being assembled by application code (which may be within the database or separate from it) and executed dynamically, the attacker is then able to craft input strings that subvert the intent of the query. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.\n\nThe principal protection against code injection is not to use dynamic execution except where it provides necessary functionality that cannot be utilized otherwise. Use strongly typed data items rather than general-purpose strings as input parameters to task-specific, pre-compiled stored procedures and functions (and triggers).\n\nWhen dynamic execution is necessary, ways to mitigate the risk include the following, which should be implemented both in the on-screen application and at the database level, in the stored procedures:\n-- Allow strings as input only when necessary. \n-- Rely on data typing to validate numbers, dates, etc. Do not accept invalid values. If substituting other values for them, think carefully about whether this could be subverted.\n-- Limit the size of input strings to what is truly necessary.\n-- If single quotes/apostrophes, double quotes, semicolons, equals signs, angle brackets, or square brackets will never be valid as input, reject them.\n-- If comment markers will never be valid as input, reject them. In SQL, these are -- or /* */ \n-- If HTML and XML tags, entities, comments, etc., will never be valid, reject them.\n-- If wildcards are present, reject them unless truly necessary. In SQL these are the underscore and the percentage sign, and the word ESCAPE is also a clue that wildcards are in use.\n-- If SQL key words, such as SELECT, INSERT, UPDATE, DELETE, CREATE, ALTER, DROP, ESCAPE, UNION, GRANT, REVOKE, DENY, MODIFY will never be valid, reject them. Use case-insensitive comparisons when searching for these. Bear in mind that some of these words, particularly Grant (as a person's name), could also be valid input. \n-- If there are range limits on the values that may be entered, enforce those limits.\n-- Institute procedures for inspection of programs for correct use of dynamic coding, by a party other than the developer.\n-- Conduct rigorous testing of program modules that use dynamic coding, searching for ways to subvert the intended use.\n-- Record the inspection and testing in the system documentation.\n-- Bear in mind that all this applies not only to screen input, but also to the values in an incoming message to a web service or to a stored procedure called by a software component that has not itself been hardened in these ways. Not only can the caller be subject to such vulnerabilities; it may itself be the attacker.\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered.","check":"Review the system documentation to obtain a listing of stored procedures and functions that utilize dynamic code execution. Execute the following query:\n\nDECLARE @tblDynamicQuery TABLE (ID INT identity(1,1), ProcToExecuteDynSQL VARCHAR(500))\nINSERT INTO @tblDynamicQuery(ProcToExecuteDynSQL) values('EXEC[ (]@')\nINSERT INTO @tblDynamicQuery(ProcToExecuteDynSQL) values('EXECUTE[ (]@')\nINSERT INTO @tblDynamicQuery(ProcToExecuteDynSQL) values('SP_EXECUTESQL[ (]@')\n\nSELECT \n   QUOTENAME(DB_Name()) DB_Name,\n   QUOTENAME(SCHEMA_NAME([schema_id])) + '.' + QUOTENAME(name) Name, QUOTENAME(type_desc)  ObjectType\nFROM sys.objects o\nWHERE o.is_ms_shipped = 0 and \no.object_id IN (\n   SELECT m.object_id\n   FROM sys.sql_modules m \n   JOIN @tblDynamicQuery dsql ON REPLACE(REPLACE(REPLACE(m.definition,CHAR(32),'()'),')(',''),'()',CHAR(32)) like '%' + dsql.ProcToExecuteDynSQL + '%')\n\nIf any procedures or functions are returned that are not documented, this is a finding.","fix":"Where dynamic code execution is used, modify the code to implement protections against code injection."},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-58985r871060_chk","severity":"medium","gid":"V-255312","rid":"SV-255312r871062_rule","stig_id":"ASQL-00-002300","gtitle":"SRG-APP-000251-DB-000392","fix_id":"F-58929r871061_fix","documentable":null,"cci":["CCI-001310"],"nist":["SI-10"]}},{"id":"SV-255313","code":"control 'SV-255313' do\n  title 'Azure SQL Database must associate organization-defined types of security labels having organization-defined security label values with information in storage.'\n  desc 'Without the association of security labels to information, there is no basis for Azure SQL Database to make security-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies; reflect special dissemination, handling, or distribution instructions; or support other aspects of the information security policy.\n\nOne example includes marking data as classified or CUI. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained. If the security labels are lost, there is the risk of a data compromise.\n\nThe mechanism used to support security labeling may be a feature of Azure SQL Database, a third-party product, or custom application code.'\n  desc 'check', 'If security labeling is not required, this is not a finding.\n\nIf security labeling requirements have been specified, but a third-party solution, SQL Information Protection, or an Azure SQL Database Row-Level security solution is implemented that reliably maintains labels on information in storage, this is a finding.'\n  desc 'fix', 'Deploy SQL Information Protection (see link below) or Azure SQL Database Row-Level Security (see link below), a third-party software, or add custom data structures, data elements and application code to provide reliable security labeling of information in storage.\n\nhttps://docs.microsoft.com/en-us/azure/security-center/security-center-info-protection-policy?\nhttps://msdn.microsoft.com/en-us/library/dn765131.aspx'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-58986r877283_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255313'\n  tag rid: 'SV-255313r877295_rule'\n  tag stig_id: 'ASQL-00-002500'\n  tag gtitle: 'SRG-APP-000311-DB-000308'\n  tag fix_id: 'F-58930r871064_fix'\n  tag 'documentable'\n  tag cci: ['CCI-002262']\n  tag nist: ['AC-16 a']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255313.rb"},"title":"Azure SQL Database must associate organization-defined types of security labels having organization-defined security label values with information in storage.","desc":"Without the association of security labels to information, there is no basis for Azure SQL Database to make security-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies; reflect special dissemination, handling, or distribution instructions; or support other aspects of the information security policy.\n\nOne example includes marking data as classified or CUI. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained. If the security labels are lost, there is the risk of a data compromise.\n\nThe mechanism used to support security labeling may be a feature of Azure SQL Database, a third-party product, or custom application code.","descriptions":{"default":"Without the association of security labels to information, there is no basis for Azure SQL Database to make security-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies; reflect special dissemination, handling, or distribution instructions; or support other aspects of the information security policy.\n\nOne example includes marking data as classified or CUI. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained. If the security labels are lost, there is the risk of a data compromise.\n\nThe mechanism used to support security labeling may be a feature of Azure SQL Database, a third-party product, or custom application code.","check":"If security labeling is not required, this is not a finding.\n\nIf security labeling requirements have been specified, but a third-party solution, SQL Information Protection, or an Azure SQL Database Row-Level security solution is implemented that reliably maintains labels on information in storage, this is a finding.","fix":"Deploy SQL Information Protection (see link below) or Azure SQL Database Row-Level Security (see link below), a third-party software, or add custom data structures, data elements and application code to provide reliable security labeling of information in storage.\n\nhttps://docs.microsoft.com/en-us/azure/security-center/security-center-info-protection-policy?\nhttps://msdn.microsoft.com/en-us/library/dn765131.aspx"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-58986r877283_chk","severity":"medium","gid":"V-255313","rid":"SV-255313r877295_rule","stig_id":"ASQL-00-002500","gtitle":"SRG-APP-000311-DB-000308","fix_id":"F-58930r871064_fix","documentable":null,"cci":["CCI-002262"],"nist":["AC-16 a"]}},{"id":"SV-255314","code":"control 'SV-255314' do\n  title 'Azure SQL Database must associate organization-defined types of security labels having organization-defined security label values with information in process.'\n  desc 'Without the association of security labels to information, there is no basis for Azure SQL Database to make security-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies; reflect special dissemination, handling, or distribution instructions; or support other aspects of the information security policy.\n\nOne example includes marking data as classified or CUI. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained. If the security labels are lost, there is the risk of a data compromise.\n\nThe mechanism used to support security labeling may be a feature of Azure SQL Database, a third-party product, or custom application code.'\n  desc 'check', 'If security labeling is not required, this is not a finding.\n\nIf security labeling requirements have been specified, but a third-party solution, SQL Information Protection, or an Azure SQL Database Row-Level security solution is implemented that reliably maintains labels on information in process, this is a finding.'\n  desc 'fix', 'Deploy SQL Information Protection (see link below) or Azure SQL Database Row-Level Security (see link below), a third-party software, or add custom data structures, data elements and application code to provide reliable security labeling of information in process.\n\nhttps://docs.microsoft.com/en-us/azure/security-center/security-center-info-protection-policy?\nhttps://msdn.microsoft.com/en-us/library/dn765131.aspx'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-58987r877284_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255314'\n  tag rid: 'SV-255314r877284_rule'\n  tag stig_id: 'ASQL-00-002600'\n  tag gtitle: 'SRG-APP-000313-DB-000309'\n  tag fix_id: 'F-58931r871067_fix'\n  tag 'documentable'\n  tag cci: ['CCI-002263']\n  tag nist: ['AC-16 a']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255314.rb"},"title":"Azure SQL Database must associate organization-defined types of security labels having organization-defined security label values with information in process.","desc":"Without the association of security labels to information, there is no basis for Azure SQL Database to make security-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies; reflect special dissemination, handling, or distribution instructions; or support other aspects of the information security policy.\n\nOne example includes marking data as classified or CUI. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained. If the security labels are lost, there is the risk of a data compromise.\n\nThe mechanism used to support security labeling may be a feature of Azure SQL Database, a third-party product, or custom application code.","descriptions":{"default":"Without the association of security labels to information, there is no basis for Azure SQL Database to make security-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies; reflect special dissemination, handling, or distribution instructions; or support other aspects of the information security policy.\n\nOne example includes marking data as classified or CUI. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained. If the security labels are lost, there is the risk of a data compromise.\n\nThe mechanism used to support security labeling may be a feature of Azure SQL Database, a third-party product, or custom application code.","check":"If security labeling is not required, this is not a finding.\n\nIf security labeling requirements have been specified, but a third-party solution, SQL Information Protection, or an Azure SQL Database Row-Level security solution is implemented that reliably maintains labels on information in process, this is a finding.","fix":"Deploy SQL Information Protection (see link below) or Azure SQL Database Row-Level Security (see link below), a third-party software, or add custom data structures, data elements and application code to provide reliable security labeling of information in process.\n\nhttps://docs.microsoft.com/en-us/azure/security-center/security-center-info-protection-policy?\nhttps://msdn.microsoft.com/en-us/library/dn765131.aspx"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-58987r877284_chk","severity":"medium","gid":"V-255314","rid":"SV-255314r877284_rule","stig_id":"ASQL-00-002600","gtitle":"SRG-APP-000313-DB-000309","fix_id":"F-58931r871067_fix","documentable":null,"cci":["CCI-002263"],"nist":["AC-16 a"]}},{"id":"SV-255315","code":"control 'SV-255315' do\n  title 'Azure SQL Database must associate organization-defined types of security labels having organization-defined security label values with information in transmission.'\n  desc 'Without the association of security labels to information, there is no basis for Azure SQL Database to make security-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies; reflect special dissemination, handling, or distribution instructions; or support other aspects of the information security policy.\n\nOne example includes marking data as classified or CUI. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained. If the security labels are lost, there is the risk of a data compromise.\n\nThe mechanism used to support security labeling may be a feature of Azure SQL Database, a third-party product, or custom application code.'\n  desc 'check', 'If security labeling is not required, this is not a finding.\n\nIf security labeling requirements have been specified, but a third-party solution, SQL Information Protection, or an Azure SQL Database Row-Level security solution is implemented that reliably maintains labels on information in transmission, this is a finding.'\n  desc 'fix', 'Deploy SQL Information Protection (see link below) or Azure SQL Database Row-Level Security (see link below), a third-party software, or add custom data structures, data elements and application code to provide reliable security labeling of information in transmission.\n\nhttps://docs.microsoft.com/en-us/azure/security-center/security-center-info-protection-policy?\nhttps://msdn.microsoft.com/en-us/library/dn765131.aspx'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-58988r877285_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255315'\n  tag rid: 'SV-255315r877285_rule'\n  tag stig_id: 'ASQL-00-002700'\n  tag gtitle: 'SRG-APP-000314-DB-000310'\n  tag fix_id: 'F-58932r871070_fix'\n  tag 'documentable'\n  tag cci: ['CCI-002264']\n  tag nist: ['AC-16 a']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255315.rb"},"title":"Azure SQL Database must associate organization-defined types of security labels having organization-defined security label values with information in transmission.","desc":"Without the association of security labels to information, there is no basis for Azure SQL Database to make security-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies; reflect special dissemination, handling, or distribution instructions; or support other aspects of the information security policy.\n\nOne example includes marking data as classified or CUI. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained. If the security labels are lost, there is the risk of a data compromise.\n\nThe mechanism used to support security labeling may be a feature of Azure SQL Database, a third-party product, or custom application code.","descriptions":{"default":"Without the association of security labels to information, there is no basis for Azure SQL Database to make security-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies; reflect special dissemination, handling, or distribution instructions; or support other aspects of the information security policy.\n\nOne example includes marking data as classified or CUI. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained. If the security labels are lost, there is the risk of a data compromise.\n\nThe mechanism used to support security labeling may be a feature of Azure SQL Database, a third-party product, or custom application code.","check":"If security labeling is not required, this is not a finding.\n\nIf security labeling requirements have been specified, but a third-party solution, SQL Information Protection, or an Azure SQL Database Row-Level security solution is implemented that reliably maintains labels on information in transmission, this is a finding.","fix":"Deploy SQL Information Protection (see link below) or Azure SQL Database Row-Level Security (see link below), a third-party software, or add custom data structures, data elements and application code to provide reliable security labeling of information in transmission.\n\nhttps://docs.microsoft.com/en-us/azure/security-center/security-center-info-protection-policy?\nhttps://msdn.microsoft.com/en-us/library/dn765131.aspx"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-58988r877285_chk","severity":"medium","gid":"V-255315","rid":"SV-255315r877285_rule","stig_id":"ASQL-00-002700","gtitle":"SRG-APP-000314-DB-000310","fix_id":"F-58932r871070_fix","documentable":null,"cci":["CCI-002264"],"nist":["AC-16 a"]}},{"id":"SV-255316","code":"control 'SV-255316' do\n  title 'Azure SQL Database must enforce discretionary access control policies, as defined by the data owner, over defined subjects and objects.'\n  desc 'Discretionary Access Control (DAC) is based on the notion that individual users are \"owners\" of objects and therefore have discretion over who should be authorized to access the object and in which mode (e.g., read, write, execute). Ownership is usually acquired implicitly when creating the object or by explicit ownership assignment. DAC allows the owner to determine who will have access to objects they control and the permissions related to that access. An example of DAC includes user-controlled table permissions.\n\nWhen DAC policies are implemented, subjects are not constrained with regard to what actions they can take with information for which they have already been granted access. Thus, subjects that have been granted access to information are not prevented from passing (i.e., the subjects have the discretion to pass) the information to other subjects or objects.\n\nA subject that is constrained in its operation by Mandatory Access Control policies is still able to operate under the less rigorous constraints of this requirement. Thus, while Mandatory Access Control imposes constraints preventing a subject from passing information to another subject operating at a different sensitivity level, this requirement permits the subject to pass the information to any subject at the same sensitivity level.\n\nThe policy is bounded by the information system boundary. Once the information is passed outside of the control of the information system, additional means may be required to ensure the constraints remain in effect. While the older, more traditional definitions of DCA require identity-based access control, that limitation is not required for this use of discretionary access control.'\n  desc 'check', \"Review application or system documentation to identify the required DAC.\n\nReview the security configuration of the database. If applicable, review the security configuration of the application(s) using the database.\n\nIf the DAC defined in the documentation is not implemented in the security configuration, this is a finding.\n\nValidate database object ownership using the queries below:\n\nView object ownership - All objects and schemas\n\nSELECT object_id, \nSCHEMA_NAME(schema_id) AS SchemaName,\n[name] AS Securable,\nUSER_NAME(principal_id) AS ObjectOwner,\n[type_desc] AS ObjectType\nFROM sys.objects\nWHERE is_ms_shipped = 0 AND principal_id IS NOT NULL\nORDER BY ObjectType, Securable, ObjectOwner\n\nView object ownership - Specific object\n\nDECLARE @ObjectName nvarchar(512)\nSET @ObjectName = '' --Specify object name here\nSELECT object_id, \nSCHEMA_NAME(schema_id) AS SchemaName,\n[name] AS Securable,\nUSER_NAME(principal_id) AS ObjectOwner,\n[type_desc] AS ObjectType\nFROM sys.objects\nWHERE is_ms_shipped = 0 AND principal_id IS NOT NULL\nAND [name] = @ObjectName\nORDER BY ObjectType, Securable, ObjectOwner\n\nView object ownership - Specific schema\n\nDECLARE @SchemaName nvarchar(512)\nSET @SchemaName = '' --Specify schema name here\nSELECT object_id, \nSCHEMA_NAME(schema_id) AS SchemaName,\n[name] AS Securable,\nUSER_NAME(principal_id) AS ObjectOwner,\n[type_desc] AS ObjectType\nFROM sys.objects\nWHERE is_ms_shipped = 0 AND principal_id IS NOT NULL\nAND SCHEMA_NAME(schema_id) = @SchemaName\nORDER BY ObjectType, Securable, ObjectOwner\n\nSchemas not owned by the schema or [dbo]\n\nSELECT [name] AS [SchemaName], USER_NAME(principal_id) AS [SchemaOwner]\nFROM sys.schemas\nWHERE schema_id != principal_id --exclude schemas owned by the schema\nAND principal_id != 1 --exclude schema dbo\n\nDatabase principals delegated the right to assign additional permissions\n\nSELECT U.type_desc AS [PrincipalType],\n U.name AS [Grantee],\nDP.class_desc AS [SecurableType],\nCASE DP.class\n    WHEN 0 THEN DB_NAME()\n    WHEN 1 THEN OBJECT_NAME(DP.major_id)\n    WHEN 3 THEN SCHEMA_NAME(DP.major_id)\nELSE CAST(DP.major_id AS nvarchar)\n    END AS [Securable],\npermission_name AS [PermissionName],\nstate_desc AS [DelegatedRight]\nFROM sys.database_permissions DP\nJOIN sys.database_principals U ON DP.grantee_principal_id = U.principal_id\nWHERE DP.state = 'W'\nORDER BY Grantee, SecurableType, Securable\n\nIf any of these rights are not documented and authorized, this is a finding.\"\n  desc 'fix', 'To correct object ownership:\nUse the ALTER AUTHORIZATION ON::[Object Name] TO [Database principal] TSQL statement to correct object ownership. Full ALTER AUTHORIZATION command syntax is described in this document: ALTER AUTHORIZATION (Transact-SQL) - SQL Server | Microsoft Docs (https://docs.microsoft.com/en-us/sql/t-sql/statements/revoke-transact-sql?view=azuresqldb-current)\n\nTo remove unauthorized permissions:\nUse the REVOKE [Permission name] ON [Object name] TO [Database principal] to remove unauthorized permissions from a database principal on an object. Full REVOKE command syntax is described in this document: REVOKE (Transact-SQL) - SQL Server | Microsoft Docs (https://docs.microsoft.com/en-us/sql/t-sql/statements/alter-authorization-transact-sql?view=azuresqldb-current)'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-58989r871072_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255316'\n  tag rid: 'SV-255316r871074_rule'\n  tag stig_id: 'ASQL-00-002800'\n  tag gtitle: 'SRG-APP-000328-DB-000301'\n  tag fix_id: 'F-58933r871073_fix'\n  tag 'documentable'\n  tag cci: ['CCI-002165']\n  tag nist: ['AC-3 (4)']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255316.rb"},"title":"Azure SQL Database must enforce discretionary access control policies, as defined by the data owner, over defined subjects and objects.","desc":"Discretionary Access Control (DAC) is based on the notion that individual users are \"owners\" of objects and therefore have discretion over who should be authorized to access the object and in which mode (e.g., read, write, execute). Ownership is usually acquired implicitly when creating the object or by explicit ownership assignment. DAC allows the owner to determine who will have access to objects they control and the permissions related to that access. An example of DAC includes user-controlled table permissions.\n\nWhen DAC policies are implemented, subjects are not constrained with regard to what actions they can take with information for which they have already been granted access. Thus, subjects that have been granted access to information are not prevented from passing (i.e., the subjects have the discretion to pass) the information to other subjects or objects.\n\nA subject that is constrained in its operation by Mandatory Access Control policies is still able to operate under the less rigorous constraints of this requirement. Thus, while Mandatory Access Control imposes constraints preventing a subject from passing information to another subject operating at a different sensitivity level, this requirement permits the subject to pass the information to any subject at the same sensitivity level.\n\nThe policy is bounded by the information system boundary. Once the information is passed outside of the control of the information system, additional means may be required to ensure the constraints remain in effect. While the older, more traditional definitions of DCA require identity-based access control, that limitation is not required for this use of discretionary access control.","descriptions":{"default":"Discretionary Access Control (DAC) is based on the notion that individual users are \"owners\" of objects and therefore have discretion over who should be authorized to access the object and in which mode (e.g., read, write, execute). Ownership is usually acquired implicitly when creating the object or by explicit ownership assignment. DAC allows the owner to determine who will have access to objects they control and the permissions related to that access. An example of DAC includes user-controlled table permissions.\n\nWhen DAC policies are implemented, subjects are not constrained with regard to what actions they can take with information for which they have already been granted access. Thus, subjects that have been granted access to information are not prevented from passing (i.e., the subjects have the discretion to pass) the information to other subjects or objects.\n\nA subject that is constrained in its operation by Mandatory Access Control policies is still able to operate under the less rigorous constraints of this requirement. Thus, while Mandatory Access Control imposes constraints preventing a subject from passing information to another subject operating at a different sensitivity level, this requirement permits the subject to pass the information to any subject at the same sensitivity level.\n\nThe policy is bounded by the information system boundary. Once the information is passed outside of the control of the information system, additional means may be required to ensure the constraints remain in effect. While the older, more traditional definitions of DCA require identity-based access control, that limitation is not required for this use of discretionary access control.","check":"Review application or system documentation to identify the required DAC.\n\nReview the security configuration of the database. If applicable, review the security configuration of the application(s) using the database.\n\nIf the DAC defined in the documentation is not implemented in the security configuration, this is a finding.\n\nValidate database object ownership using the queries below:\n\nView object ownership - All objects and schemas\n\nSELECT object_id, \nSCHEMA_NAME(schema_id) AS SchemaName,\n[name] AS Securable,\nUSER_NAME(principal_id) AS ObjectOwner,\n[type_desc] AS ObjectType\nFROM sys.objects\nWHERE is_ms_shipped = 0 AND principal_id IS NOT NULL\nORDER BY ObjectType, Securable, ObjectOwner\n\nView object ownership - Specific object\n\nDECLARE @ObjectName nvarchar(512)\nSET @ObjectName = '' --Specify object name here\nSELECT object_id, \nSCHEMA_NAME(schema_id) AS SchemaName,\n[name] AS Securable,\nUSER_NAME(principal_id) AS ObjectOwner,\n[type_desc] AS ObjectType\nFROM sys.objects\nWHERE is_ms_shipped = 0 AND principal_id IS NOT NULL\nAND [name] = @ObjectName\nORDER BY ObjectType, Securable, ObjectOwner\n\nView object ownership - Specific schema\n\nDECLARE @SchemaName nvarchar(512)\nSET @SchemaName = '' --Specify schema name here\nSELECT object_id, \nSCHEMA_NAME(schema_id) AS SchemaName,\n[name] AS Securable,\nUSER_NAME(principal_id) AS ObjectOwner,\n[type_desc] AS ObjectType\nFROM sys.objects\nWHERE is_ms_shipped = 0 AND principal_id IS NOT NULL\nAND SCHEMA_NAME(schema_id) = @SchemaName\nORDER BY ObjectType, Securable, ObjectOwner\n\nSchemas not owned by the schema or [dbo]\n\nSELECT [name] AS [SchemaName], USER_NAME(principal_id) AS [SchemaOwner]\nFROM sys.schemas\nWHERE schema_id != principal_id --exclude schemas owned by the schema\nAND principal_id != 1 --exclude schema dbo\n\nDatabase principals delegated the right to assign additional permissions\n\nSELECT U.type_desc AS [PrincipalType],\n U.name AS [Grantee],\nDP.class_desc AS [SecurableType],\nCASE DP.class\n    WHEN 0 THEN DB_NAME()\n    WHEN 1 THEN OBJECT_NAME(DP.major_id)\n    WHEN 3 THEN SCHEMA_NAME(DP.major_id)\nELSE CAST(DP.major_id AS nvarchar)\n    END AS [Securable],\npermission_name AS [PermissionName],\nstate_desc AS [DelegatedRight]\nFROM sys.database_permissions DP\nJOIN sys.database_principals U ON DP.grantee_principal_id = U.principal_id\nWHERE DP.state = 'W'\nORDER BY Grantee, SecurableType, Securable\n\nIf any of these rights are not documented and authorized, this is a finding.","fix":"To correct object ownership:\nUse the ALTER AUTHORIZATION ON::[Object Name] TO [Database principal] TSQL statement to correct object ownership. Full ALTER AUTHORIZATION command syntax is described in this document: ALTER AUTHORIZATION (Transact-SQL) - SQL Server | Microsoft Docs (https://docs.microsoft.com/en-us/sql/t-sql/statements/revoke-transact-sql?view=azuresqldb-current)\n\nTo remove unauthorized permissions:\nUse the REVOKE [Permission name] ON [Object name] TO [Database principal] to remove unauthorized permissions from a database principal on an object. Full REVOKE command syntax is described in this document: REVOKE (Transact-SQL) - SQL Server | Microsoft Docs (https://docs.microsoft.com/en-us/sql/t-sql/statements/alter-authorization-transact-sql?view=azuresqldb-current)"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-58989r871072_chk","severity":"medium","gid":"V-255316","rid":"SV-255316r871074_rule","stig_id":"ASQL-00-002800","gtitle":"SRG-APP-000328-DB-000301","fix_id":"F-58933r871073_fix","documentable":null,"cci":["CCI-002165"],"nist":["AC-3 (4)"]}},{"id":"SV-255317","code":"control 'SV-255317' do\n  title 'Azure SQL Database must restrict execution of stored procedures and functions that utilize [execute as] to necessary cases only.'\n  desc 'In certain situations, to provide required functionality, a DBMS needs to execute internal logic (stored procedures, functions, triggers, etc.) and/or external code modules with elevated privileges. However, if the privileges required for execution are at a higher level than the privileges assigned to organizational users invoking the functionality applications/programs, those users are indirectly provided with greater privileges than assigned by organizations.\n\nPrivilege elevation by \"Execute As\" must be utilized only where necessary and protected from misuse.'\n  desc 'check', 'Review the system documentation to obtain a listing of stored procedures and functions that utilize impersonation. Execute the following query:\n\nSELECT S.name AS schema_name, O.name AS module_name,\nUSER_NAME(CASE M.execute_as_principal_id \n               WHEN -2 THEN COALESCE(O.principal_id, S.principal_id)\n               ELSE M.execute_as_principal_id\n          END) AS execute_as\nFROM sys.sql_modules M\n    JOIN sys.objects O ON M.object_id = O.object_id\n    JOIN sys.schemas S ON O.schema_id = S.schema_id\nWHERE execute_as_principal_id IS NOT NULL\nORDER BY schema_name, module_name\n\nIf any procedures or functions are returned that are not documented, this is a finding.'\n  desc 'fix', 'Alter stored procedures and functions to remove the \"EXECUTE AS\" statement.'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-58990r871075_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255317'\n  tag rid: 'SV-255317r871077_rule'\n  tag stig_id: 'ASQL-00-002900'\n  tag gtitle: 'SRG-APP-000342-DB-000302'\n  tag fix_id: 'F-58934r871076_fix'\n  tag 'documentable'\n  tag cci: ['CCI-002233']\n  tag nist: ['AC-6 (8)']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255317.rb"},"title":"Azure SQL Database must restrict execution of stored procedures and functions that utilize [execute as] to necessary cases only.","desc":"In certain situations, to provide required functionality, a DBMS needs to execute internal logic (stored procedures, functions, triggers, etc.) and/or external code modules with elevated privileges. However, if the privileges required for execution are at a higher level than the privileges assigned to organizational users invoking the functionality applications/programs, those users are indirectly provided with greater privileges than assigned by organizations.\n\nPrivilege elevation by \"Execute As\" must be utilized only where necessary and protected from misuse.","descriptions":{"default":"In certain situations, to provide required functionality, a DBMS needs to execute internal logic (stored procedures, functions, triggers, etc.) and/or external code modules with elevated privileges. However, if the privileges required for execution are at a higher level than the privileges assigned to organizational users invoking the functionality applications/programs, those users are indirectly provided with greater privileges than assigned by organizations.\n\nPrivilege elevation by \"Execute As\" must be utilized only where necessary and protected from misuse.","check":"Review the system documentation to obtain a listing of stored procedures and functions that utilize impersonation. Execute the following query:\n\nSELECT S.name AS schema_name, O.name AS module_name,\nUSER_NAME(CASE M.execute_as_principal_id \n               WHEN -2 THEN COALESCE(O.principal_id, S.principal_id)\n               ELSE M.execute_as_principal_id\n          END) AS execute_as\nFROM sys.sql_modules M\n    JOIN sys.objects O ON M.object_id = O.object_id\n    JOIN sys.schemas S ON O.schema_id = S.schema_id\nWHERE execute_as_principal_id IS NOT NULL\nORDER BY schema_name, module_name\n\nIf any procedures or functions are returned that are not documented, this is a finding.","fix":"Alter stored procedures and functions to remove the \"EXECUTE AS\" statement."},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-58990r871075_chk","severity":"medium","gid":"V-255317","rid":"SV-255317r871077_rule","stig_id":"ASQL-00-002900","gtitle":"SRG-APP-000342-DB-000302","fix_id":"F-58934r871076_fix","documentable":null,"cci":["CCI-002233"],"nist":["AC-6 (8)"]}},{"id":"SV-255318","code":"control 'SV-255318' do\n  title 'Azure SQL Database must prohibit user installation of logic modules (stored procedures, functions, triggers, views, etc.) without explicit privileged status.'\n  desc 'Allowing regular users to install software, without explicit privileges, creates the risk that untested or potentially malicious software will be installed on the system. Explicit privileges (escalated or administrative privileges) provide the regular user with explicit capabilities and control that exceed the rights of a regular user.\n\nAzure SQL Database functionality and the nature and requirements of databases will vary, so while users are not permitted to install unapproved software, there may be instances where the organization allows the user to install approved software packages such as from an approved software repository. The requirements for production servers will be more restrictive than those used for development and research.\n\nAzure SQL Database must enforce software installation by users based upon what types of software installations are permitted (e.g., updates and security patches to existing software) and what types of installations are prohibited (e.g., software whose pedigree with regard to being potentially malicious is unknown or suspect) by the organization). \n\nIn the case of a database management system, this requirement covers stored procedures, functions, triggers, views, etc.'\n  desc 'check', \"If the Azure SQL Database supports only software development, experimentation and/or developer-level testing (that is, excluding production systems, integration testing, stress testing, and user acceptance testing), this is not a finding. \n\nObtain a listing of users and roles who are authorized to create, alter, or replace logic modules from the server documentation.\n\nExecute the following query to obtain a list of database principals:\nSELECT P.type_desc AS principal_type, P.name AS principal_name, O.type_desc,\nCASE class\nWHEN 0 THEN DB_NAME()\nWHEN 1 THEN OBJECT_SCHEMA_NAME(major_id) + '.' + OBJECT_NAME(major_id)\nWHEN 3 THEN SCHEMA_NAME(major_id)\nELSE class_desc + '(' + CAST(major_id AS nvarchar) + ')'\nEND AS securable_name, DP.state_desc, DP.permission_name\nFROM sys.database_permissions DP\nJOIN sys.database_principals P ON DP.grantee_principal_id = P.principal_id\nLEFT OUTER JOIN sys.all_objects O ON O.object_id = DP.major_id AND O.type IN ('TR','TA','P','X','RF','PC','IF','FN','TF','U')\nWHERE DP.type IN ('AL','ALTG') AND DP.class IN (0, 1, 53)\n\nExecute the following query to obtain a list of role memberships:\nSELECT R.name AS role_name, M.type_desc AS principal_type, M.name AS principal_name\nFROM sys.database_principals R\nJOIN sys.database_role_members DRM ON R.principal_id = DRM.role_principal_id\nJOIN sys.database_principals M ON DRM.member_principal_id = M.principal_id\nWHERE R.name IN ('db_ddladmin','db_owner')\nAND M.name != 'dbo'\n\nIf unauthorized access to the principal(s)/role(s) has been granted, this is a finding.\"\n  desc 'fix', 'Document and obtain approval for any nonadministrative users who require the ability to create, alter, or replace logic modules.\n\nRevoke the ALTER permission from unauthorized users and roles:\nREVOKE ALTER ON [<Object Name>] TO [<Principal Name>]'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-58991r871078_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255318'\n  tag rid: 'SV-255318r871080_rule'\n  tag stig_id: 'ASQL-00-003000'\n  tag gtitle: 'SRG-APP-000378-DB-000365'\n  tag fix_id: 'F-58935r871079_fix'\n  tag 'documentable'\n  tag cci: ['CCI-001812']\n  tag nist: ['CM-11 (2)']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255318.rb"},"title":"Azure SQL Database must prohibit user installation of logic modules (stored procedures, functions, triggers, views, etc.) without explicit privileged status.","desc":"Allowing regular users to install software, without explicit privileges, creates the risk that untested or potentially malicious software will be installed on the system. Explicit privileges (escalated or administrative privileges) provide the regular user with explicit capabilities and control that exceed the rights of a regular user.\n\nAzure SQL Database functionality and the nature and requirements of databases will vary, so while users are not permitted to install unapproved software, there may be instances where the organization allows the user to install approved software packages such as from an approved software repository. The requirements for production servers will be more restrictive than those used for development and research.\n\nAzure SQL Database must enforce software installation by users based upon what types of software installations are permitted (e.g., updates and security patches to existing software) and what types of installations are prohibited (e.g., software whose pedigree with regard to being potentially malicious is unknown or suspect) by the organization). \n\nIn the case of a database management system, this requirement covers stored procedures, functions, triggers, views, etc.","descriptions":{"default":"Allowing regular users to install software, without explicit privileges, creates the risk that untested or potentially malicious software will be installed on the system. Explicit privileges (escalated or administrative privileges) provide the regular user with explicit capabilities and control that exceed the rights of a regular user.\n\nAzure SQL Database functionality and the nature and requirements of databases will vary, so while users are not permitted to install unapproved software, there may be instances where the organization allows the user to install approved software packages such as from an approved software repository. The requirements for production servers will be more restrictive than those used for development and research.\n\nAzure SQL Database must enforce software installation by users based upon what types of software installations are permitted (e.g., updates and security patches to existing software) and what types of installations are prohibited (e.g., software whose pedigree with regard to being potentially malicious is unknown or suspect) by the organization). \n\nIn the case of a database management system, this requirement covers stored procedures, functions, triggers, views, etc.","check":"If the Azure SQL Database supports only software development, experimentation and/or developer-level testing (that is, excluding production systems, integration testing, stress testing, and user acceptance testing), this is not a finding. \n\nObtain a listing of users and roles who are authorized to create, alter, or replace logic modules from the server documentation.\n\nExecute the following query to obtain a list of database principals:\nSELECT P.type_desc AS principal_type, P.name AS principal_name, O.type_desc,\nCASE class\nWHEN 0 THEN DB_NAME()\nWHEN 1 THEN OBJECT_SCHEMA_NAME(major_id) + '.' + OBJECT_NAME(major_id)\nWHEN 3 THEN SCHEMA_NAME(major_id)\nELSE class_desc + '(' + CAST(major_id AS nvarchar) + ')'\nEND AS securable_name, DP.state_desc, DP.permission_name\nFROM sys.database_permissions DP\nJOIN sys.database_principals P ON DP.grantee_principal_id = P.principal_id\nLEFT OUTER JOIN sys.all_objects O ON O.object_id = DP.major_id AND O.type IN ('TR','TA','P','X','RF','PC','IF','FN','TF','U')\nWHERE DP.type IN ('AL','ALTG') AND DP.class IN (0, 1, 53)\n\nExecute the following query to obtain a list of role memberships:\nSELECT R.name AS role_name, M.type_desc AS principal_type, M.name AS principal_name\nFROM sys.database_principals R\nJOIN sys.database_role_members DRM ON R.principal_id = DRM.role_principal_id\nJOIN sys.database_principals M ON DRM.member_principal_id = M.principal_id\nWHERE R.name IN ('db_ddladmin','db_owner')\nAND M.name != 'dbo'\n\nIf unauthorized access to the principal(s)/role(s) has been granted, this is a finding.","fix":"Document and obtain approval for any nonadministrative users who require the ability to create, alter, or replace logic modules.\n\nRevoke the ALTER permission from unauthorized users and roles:\nREVOKE ALTER ON [<Object Name>] TO [<Principal Name>]"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-58991r871078_chk","severity":"medium","gid":"V-255318","rid":"SV-255318r871080_rule","stig_id":"ASQL-00-003000","gtitle":"SRG-APP-000378-DB-000365","fix_id":"F-58935r871079_fix","documentable":null,"cci":["CCI-001812"],"nist":["CM-11 (2)"]}},{"id":"SV-255319","code":"control 'SV-255319' do\n  title 'Azure SQL Database must enforce access restrictions associated with changes to the configuration of the Azure SQL Database server or database(s).'\n  desc 'Failure to provide logical access restrictions associated with changes to configuration may have significant effects on the overall security of the system. \n\nWhen dealing with access restrictions pertaining to change control, it should be noted that any changes to the hardware, software, and/or firmware components of the information system can potentially have significant effects on the overall security of the system. \n\nAccordingly, only qualified and authorized individuals must be allowed to obtain access to system components for the purposes of initiating changes, including upgrades and modifications.'\n  desc 'check', \"Obtain a list of logins who have privileged permissions and role memberships in the data and control planes of Azure SQL Database.\n\nFor Database Permissions:\n\nSELECT P.type_desc AS principal_type, P.name AS principal_name,\nO.type_desc,\nCASE class\nWHEN 0 THEN DB_NAME()\nWHEN 1 THEN OBJECT_SCHEMA_NAME(major_id) + '.' + OBJECT_NAME(major_id)\nWHEN 3 THEN SCHEMA_NAME(major_id)\nELSE class_desc + '(' + CAST(major_id AS nvarchar) + ')'\nEND AS securable_name, DP.state_desc, DP.permission_name\nFROM sys.database_permissions DP\nJOIN sys.database_principals P ON DP.grantee_principal_id = P.principal_id\nLEFT OUTER JOIN sys.all_objects O ON O.object_id = DP.major_id AND O.type IN ('TR','TA','P','X','RF','PC','IF','FN','TF','U')\nWHERE DP.type IN ('AL','ALTG') AND DP.class IN (0, 1, 53)\n\nFor Database Role Memberships:\n\nSELECT R.name AS role_name, M.type_desc AS principal_type, M.name AS principal_name\nFROM sys.database_principals R\nJOIN sys.database_role_members DRM ON R.principal_id = DRM.role_principal_id\nJOIN sys.database_principals M ON DRM.member_principal_id = M.principal_id\nAND M.name != 'dbo'\n\nFor Control Plane Role Memberships, run in PowerShell:\n\n$AzureSqlDbName = '<Azure SQL Database Name>'\n$AzureSqlDbResourceID = Get-AzResource -Name $AzureSqlDbName\nGet-AzRoleAssignment -Scope $AzureSqlDbResourceID.ResourceId -IncludeClassicAdministrators | Format-Table DisplayName,RoleDefinitionName \n\nCheck the documentation to verify the logins and roles returned are authorized. If the logins and/or roles are not documented and authorized, this is a finding.\"\n  desc 'fix', 'Document and obtain approval for logins with privileged permissions and role memberships.\n\nIf necessary, use the ALTER ROLE and/or REVOKE commands to remove unauthorized privileged permissions and/or role memberships. Example provided below.\n\nALTER ROLE ddladmin DROP MEMBER UnauthorizedUser;  \n\nREVOKE SELECT ON OBJECT::test.table FROM UnauthorizedUser;\n\nhttps://docs.microsoft.com/en-us/sql/t-sql/statements/alter-role-transact-sql\n\nhttps://docs.microsoft.com/en-us/sql/t-sql/statements/revoke-transact-sql\n\nIf necessary, in the Azure Portal, navigate to the Access Control pane for the Azure SQL Database to review and remove unauthorized privileged permissions and/or role memberships. Refer to link to documentation below.\n\nhttps://docs.microsoft.com/en-us/azure/role-based-access-control/role-definitions-list\n\nhttps://docs.microsoft.com/en-us/azure/role-based-access-control/role-assignments-remove'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-58992r877252_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255319'\n  tag rid: 'SV-255319r877253_rule'\n  tag stig_id: 'ASQL-00-003100'\n  tag gtitle: 'SRG-APP-000380-DB-000360'\n  tag fix_id: 'F-58936r871082_fix'\n  tag 'documentable'\n  tag cci: ['CCI-001813']\n  tag nist: ['CM-5 (1) (a)']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255319.rb"},"title":"Azure SQL Database must enforce access restrictions associated with changes to the configuration of the Azure SQL Database server or database(s).","desc":"Failure to provide logical access restrictions associated with changes to configuration may have significant effects on the overall security of the system. \n\nWhen dealing with access restrictions pertaining to change control, it should be noted that any changes to the hardware, software, and/or firmware components of the information system can potentially have significant effects on the overall security of the system. \n\nAccordingly, only qualified and authorized individuals must be allowed to obtain access to system components for the purposes of initiating changes, including upgrades and modifications.","descriptions":{"default":"Failure to provide logical access restrictions associated with changes to configuration may have significant effects on the overall security of the system. \n\nWhen dealing with access restrictions pertaining to change control, it should be noted that any changes to the hardware, software, and/or firmware components of the information system can potentially have significant effects on the overall security of the system. \n\nAccordingly, only qualified and authorized individuals must be allowed to obtain access to system components for the purposes of initiating changes, including upgrades and modifications.","check":"Obtain a list of logins who have privileged permissions and role memberships in the data and control planes of Azure SQL Database.\n\nFor Database Permissions:\n\nSELECT P.type_desc AS principal_type, P.name AS principal_name,\nO.type_desc,\nCASE class\nWHEN 0 THEN DB_NAME()\nWHEN 1 THEN OBJECT_SCHEMA_NAME(major_id) + '.' + OBJECT_NAME(major_id)\nWHEN 3 THEN SCHEMA_NAME(major_id)\nELSE class_desc + '(' + CAST(major_id AS nvarchar) + ')'\nEND AS securable_name, DP.state_desc, DP.permission_name\nFROM sys.database_permissions DP\nJOIN sys.database_principals P ON DP.grantee_principal_id = P.principal_id\nLEFT OUTER JOIN sys.all_objects O ON O.object_id = DP.major_id AND O.type IN ('TR','TA','P','X','RF','PC','IF','FN','TF','U')\nWHERE DP.type IN ('AL','ALTG') AND DP.class IN (0, 1, 53)\n\nFor Database Role Memberships:\n\nSELECT R.name AS role_name, M.type_desc AS principal_type, M.name AS principal_name\nFROM sys.database_principals R\nJOIN sys.database_role_members DRM ON R.principal_id = DRM.role_principal_id\nJOIN sys.database_principals M ON DRM.member_principal_id = M.principal_id\nAND M.name != 'dbo'\n\nFor Control Plane Role Memberships, run in PowerShell:\n\n$AzureSqlDbName = '<Azure SQL Database Name>'\n$AzureSqlDbResourceID = Get-AzResource -Name $AzureSqlDbName\nGet-AzRoleAssignment -Scope $AzureSqlDbResourceID.ResourceId -IncludeClassicAdministrators | Format-Table DisplayName,RoleDefinitionName \n\nCheck the documentation to verify the logins and roles returned are authorized. If the logins and/or roles are not documented and authorized, this is a finding.","fix":"Document and obtain approval for logins with privileged permissions and role memberships.\n\nIf necessary, use the ALTER ROLE and/or REVOKE commands to remove unauthorized privileged permissions and/or role memberships. Example provided below.\n\nALTER ROLE ddladmin DROP MEMBER UnauthorizedUser;  \n\nREVOKE SELECT ON OBJECT::test.table FROM UnauthorizedUser;\n\nhttps://docs.microsoft.com/en-us/sql/t-sql/statements/alter-role-transact-sql\n\nhttps://docs.microsoft.com/en-us/sql/t-sql/statements/revoke-transact-sql\n\nIf necessary, in the Azure Portal, navigate to the Access Control pane for the Azure SQL Database to review and remove unauthorized privileged permissions and/or role memberships. Refer to link to documentation below.\n\nhttps://docs.microsoft.com/en-us/azure/role-based-access-control/role-definitions-list\n\nhttps://docs.microsoft.com/en-us/azure/role-based-access-control/role-assignments-remove"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-58992r877252_chk","severity":"medium","gid":"V-255319","rid":"SV-255319r877253_rule","stig_id":"ASQL-00-003100","gtitle":"SRG-APP-000380-DB-000360","fix_id":"F-58936r871082_fix","documentable":null,"cci":["CCI-001813"],"nist":["CM-5 (1) (a)"]}},{"id":"SV-255320","code":"control 'SV-255320' do\n  title 'Azure SQL Database must use NSA-approved cryptography to protect classified information in accordance with the data owners requirements.'\n  desc 'Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.\nIt is the responsibility of the data owner to assess the cryptography requirements in light of applicable federal laws, Executive Orders, directives, policies, regulations, and standards.\n\nNSA-approved cryptography for classified networks is hardware based. This requirement addresses the compatibility of Azure SQL Database with the encryption devices.'\n  desc 'check', 'Use the TSQL query below to determine database encryption state:\n\nSELECT DB_NAME(database_id) AS DatabaseName, \nencryption_state_desc AS EncryptionState,\nkey_algorithm+CAST(key_length AS nvarchar(128)) AS EncryptionAlgorithm,\nencryptor_type\nFROM sys.dm_database_encryption_keys\n\nValidate that for each database the [EncryptionState] is \"ENCRYPTED\" and the [EncryptionAlgorithm] returns one of the following values: [AES128], [AES192], or [AES256]. \n\nIf any other value is returned for either the [EncryptionState] or [EncryptionAlgorithm], this is a finding.'\n  desc 'fix', 'Use the ALTER DATABASE command to enable encryption on the database.\n\nALTER DATABASE [Database Name Between Brackets] SET ENCRYPTION ON'\n  impact 0.7\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-58993r877278_chk'\n  tag severity: 'high'\n  tag gid: 'V-255320'\n  tag rid: 'SV-255320r877278_rule'\n  tag stig_id: 'ASQL-00-003200'\n  tag gtitle: 'SRG-APP-000416-DB-000380'\n  tag fix_id: 'F-58937r871085_fix'\n  tag 'documentable'\n  tag cci: ['CCI-002450']\n  tag nist: ['SC-13 b']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255320.rb"},"title":"Azure SQL Database must use NSA-approved cryptography to protect classified information in accordance with the data owners requirements.","desc":"Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.\nIt is the responsibility of the data owner to assess the cryptography requirements in light of applicable federal laws, Executive Orders, directives, policies, regulations, and standards.\n\nNSA-approved cryptography for classified networks is hardware based. This requirement addresses the compatibility of Azure SQL Database with the encryption devices.","descriptions":{"default":"Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.\nIt is the responsibility of the data owner to assess the cryptography requirements in light of applicable federal laws, Executive Orders, directives, policies, regulations, and standards.\n\nNSA-approved cryptography for classified networks is hardware based. This requirement addresses the compatibility of Azure SQL Database with the encryption devices.","check":"Use the TSQL query below to determine database encryption state:\n\nSELECT DB_NAME(database_id) AS DatabaseName, \nencryption_state_desc AS EncryptionState,\nkey_algorithm+CAST(key_length AS nvarchar(128)) AS EncryptionAlgorithm,\nencryptor_type\nFROM sys.dm_database_encryption_keys\n\nValidate that for each database the [EncryptionState] is \"ENCRYPTED\" and the [EncryptionAlgorithm] returns one of the following values: [AES128], [AES192], or [AES256]. \n\nIf any other value is returned for either the [EncryptionState] or [EncryptionAlgorithm], this is a finding.","fix":"Use the ALTER DATABASE command to enable encryption on the database.\n\nALTER DATABASE [Database Name Between Brackets] SET ENCRYPTION ON"},"impact":0.7,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-58993r877278_chk","severity":"high","gid":"V-255320","rid":"SV-255320r877278_rule","stig_id":"ASQL-00-003200","gtitle":"SRG-APP-000416-DB-000380","fix_id":"F-58937r871085_fix","documentable":null,"cci":["CCI-002450"],"nist":["SC-13 b"]}},{"id":"SV-255321","code":"control 'SV-255321' do\n  title 'Azure SQL Database must implement cryptographic mechanisms to prevent unauthorized modification of organization-defined information at rest (to include, at a minimum, PII and classified information) on organization-defined information system components.'\n  desc 'Azure SQL Databases handling data requiring \"data at rest\" protections must employ cryptographic mechanisms to prevent unauthorized disclosure and modification of the information at rest.\n\nSelection of a cryptographic mechanism is based on the need to protect the integrity of organizational information. The strength of the mechanism is commensurate with the security category and/or classification of the information. \n\nThe decision whether and what to encrypt rests with the data owner and is also influenced by the physical measures taken to secure the equipment and media on which the information resides.'\n  desc 'check', 'Review the system documentation to determine whether the organization has defined the information at rest that is to be protected from modification, which must include, at a minimum, PII and classified information. \n\nIf no information is identified as requiring such protection, this is not a finding. \n\nReview the configuration of the Azure SQL Database to ensure data at rest protections are implemented. \n\nIf any of the information defined as requiring cryptographic protection from modification is not encrypted in a manner that provides the required level of protection, this is a finding. \n\nRetrieve Transparent Data Encryption status: \n\n$LogicalServerName = \"myServer\" \n$RGname = \"myRG\" \n$DBName = \"myDatabase\" \nGet-AzSqlDatabaseTransparentDataEncryption -ServerName $LogicalServerName -ResourceGroupName $RGname -DatabaseName $DBname \n\nValidate that Azure SQL Database Transparent Data Encryption (TDE) is enabled. If TDE is disabled, this is a finding.'\n  desc 'fix', 'If Azure SQL Database Transparent Data Encryption is disabled, use the Set-AzSqlDatabaseTransparentDataEncryption command to enable. \n\n$LogicalServerName = \"myServer\" \n$RGname = \"myRG\" \n$DBname = \"myDatabase\" \n$TDEstate = \"Enabled\" \n\nSet-AzSqlDatabaseTransparentDataEncryption -ResourceGroupName $RGname -ServerName $LogicalServerName -DatabaseName $DBname -State $TDEstate'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-58994r871087_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255321'\n  tag rid: 'SV-255321r871089_rule'\n  tag stig_id: 'ASQL-00-003300'\n  tag gtitle: 'SRG-APP-000428-DB-000386'\n  tag fix_id: 'F-58938r871088_fix'\n  tag 'documentable'\n  tag cci: ['CCI-002475']\n  tag nist: ['SC-28 (1)']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255321.rb"},"title":"Azure SQL Database must implement cryptographic mechanisms to prevent unauthorized modification of organization-defined information at rest (to include, at a minimum, PII and classified information) on organization-defined information system components.","desc":"Azure SQL Databases handling data requiring \"data at rest\" protections must employ cryptographic mechanisms to prevent unauthorized disclosure and modification of the information at rest.\n\nSelection of a cryptographic mechanism is based on the need to protect the integrity of organizational information. The strength of the mechanism is commensurate with the security category and/or classification of the information. \n\nThe decision whether and what to encrypt rests with the data owner and is also influenced by the physical measures taken to secure the equipment and media on which the information resides.","descriptions":{"default":"Azure SQL Databases handling data requiring \"data at rest\" protections must employ cryptographic mechanisms to prevent unauthorized disclosure and modification of the information at rest.\n\nSelection of a cryptographic mechanism is based on the need to protect the integrity of organizational information. The strength of the mechanism is commensurate with the security category and/or classification of the information. \n\nThe decision whether and what to encrypt rests with the data owner and is also influenced by the physical measures taken to secure the equipment and media on which the information resides.","check":"Review the system documentation to determine whether the organization has defined the information at rest that is to be protected from modification, which must include, at a minimum, PII and classified information. \n\nIf no information is identified as requiring such protection, this is not a finding. \n\nReview the configuration of the Azure SQL Database to ensure data at rest protections are implemented. \n\nIf any of the information defined as requiring cryptographic protection from modification is not encrypted in a manner that provides the required level of protection, this is a finding. \n\nRetrieve Transparent Data Encryption status: \n\n$LogicalServerName = \"myServer\" \n$RGname = \"myRG\" \n$DBName = \"myDatabase\" \nGet-AzSqlDatabaseTransparentDataEncryption -ServerName $LogicalServerName -ResourceGroupName $RGname -DatabaseName $DBname \n\nValidate that Azure SQL Database Transparent Data Encryption (TDE) is enabled. If TDE is disabled, this is a finding.","fix":"If Azure SQL Database Transparent Data Encryption is disabled, use the Set-AzSqlDatabaseTransparentDataEncryption command to enable. \n\n$LogicalServerName = \"myServer\" \n$RGname = \"myRG\" \n$DBname = \"myDatabase\" \n$TDEstate = \"Enabled\" \n\nSet-AzSqlDatabaseTransparentDataEncryption -ResourceGroupName $RGname -ServerName $LogicalServerName -DatabaseName $DBname -State $TDEstate"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-58994r871087_chk","severity":"medium","gid":"V-255321","rid":"SV-255321r871089_rule","stig_id":"ASQL-00-003300","gtitle":"SRG-APP-000428-DB-000386","fix_id":"F-58938r871088_fix","documentable":null,"cci":["CCI-002475"],"nist":["SC-28 (1)"]}},{"id":"SV-255322","code":"control 'SV-255322' do\n  title 'Azure SQL Database must implement cryptographic mechanisms preventing the unauthorized disclosure of organization-defined information at rest on organization-defined information system components.'\n  desc 'Azure SQL Databases handling data requiring \"data at rest\" protections must employ cryptographic mechanisms to prevent unauthorized disclosure and modification of the information at rest. \n\n Selection of a cryptographic mechanism is based on the need to protect the integrity of organizational information. The strength of the mechanism is commensurate with the security category and/or classification of the information.'\n  desc 'check', 'Review the system documentation to determine whether the organization has defined the information at rest that is to be protected from modification, which must include, at a minimum, PII and classified information. \n\nIf no information is identified as requiring such protection, this is not a finding. \n\nReview the configuration of the Azure SQL Database to ensure data at rest protections are implemented. \n\nIf any of the information defined as requiring cryptographic protection from modification is not encrypted in a manner that provides the required level of protection, this is a finding. \n\nRetrieve Transparent Data Encryption status: \n$LogicalServerName = \"myServerName\" \n$RGname = \"myResourceGroup\" \n$DBName = \"myDatabaseName\" \n\nGet-AzSqlDatabaseTransparentDataEncryption -ServerName $LogicalServerName -ResourceGroupName $RGname -DatabaseName $DBname'\n  desc 'fix', 'If Azure SQL Database Transparent Data Encryption is disabled, use the Set-AzSqlDatabaseTransparentDataEncryption command to enable. \n\n$LogicalServerName = \"myServerName\" \n$RGname = \"myResourceGroup\" \n$DBName = \"myDatabaseName\" \n\n$TDEstate = \"Enabled\" \n\nSet-AzSqlDatabaseTransparentDataEncryption -ResourceGroupName $RGname -ServerName $LogicalServerName -DatabaseName $DBname -State $TDEstate'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-58995r871090_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255322'\n  tag rid: 'SV-255322r871092_rule'\n  tag stig_id: 'ASQL-00-003400'\n  tag gtitle: 'SRG-APP-000429-DB-000387'\n  tag fix_id: 'F-58939r871091_fix'\n  tag 'documentable'\n  tag cci: ['CCI-002476']\n  tag nist: ['SC-28 (1)']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255322.rb"},"title":"Azure SQL Database must implement cryptographic mechanisms preventing the unauthorized disclosure of organization-defined information at rest on organization-defined information system components.","desc":"Azure SQL Databases handling data requiring \"data at rest\" protections must employ cryptographic mechanisms to prevent unauthorized disclosure and modification of the information at rest. \n\n Selection of a cryptographic mechanism is based on the need to protect the integrity of organizational information. The strength of the mechanism is commensurate with the security category and/or classification of the information.","descriptions":{"default":"Azure SQL Databases handling data requiring \"data at rest\" protections must employ cryptographic mechanisms to prevent unauthorized disclosure and modification of the information at rest. \n\n Selection of a cryptographic mechanism is based on the need to protect the integrity of organizational information. The strength of the mechanism is commensurate with the security category and/or classification of the information.","check":"Review the system documentation to determine whether the organization has defined the information at rest that is to be protected from modification, which must include, at a minimum, PII and classified information. \n\nIf no information is identified as requiring such protection, this is not a finding. \n\nReview the configuration of the Azure SQL Database to ensure data at rest protections are implemented. \n\nIf any of the information defined as requiring cryptographic protection from modification is not encrypted in a manner that provides the required level of protection, this is a finding. \n\nRetrieve Transparent Data Encryption status: \n$LogicalServerName = \"myServerName\" \n$RGname = \"myResourceGroup\" \n$DBName = \"myDatabaseName\" \n\nGet-AzSqlDatabaseTransparentDataEncryption -ServerName $LogicalServerName -ResourceGroupName $RGname -DatabaseName $DBname","fix":"If Azure SQL Database Transparent Data Encryption is disabled, use the Set-AzSqlDatabaseTransparentDataEncryption command to enable. \n\n$LogicalServerName = \"myServerName\" \n$RGname = \"myResourceGroup\" \n$DBName = \"myDatabaseName\" \n\n$TDEstate = \"Enabled\" \n\nSet-AzSqlDatabaseTransparentDataEncryption -ResourceGroupName $RGname -ServerName $LogicalServerName -DatabaseName $DBname -State $TDEstate"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-58995r871090_chk","severity":"medium","gid":"V-255322","rid":"SV-255322r871092_rule","stig_id":"ASQL-00-003400","gtitle":"SRG-APP-000429-DB-000387","fix_id":"F-58939r871091_fix","documentable":null,"cci":["CCI-002476"],"nist":["SC-28 (1)"]}},{"id":"SV-255323","code":"control 'SV-255323' do\n  title 'When invalid inputs are received, the Azure SQL Database must behave in a predictable and documented manner that reflects organizational and system objectives.'\n  desc 'A common vulnerability is unplanned behavior when invalid inputs are received. This requirement guards against adverse or unintended system behavior caused by invalid inputs, where information system responses to the invalid input may be disruptive or cause the system to fail into an unsafe state.\n\nThe behavior will be derived from the organizational and system requirements and includes, but is not limited to, notification of the appropriate personnel, creating an audit record, and rejecting invalid input.\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered.'\n  desc 'check', 'Review DBMS code (stored procedures, functions, triggers), application code, settings, column and field definitions, and constraints to determine whether the database is protected against invalid input. \n\nIf code exists that allows invalid data to be acted upon or input into the database, this is a finding. \n\nIf column/field definitions are not reflective of the data, this is a finding. \n\nIf columns/fields do not contain constraints and validity checking where required, this is a finding. \n\nWhere a column/field is noted in the system documentation as necessarily free-form, even though its name and context suggest that it should be strongly typed and constrained, the absence of these protections is not a finding. \n\nWhere a column/field is clearly identified by name, caption or context as Notes, Comments, Description, Text, etc., the absence of these protections is not a finding.'\n  desc 'fix', 'Use parameterized queries, stored procedures, constraints and foreign keys to validate data input. \n\nModify Azure SQL Database to properly use the correct column data types as required in the database.'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-58996r871093_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255323'\n  tag rid: 'SV-255323r871095_rule'\n  tag stig_id: 'ASQL-00-003500'\n  tag gtitle: 'SRG-APP-000447-DB-000393'\n  tag fix_id: 'F-58940r871094_fix'\n  tag 'documentable'\n  tag cci: ['CCI-002754']\n  tag nist: ['SI-10 (3)']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255323.rb"},"title":"When invalid inputs are received, the Azure SQL Database must behave in a predictable and documented manner that reflects organizational and system objectives.","desc":"A common vulnerability is unplanned behavior when invalid inputs are received. This requirement guards against adverse or unintended system behavior caused by invalid inputs, where information system responses to the invalid input may be disruptive or cause the system to fail into an unsafe state.\n\nThe behavior will be derived from the organizational and system requirements and includes, but is not limited to, notification of the appropriate personnel, creating an audit record, and rejecting invalid input.\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered.","descriptions":{"default":"A common vulnerability is unplanned behavior when invalid inputs are received. This requirement guards against adverse or unintended system behavior caused by invalid inputs, where information system responses to the invalid input may be disruptive or cause the system to fail into an unsafe state.\n\nThe behavior will be derived from the organizational and system requirements and includes, but is not limited to, notification of the appropriate personnel, creating an audit record, and rejecting invalid input.\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered.","check":"Review DBMS code (stored procedures, functions, triggers), application code, settings, column and field definitions, and constraints to determine whether the database is protected against invalid input. \n\nIf code exists that allows invalid data to be acted upon or input into the database, this is a finding. \n\nIf column/field definitions are not reflective of the data, this is a finding. \n\nIf columns/fields do not contain constraints and validity checking where required, this is a finding. \n\nWhere a column/field is noted in the system documentation as necessarily free-form, even though its name and context suggest that it should be strongly typed and constrained, the absence of these protections is not a finding. \n\nWhere a column/field is clearly identified by name, caption or context as Notes, Comments, Description, Text, etc., the absence of these protections is not a finding.","fix":"Use parameterized queries, stored procedures, constraints and foreign keys to validate data input. \n\nModify Azure SQL Database to properly use the correct column data types as required in the database."},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-58996r871093_chk","severity":"medium","gid":"V-255323","rid":"SV-255323r871095_rule","stig_id":"ASQL-00-003500","gtitle":"SRG-APP-000447-DB-000393","fix_id":"F-58940r871094_fix","documentable":null,"cci":["CCI-002754"],"nist":["SI-10 (3)"]}},{"id":"SV-255324","code":"control 'SV-255324' do\n  title 'The Azure SQL Database must be configured to generate audit records for DOD-defined auditable events within all DBMS/database components.'\n  desc 'Without the capability to generate audit records, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nAudit records can be generated from various components within Azure SQL Database (e.g., process, module). Certain specific application functionalities may be audited as well. The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.\n\nDOD has defined the list of events for which Azure SQL Database will provide an audit record generation capability as the following: \n\n(i) Successful and unsuccessful attempts to access, modify, or delete privileges, security objects, security levels, or categories of information (e.g., classification levels);\n\n(ii) Access actions, such as successful and unsuccessful logon attempts, privileged activities, or other system-level access, starting and ending time for user access to the system, concurrent logons from different workstations, successful and unsuccessful accesses to objects, all program initiations, and all direct access to the information system; and\n\n(iii) All account creation, modification, disabling, and termination actions.\n\nOrganizations may define additional events requiring continuous or ad hoc auditing.'\n  desc 'check', 'Check Azure SQL Database to see if an auditing is enabled.\n\nExecute the following steps: \n1. In the Azure Portal, open a Cloud Shell session.\n2. Run this PowerShell command to determine if SQL Auditing is enabled:\n\n$ResourceGroup = \"myResourceGroup\"\n$ServerName = \"myServerName\"\nGet-AzSqlServerAudit -ResourceGroupName $ResourceGroup -ServerName $ServerName `\n| Select-object -property BlobStorageTargetState,LogAnalyticsTargetState,EventHubTargetState\n\nIf BlobStorageTargetState, LogAnalyticsTargetState and EventHubTargetState (all three) are Disabled, this is a finding.'\n  desc 'fix', 'Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-58997r871096_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255324'\n  tag rid: 'SV-255324r877276_rule'\n  tag stig_id: 'ASQL-00-004300'\n  tag gtitle: 'SRG-APP-000089-DB-000064'\n  tag fix_id: 'F-58941r877276_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000169']\n  tag nist: ['AU-12 a']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255324.rb"},"title":"The Azure SQL Database must be configured to generate audit records for DOD-defined auditable events within all DBMS/database components.","desc":"Without the capability to generate audit records, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nAudit records can be generated from various components within Azure SQL Database (e.g., process, module). Certain specific application functionalities may be audited as well. The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.\n\nDOD has defined the list of events for which Azure SQL Database will provide an audit record generation capability as the following: \n\n(i) Successful and unsuccessful attempts to access, modify, or delete privileges, security objects, security levels, or categories of information (e.g., classification levels);\n\n(ii) Access actions, such as successful and unsuccessful logon attempts, privileged activities, or other system-level access, starting and ending time for user access to the system, concurrent logons from different workstations, successful and unsuccessful accesses to objects, all program initiations, and all direct access to the information system; and\n\n(iii) All account creation, modification, disabling, and termination actions.\n\nOrganizations may define additional events requiring continuous or ad hoc auditing.","descriptions":{"default":"Without the capability to generate audit records, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nAudit records can be generated from various components within Azure SQL Database (e.g., process, module). Certain specific application functionalities may be audited as well. The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.\n\nDOD has defined the list of events for which Azure SQL Database will provide an audit record generation capability as the following: \n\n(i) Successful and unsuccessful attempts to access, modify, or delete privileges, security objects, security levels, or categories of information (e.g., classification levels);\n\n(ii) Access actions, such as successful and unsuccessful logon attempts, privileged activities, or other system-level access, starting and ending time for user access to the system, concurrent logons from different workstations, successful and unsuccessful accesses to objects, all program initiations, and all direct access to the information system; and\n\n(iii) All account creation, modification, disabling, and termination actions.\n\nOrganizations may define additional events requiring continuous or ad hoc auditing.","check":"Check Azure SQL Database to see if an auditing is enabled.\n\nExecute the following steps: \n1. In the Azure Portal, open a Cloud Shell session.\n2. Run this PowerShell command to determine if SQL Auditing is enabled:\n\n$ResourceGroup = \"myResourceGroup\"\n$ServerName = \"myServerName\"\nGet-AzSqlServerAudit -ResourceGroupName $ResourceGroup -ServerName $ServerName `\n| Select-object -property BlobStorageTargetState,LogAnalyticsTargetState,EventHubTargetState\n\nIf BlobStorageTargetState, LogAnalyticsTargetState and EventHubTargetState (all three) are Disabled, this is a finding.","fix":"Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script."},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-58997r871096_chk","severity":"medium","gid":"V-255324","rid":"SV-255324r877276_rule","stig_id":"ASQL-00-004300","gtitle":"SRG-APP-000089-DB-000064","fix_id":"F-58941r877276_fix","documentable":null,"cci":["CCI-000169"],"nist":["AU-12 a"]}},{"id":"SV-255325","code":"control 'SV-255325' do\n  title 'Azure SQL Database must allow only the ISSM (or individuals or roles appointed by the ISSM) to select which auditable events are to be audited.'\n  desc \"Without the capability to restrict which roles and individuals can select which events are audited, unauthorized personnel may be able to prevent or interfere with the auditing of critical events. \n \nSuppression of auditing could permit an adversary to evade detection. \n \nMisconfigured audits can degrade the system's performance by overwhelming the audit log. Misconfigured audits may also make it more difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one.\"\n  desc 'check', 'Obtain the list of approved audit maintainers from the system documentation.\n\nIf any role memberships are not documented and authorized, this is a finding.\t\n\nReview the Azure roles and individual users, all of which enable the ability to create and maintain audits.\n\nTo review the Azure roles and users, navigate to the Azure Portal and review the Azure Server controlling the Azure SQL Database.\n1. Select \"Access Control (IAM)\".\n2. Select \"Role assignments\" and review the roles assigned to each user.\n3. Select \"Roles\", and then select \"View\" under the Details column for each role.\n\nAny roles or users with Write permissions to the auditing policy must be documented.\n\nThis may include but is not limited to the Owner, Contributor, and Administrator roles.\n\nIf any of the roles or users have permissions that are not documented, or the documented audit maintainers do not have permissions, this is a finding.'\n  desc 'fix', 'Create an Azure role specifically for audit maintainers, and give it write permissions to audit related permissions in the portal, without granting it unnecessary permissions. The role name used here is an example; other names may be used:\n\nAudit permissions are managed through the Azure Portal, PowerShell, CLI or REST API (not managed using TSQL in Azure SQL Database).'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-58998r877274_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255325'\n  tag rid: 'SV-255325r877275_rule'\n  tag stig_id: 'ASQL-00-004400'\n  tag gtitle: 'SRG-APP-000090-DB-000065'\n  tag fix_id: 'F-58942r877275_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000171']\n  tag nist: ['AU-12 b']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255325.rb"},"title":"Azure SQL Database must allow only the ISSM (or individuals or roles appointed by the ISSM) to select which auditable events are to be audited.","desc":"Without the capability to restrict which roles and individuals can select which events are audited, unauthorized personnel may be able to prevent or interfere with the auditing of critical events. \n \nSuppression of auditing could permit an adversary to evade detection. \n \nMisconfigured audits can degrade the system's performance by overwhelming the audit log. Misconfigured audits may also make it more difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one.","descriptions":{"default":"Without the capability to restrict which roles and individuals can select which events are audited, unauthorized personnel may be able to prevent or interfere with the auditing of critical events. \n \nSuppression of auditing could permit an adversary to evade detection. \n \nMisconfigured audits can degrade the system's performance by overwhelming the audit log. Misconfigured audits may also make it more difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one.","check":"Obtain the list of approved audit maintainers from the system documentation.\n\nIf any role memberships are not documented and authorized, this is a finding.\t\n\nReview the Azure roles and individual users, all of which enable the ability to create and maintain audits.\n\nTo review the Azure roles and users, navigate to the Azure Portal and review the Azure Server controlling the Azure SQL Database.\n1. Select \"Access Control (IAM)\".\n2. Select \"Role assignments\" and review the roles assigned to each user.\n3. Select \"Roles\", and then select \"View\" under the Details column for each role.\n\nAny roles or users with Write permissions to the auditing policy must be documented.\n\nThis may include but is not limited to the Owner, Contributor, and Administrator roles.\n\nIf any of the roles or users have permissions that are not documented, or the documented audit maintainers do not have permissions, this is a finding.","fix":"Create an Azure role specifically for audit maintainers, and give it write permissions to audit related permissions in the portal, without granting it unnecessary permissions. The role name used here is an example; other names may be used:\n\nAudit permissions are managed through the Azure Portal, PowerShell, CLI or REST API (not managed using TSQL in Azure SQL Database)."},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-58998r877274_chk","severity":"medium","gid":"V-255325","rid":"SV-255325r877275_rule","stig_id":"ASQL-00-004400","gtitle":"SRG-APP-000090-DB-000065","fix_id":"F-58942r877275_fix","documentable":null,"cci":["CCI-000171"],"nist":["AU-12 b"]}},{"id":"SV-255326","code":"control 'SV-255326' do\n  title 'The Azure SQL Database must be able to generate audit records when privileges/permissions are retrieved.'\n  desc 'Under some circumstances, it may be useful to monitor who/what is reading privilege/permission/role information. Therefore, it must be possible to configure auditing to do this. DBMSs typically make such information available through views or functions. \n\nThis requirement addresses explicit requests for privilege/permission/role membership information. It does not refer to the implicit retrieval of privileges/permissions/role memberships that SQL Server continually performs to determine if any and every action on the database is permitted.'\n  desc 'check', \"Review Azure SQL Database configuration to verify that audit records are produced when privileges/permissions/role memberships are retrieved. \n\nTo determine if an audit is configured, follow the instructions below: \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nSCHEMA_OBJECT_ACCESS_GROUP \n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.\"\n  desc 'fix', 'Deploy an audit to review the retrieval of privilege/permission/role membership information. \n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-58999r871102_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255326'\n  tag rid: 'SV-255326r877251_rule'\n  tag stig_id: 'ASQL-00-004500'\n  tag gtitle: 'SRG-APP-000091-DB-000066'\n  tag fix_id: 'F-58943r877250_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255326.rb"},"title":"The Azure SQL Database must be able to generate audit records when privileges/permissions are retrieved.","desc":"Under some circumstances, it may be useful to monitor who/what is reading privilege/permission/role information. Therefore, it must be possible to configure auditing to do this. DBMSs typically make such information available through views or functions. \n\nThis requirement addresses explicit requests for privilege/permission/role membership information. It does not refer to the implicit retrieval of privileges/permissions/role memberships that SQL Server continually performs to determine if any and every action on the database is permitted.","descriptions":{"default":"Under some circumstances, it may be useful to monitor who/what is reading privilege/permission/role information. Therefore, it must be possible to configure auditing to do this. DBMSs typically make such information available through views or functions. \n\nThis requirement addresses explicit requests for privilege/permission/role membership information. It does not refer to the implicit retrieval of privileges/permissions/role memberships that SQL Server continually performs to determine if any and every action on the database is permitted.","check":"Review Azure SQL Database configuration to verify that audit records are produced when privileges/permissions/role memberships are retrieved. \n\nTo determine if an audit is configured, follow the instructions below: \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nSCHEMA_OBJECT_ACCESS_GROUP \n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.","fix":"Deploy an audit to review the retrieval of privilege/permission/role membership information. \n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script."},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-58999r871102_chk","severity":"medium","gid":"V-255326","rid":"SV-255326r877251_rule","stig_id":"ASQL-00-004500","gtitle":"SRG-APP-000091-DB-000066","fix_id":"F-58943r877250_fix","documentable":null,"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-255327","code":"control 'SV-255327' do\n  title 'The Azure SQL Database must be able to generate audit records when unsuccessful attempts to retrieve privileges/permissions occur.'\n  desc 'Under some circumstances, it may be useful to monitor who/what is reading privilege/permission/role information. Therefore, it must be possible to configure auditing to do this. DBMSs typically make such information available through views or functions.\n\nThis requirement addresses explicit requests for privilege/permission/role membership information. It does not refer to the implicit retrieval of privileges/permissions/role memberships that Azure SQL Database continually performs to determine if any and every action on the database is permitted.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.'\n  desc 'check', \"Review Azure SQL Database configuration to verify that audit records are produced when the system denies or fails to complete attempts to retrieve privileges/permissions/role membership.\n\nTo determine if an audit is configured, follow the instructions below: \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nSCHEMA_OBJECT_ACCESS_GROUP \n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.\"\n  desc 'fix', 'Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59000r871105_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255327'\n  tag rid: 'SV-255327r877245_rule'\n  tag stig_id: 'ASQL-00-004600'\n  tag gtitle: 'SRG-APP-000091-DB-000325'\n  tag fix_id: 'F-58944r877244_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255327.rb"},"title":"The Azure SQL Database must be able to generate audit records when unsuccessful attempts to retrieve privileges/permissions occur.","desc":"Under some circumstances, it may be useful to monitor who/what is reading privilege/permission/role information. Therefore, it must be possible to configure auditing to do this. DBMSs typically make such information available through views or functions.\n\nThis requirement addresses explicit requests for privilege/permission/role membership information. It does not refer to the implicit retrieval of privileges/permissions/role memberships that Azure SQL Database continually performs to determine if any and every action on the database is permitted.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.","descriptions":{"default":"Under some circumstances, it may be useful to monitor who/what is reading privilege/permission/role information. Therefore, it must be possible to configure auditing to do this. DBMSs typically make such information available through views or functions.\n\nThis requirement addresses explicit requests for privilege/permission/role membership information. It does not refer to the implicit retrieval of privileges/permissions/role memberships that Azure SQL Database continually performs to determine if any and every action on the database is permitted.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.","check":"Review Azure SQL Database configuration to verify that audit records are produced when the system denies or fails to complete attempts to retrieve privileges/permissions/role membership.\n\nTo determine if an audit is configured, follow the instructions below: \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nSCHEMA_OBJECT_ACCESS_GROUP \n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.","fix":"Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script."},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59000r871105_chk","severity":"medium","gid":"V-255327","rid":"SV-255327r877245_rule","stig_id":"ASQL-00-004600","gtitle":"SRG-APP-000091-DB-000325","fix_id":"F-58944r877244_fix","documentable":null,"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-255328","code":"control 'SV-255328' do\n  title 'Azure SQL Database must initiate session auditing upon startup.'\n  desc \"Session auditing is for use when a user's activities are under investigation. To ensure capture of all activity during those periods when session auditing is in use, it needs to be in operation for the whole time Azure SQL Database is running.\"\n  desc 'check', \"When Audits are enabled, they start up when the audits are enabled and remain operating until the audit is disabled. \n\nCheck if an audit is configured and enabled. \nTo determine if session auditing is configured and enabled, follow the instructions below: \nRun this TSQL command to determine if SQL Auditing is configured and enabled:\n   SELECT *\n   FROM sys.database_audit_specifications\n   where (name = 'SqlDbAuditing_ServerAuditSpec' \n       or name = 'SqlDbAuditing_AuditSpec')\n   and is_state_enabled = 1\n\nAll currently defined audits for the Azure SQL Database instance will be listed. If no audits are returned, this is a finding.\"\n  desc 'fix', 'Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59001r871108_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255328'\n  tag rid: 'SV-255328r877243_rule'\n  tag stig_id: 'ASQL-00-004700'\n  tag gtitle: 'SRG-APP-000092-DB-000208'\n  tag fix_id: 'F-58945r877242_fix'\n  tag 'documentable'\n  tag cci: ['CCI-001464']\n  tag nist: ['AU-14 (1)']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255328.rb"},"title":"Azure SQL Database must initiate session auditing upon startup.","desc":"Session auditing is for use when a user's activities are under investigation. To ensure capture of all activity during those periods when session auditing is in use, it needs to be in operation for the whole time Azure SQL Database is running.","descriptions":{"default":"Session auditing is for use when a user's activities are under investigation. To ensure capture of all activity during those periods when session auditing is in use, it needs to be in operation for the whole time Azure SQL Database is running.","check":"When Audits are enabled, they start up when the audits are enabled and remain operating until the audit is disabled. \n\nCheck if an audit is configured and enabled. \nTo determine if session auditing is configured and enabled, follow the instructions below: \nRun this TSQL command to determine if SQL Auditing is configured and enabled:\n   SELECT *\n   FROM sys.database_audit_specifications\n   where (name = 'SqlDbAuditing_ServerAuditSpec' \n       or name = 'SqlDbAuditing_AuditSpec')\n   and is_state_enabled = 1\n\nAll currently defined audits for the Azure SQL Database instance will be listed. If no audits are returned, this is a finding.","fix":"Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59001r871108_chk","severity":"medium","gid":"V-255328","rid":"SV-255328r877243_rule","stig_id":"ASQL-00-004700","gtitle":"SRG-APP-000092-DB-000208","fix_id":"F-58945r877242_fix","documentable":null,"cci":["CCI-001464"],"nist":["AU-14 (1)"]}},{"id":"SV-255329","code":"control 'SV-255329' do\n  title 'Azure SQL Database must include additional, more detailed, organization-defined information in the audit records for audit events identified by type, location, or subject.'\n  desc 'Information system auditing capability is critical for accurate forensic analysis. Reconstruction of harmful events or forensic analysis is not possible if audit records do not contain enough information. To support analysis, some types of events will need information to be logged that exceeds the basic requirements of event type, time stamps, location, source, outcome, and user identity. If additional information is not available, it could negatively impact forensic investigations into user actions or other malicious events.\n\nThe organization must determine what additional information is required for complete analysis of the audited events. The additional information required is dependent on the type of information (e.g., sensitivity of the data and the environment within which it resides). At a minimum, the organization must employ either full-text recording of privileged commands or the individual identities of users of shared accounts, or both. The organization must maintain audit trails in sufficient detail to reconstruct events to determine the cause and impact of compromise. \n\nExamples of detailed information the organization may require in audit records are full-text recording of privileged commands or the individual identities of shared account users.'\n  desc 'check', 'If an Azure SQL Database Audit is not in use for audit purposes, this is a finding, unless a third-party product is being used that can perform detailed auditing for Azure SQL Database.\n\nReview system documentation to determine whether Azure SQL Database is required to audit any events and fields in addition to those in the standard audit.\n\nIf there are none specified, this is not a finding.\n\nIf Azure SQL Database Audit is in use, compare the audit specification(s) with the documented requirements.\n\nIf any such requirement is not satisfied by the audit specification(s) (or by supplemental, locally-deployed mechanisms), this is a finding.'\n  desc 'fix', 'Design and deploy an audit that captures all auditable events and data items. In the event a third-party tool is used for auditing, it must contain all the required information, including but not limited to, events, type, location, subject, date and time, and who made the change.\n\nImplement additional custom audits to capture the additional organizational required information.'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59002r871111_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255329'\n  tag rid: 'SV-255329r871113_rule'\n  tag stig_id: 'ASQL-00-005500'\n  tag gtitle: 'SRG-APP-000101-DB-000044'\n  tag fix_id: 'F-58946r871112_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000135']\n  tag nist: ['AU-3 (1)']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255329.rb"},"title":"Azure SQL Database must include additional, more detailed, organization-defined information in the audit records for audit events identified by type, location, or subject.","desc":"Information system auditing capability is critical for accurate forensic analysis. Reconstruction of harmful events or forensic analysis is not possible if audit records do not contain enough information. To support analysis, some types of events will need information to be logged that exceeds the basic requirements of event type, time stamps, location, source, outcome, and user identity. If additional information is not available, it could negatively impact forensic investigations into user actions or other malicious events.\n\nThe organization must determine what additional information is required for complete analysis of the audited events. The additional information required is dependent on the type of information (e.g., sensitivity of the data and the environment within which it resides). At a minimum, the organization must employ either full-text recording of privileged commands or the individual identities of users of shared accounts, or both. The organization must maintain audit trails in sufficient detail to reconstruct events to determine the cause and impact of compromise. \n\nExamples of detailed information the organization may require in audit records are full-text recording of privileged commands or the individual identities of shared account users.","descriptions":{"default":"Information system auditing capability is critical for accurate forensic analysis. Reconstruction of harmful events or forensic analysis is not possible if audit records do not contain enough information. To support analysis, some types of events will need information to be logged that exceeds the basic requirements of event type, time stamps, location, source, outcome, and user identity. If additional information is not available, it could negatively impact forensic investigations into user actions or other malicious events.\n\nThe organization must determine what additional information is required for complete analysis of the audited events. The additional information required is dependent on the type of information (e.g., sensitivity of the data and the environment within which it resides). At a minimum, the organization must employ either full-text recording of privileged commands or the individual identities of users of shared accounts, or both. The organization must maintain audit trails in sufficient detail to reconstruct events to determine the cause and impact of compromise. \n\nExamples of detailed information the organization may require in audit records are full-text recording of privileged commands or the individual identities of shared account users.","check":"If an Azure SQL Database Audit is not in use for audit purposes, this is a finding, unless a third-party product is being used that can perform detailed auditing for Azure SQL Database.\n\nReview system documentation to determine whether Azure SQL Database is required to audit any events and fields in addition to those in the standard audit.\n\nIf there are none specified, this is not a finding.\n\nIf Azure SQL Database Audit is in use, compare the audit specification(s) with the documented requirements.\n\nIf any such requirement is not satisfied by the audit specification(s) (or by supplemental, locally-deployed mechanisms), this is a finding.","fix":"Design and deploy an audit that captures all auditable events and data items. In the event a third-party tool is used for auditing, it must contain all the required information, including but not limited to, events, type, location, subject, date and time, and who made the change.\n\nImplement additional custom audits to capture the additional organizational required information."},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59002r871111_chk","severity":"medium","gid":"V-255329","rid":"SV-255329r871113_rule","stig_id":"ASQL-00-005500","gtitle":"SRG-APP-000101-DB-000044","fix_id":"F-58946r871112_fix","documentable":null,"cci":["CCI-000135"],"nist":["AU-3 (1)"]}},{"id":"SV-255330","code":"control 'SV-255330' do\n  title 'The audit information produced by Azure SQL Database must be protected from unauthorized read access.'\n  desc 'If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is difficult, if not impossible, to achieve. In addition, access to audit records provides information an attacker could potentially use to his or her advantage.  \n\nTo ensure the veracity of audit data, the information system and/or the application must protect audit information from any and all unauthorized access. This includes read, write, copy, etc.  \n\nThis requirement can be achieved through multiple methods, which will depend upon system architecture and design. Some commonly employed methods include ensuring log files enjoy the proper file system permissions utilizing file system protections and limiting log data location. \n\nAdditionally, applications with user interfaces to audit records must not allow the unfettered manipulation of or access to those records via the application. If the application provides access to the audit data, the application becomes accountable for ensuring that audit information is protected from unauthorized access. SQL Server is an application that is able to view and manipulate audit file data. \n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.\n\n'\n  desc 'check', 'To obtain the Azure SQL Database audit file location(s), navigate to the Azure Portal, select the Azure SQL Database, then select \"Auditing\".\n\nReview the storage settings for the audit.\n\nVerify that the audit storage has the correct permissions by doing the following:\n1. Review the Azure roles and users by navigating to the Azure Portal.\n2. Review the Azure Server controlling the Azure SQL Database.\n3. Select \"Access Control (IAM)\".\n4. Select \"Role assignments\" and review the roles assigned to each user.\n5. Select \"Roles\" and then select \"View\" under the \"Details\" column for each role.\n\nAny roles or users with Read permissions to the auditing policy must be documented. If not documented, this is a finding.'\n  desc 'fix', 'Modify audit permissions to meet the requirement to protect against unauthorized access.\n\nTo review the Azure roles and users, navigate to the Azure Portal and review the Azure Server controlling the Azure SQL Database.\n1. Select \"Access Control (IAM)\".\n2. Select \"Role assignments\" and review the roles assigned to each user.\n3. Select \"Roles\", and then select \"View\" under the Details column for each role.\n4. Remove any undocumented permissions or excessive read permissions to audit storage for user and roles.'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59003r877270_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255330'\n  tag rid: 'SV-255330r877270_rule'\n  tag stig_id: 'ASQL-00-005900'\n  tag gtitle: 'SRG-APP-000118-DB-000059'\n  tag fix_id: 'F-58947r871115_fix'\n  tag satisfies: ['SRG-APP-000118-DB-000059', 'SRG-APP-000121-DB-000202']\n  tag 'documentable'\n  tag cci: ['CCI-000162', 'CCI-001493']\n  tag nist: ['AU-9 a', 'AU-9 a']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255330.rb"},"title":"The audit information produced by Azure SQL Database must be protected from unauthorized read access.","desc":"If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is difficult, if not impossible, to achieve. In addition, access to audit records provides information an attacker could potentially use to his or her advantage.  \n\nTo ensure the veracity of audit data, the information system and/or the application must protect audit information from any and all unauthorized access. This includes read, write, copy, etc.  \n\nThis requirement can be achieved through multiple methods, which will depend upon system architecture and design. Some commonly employed methods include ensuring log files enjoy the proper file system permissions utilizing file system protections and limiting log data location. \n\nAdditionally, applications with user interfaces to audit records must not allow the unfettered manipulation of or access to those records via the application. If the application provides access to the audit data, the application becomes accountable for ensuring that audit information is protected from unauthorized access. SQL Server is an application that is able to view and manipulate audit file data. \n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.\n\n","descriptions":{"default":"If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is difficult, if not impossible, to achieve. In addition, access to audit records provides information an attacker could potentially use to his or her advantage.  \n\nTo ensure the veracity of audit data, the information system and/or the application must protect audit information from any and all unauthorized access. This includes read, write, copy, etc.  \n\nThis requirement can be achieved through multiple methods, which will depend upon system architecture and design. Some commonly employed methods include ensuring log files enjoy the proper file system permissions utilizing file system protections and limiting log data location. \n\nAdditionally, applications with user interfaces to audit records must not allow the unfettered manipulation of or access to those records via the application. If the application provides access to the audit data, the application becomes accountable for ensuring that audit information is protected from unauthorized access. SQL Server is an application that is able to view and manipulate audit file data. \n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.\n\n","check":"To obtain the Azure SQL Database audit file location(s), navigate to the Azure Portal, select the Azure SQL Database, then select \"Auditing\".\n\nReview the storage settings for the audit.\n\nVerify that the audit storage has the correct permissions by doing the following:\n1. Review the Azure roles and users by navigating to the Azure Portal.\n2. Review the Azure Server controlling the Azure SQL Database.\n3. Select \"Access Control (IAM)\".\n4. Select \"Role assignments\" and review the roles assigned to each user.\n5. Select \"Roles\" and then select \"View\" under the \"Details\" column for each role.\n\nAny roles or users with Read permissions to the auditing policy must be documented. If not documented, this is a finding.","fix":"Modify audit permissions to meet the requirement to protect against unauthorized access.\n\nTo review the Azure roles and users, navigate to the Azure Portal and review the Azure Server controlling the Azure SQL Database.\n1. Select \"Access Control (IAM)\".\n2. Select \"Role assignments\" and review the roles assigned to each user.\n3. Select \"Roles\", and then select \"View\" under the Details column for each role.\n4. Remove any undocumented permissions or excessive read permissions to audit storage for user and roles."},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59003r877270_chk","severity":"medium","gid":"V-255330","rid":"SV-255330r877270_rule","stig_id":"ASQL-00-005900","gtitle":"SRG-APP-000118-DB-000059","fix_id":"F-58947r871115_fix","satisfies":["SRG-APP-000118-DB-000059","SRG-APP-000121-DB-000202"],"documentable":null,"cci":["CCI-000162","CCI-001493"],"nist":["AU-9 a","AU-9 a"]}},{"id":"SV-255331","code":"control 'SV-255331' do\n  title 'The audit information produced by Azure SQL Database must be protected from unauthorized modification.'\n  desc 'If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is difficult, if not impossible, to achieve. In addition, access to audit records provides information an attacker could potentially use to his or her advantage.  \n\nTo ensure the veracity of audit data, the information system and/or the application must protect audit information from any and all unauthorized access. This includes read, write, copy, etc.  \n\nThis requirement can be achieved through multiple methods, which will depend upon system architecture and design. Some commonly employed methods include ensuring log files enjoy the proper file system permissions utilizing file system protections and limiting log data location. \n\nAdditionally, applications with user interfaces to audit records should not allow for the unfettered manipulation of, or access to, those records via the application. If the application provides access to the audit data, the application becomes accountable for ensuring that audit information is protected from unauthorized access. SQL Server is an application that is able to view and manipulate audit file data. \n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.'\n  desc 'check', 'Obtain the Azure SQL Database audit file location(s) by navigating to the Azure Portal and selecting the Azure SQL Database, then selecting Auditing.\n\nReview the storage settings for the audit.\n\nVerify that the audit storage has the correct permissions by doing the following:\n1. Navigate to the Azure Portal to review the Azure roles and users. \n2. Review the Azure Server controlling the Azure SQL Database.\n3. Select \"Access Control (IAM)\".\n4. Select \"Role assignments\" and review the roles assigned to each user.\n5. Select \"Roles\", and then select \"View\" under the Details column for each role.\n\nAny roles or users with Write permissions to the auditing policy must be documented. If not, this is a finding.'\n  desc 'fix', 'Modify audit permissions to meet the requirement to protect against unauthorized modification.\n\nIt is recommended to use immutable storage to prevent altering audits once created.\n\nhttps://docs.microsoft.com/en-us/azure/storage/blobs/immutable-storage-overview\n\nTo review the Azure roles and users, navigate to the Azure Portal, and review the Azure Server controlling the Azure SQL Database.\n1. Select \"Access Control (IAM)\".\n2. Select \"Role assignments\" and review the roles assigned to each user.\n3. Select \"Roles\", and then select \"View\" under the Details column for each role.\n4. Remove any undocumented permissions or excessive write permissions to audit storage for user and roles.'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59004r877296_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255331'\n  tag rid: 'SV-255331r877296_rule'\n  tag stig_id: 'ASQL-00-006000'\n  tag gtitle: 'SRG-APP-000119-DB-000060'\n  tag fix_id: 'F-58948r871118_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000163']\n  tag nist: ['AU-9 a']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255331.rb"},"title":"The audit information produced by Azure SQL Database must be protected from unauthorized modification.","desc":"If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is difficult, if not impossible, to achieve. In addition, access to audit records provides information an attacker could potentially use to his or her advantage.  \n\nTo ensure the veracity of audit data, the information system and/or the application must protect audit information from any and all unauthorized access. This includes read, write, copy, etc.  \n\nThis requirement can be achieved through multiple methods, which will depend upon system architecture and design. Some commonly employed methods include ensuring log files enjoy the proper file system permissions utilizing file system protections and limiting log data location. \n\nAdditionally, applications with user interfaces to audit records should not allow for the unfettered manipulation of, or access to, those records via the application. If the application provides access to the audit data, the application becomes accountable for ensuring that audit information is protected from unauthorized access. SQL Server is an application that is able to view and manipulate audit file data. \n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.","descriptions":{"default":"If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is difficult, if not impossible, to achieve. In addition, access to audit records provides information an attacker could potentially use to his or her advantage.  \n\nTo ensure the veracity of audit data, the information system and/or the application must protect audit information from any and all unauthorized access. This includes read, write, copy, etc.  \n\nThis requirement can be achieved through multiple methods, which will depend upon system architecture and design. Some commonly employed methods include ensuring log files enjoy the proper file system permissions utilizing file system protections and limiting log data location. \n\nAdditionally, applications with user interfaces to audit records should not allow for the unfettered manipulation of, or access to, those records via the application. If the application provides access to the audit data, the application becomes accountable for ensuring that audit information is protected from unauthorized access. SQL Server is an application that is able to view and manipulate audit file data. \n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.","check":"Obtain the Azure SQL Database audit file location(s) by navigating to the Azure Portal and selecting the Azure SQL Database, then selecting Auditing.\n\nReview the storage settings for the audit.\n\nVerify that the audit storage has the correct permissions by doing the following:\n1. Navigate to the Azure Portal to review the Azure roles and users. \n2. Review the Azure Server controlling the Azure SQL Database.\n3. Select \"Access Control (IAM)\".\n4. Select \"Role assignments\" and review the roles assigned to each user.\n5. Select \"Roles\", and then select \"View\" under the Details column for each role.\n\nAny roles or users with Write permissions to the auditing policy must be documented. If not, this is a finding.","fix":"Modify audit permissions to meet the requirement to protect against unauthorized modification.\n\nIt is recommended to use immutable storage to prevent altering audits once created.\n\nhttps://docs.microsoft.com/en-us/azure/storage/blobs/immutable-storage-overview\n\nTo review the Azure roles and users, navigate to the Azure Portal, and review the Azure Server controlling the Azure SQL Database.\n1. Select \"Access Control (IAM)\".\n2. Select \"Role assignments\" and review the roles assigned to each user.\n3. Select \"Roles\", and then select \"View\" under the Details column for each role.\n4. Remove any undocumented permissions or excessive write permissions to audit storage for user and roles."},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59004r877296_chk","severity":"medium","gid":"V-255331","rid":"SV-255331r877296_rule","stig_id":"ASQL-00-006000","gtitle":"SRG-APP-000119-DB-000060","fix_id":"F-58948r871118_fix","documentable":null,"cci":["CCI-000163"],"nist":["AU-9 a"]}},{"id":"SV-255332","code":"control 'SV-255332' do\n  title 'The audit information produced by Azure SQL Database must be protected from unauthorized deletion.'\n  desc 'If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.\n\nTo ensure the veracity of audit data, the information system and/or the application must protect audit information from unauthorized deletion. This requirement can be achieved through multiple methods which will depend upon system architecture and design.\n\nSome commonly employed methods include: ensuring log files enjoy the proper file system permissions utilizing file system protections; restricting access; and backing up log data to ensure log data is retained.\n\nApplications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights the user enjoys in order make access decisions regarding the deletion of audit data.\n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.\n\nDeletion of database audit data could mask the theft of, or the unauthorized modification of, sensitive data stored in the database.\n\n'\n  desc 'check', 'Obtain the Azure SQL Database audit file location(s) by navigating to the Azure Portal and selecting the Azure SQL Database, then selecting Auditing.\n\nReview the storage settings for the audit.\n\nVerify that the audit storage has the correct permissions by doing the following:\n1. Navigate to the Azure Portal to review the Azure roles and users. \n2. Review the Azure Server controlling the Azure SQL Database.\n3. Select \"Access Control (IAM)\".\n4. Select \"Role assignments\" and review the roles assigned to each user.\n5. Select \"Roles\", and then select \"View\" under the Details column for each role.\n\nAny roles or users with Write permissions to the auditing policy must be documented. If not, this is a finding.'\n  desc 'fix', 'Modify audit permissions to meet the requirement to protect against unauthorized access.\n\nTo review the Azure roles and users, navigate to the Azure Portal, and review the Azure Server controlling the Azure SQL Database.\n1. Select \"Access Control (IAM)\".\n2. Select \"Role assignments\" and review the roles assigned to each user.\n3. Select \"Roles\", and then select \"View\" under the Details column for each role.\n4. Remove any undocumented permissions or excessive read permissions to audit storage for user and roles.'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59005r877269_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255332'\n  tag rid: 'SV-255332r877269_rule'\n  tag stig_id: 'ASQL-00-006100'\n  tag gtitle: 'SRG-APP-000120-DB-000061'\n  tag fix_id: 'F-58949r871121_fix'\n  tag satisfies: ['SRG-APP-000120-DB-000061', 'SRG-APP-000122-DB-000203', 'SRG-APP-000123-DB-000204']\n  tag 'documentable'\n  tag cci: ['CCI-000164', 'CCI-001494', 'CCI-001495']\n  tag nist: ['AU-9 a', 'AU-9', 'AU-9']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255332.rb"},"title":"The audit information produced by Azure SQL Database must be protected from unauthorized deletion.","desc":"If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.\n\nTo ensure the veracity of audit data, the information system and/or the application must protect audit information from unauthorized deletion. This requirement can be achieved through multiple methods which will depend upon system architecture and design.\n\nSome commonly employed methods include: ensuring log files enjoy the proper file system permissions utilizing file system protections; restricting access; and backing up log data to ensure log data is retained.\n\nApplications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights the user enjoys in order make access decisions regarding the deletion of audit data.\n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.\n\nDeletion of database audit data could mask the theft of, or the unauthorized modification of, sensitive data stored in the database.\n\n","descriptions":{"default":"If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.\n\nTo ensure the veracity of audit data, the information system and/or the application must protect audit information from unauthorized deletion. This requirement can be achieved through multiple methods which will depend upon system architecture and design.\n\nSome commonly employed methods include: ensuring log files enjoy the proper file system permissions utilizing file system protections; restricting access; and backing up log data to ensure log data is retained.\n\nApplications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights the user enjoys in order make access decisions regarding the deletion of audit data.\n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.\n\nDeletion of database audit data could mask the theft of, or the unauthorized modification of, sensitive data stored in the database.\n\n","check":"Obtain the Azure SQL Database audit file location(s) by navigating to the Azure Portal and selecting the Azure SQL Database, then selecting Auditing.\n\nReview the storage settings for the audit.\n\nVerify that the audit storage has the correct permissions by doing the following:\n1. Navigate to the Azure Portal to review the Azure roles and users. \n2. Review the Azure Server controlling the Azure SQL Database.\n3. Select \"Access Control (IAM)\".\n4. Select \"Role assignments\" and review the roles assigned to each user.\n5. Select \"Roles\", and then select \"View\" under the Details column for each role.\n\nAny roles or users with Write permissions to the auditing policy must be documented. If not, this is a finding.","fix":"Modify audit permissions to meet the requirement to protect against unauthorized access.\n\nTo review the Azure roles and users, navigate to the Azure Portal, and review the Azure Server controlling the Azure SQL Database.\n1. Select \"Access Control (IAM)\".\n2. Select \"Role assignments\" and review the roles assigned to each user.\n3. Select \"Roles\", and then select \"View\" under the Details column for each role.\n4. Remove any undocumented permissions or excessive read permissions to audit storage for user and roles."},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59005r877269_chk","severity":"medium","gid":"V-255332","rid":"SV-255332r877269_rule","stig_id":"ASQL-00-006100","gtitle":"SRG-APP-000120-DB-000061","fix_id":"F-58949r871121_fix","satisfies":["SRG-APP-000120-DB-000061","SRG-APP-000122-DB-000203","SRG-APP-000123-DB-000204"],"documentable":null,"cci":["CCI-000164","CCI-001494","CCI-001495"],"nist":["AU-9 a","AU-9","AU-9"]}},{"id":"SV-255333","code":"control 'SV-255333' do\n  title 'Azure SQL Database default demonstration and sample databases, database objects, and applications must be removed.'\n  desc 'Information systems are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).\n\nIt is detrimental for software products to provide, or install by default, functionality exceeding requirements or mission objectives. Examples include, but are not limited to, installing advertising software, demonstrations, or browser plugins not related to requirements or providing a wide array of functionality, not required for every mission, that cannot be disabled.\n\nAzure SQL Database must adhere to the principles of least functionality by providing only essential capabilities.\n\nDemonstration and sample database objects and applications present publicly known attack points for malicious users. These demonstration and sample objects are meant to provide simple examples of coding specific functions and are not developed to prevent vulnerabilities from being introduced to the Azure SQL Database.'\n  desc 'check', 'Review vendor documentation and vendor websites to identify vendor-provided demonstration or sample databases, database applications, objects, and files. \n\nReview the Azure SQL Database to determine if any of the demonstration and sample databases, database applications, or files are installed in the database or are included with the Azure SQL Database.\n\nIf any are present in the database or are included with the Azure SQL Database, this is a finding.'\n  desc 'fix', 'Remove any demonstration and sample databases, database applications, objects, and files from the Azure SQL Database.\n\nDrop Database Syntax: https://docs.microsoft.com/en-us/sql/t-sql/statements/drop-database-transact-sql?view=azuresqldb-current'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59006r873661_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255333'\n  tag rid: 'SV-255333r877268_rule'\n  tag stig_id: 'ASQL-00-006900'\n  tag gtitle: 'SRG-APP-000141-DB-000090'\n  tag fix_id: 'F-58950r877267_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000381']\n  tag nist: ['CM-7 a']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255333.rb"},"title":"Azure SQL Database default demonstration and sample databases, database objects, and applications must be removed.","desc":"Information systems are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).\n\nIt is detrimental for software products to provide, or install by default, functionality exceeding requirements or mission objectives. Examples include, but are not limited to, installing advertising software, demonstrations, or browser plugins not related to requirements or providing a wide array of functionality, not required for every mission, that cannot be disabled.\n\nAzure SQL Database must adhere to the principles of least functionality by providing only essential capabilities.\n\nDemonstration and sample database objects and applications present publicly known attack points for malicious users. These demonstration and sample objects are meant to provide simple examples of coding specific functions and are not developed to prevent vulnerabilities from being introduced to the Azure SQL Database.","descriptions":{"default":"Information systems are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).\n\nIt is detrimental for software products to provide, or install by default, functionality exceeding requirements or mission objectives. Examples include, but are not limited to, installing advertising software, demonstrations, or browser plugins not related to requirements or providing a wide array of functionality, not required for every mission, that cannot be disabled.\n\nAzure SQL Database must adhere to the principles of least functionality by providing only essential capabilities.\n\nDemonstration and sample database objects and applications present publicly known attack points for malicious users. These demonstration and sample objects are meant to provide simple examples of coding specific functions and are not developed to prevent vulnerabilities from being introduced to the Azure SQL Database.","check":"Review vendor documentation and vendor websites to identify vendor-provided demonstration or sample databases, database applications, objects, and files. \n\nReview the Azure SQL Database to determine if any of the demonstration and sample databases, database applications, or files are installed in the database or are included with the Azure SQL Database.\n\nIf any are present in the database or are included with the Azure SQL Database, this is a finding.","fix":"Remove any demonstration and sample databases, database applications, objects, and files from the Azure SQL Database.\n\nDrop Database Syntax: https://docs.microsoft.com/en-us/sql/t-sql/statements/drop-database-transact-sql?view=azuresqldb-current"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59006r873661_chk","severity":"medium","gid":"V-255333","rid":"SV-255333r877268_rule","stig_id":"ASQL-00-006900","gtitle":"SRG-APP-000141-DB-000090","fix_id":"F-58950r877267_fix","documentable":null,"cci":["CCI-000381"],"nist":["CM-7 a"]}},{"id":"SV-255334","code":"control 'SV-255334' do\n  title 'The Azure SQL Database must be configured to prohibit or restrict the use of organization-defined functions, ports, protocols, and/or services, as defined in the PPSM CAL and vulnerability assessments.'\n  desc 'To prevent unauthorized connection of devices, unauthorized transfer of information, or unauthorized tunneling (i.e., embedding of data types within data types), organizations must disable or restrict unused or unnecessary physical and logical ports/protocols/services on information systems.\n\nApplications are capable of providing a wide variety of functions and services. Some of the functions and services provided by default may not be necessary to support essential organizational operations. Additionally, it is sometimes convenient to provide multiple services from a single component (e.g., email and web services); however, doing so increases risk over limiting the services provided by any one component. \n\nTo support the requirements and principles of least functionality, the application must support the organizational requirements providing only essential capabilities and limiting the use of ports, protocols, and/or services to only those required, authorized, and approved to conduct official business or to address authorized quality of life issues.\n\nDatabase Management Systems using ports, protocols, and services deemed unsafe are open to attack through those ports, protocols, and services. This can allow unauthorized access to the database and through the database to other components of the information system.'\n  desc 'check', 'Azure SQL Database must only use approved firewall settings, including disabling public network access. This value is allowed by default in Azure SQL Database and must be disabled if not otherwise documented and approved.\n\nObtain a list of all approved firewall settings from the database documentation. \n \nFrom the Azure Portal Dashboard, click the database, then click \"Set Server Firewall\". Verify that the public network access option is set to disabled.\n\nIf the value is enabled and not specifically approved in the database documentation, this is a finding.'\n  desc 'fix', 'Assign the approved policy to Azure SQL Database.\n1. From the Azure Portal Dashboard, click the \"database\".\n2. Click \"Set Server Firewall\".\n3. Review the public network access option.\n4. Check the box to \"Disable\" public network access.\n5. Click \"Save\".\n\nFor more information about connection policies:\nhttps://docs.microsoft.com/en-us/azure/azure-sql/database/connectivity-architecture'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59007r871126_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255334'\n  tag rid: 'SV-255334r871128_rule'\n  tag stig_id: 'ASQL-00-007700'\n  tag gtitle: 'SRG-APP-000142-DB-000094'\n  tag fix_id: 'F-58951r871127_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000382']\n  tag nist: ['CM-7 b']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255334.rb"},"title":"The Azure SQL Database must be configured to prohibit or restrict the use of organization-defined functions, ports, protocols, and/or services, as defined in the PPSM CAL and vulnerability assessments.","desc":"To prevent unauthorized connection of devices, unauthorized transfer of information, or unauthorized tunneling (i.e., embedding of data types within data types), organizations must disable or restrict unused or unnecessary physical and logical ports/protocols/services on information systems.\n\nApplications are capable of providing a wide variety of functions and services. Some of the functions and services provided by default may not be necessary to support essential organizational operations. Additionally, it is sometimes convenient to provide multiple services from a single component (e.g., email and web services); however, doing so increases risk over limiting the services provided by any one component. \n\nTo support the requirements and principles of least functionality, the application must support the organizational requirements providing only essential capabilities and limiting the use of ports, protocols, and/or services to only those required, authorized, and approved to conduct official business or to address authorized quality of life issues.\n\nDatabase Management Systems using ports, protocols, and services deemed unsafe are open to attack through those ports, protocols, and services. This can allow unauthorized access to the database and through the database to other components of the information system.","descriptions":{"default":"To prevent unauthorized connection of devices, unauthorized transfer of information, or unauthorized tunneling (i.e., embedding of data types within data types), organizations must disable or restrict unused or unnecessary physical and logical ports/protocols/services on information systems.\n\nApplications are capable of providing a wide variety of functions and services. Some of the functions and services provided by default may not be necessary to support essential organizational operations. Additionally, it is sometimes convenient to provide multiple services from a single component (e.g., email and web services); however, doing so increases risk over limiting the services provided by any one component. \n\nTo support the requirements and principles of least functionality, the application must support the organizational requirements providing only essential capabilities and limiting the use of ports, protocols, and/or services to only those required, authorized, and approved to conduct official business or to address authorized quality of life issues.\n\nDatabase Management Systems using ports, protocols, and services deemed unsafe are open to attack through those ports, protocols, and services. This can allow unauthorized access to the database and through the database to other components of the information system.","check":"Azure SQL Database must only use approved firewall settings, including disabling public network access. This value is allowed by default in Azure SQL Database and must be disabled if not otherwise documented and approved.\n\nObtain a list of all approved firewall settings from the database documentation. \n \nFrom the Azure Portal Dashboard, click the database, then click \"Set Server Firewall\". Verify that the public network access option is set to disabled.\n\nIf the value is enabled and not specifically approved in the database documentation, this is a finding.","fix":"Assign the approved policy to Azure SQL Database.\n1. From the Azure Portal Dashboard, click the \"database\".\n2. Click \"Set Server Firewall\".\n3. Review the public network access option.\n4. Check the box to \"Disable\" public network access.\n5. Click \"Save\".\n\nFor more information about connection policies:\nhttps://docs.microsoft.com/en-us/azure/azure-sql/database/connectivity-architecture"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59007r871126_chk","severity":"medium","gid":"V-255334","rid":"SV-255334r871128_rule","stig_id":"ASQL-00-007700","gtitle":"SRG-APP-000142-DB-000094","fix_id":"F-58951r871127_fix","documentable":null,"cci":["CCI-000382"],"nist":["CM-7 b"]}},{"id":"SV-255335","code":"control 'SV-255335' do\n  title 'Azure SQL Database must uniquely identify and authenticate organizational users (or processes acting on behalf of organizational users).'\n  desc 'To ensure accountability and prevent unauthenticated access, organizational users must be identified and authenticated to prevent potential misuse and compromise of the system. \n\nOrganizational users include organizational employees or individuals the organization deems to have equivalent status of employees (e.g., contractors). Organizational users (and any processes acting on behalf of users) must be uniquely identified and authenticated for all accesses, except the following:\n\n(i) Accesses explicitly identified and documented by the organization. Organizations document specific user actions that can be performed on the information system without identification or authentication; and \n\n(ii) Accesses that occur through authorized use of group authenticators without individual authentication. \n\nOrganizations may require unique identification of individuals using shared accounts, for detailed accountability of individual activity.'\n  desc 'check', 'Review Azure SQL Database users to determine whether shared accounts exist. (This does not include the case where Azure SQL Database has a guest or public account that is providing access to publicly available information.) \n\nIf accounts are determined to be shared, determine if individuals are first individually authenticated. Where an application connects to Azure SQL Database using a standard, shared account, ensure it also captures the individual user identification and passes it to Azure SQL Database. \n\nIf individuals are not individually authenticated before using the shared account (e.g., by the operating system or possibly by an application making calls to the database), this is a finding. \n\nIf accounts are determined to be shared, determine if they are directly accessible to end users. If so, this is a finding.'\n  desc 'fix', 'Remove user-accessible shared accounts and use individual user IDs. \n\nIf necessary, use the DROP USER command to remove user-accessible shared accounts. Example provided below.\n\nDROP USER SharedAccount;\n\nhttps://docs.microsoft.com/en-us/sql/t-sql/statements/drop-user-transact-sql'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59008r871129_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255335'\n  tag rid: 'SV-255335r871131_rule'\n  tag stig_id: 'ASQL-00-007800'\n  tag gtitle: 'SRG-APP-000148-DB-000103'\n  tag fix_id: 'F-58952r871130_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000764']\n  tag nist: ['IA-2']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255335.rb"},"title":"Azure SQL Database must uniquely identify and authenticate organizational users (or processes acting on behalf of organizational users).","desc":"To ensure accountability and prevent unauthenticated access, organizational users must be identified and authenticated to prevent potential misuse and compromise of the system. \n\nOrganizational users include organizational employees or individuals the organization deems to have equivalent status of employees (e.g., contractors). Organizational users (and any processes acting on behalf of users) must be uniquely identified and authenticated for all accesses, except the following:\n\n(i) Accesses explicitly identified and documented by the organization. Organizations document specific user actions that can be performed on the information system without identification or authentication; and \n\n(ii) Accesses that occur through authorized use of group authenticators without individual authentication. \n\nOrganizations may require unique identification of individuals using shared accounts, for detailed accountability of individual activity.","descriptions":{"default":"To ensure accountability and prevent unauthenticated access, organizational users must be identified and authenticated to prevent potential misuse and compromise of the system. \n\nOrganizational users include organizational employees or individuals the organization deems to have equivalent status of employees (e.g., contractors). Organizational users (and any processes acting on behalf of users) must be uniquely identified and authenticated for all accesses, except the following:\n\n(i) Accesses explicitly identified and documented by the organization. Organizations document specific user actions that can be performed on the information system without identification or authentication; and \n\n(ii) Accesses that occur through authorized use of group authenticators without individual authentication. \n\nOrganizations may require unique identification of individuals using shared accounts, for detailed accountability of individual activity.","check":"Review Azure SQL Database users to determine whether shared accounts exist. (This does not include the case where Azure SQL Database has a guest or public account that is providing access to publicly available information.) \n\nIf accounts are determined to be shared, determine if individuals are first individually authenticated. Where an application connects to Azure SQL Database using a standard, shared account, ensure it also captures the individual user identification and passes it to Azure SQL Database. \n\nIf individuals are not individually authenticated before using the shared account (e.g., by the operating system or possibly by an application making calls to the database), this is a finding. \n\nIf accounts are determined to be shared, determine if they are directly accessible to end users. If so, this is a finding.","fix":"Remove user-accessible shared accounts and use individual user IDs. \n\nIf necessary, use the DROP USER command to remove user-accessible shared accounts. Example provided below.\n\nDROP USER SharedAccount;\n\nhttps://docs.microsoft.com/en-us/sql/t-sql/statements/drop-user-transact-sql"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59008r871129_chk","severity":"medium","gid":"V-255335","rid":"SV-255335r871131_rule","stig_id":"ASQL-00-007800","gtitle":"SRG-APP-000148-DB-000103","fix_id":"F-58952r871130_fix","documentable":null,"cci":["CCI-000764"],"nist":["IA-2"]}},{"id":"SV-255336","code":"control 'SV-255336' do\n  title 'Azure SQL Database must map the PKI-authenticated identity to an associated user account.'\n  desc 'The DOD standard for authentication is DOD-approved PKI certificates. Once a PKI certificate has been validated, it must be mapped to an Azure SQL Database user account for the authenticated identity to be meaningful to Azure SQL Database and useful for authorization decisions.'\n  desc 'check', 'To verify that Azure Active Directory is configured as the authentication type, use the following PowerShell commands: \n\n$LogicalServerName = \"myServer\" \nGet-AzSqlServer -ServerName $LogicalServerName | Get-AzSqlServerActiveDirectoryOnlyAuthentication\n\nIf AzureADOnlyAuthentication returns False, this is a finding.'\n  desc 'fix', 'To set the Azure Active Directory Administrator, use the following PowerShell command: \n\n$LogicalServerName = \"myServer\" \nSet-AzSqlServerActiveDirectoryAdministrator -ResourceGroupName \"myResourceGroup\" -ServerName $LogicalServerName -DisplayName \"myAADIdentify\"\n\nAzure Active Directory Authentication can be enabled using either PowerShell or the Azure CLI.\n\nTo enable Azure Active Directory Authentication using PowerShell, use the commands below: \n\n######\n###### Sets the AAD Admin in the SQL Server using PowerShell ######\n######\n$LogicalServerName = \"myServer\" \n$ResourceGroup = \"myResourceGroup\"\n$DisplayName = \"<AAD Principal>\" \n$ObjectId = \"<GUID for AAD Principal>\"\n\nSet-AzSqlServerActiveDirectoryAdministrator `\n-ResourceGroupName $ResourceGroup `\n-ServerName $LogicalServerName `\n-DisplayName $DisplayName `\n-ObjectId$ObjectId\n\n#Sets AD Admin Only\nGet-AzSqlServer -ServerName $LogicalServerName `\n| Enable-AzSqlServerActiveDirectoryOnlyAuthentication\n\nTo enable Azure Active Directory Authentication using the Azure CLI, use the commands below:\n\n######\n###### Sets the AAD Admin in the SQL Server using the Azure CLI ######\n######\naz sql server ad-admin create `\n--resource-group $ResourceGroup \n--server $LogicalServerName `\n--display-name $DisplayName `\n--object-id $ObjectId `\n\n#Sets AD Admin Only\naz sql server ad-only-auth enable `\n--resource-group $ResourceGroup `\n--name $LogicalServerName \n\nhttps://docs.microsoft.com/en-us/cli/azure/sql/server/ad-only-auth?view=azure-cli-latest\nhttps://docs.microsoft.com/en-us/azure/azure-sql/database/authentication-aad-configure?tabs=azure-powershell'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59009r877264_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255336'\n  tag rid: 'SV-255336r877266_rule'\n  tag stig_id: 'ASQL-00-008500'\n  tag gtitle: 'SRG-APP-000177-DB-000069'\n  tag fix_id: 'F-58953r877265_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000187']\n  tag nist: ['IA-5 (2) (a) (2)']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255336.rb"},"title":"Azure SQL Database must map the PKI-authenticated identity to an associated user account.","desc":"The DOD standard for authentication is DOD-approved PKI certificates. Once a PKI certificate has been validated, it must be mapped to an Azure SQL Database user account for the authenticated identity to be meaningful to Azure SQL Database and useful for authorization decisions.","descriptions":{"default":"The DOD standard for authentication is DOD-approved PKI certificates. Once a PKI certificate has been validated, it must be mapped to an Azure SQL Database user account for the authenticated identity to be meaningful to Azure SQL Database and useful for authorization decisions.","check":"To verify that Azure Active Directory is configured as the authentication type, use the following PowerShell commands: \n\n$LogicalServerName = \"myServer\" \nGet-AzSqlServer -ServerName $LogicalServerName | Get-AzSqlServerActiveDirectoryOnlyAuthentication\n\nIf AzureADOnlyAuthentication returns False, this is a finding.","fix":"To set the Azure Active Directory Administrator, use the following PowerShell command: \n\n$LogicalServerName = \"myServer\" \nSet-AzSqlServerActiveDirectoryAdministrator -ResourceGroupName \"myResourceGroup\" -ServerName $LogicalServerName -DisplayName \"myAADIdentify\"\n\nAzure Active Directory Authentication can be enabled using either PowerShell or the Azure CLI.\n\nTo enable Azure Active Directory Authentication using PowerShell, use the commands below: \n\n######\n###### Sets the AAD Admin in the SQL Server using PowerShell ######\n######\n$LogicalServerName = \"myServer\" \n$ResourceGroup = \"myResourceGroup\"\n$DisplayName = \"<AAD Principal>\" \n$ObjectId = \"<GUID for AAD Principal>\"\n\nSet-AzSqlServerActiveDirectoryAdministrator `\n-ResourceGroupName $ResourceGroup `\n-ServerName $LogicalServerName `\n-DisplayName $DisplayName `\n-ObjectId$ObjectId\n\n#Sets AD Admin Only\nGet-AzSqlServer -ServerName $LogicalServerName `\n| Enable-AzSqlServerActiveDirectoryOnlyAuthentication\n\nTo enable Azure Active Directory Authentication using the Azure CLI, use the commands below:\n\n######\n###### Sets the AAD Admin in the SQL Server using the Azure CLI ######\n######\naz sql server ad-admin create `\n--resource-group $ResourceGroup \n--server $LogicalServerName `\n--display-name $DisplayName `\n--object-id $ObjectId `\n\n#Sets AD Admin Only\naz sql server ad-only-auth enable `\n--resource-group $ResourceGroup `\n--name $LogicalServerName \n\nhttps://docs.microsoft.com/en-us/cli/azure/sql/server/ad-only-auth?view=azure-cli-latest\nhttps://docs.microsoft.com/en-us/azure/azure-sql/database/authentication-aad-configure?tabs=azure-powershell"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59009r877264_chk","severity":"medium","gid":"V-255336","rid":"SV-255336r877266_rule","stig_id":"ASQL-00-008500","gtitle":"SRG-APP-000177-DB-000069","fix_id":"F-58953r877265_fix","documentable":null,"cci":["CCI-000187"],"nist":["IA-5 (2) (a) (2)"]}},{"id":"SV-255337","code":"control 'SV-255337' do\n  title 'Azure SQL Database must uniquely identify and authenticate nonorganizational users (or processes acting on behalf of nonorganizational users).'\n  desc 'Nonorganizational users include all information system users other than organizational users, which include organizational employees or individuals the organization deems to have equivalent status of employees (e.g., contractors, guest researchers, individuals from allied nations). \n\nNonorganizational users must be uniquely identified and authenticated for all accesses other than those accesses explicitly identified and documented by the organization when related to the use of anonymous access, such as accessing a web server. \n\nAccordingly, a risk assessment is used in determining the authentication needs of the organization. \n\nScalability, practicality, and security are simultaneously considered in balancing the need to ensure ease of use for access to federal information and information systems with the need to protect and adequately mitigate risk to organizational operations, assets, individuals, and other organizations.'\n  desc 'check', 'Review documentation, Azure SQL Database settings, and authentication system settings to determine if nonorganizational users are individually identified and authenticated when logging onto the system. \n\nIf accounts are determined to be shared, determine if individuals are first individually authenticated. Where an application connects to Azure SQL Database using a standard, shared account, ensure that it also captures the individual user identification and passes it to Azure SQL Database. \n\nIf the documentation indicates that this is a public-facing, read-only (from the point of view of public users) database that does not require individual authentication, this is not a finding. \n\nIf nonorganizational users are not uniquely identified and authenticated, this is a finding.'\n  desc 'fix', 'Ensure all logins are uniquely identifiable and authenticate all nonorganizational users who log onto the system. This likely would be done via a combination of Azure Active Directory with unique accounts and the Azure SQL Database by ensuring mapping to individual accounts. Verify server documentation to ensure accounts are documented and unique.'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59010r871135_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255337'\n  tag rid: 'SV-255337r871137_rule'\n  tag stig_id: 'ASQL-00-008800'\n  tag gtitle: 'SRG-APP-000180-DB-000115'\n  tag fix_id: 'F-58954r871136_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000804']\n  tag nist: ['IA-8']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255337.rb"},"title":"Azure SQL Database must uniquely identify and authenticate nonorganizational users (or processes acting on behalf of nonorganizational users).","desc":"Nonorganizational users include all information system users other than organizational users, which include organizational employees or individuals the organization deems to have equivalent status of employees (e.g., contractors, guest researchers, individuals from allied nations). \n\nNonorganizational users must be uniquely identified and authenticated for all accesses other than those accesses explicitly identified and documented by the organization when related to the use of anonymous access, such as accessing a web server. \n\nAccordingly, a risk assessment is used in determining the authentication needs of the organization. \n\nScalability, practicality, and security are simultaneously considered in balancing the need to ensure ease of use for access to federal information and information systems with the need to protect and adequately mitigate risk to organizational operations, assets, individuals, and other organizations.","descriptions":{"default":"Nonorganizational users include all information system users other than organizational users, which include organizational employees or individuals the organization deems to have equivalent status of employees (e.g., contractors, guest researchers, individuals from allied nations). \n\nNonorganizational users must be uniquely identified and authenticated for all accesses other than those accesses explicitly identified and documented by the organization when related to the use of anonymous access, such as accessing a web server. \n\nAccordingly, a risk assessment is used in determining the authentication needs of the organization. \n\nScalability, practicality, and security are simultaneously considered in balancing the need to ensure ease of use for access to federal information and information systems with the need to protect and adequately mitigate risk to organizational operations, assets, individuals, and other organizations.","check":"Review documentation, Azure SQL Database settings, and authentication system settings to determine if nonorganizational users are individually identified and authenticated when logging onto the system. \n\nIf accounts are determined to be shared, determine if individuals are first individually authenticated. Where an application connects to Azure SQL Database using a standard, shared account, ensure that it also captures the individual user identification and passes it to Azure SQL Database. \n\nIf the documentation indicates that this is a public-facing, read-only (from the point of view of public users) database that does not require individual authentication, this is not a finding. \n\nIf nonorganizational users are not uniquely identified and authenticated, this is a finding.","fix":"Ensure all logins are uniquely identifiable and authenticate all nonorganizational users who log onto the system. This likely would be done via a combination of Azure Active Directory with unique accounts and the Azure SQL Database by ensuring mapping to individual accounts. Verify server documentation to ensure accounts are documented and unique."},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59010r871135_chk","severity":"medium","gid":"V-255337","rid":"SV-255337r871137_rule","stig_id":"ASQL-00-008800","gtitle":"SRG-APP-000180-DB-000115","fix_id":"F-58954r871136_fix","documentable":null,"cci":["CCI-000804"],"nist":["IA-8"]}},{"id":"SV-255338","code":"control 'SV-255338' do\n  title 'Azure SQL Database must separate user functionality (including user interface services) from database management functionality.'\n  desc 'Information system management functionality includes functions necessary to administer databases, network components, workstations, or servers and typically requires privileged user access. \n\nThe separation of user functionality from information system management functionality is either physical or logical and is accomplished by using different computers, different central processing units, different instances of the operating system, different network addresses, combinations of these methods, or other methods, as appropriate. \n\nAn example of this type of separation is observed in web administrative interfaces that use separate authentication methods for users of any other information system resources. \n\nThis may include isolating the administrative interface on a different domain and with additional access controls.\n\nIf administrative functionality or information regarding Azure SQL Database management is presented on an interface available for users, information on Azure SQL Database settings may be inadvertently made available to the user.'\n  desc 'check', 'To validate Azure role-based access controls (RBAC) for a specific resource, use the PowerShell script below:\n\n$LogicalServerName = \"myServer\"\n$ResourceScope = Get-AzResource -name $LogicalServerName | Where-Object {$_.ResourceType -eq \"Microsoft.Sql/servers\"} | Select-Object -ExpandProperty ResourceID\n\nGet-AzRoleAssignment | Where-Object {$_.Scope -eq $ResourceScope}\n\nIf a user not assigned information system management responsibilities has membership in any of the following roles, this is a finding:\n\n##SQL DB Contributor\n##SQL Security Manager\n##SQL Server Contributor\n##User Access Administrator\n##Owner\n##Contributor\n##Reader'\n  desc 'fix', 'To remove an Azure RBAC role assignment, use Remove-AzRoleAssignment PowerShell command.\n\nExample:\nRemove-AzRoleAssignment `\n      -SignInName \"myAADIdenity\" `\n      -ResourceGroupName \"myResourceGroup\" `\n      -ResourceName \"myServerName\" `\n      -ResourceType \"Microsoft.Sql/servers\" `\n      -RoleDefinitionName \"myRole\" `'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59011r871138_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255338'\n  tag rid: 'SV-255338r871140_rule'\n  tag stig_id: 'ASQL-00-008900'\n  tag gtitle: 'SRG-APP-000211-DB-000122'\n  tag fix_id: 'F-58955r871139_fix'\n  tag 'documentable'\n  tag cci: ['CCI-001082']\n  tag nist: ['SC-2']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255338.rb"},"title":"Azure SQL Database must separate user functionality (including user interface services) from database management functionality.","desc":"Information system management functionality includes functions necessary to administer databases, network components, workstations, or servers and typically requires privileged user access. \n\nThe separation of user functionality from information system management functionality is either physical or logical and is accomplished by using different computers, different central processing units, different instances of the operating system, different network addresses, combinations of these methods, or other methods, as appropriate. \n\nAn example of this type of separation is observed in web administrative interfaces that use separate authentication methods for users of any other information system resources. \n\nThis may include isolating the administrative interface on a different domain and with additional access controls.\n\nIf administrative functionality or information regarding Azure SQL Database management is presented on an interface available for users, information on Azure SQL Database settings may be inadvertently made available to the user.","descriptions":{"default":"Information system management functionality includes functions necessary to administer databases, network components, workstations, or servers and typically requires privileged user access. \n\nThe separation of user functionality from information system management functionality is either physical or logical and is accomplished by using different computers, different central processing units, different instances of the operating system, different network addresses, combinations of these methods, or other methods, as appropriate. \n\nAn example of this type of separation is observed in web administrative interfaces that use separate authentication methods for users of any other information system resources. \n\nThis may include isolating the administrative interface on a different domain and with additional access controls.\n\nIf administrative functionality or information regarding Azure SQL Database management is presented on an interface available for users, information on Azure SQL Database settings may be inadvertently made available to the user.","check":"To validate Azure role-based access controls (RBAC) for a specific resource, use the PowerShell script below:\n\n$LogicalServerName = \"myServer\"\n$ResourceScope = Get-AzResource -name $LogicalServerName | Where-Object {$_.ResourceType -eq \"Microsoft.Sql/servers\"} | Select-Object -ExpandProperty ResourceID\n\nGet-AzRoleAssignment | Where-Object {$_.Scope -eq $ResourceScope}\n\nIf a user not assigned information system management responsibilities has membership in any of the following roles, this is a finding:\n\n##SQL DB Contributor\n##SQL Security Manager\n##SQL Server Contributor\n##User Access Administrator\n##Owner\n##Contributor\n##Reader","fix":"To remove an Azure RBAC role assignment, use Remove-AzRoleAssignment PowerShell command.\n\nExample:\nRemove-AzRoleAssignment `\n      -SignInName \"myAADIdenity\" `\n      -ResourceGroupName \"myResourceGroup\" `\n      -ResourceName \"myServerName\" `\n      -ResourceType \"Microsoft.Sql/servers\" `\n      -RoleDefinitionName \"myRole\" `"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59011r871138_chk","severity":"medium","gid":"V-255338","rid":"SV-255338r871140_rule","stig_id":"ASQL-00-008900","gtitle":"SRG-APP-000211-DB-000122","fix_id":"F-58955r871139_fix","documentable":null,"cci":["CCI-001082"],"nist":["SC-2"]}},{"id":"SV-255339","code":"control 'SV-255339' do\n  title 'Azure SQL Database must protect the confidentiality and integrity of all information at rest.'\n  desc 'This control is intended to address the confidentiality and integrity of information at rest in nonmobile devices and covers user information and system information. Information at rest refers to the state of information when it is located on a secondary storage device (e.g., disk drive, tape drive) within an organizational information system. Applications and application users generate information throughout the course of their application use. \n\nUser data generated, as well as application-specific configuration data, needs to be protected. Organizations may choose to employ different mechanisms to achieve confidentiality and integrity protections, as appropriate. \n\nIf the confidentiality and integrity of application data is not protected, the data will be open to compromise and unauthorized modification.'\n  desc 'check', 'Run the PowerShell command below to determine database encryption status:\n$LogicalServerName = \"myServerName\"\n$RGname = \"myRG\"\n$DBName = \"myDatabaseName\"\nGet-AzSqlDatabaseTransparentDataEncryption -ServerName $LogicalServerName -ResourceGroupName $RGname -DatabaseName $Dbname\n\nIf the application owner and Authorizing Official have determined that encryption of data at rest is required and the \"EncryptionState\" column returns \"UNENCRYPTED\" or \"DECRYPTION_IN_PROGRESS\", this is a finding.'\n  desc 'fix', 'If Azure SQL Database Transparent Data Encryption is disabled, use the Set-AzSqlDatabaseTransparentDataEncryption command to enable.\n\n$LogicalServerName = \"myServerName\"\n$RGname = \"myRG\"\n$DBName = \"myDatabaseName\"\n$TDEstate = \"Enabled\"\nSet-AzSqlDatabaseTransparentDataEncryption -ResourceGroupName $RGname -ServerName $LogicalServerName -DatabaseName $DBname -State $TDEstate'\n  impact 0.7\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59012r871141_chk'\n  tag severity: 'high'\n  tag gid: 'V-255339'\n  tag rid: 'SV-255339r871143_rule'\n  tag stig_id: 'ASQL-00-009500'\n  tag gtitle: 'SRG-APP-000231-DB-000154'\n  tag fix_id: 'F-58956r871142_fix'\n  tag 'documentable'\n  tag cci: ['CCI-001199']\n  tag nist: ['SC-28']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255339.rb"},"title":"Azure SQL Database must protect the confidentiality and integrity of all information at rest.","desc":"This control is intended to address the confidentiality and integrity of information at rest in nonmobile devices and covers user information and system information. Information at rest refers to the state of information when it is located on a secondary storage device (e.g., disk drive, tape drive) within an organizational information system. Applications and application users generate information throughout the course of their application use. \n\nUser data generated, as well as application-specific configuration data, needs to be protected. Organizations may choose to employ different mechanisms to achieve confidentiality and integrity protections, as appropriate. \n\nIf the confidentiality and integrity of application data is not protected, the data will be open to compromise and unauthorized modification.","descriptions":{"default":"This control is intended to address the confidentiality and integrity of information at rest in nonmobile devices and covers user information and system information. Information at rest refers to the state of information when it is located on a secondary storage device (e.g., disk drive, tape drive) within an organizational information system. Applications and application users generate information throughout the course of their application use. \n\nUser data generated, as well as application-specific configuration data, needs to be protected. Organizations may choose to employ different mechanisms to achieve confidentiality and integrity protections, as appropriate. \n\nIf the confidentiality and integrity of application data is not protected, the data will be open to compromise and unauthorized modification.","check":"Run the PowerShell command below to determine database encryption status:\n$LogicalServerName = \"myServerName\"\n$RGname = \"myRG\"\n$DBName = \"myDatabaseName\"\nGet-AzSqlDatabaseTransparentDataEncryption -ServerName $LogicalServerName -ResourceGroupName $RGname -DatabaseName $Dbname\n\nIf the application owner and Authorizing Official have determined that encryption of data at rest is required and the \"EncryptionState\" column returns \"UNENCRYPTED\" or \"DECRYPTION_IN_PROGRESS\", this is a finding.","fix":"If Azure SQL Database Transparent Data Encryption is disabled, use the Set-AzSqlDatabaseTransparentDataEncryption command to enable.\n\n$LogicalServerName = \"myServerName\"\n$RGname = \"myRG\"\n$DBName = \"myDatabaseName\"\n$TDEstate = \"Enabled\"\nSet-AzSqlDatabaseTransparentDataEncryption -ResourceGroupName $RGname -ServerName $LogicalServerName -DatabaseName $DBname -State $TDEstate"},"impact":0.7,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59012r871141_chk","severity":"high","gid":"V-255339","rid":"SV-255339r871143_rule","stig_id":"ASQL-00-009500","gtitle":"SRG-APP-000231-DB-000154","fix_id":"F-58956r871142_fix","documentable":null,"cci":["CCI-001199"],"nist":["SC-28"]}},{"id":"SV-255340","code":"control 'SV-255340' do\n  title 'Azure SQL Database must automatically terminate a user session after organization-defined conditions or trigger events requiring session disconnect.'\n  desc \"This addresses the termination of user-initiated logical sessions in contrast to the termination of network connections that are associated with communications sessions (i.e., network disconnect). A logical session (for local, network, and remote access) is initiated whenever a user (or process acting on behalf of a user) accesses an organizational information system. Such user sessions can be terminated (and thus terminate user access) without terminating network sessions. \n\nSession termination ends all processes associated with a user's logical session except those batch processes/jobs that are specifically created by the user (i.e., session owner) to continue after the session is terminated. \n\nConditions or trigger events requiring automatic session termination can include, for example, organization-defined periods of user inactivity, targeted responses to certain types of incidents, and time-of-day restrictions on information system use.\n\nThis capability is typically reserved for specific cases where the system owner, data owner, or organization requires additional assurance.\"\n  desc 'check', \"Review system documentation to obtain the organization's definition of circumstances requiring automatic session termination. If the documentation explicitly states that such termination is not required or is prohibited, this is not a finding.\n\nIf the system owner, data owner, or organization requires additional assurance, this is a finding.\"\n  desc 'fix', 'Determine the situations when a user-initiated database session must be terminated.\n\nNote: The user running the commands shown below requires the KILL DATABASE CONNECTION permission. The server-level principal login has the KILL DATABASE CONNECTION.\n\nIn the SQL Server Management Studio ,as an authenticated user connected to master database, run the following command to list all user sessions:\n\nSELECT c.session_id,host_name,program_name,nt_domain, login_name, connect_time, last_request_end_time \nFROM sys.dm_exec_sessions AS s\nJOIN sys.dm_exec_connections AS c ON s.session_id= c.session_id;\n\nhttps://docs.microsoft.com/en-us/sql/relational-databases/system-dynamic-management-views/sys-dm-exec-sessions-transact-sql?view=azuresqldb-current\n\nExample output:\n76        MyComputer    Microsoft SQL Server Management Studio - Transact-SQL IntelliSense NULL            MyLogin           2022-08-26 20:08:38.170         2022-08-26 20:22:39.697\n\nFrom the output identify the names of users whose session_ids should be terminated. Using the user for each session to be terminated, run the following command (still in SQL Server Management Studio).\n\nExample to terminate user \"MyLogin\" sessions from example output:\nKILL <SPID> - where <SPID> is the Session_ID of the session you want to terminate.\n\nReference:\nhttps://docs.microsoft.com/en-us/sql/t-sql/language-elements/kill-transact-sql?view=azuresqldb-current'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59013r871144_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255340'\n  tag rid: 'SV-255340r871146_rule'\n  tag stig_id: 'ASQL-00-010200'\n  tag gtitle: 'SRG-APP-000295-DB-000305'\n  tag fix_id: 'F-58957r871145_fix'\n  tag 'documentable'\n  tag cci: ['CCI-002361']\n  tag nist: ['AC-12']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255340.rb"},"title":"Azure SQL Database must automatically terminate a user session after organization-defined conditions or trigger events requiring session disconnect.","desc":"This addresses the termination of user-initiated logical sessions in contrast to the termination of network connections that are associated with communications sessions (i.e., network disconnect). A logical session (for local, network, and remote access) is initiated whenever a user (or process acting on behalf of a user) accesses an organizational information system. Such user sessions can be terminated (and thus terminate user access) without terminating network sessions. \n\nSession termination ends all processes associated with a user's logical session except those batch processes/jobs that are specifically created by the user (i.e., session owner) to continue after the session is terminated. \n\nConditions or trigger events requiring automatic session termination can include, for example, organization-defined periods of user inactivity, targeted responses to certain types of incidents, and time-of-day restrictions on information system use.\n\nThis capability is typically reserved for specific cases where the system owner, data owner, or organization requires additional assurance.","descriptions":{"default":"This addresses the termination of user-initiated logical sessions in contrast to the termination of network connections that are associated with communications sessions (i.e., network disconnect). A logical session (for local, network, and remote access) is initiated whenever a user (or process acting on behalf of a user) accesses an organizational information system. Such user sessions can be terminated (and thus terminate user access) without terminating network sessions. \n\nSession termination ends all processes associated with a user's logical session except those batch processes/jobs that are specifically created by the user (i.e., session owner) to continue after the session is terminated. \n\nConditions or trigger events requiring automatic session termination can include, for example, organization-defined periods of user inactivity, targeted responses to certain types of incidents, and time-of-day restrictions on information system use.\n\nThis capability is typically reserved for specific cases where the system owner, data owner, or organization requires additional assurance.","check":"Review system documentation to obtain the organization's definition of circumstances requiring automatic session termination. If the documentation explicitly states that such termination is not required or is prohibited, this is not a finding.\n\nIf the system owner, data owner, or organization requires additional assurance, this is a finding.","fix":"Determine the situations when a user-initiated database session must be terminated.\n\nNote: The user running the commands shown below requires the KILL DATABASE CONNECTION permission. The server-level principal login has the KILL DATABASE CONNECTION.\n\nIn the SQL Server Management Studio ,as an authenticated user connected to master database, run the following command to list all user sessions:\n\nSELECT c.session_id,host_name,program_name,nt_domain, login_name, connect_time, last_request_end_time \nFROM sys.dm_exec_sessions AS s\nJOIN sys.dm_exec_connections AS c ON s.session_id= c.session_id;\n\nhttps://docs.microsoft.com/en-us/sql/relational-databases/system-dynamic-management-views/sys-dm-exec-sessions-transact-sql?view=azuresqldb-current\n\nExample output:\n76        MyComputer    Microsoft SQL Server Management Studio - Transact-SQL IntelliSense NULL            MyLogin           2022-08-26 20:08:38.170         2022-08-26 20:22:39.697\n\nFrom the output identify the names of users whose session_ids should be terminated. Using the user for each session to be terminated, run the following command (still in SQL Server Management Studio).\n\nExample to terminate user \"MyLogin\" sessions from example output:\nKILL <SPID> - where <SPID> is the Session_ID of the session you want to terminate.\n\nReference:\nhttps://docs.microsoft.com/en-us/sql/t-sql/language-elements/kill-transact-sql?view=azuresqldb-current"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59013r871144_chk","severity":"medium","gid":"V-255340","rid":"SV-255340r871146_rule","stig_id":"ASQL-00-010200","gtitle":"SRG-APP-000295-DB-000305","fix_id":"F-58957r871145_fix","documentable":null,"cci":["CCI-002361"],"nist":["AC-12"]}},{"id":"SV-255341","code":"control 'SV-255341' do\n  title 'Azure SQL Database must prevent nonprivileged users from executing privileged functions, to include disabling, circumventing, or altering implemented security safeguards/countermeasures.'\n  desc 'Preventing nonprivileged users from executing privileged functions mitigates the risk that unauthorized individuals or processes may gain unnecessary access to information or privileges. \n\nSystem documentation must include a definition of the functionality considered privileged. \n\nDepending on circumstances, privileged functions can include, for example, establishing accounts, performing system integrity checks, or administering cryptographic key management activities. Nonprivileged users are individuals that do not possess appropriate authorizations. Circumventing intrusion detection and prevention mechanisms or malicious code protection mechanisms are examples of privileged functions that require protection from Nonprivileged users. \n\nA privileged function in Azure SQL Database context is any operation that modifies the structure of the database, its built-in logic, or its security settings. This would include all Data Definition Language (DDL) statements and all security-related statements. \n\nIn an Azure SQL Database environment, it encompasses, but is not necessarily limited to: \n\nCREATE \nALTER \nDROP \nGRANT \nREVOKE \nDENY \n\nThere may also be Data Manipulation Language (DML) statements that, subject to context, should be regarded as privileged. \n\nPossible examples include: \n\nTRUNCATE TABLE; \nDELETE, or \nDELETE affecting more than n rows, for some n, or \nDELETE without a WHERE clause; \n\nUPDATE or \nUPDATE affecting more than n rows, for some n, or \nUPDATE without a WHERE clause; \n\nAny SELECT, INSERT, UPDATE, or DELETE to an application-defined security table executed by other than a security principal. \n\nDepending on the capabilities of Azure SQL Database and the design of the database and associated applications, the prevention of unauthorized use of privileged functions may be achieved by means of Azure SQL Database security features, database triggers, other mechanisms, or a combination of these.'\n  desc 'check', 'Review Azure SQL Database securables and built-in role membership to ensure only authorized users have privileged access and the ability to create server-level objects and grant permissions to themselves or others. \n\nReview the system documentation to determine the required levels of protection for Azure SQL Database securables.\n\nReview the permissions in place in the control and data planes in Azure SQL Database. If the actual permissions do not match the documented requirements, this is a finding. \n\nEnsure only the documented and approved logins have privileged functions in Azure SQL Database. \n\nIf the current configuration does not match the documented baseline, this is a finding.'\n  desc 'fix', 'Restrict permissions to Azure SQL Database securables to only authorized users.'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59014r871147_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255341'\n  tag rid: 'SV-255341r871149_rule'\n  tag stig_id: 'ASQL-00-010400'\n  tag gtitle: 'SRG-APP-000340-DB-000304'\n  tag fix_id: 'F-58958r871148_fix'\n  tag 'documentable'\n  tag cci: ['CCI-002235']\n  tag nist: ['AC-6 (10)']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255341.rb"},"title":"Azure SQL Database must prevent nonprivileged users from executing privileged functions, to include disabling, circumventing, or altering implemented security safeguards/countermeasures.","desc":"Preventing nonprivileged users from executing privileged functions mitigates the risk that unauthorized individuals or processes may gain unnecessary access to information or privileges. \n\nSystem documentation must include a definition of the functionality considered privileged. \n\nDepending on circumstances, privileged functions can include, for example, establishing accounts, performing system integrity checks, or administering cryptographic key management activities. Nonprivileged users are individuals that do not possess appropriate authorizations. Circumventing intrusion detection and prevention mechanisms or malicious code protection mechanisms are examples of privileged functions that require protection from Nonprivileged users. \n\nA privileged function in Azure SQL Database context is any operation that modifies the structure of the database, its built-in logic, or its security settings. This would include all Data Definition Language (DDL) statements and all security-related statements. \n\nIn an Azure SQL Database environment, it encompasses, but is not necessarily limited to: \n\nCREATE \nALTER \nDROP \nGRANT \nREVOKE \nDENY \n\nThere may also be Data Manipulation Language (DML) statements that, subject to context, should be regarded as privileged. \n\nPossible examples include: \n\nTRUNCATE TABLE; \nDELETE, or \nDELETE affecting more than n rows, for some n, or \nDELETE without a WHERE clause; \n\nUPDATE or \nUPDATE affecting more than n rows, for some n, or \nUPDATE without a WHERE clause; \n\nAny SELECT, INSERT, UPDATE, or DELETE to an application-defined security table executed by other than a security principal. \n\nDepending on the capabilities of Azure SQL Database and the design of the database and associated applications, the prevention of unauthorized use of privileged functions may be achieved by means of Azure SQL Database security features, database triggers, other mechanisms, or a combination of these.","descriptions":{"default":"Preventing nonprivileged users from executing privileged functions mitigates the risk that unauthorized individuals or processes may gain unnecessary access to information or privileges. \n\nSystem documentation must include a definition of the functionality considered privileged. \n\nDepending on circumstances, privileged functions can include, for example, establishing accounts, performing system integrity checks, or administering cryptographic key management activities. Nonprivileged users are individuals that do not possess appropriate authorizations. Circumventing intrusion detection and prevention mechanisms or malicious code protection mechanisms are examples of privileged functions that require protection from Nonprivileged users. \n\nA privileged function in Azure SQL Database context is any operation that modifies the structure of the database, its built-in logic, or its security settings. This would include all Data Definition Language (DDL) statements and all security-related statements. \n\nIn an Azure SQL Database environment, it encompasses, but is not necessarily limited to: \n\nCREATE \nALTER \nDROP \nGRANT \nREVOKE \nDENY \n\nThere may also be Data Manipulation Language (DML) statements that, subject to context, should be regarded as privileged. \n\nPossible examples include: \n\nTRUNCATE TABLE; \nDELETE, or \nDELETE affecting more than n rows, for some n, or \nDELETE without a WHERE clause; \n\nUPDATE or \nUPDATE affecting more than n rows, for some n, or \nUPDATE without a WHERE clause; \n\nAny SELECT, INSERT, UPDATE, or DELETE to an application-defined security table executed by other than a security principal. \n\nDepending on the capabilities of Azure SQL Database and the design of the database and associated applications, the prevention of unauthorized use of privileged functions may be achieved by means of Azure SQL Database security features, database triggers, other mechanisms, or a combination of these.","check":"Review Azure SQL Database securables and built-in role membership to ensure only authorized users have privileged access and the ability to create server-level objects and grant permissions to themselves or others. \n\nReview the system documentation to determine the required levels of protection for Azure SQL Database securables.\n\nReview the permissions in place in the control and data planes in Azure SQL Database. If the actual permissions do not match the documented requirements, this is a finding. \n\nEnsure only the documented and approved logins have privileged functions in Azure SQL Database. \n\nIf the current configuration does not match the documented baseline, this is a finding.","fix":"Restrict permissions to Azure SQL Database securables to only authorized users."},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59014r871147_chk","severity":"medium","gid":"V-255341","rid":"SV-255341r871149_rule","stig_id":"ASQL-00-010400","gtitle":"SRG-APP-000340-DB-000304","fix_id":"F-58958r871148_fix","documentable":null,"cci":["CCI-002235"],"nist":["AC-6 (10)"]}},{"id":"SV-255342","code":"control 'SV-255342' do\n  title 'Azure SQL Database must utilize centralized management of the content captured in audit records generated by all components of the DBMS.'\n  desc 'Without the ability to centrally manage the content captured in the audit records, identification, troubleshooting, and correlation of suspicious behavior would be difficult and could lead to a delayed or incomplete analysis of an ongoing attack.\n\nThe content captured in audit records must be managed from a central location (necessitating automation). Centralized management of audit records and logs provides for efficiency in maintenance and management of records, as well as the backup and archiving of those records. \n\nAzure SQL Database may write audit records to database tables, to files in the file system, to other kinds of local repository, or directly to a centralized log management system. Whatever the method used, it must be compatible with offloading the records to the centralized system.'\n  desc 'check', 'Review the system documentation for a description of how audit records are offloaded and how local audit log space is managed.  \n \nFrom the Azure Portal Azure SQL Database page, select Auditing. Review the audit storage methods in use.\n\nIf Azure SQL Database audit records are not written directly to or systematically transferred to a centralized log management system, this is a finding.'\n  desc 'fix', 'Configure Azure SQL Database audit records to be written directly to a centralized audit storage location.\n\nhttps://docs.microsoft.com/en-us/azure/azure-sql/database/auditing-overview#audit-storage-destination\n\nTo configure writing audit logs to a storage account, select \"Storage\" in the \"Auditing\" section. \n\nSelect the Azure storage account where logs will be saved, and then open Advanced properties to select the retention period.\n \nClick \"Save\". \n\nLogs older than the retention period are deleted.'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59015r871150_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255342'\n  tag rid: 'SV-255342r871152_rule'\n  tag stig_id: 'ASQL-00-010700'\n  tag gtitle: 'SRG-APP-000356-DB-000314'\n  tag fix_id: 'F-58959r871151_fix'\n  tag 'documentable'\n  tag cci: ['CCI-001844']\n  tag nist: ['AU-3 (2)']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255342.rb"},"title":"Azure SQL Database must utilize centralized management of the content captured in audit records generated by all components of the DBMS.","desc":"Without the ability to centrally manage the content captured in the audit records, identification, troubleshooting, and correlation of suspicious behavior would be difficult and could lead to a delayed or incomplete analysis of an ongoing attack.\n\nThe content captured in audit records must be managed from a central location (necessitating automation). Centralized management of audit records and logs provides for efficiency in maintenance and management of records, as well as the backup and archiving of those records. \n\nAzure SQL Database may write audit records to database tables, to files in the file system, to other kinds of local repository, or directly to a centralized log management system. Whatever the method used, it must be compatible with offloading the records to the centralized system.","descriptions":{"default":"Without the ability to centrally manage the content captured in the audit records, identification, troubleshooting, and correlation of suspicious behavior would be difficult and could lead to a delayed or incomplete analysis of an ongoing attack.\n\nThe content captured in audit records must be managed from a central location (necessitating automation). Centralized management of audit records and logs provides for efficiency in maintenance and management of records, as well as the backup and archiving of those records. \n\nAzure SQL Database may write audit records to database tables, to files in the file system, to other kinds of local repository, or directly to a centralized log management system. Whatever the method used, it must be compatible with offloading the records to the centralized system.","check":"Review the system documentation for a description of how audit records are offloaded and how local audit log space is managed.  \n \nFrom the Azure Portal Azure SQL Database page, select Auditing. Review the audit storage methods in use.\n\nIf Azure SQL Database audit records are not written directly to or systematically transferred to a centralized log management system, this is a finding.","fix":"Configure Azure SQL Database audit records to be written directly to a centralized audit storage location.\n\nhttps://docs.microsoft.com/en-us/azure/azure-sql/database/auditing-overview#audit-storage-destination\n\nTo configure writing audit logs to a storage account, select \"Storage\" in the \"Auditing\" section. \n\nSelect the Azure storage account where logs will be saved, and then open Advanced properties to select the retention period.\n \nClick \"Save\". \n\nLogs older than the retention period are deleted."},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59015r871150_chk","severity":"medium","gid":"V-255342","rid":"SV-255342r871152_rule","stig_id":"ASQL-00-010700","gtitle":"SRG-APP-000356-DB-000314","fix_id":"F-58959r871151_fix","documentable":null,"cci":["CCI-001844"],"nist":["AU-3 (2)"]}},{"id":"SV-255343","code":"control 'SV-255343' do\n  title 'Azure SQL Database must be able to allocate audit record storage capacity in accordance with organization-defined audit record storage requirements.'\n  desc 'To ensure sufficient storage capacity for the audit logs, the Azure SQL Database must be able to allocate audit record storage capacity. Although another requirement (SRG-APP-000515-DB-000318) mandates that audit data be offloaded to a centralized log management system, it remains necessary to provide space to serve as a buffer against outages and capacity limits of the offloading mechanism.\n\nThe task of allocating audit record storage capacity is usually performed during initial setup of Azure SQL Database and is closely associated with the DBA and system administrator roles. \nThe DBA or system administrator will usually coordinate the allocation of physical drive space with the application owner/installer and the application will prompt the installer to provide the capacity information, the physical location of the disk, or both.\n\nIn determining the capacity requirements, consider such factors as the maximum storage account size for blob data is 5PB, the total number of users; expected number of concurrent users during busy periods; number and type of events being monitored; types and amounts of data being captured; the frequency/speed with which audit records are offloaded to the central log management system; and any limitations that exist on the Azure storage accounts ability to reuse the space formerly occupied by offloaded records.'\n  desc 'check', 'Refer to the online documentation for the Azure SQL Database Audit configuration or the online documentation for the PowerShell cmdlet Get-AzSQLServerAudit using the links provided below. \n\nhttps://docs.microsoft.com/en-us/azure/azure-sql/database/auditing-overview#manage-auditing\n\nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/get-azsqlserveraudit?view=azps-6.4.0\n\nUse the following PowerShell script to check for the proper configuration settings:\n\n$FormatEnumerationLimit=-1\nGet-AzSqlServerAudit -ResourceGroupName myResourceGroupName -ServerName myservername\n\nIf the AuditActionGroup does not contain the correct entries needed for the auditing requirements or if the BlobStorageTargetState, EventHubTargetState, or LogAnalyticsTargetState is disabled from the output of the PowerShell above, this is a finding.'\n  desc 'fix', 'Review the Azure SQL Database Audit file configuration information. \nhttps://docs.microsoft.com/en-us/azure/azure-sql/database/auditing-overview#manage-auditing\n\nThere are multiple options for configuring where audit logs will be written. Logs can be written to an Azure Blob Storage with Azure storage account, to a Log Analytics workspace, or to Event Hub. Any combination of these options can be configured, and audit logs will be written to each. \n\nWhen writing logs to an Azure Storage account, the default value for retention period is \"0\" (unlimited retention).'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59016r877294_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255343'\n  tag rid: 'SV-255343r877294_rule'\n  tag stig_id: 'ASQL-00-010900'\n  tag gtitle: 'SRG-APP-000357-DB-000316'\n  tag fix_id: 'F-58960r871154_fix'\n  tag 'documentable'\n  tag cci: ['CCI-001849']\n  tag nist: ['AU-4']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255343.rb"},"title":"Azure SQL Database must be able to allocate audit record storage capacity in accordance with organization-defined audit record storage requirements.","desc":"To ensure sufficient storage capacity for the audit logs, the Azure SQL Database must be able to allocate audit record storage capacity. Although another requirement (SRG-APP-000515-DB-000318) mandates that audit data be offloaded to a centralized log management system, it remains necessary to provide space to serve as a buffer against outages and capacity limits of the offloading mechanism.\n\nThe task of allocating audit record storage capacity is usually performed during initial setup of Azure SQL Database and is closely associated with the DBA and system administrator roles. \nThe DBA or system administrator will usually coordinate the allocation of physical drive space with the application owner/installer and the application will prompt the installer to provide the capacity information, the physical location of the disk, or both.\n\nIn determining the capacity requirements, consider such factors as the maximum storage account size for blob data is 5PB, the total number of users; expected number of concurrent users during busy periods; number and type of events being monitored; types and amounts of data being captured; the frequency/speed with which audit records are offloaded to the central log management system; and any limitations that exist on the Azure storage accounts ability to reuse the space formerly occupied by offloaded records.","descriptions":{"default":"To ensure sufficient storage capacity for the audit logs, the Azure SQL Database must be able to allocate audit record storage capacity. Although another requirement (SRG-APP-000515-DB-000318) mandates that audit data be offloaded to a centralized log management system, it remains necessary to provide space to serve as a buffer against outages and capacity limits of the offloading mechanism.\n\nThe task of allocating audit record storage capacity is usually performed during initial setup of Azure SQL Database and is closely associated with the DBA and system administrator roles. \nThe DBA or system administrator will usually coordinate the allocation of physical drive space with the application owner/installer and the application will prompt the installer to provide the capacity information, the physical location of the disk, or both.\n\nIn determining the capacity requirements, consider such factors as the maximum storage account size for blob data is 5PB, the total number of users; expected number of concurrent users during busy periods; number and type of events being monitored; types and amounts of data being captured; the frequency/speed with which audit records are offloaded to the central log management system; and any limitations that exist on the Azure storage accounts ability to reuse the space formerly occupied by offloaded records.","check":"Refer to the online documentation for the Azure SQL Database Audit configuration or the online documentation for the PowerShell cmdlet Get-AzSQLServerAudit using the links provided below. \n\nhttps://docs.microsoft.com/en-us/azure/azure-sql/database/auditing-overview#manage-auditing\n\nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/get-azsqlserveraudit?view=azps-6.4.0\n\nUse the following PowerShell script to check for the proper configuration settings:\n\n$FormatEnumerationLimit=-1\nGet-AzSqlServerAudit -ResourceGroupName myResourceGroupName -ServerName myservername\n\nIf the AuditActionGroup does not contain the correct entries needed for the auditing requirements or if the BlobStorageTargetState, EventHubTargetState, or LogAnalyticsTargetState is disabled from the output of the PowerShell above, this is a finding.","fix":"Review the Azure SQL Database Audit file configuration information. \nhttps://docs.microsoft.com/en-us/azure/azure-sql/database/auditing-overview#manage-auditing\n\nThere are multiple options for configuring where audit logs will be written. Logs can be written to an Azure Blob Storage with Azure storage account, to a Log Analytics workspace, or to Event Hub. Any combination of these options can be configured, and audit logs will be written to each. \n\nWhen writing logs to an Azure Storage account, the default value for retention period is \"0\" (unlimited retention)."},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59016r877294_chk","severity":"medium","gid":"V-255343","rid":"SV-255343r877294_rule","stig_id":"ASQL-00-010900","gtitle":"SRG-APP-000357-DB-000316","fix_id":"F-58960r871154_fix","documentable":null,"cci":["CCI-001849"],"nist":["AU-4"]}},{"id":"SV-255344","code":"control 'SV-255344' do\n  title 'Azure SQL Database must provide a warning to appropriate support staff when allocated audit record storage volume reaches 75 percent of maximum audit record storage capacity.'\n  desc 'Auditing for Azure SQL Database tracks database events and writes them to an audit log in the Azure storage account, Log Analytics workspace, or Event Hubs.\n\nUnder normal conditions, the audit space allocated by an Azure Storage account can grow quite large.\nSince a requirement exists to halt processing upon audit failure, a service outage would result.'\n  desc 'check', 'Azure SQL Database must provide notice upon audit storage reaching capacity.\n \nIf no alert exists to notify support staff in the event the SQL Audit storage reaches 75 percent, this is a finding.\n\nVerify if an Azure Rule exists with the following command example:\n\nGet-AzAlertRule\n   -ResourceGroupName <String>\n   -Name <String>\n   [-DetailedOutput]\n   [-DefaultProfile <IAzureContextContainer>]\n   [<CommonParameters>]\n\nThe Get-AzAlertRule cmdlet gets an alert rule by its name or URI, or all alert rules from a specified resource group.\n\nIf the monitoring or alert configuration is missing a rule that alerts if the storage account is 75 percent of maximum capacity, this is a finding.'\n  desc 'fix', 'Utilize Alerts in Microsoft Azure Monitoring and/or third-party tools to configure the system to notify appropriate support staff immediately upon storage volume utilization reaching 75 percent.\n\nhttps://docs.microsoft.com/en-us/azure/azure-monitor/alerts/alerts-overview'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59017r871156_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255344'\n  tag rid: 'SV-255344r871158_rule'\n  tag stig_id: 'ASQL-00-011000'\n  tag gtitle: 'SRG-APP-000359-DB-000319'\n  tag fix_id: 'F-58961r871157_fix'\n  tag 'documentable'\n  tag cci: ['CCI-001855']\n  tag nist: ['AU-5 (1)']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255344.rb"},"title":"Azure SQL Database must provide a warning to appropriate support staff when allocated audit record storage volume reaches 75 percent of maximum audit record storage capacity.","desc":"Auditing for Azure SQL Database tracks database events and writes them to an audit log in the Azure storage account, Log Analytics workspace, or Event Hubs.\n\nUnder normal conditions, the audit space allocated by an Azure Storage account can grow quite large.\nSince a requirement exists to halt processing upon audit failure, a service outage would result.","descriptions":{"default":"Auditing for Azure SQL Database tracks database events and writes them to an audit log in the Azure storage account, Log Analytics workspace, or Event Hubs.\n\nUnder normal conditions, the audit space allocated by an Azure Storage account can grow quite large.\nSince a requirement exists to halt processing upon audit failure, a service outage would result.","check":"Azure SQL Database must provide notice upon audit storage reaching capacity.\n \nIf no alert exists to notify support staff in the event the SQL Audit storage reaches 75 percent, this is a finding.\n\nVerify if an Azure Rule exists with the following command example:\n\nGet-AzAlertRule\n   -ResourceGroupName <String>\n   -Name <String>\n   [-DetailedOutput]\n   [-DefaultProfile <IAzureContextContainer>]\n   [<CommonParameters>]\n\nThe Get-AzAlertRule cmdlet gets an alert rule by its name or URI, or all alert rules from a specified resource group.\n\nIf the monitoring or alert configuration is missing a rule that alerts if the storage account is 75 percent of maximum capacity, this is a finding.","fix":"Utilize Alerts in Microsoft Azure Monitoring and/or third-party tools to configure the system to notify appropriate support staff immediately upon storage volume utilization reaching 75 percent.\n\nhttps://docs.microsoft.com/en-us/azure/azure-monitor/alerts/alerts-overview"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59017r871156_chk","severity":"medium","gid":"V-255344","rid":"SV-255344r871158_rule","stig_id":"ASQL-00-011000","gtitle":"SRG-APP-000359-DB-000319","fix_id":"F-58961r871157_fix","documentable":null,"cci":["CCI-001855"],"nist":["AU-5 (1)"]}},{"id":"SV-255345","code":"control 'SV-255345' do\n  title 'Azure SQL Database must produce audit records of its enforcement of access restrictions associated with changes to the configuration of Azure SQL Database(s).'\n  desc 'Without auditing the enforcement of access restrictions against changes to configuration, it would be difficult to identify attempted attacks and an audit trail would not be available for forensic investigation for after-the-fact actions. \n\nEnforcement actions are the methods or mechanisms used to prevent unauthorized changes to configuration settings. Enforcement action methods may be as simple as denying access to a file based on the application of file permissions (access restriction). Audit items may consist of lists of actions blocked by access restrictions or changes identified after the fact.'\n  desc 'check', \"Review Azure SQL Database configuration to verify that audit records are produced when denied actions occur.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nAPPLICATION_ROLE_CHANGE_PASSWORD_GROUP\nBACKUP_RESTORE_GROUP\nDATABASE_OBJECT_CHANGE_GROUP\nDATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP\nDATABASE_OBJECT_PERMISSION_CHANGE_GROUP\nDATABASE_OPERATION_GROUP\nDATABASE_PERMISSION_CHANGE_GROUP\nDATABASE_PRINCIPAL_CHANGE_GROUP\nDATABASE_PRINCIPAL_IMPERSONATION_GROUP\nDATABASE_ROLE_MEMBER_CHANGE_GROUP\nDBCC_GROUP\nSCHEMA_OBJECT_CHANGE_GROUP\nSCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP\nSCHEMA_OBJECT_PERMISSION_CHANGE_GROUP\n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.\"\n  desc 'fix', 'Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59018r871159_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255345'\n  tag rid: 'SV-255345r877228_rule'\n  tag stig_id: 'ASQL-00-011800'\n  tag gtitle: 'SRG-APP-000381-DB-000361'\n  tag fix_id: 'F-58962r877227_fix'\n  tag 'documentable'\n  tag cci: ['CCI-001814']\n  tag nist: ['CM-5 (1)']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255345.rb"},"title":"Azure SQL Database must produce audit records of its enforcement of access restrictions associated with changes to the configuration of Azure SQL Database(s).","desc":"Without auditing the enforcement of access restrictions against changes to configuration, it would be difficult to identify attempted attacks and an audit trail would not be available for forensic investigation for after-the-fact actions. \n\nEnforcement actions are the methods or mechanisms used to prevent unauthorized changes to configuration settings. Enforcement action methods may be as simple as denying access to a file based on the application of file permissions (access restriction). Audit items may consist of lists of actions blocked by access restrictions or changes identified after the fact.","descriptions":{"default":"Without auditing the enforcement of access restrictions against changes to configuration, it would be difficult to identify attempted attacks and an audit trail would not be available for forensic investigation for after-the-fact actions. \n\nEnforcement actions are the methods or mechanisms used to prevent unauthorized changes to configuration settings. Enforcement action methods may be as simple as denying access to a file based on the application of file permissions (access restriction). Audit items may consist of lists of actions blocked by access restrictions or changes identified after the fact.","check":"Review Azure SQL Database configuration to verify that audit records are produced when denied actions occur.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nAPPLICATION_ROLE_CHANGE_PASSWORD_GROUP\nBACKUP_RESTORE_GROUP\nDATABASE_OBJECT_CHANGE_GROUP\nDATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP\nDATABASE_OBJECT_PERMISSION_CHANGE_GROUP\nDATABASE_OPERATION_GROUP\nDATABASE_PERMISSION_CHANGE_GROUP\nDATABASE_PRINCIPAL_CHANGE_GROUP\nDATABASE_PRINCIPAL_IMPERSONATION_GROUP\nDATABASE_ROLE_MEMBER_CHANGE_GROUP\nDBCC_GROUP\nSCHEMA_OBJECT_CHANGE_GROUP\nSCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP\nSCHEMA_OBJECT_PERMISSION_CHANGE_GROUP\n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.","fix":"Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59018r871159_chk","severity":"medium","gid":"V-255345","rid":"SV-255345r877228_rule","stig_id":"ASQL-00-011800","gtitle":"SRG-APP-000381-DB-000361","fix_id":"F-58962r877227_fix","documentable":null,"cci":["CCI-001814"],"nist":["CM-5 (1)"]}},{"id":"SV-255346","code":"control 'SV-255346' do\n  title 'Azure SQL Database must only use approved firewall settings deemed by the organization to be secure, including denying public network access.'\n  desc 'Use of nonsecure firewall settings, such as allowing public access, exposes the system to avoidable threats.'\n  desc 'check', 'Azure SQL Database must only use approved firewall settings, including denying public network access. This value is allowed by default in Azure SQL Database and should be disabled if not otherwise documented and approved.\n \nObtain a list of approved firewall settings from the database documentation. \n \nVerify that the public network access option is set to disabled.\n \nIf the value is enabled and not in use and specifically approved in the database documentation, this is a finding.\n\n1. From the Azure Portal Dashboard, click \"Set Server Firewall\".\n2. Review the Allow Azure services and resources to access this server option.'\n  desc 'fix', 'Assign the approved policy to Azure SQL Database.\n1. From the Azure Portal Dashboard, click on the database.\n2. Click \"Set Server Firewall\".\n3. Review the public network access option.\n4. Check the box to \"Disable\" public network access.\n5. Click \"Save\".\n\nFor more information about connection policies:\nhttps://docs.microsoft.com/en-us/azure/azure-sql/database/connectivity-architecture'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59019r871162_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255346'\n  tag rid: 'SV-255346r871164_rule'\n  tag stig_id: 'ASQL-00-011900'\n  tag gtitle: 'SRG-APP-000383-DB-000364'\n  tag fix_id: 'F-58963r871163_fix'\n  tag 'documentable'\n  tag cci: ['CCI-001762']\n  tag nist: ['CM-7 (1) (b)']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255346.rb"},"title":"Azure SQL Database must only use approved firewall settings deemed by the organization to be secure, including denying public network access.","desc":"Use of nonsecure firewall settings, such as allowing public access, exposes the system to avoidable threats.","descriptions":{"default":"Use of nonsecure firewall settings, such as allowing public access, exposes the system to avoidable threats.","check":"Azure SQL Database must only use approved firewall settings, including denying public network access. This value is allowed by default in Azure SQL Database and should be disabled if not otherwise documented and approved.\n \nObtain a list of approved firewall settings from the database documentation. \n \nVerify that the public network access option is set to disabled.\n \nIf the value is enabled and not in use and specifically approved in the database documentation, this is a finding.\n\n1. From the Azure Portal Dashboard, click \"Set Server Firewall\".\n2. Review the Allow Azure services and resources to access this server option.","fix":"Assign the approved policy to Azure SQL Database.\n1. From the Azure Portal Dashboard, click on the database.\n2. Click \"Set Server Firewall\".\n3. Review the public network access option.\n4. Check the box to \"Disable\" public network access.\n5. Click \"Save\".\n\nFor more information about connection policies:\nhttps://docs.microsoft.com/en-us/azure/azure-sql/database/connectivity-architecture"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59019r871162_chk","severity":"medium","gid":"V-255346","rid":"SV-255346r871164_rule","stig_id":"ASQL-00-011900","gtitle":"SRG-APP-000383-DB-000364","fix_id":"F-58963r871163_fix","documentable":null,"cci":["CCI-001762"],"nist":["CM-7 (1) (b)"]}},{"id":"SV-255347","code":"control 'SV-255347' do\n  title 'Azure SQL Database must only use approved firewall settings deemed by the organization to be secure, including denying azure services access to the server.'\n  desc 'Use of nonsecure firewall settings, such as allowing azure services to access the server, exposes the system to avoidable threats.'\n  desc 'check', 'Azure SQL Database must only use approved firewall settings, including denying access to azure services and resources to the server. This option is denied by default in Azure SQL Database and should be left disabled if not otherwise documented and approved.\n\nObtain a list of approved firewall settings from the database documentation.\n \nVerify that the \"Allow Azure services and resources to access this server\" option is disabled.\n1. From the Azure Portal, navigate to the Azure SQL Database Dashboard.\n2. Select \"Set Server Firewall\" on the top menu.\n3. Under \"Exceptions\", review the \"Allow Azure services and resources to access this server\" option and verify that the value is not checked.\n\nIf the \"Allow Azure services and resources to access this server\" option is enabled, it must be necessary and specifically approved in the database documentation, otherwise this is a finding.'\n  desc 'fix', 'Assign the approved policy to Azure SQL Database.\n1. From the Azure Portal Dashboard, click \"Set Server Firewall\".\n2. Review the Allow Azure services and resources to access this server option.\n3. Uncheck the box to \"Deny Azure\" services and resources to access this server.\n4. Click \"Save\".\n\nFor more information about connection policies:\nhttps://docs.microsoft.com/en-us/azure/azure-sql/database/connectivity-architecture'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59020r877261_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255347'\n  tag rid: 'SV-255347r877262_rule'\n  tag stig_id: 'ASQL-00-011950'\n  tag gtitle: 'SRG-APP-000383-DB-000364'\n  tag fix_id: 'F-58964r871166_fix'\n  tag 'documentable'\n  tag cci: ['CCI-001762']\n  tag nist: ['CM-7 (1) (b)']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255347.rb"},"title":"Azure SQL Database must only use approved firewall settings deemed by the organization to be secure, including denying azure services access to the server.","desc":"Use of nonsecure firewall settings, such as allowing azure services to access the server, exposes the system to avoidable threats.","descriptions":{"default":"Use of nonsecure firewall settings, such as allowing azure services to access the server, exposes the system to avoidable threats.","check":"Azure SQL Database must only use approved firewall settings, including denying access to azure services and resources to the server. This option is denied by default in Azure SQL Database and should be left disabled if not otherwise documented and approved.\n\nObtain a list of approved firewall settings from the database documentation.\n \nVerify that the \"Allow Azure services and resources to access this server\" option is disabled.\n1. From the Azure Portal, navigate to the Azure SQL Database Dashboard.\n2. Select \"Set Server Firewall\" on the top menu.\n3. Under \"Exceptions\", review the \"Allow Azure services and resources to access this server\" option and verify that the value is not checked.\n\nIf the \"Allow Azure services and resources to access this server\" option is enabled, it must be necessary and specifically approved in the database documentation, otherwise this is a finding.","fix":"Assign the approved policy to Azure SQL Database.\n1. From the Azure Portal Dashboard, click \"Set Server Firewall\".\n2. Review the Allow Azure services and resources to access this server option.\n3. Uncheck the box to \"Deny Azure\" services and resources to access this server.\n4. Click \"Save\".\n\nFor more information about connection policies:\nhttps://docs.microsoft.com/en-us/azure/azure-sql/database/connectivity-architecture"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59020r877261_chk","severity":"medium","gid":"V-255347","rid":"SV-255347r877262_rule","stig_id":"ASQL-00-011950","gtitle":"SRG-APP-000383-DB-000364","fix_id":"F-58964r871166_fix","documentable":null,"cci":["CCI-001762"],"nist":["CM-7 (1) (b)"]}},{"id":"SV-255348","code":"control 'SV-255348' do\n  title 'Azure SQL Database must maintain the confidentiality and integrity of information during preparation for transmission.'\n  desc 'Information can be either unintentionally or maliciously disclosed or modified during preparation for transmission, including, for example, during aggregation, at protocol transformation points, and during packing/unpacking. These unauthorized disclosures or modifications compromise the confidentiality or integrity of the information.\n\nUse of this requirement will be limited to situations where the data owner has a strict requirement for ensuring data integrity and confidentiality is maintained at every step of the data transfer and handling process. \n\nWhen transmitting data, Azure SQL Database, associated applications, and infrastructure must leverage transmission protection mechanisms.'\n  desc 'check', \"Document transmission protection mechanisms based on organizationally defined requirements, if this documentation does not exist this is a finding.\n\nValidate that transmission protection mechanisms match documentation of organizationally defined requirements, if discrepancies exist this is a finding.\n\nRun the following PowerShell  script to check the TLS version:\n$ResourceGroupName = '<Resource Group Name>'\nGet-AzSqlServer -ResourceGroupName $ResourceGroupName | Format-Table ServerName,MinimalTlsVersion \n\nEnsure that the minimum TLS version property is set to the latest available TLS version, if a less secure TLS version is set this is a finding.\"\n  desc 'fix', 'Implement and document protective measures against unauthorized disclosure and modification during preparation for transmission.\n\nhttps://docs.microsoft.com/en-us/azure/azure-sql/database/connectivity-settings\n\nhttps://docs.microsoft.com/en-us/azure/azure-sql/database/connectivity-architecture\n\nhttps://docs.microsoft.com/en-us/azure/azure-sql/database/network-access-controls-overview'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59021r871168_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255348'\n  tag rid: 'SV-255348r871170_rule'\n  tag stig_id: 'ASQL-00-012500'\n  tag gtitle: 'SRG-APP-000441-DB-000378'\n  tag fix_id: 'F-58965r871169_fix'\n  tag 'documentable'\n  tag cci: ['CCI-002420']\n  tag nist: ['SC-8 (2)']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255348.rb"},"title":"Azure SQL Database must maintain the confidentiality and integrity of information during preparation for transmission.","desc":"Information can be either unintentionally or maliciously disclosed or modified during preparation for transmission, including, for example, during aggregation, at protocol transformation points, and during packing/unpacking. These unauthorized disclosures or modifications compromise the confidentiality or integrity of the information.\n\nUse of this requirement will be limited to situations where the data owner has a strict requirement for ensuring data integrity and confidentiality is maintained at every step of the data transfer and handling process. \n\nWhen transmitting data, Azure SQL Database, associated applications, and infrastructure must leverage transmission protection mechanisms.","descriptions":{"default":"Information can be either unintentionally or maliciously disclosed or modified during preparation for transmission, including, for example, during aggregation, at protocol transformation points, and during packing/unpacking. These unauthorized disclosures or modifications compromise the confidentiality or integrity of the information.\n\nUse of this requirement will be limited to situations where the data owner has a strict requirement for ensuring data integrity and confidentiality is maintained at every step of the data transfer and handling process. \n\nWhen transmitting data, Azure SQL Database, associated applications, and infrastructure must leverage transmission protection mechanisms.","check":"Document transmission protection mechanisms based on organizationally defined requirements, if this documentation does not exist this is a finding.\n\nValidate that transmission protection mechanisms match documentation of organizationally defined requirements, if discrepancies exist this is a finding.\n\nRun the following PowerShell  script to check the TLS version:\n$ResourceGroupName = '<Resource Group Name>'\nGet-AzSqlServer -ResourceGroupName $ResourceGroupName | Format-Table ServerName,MinimalTlsVersion \n\nEnsure that the minimum TLS version property is set to the latest available TLS version, if a less secure TLS version is set this is a finding.","fix":"Implement and document protective measures against unauthorized disclosure and modification during preparation for transmission.\n\nhttps://docs.microsoft.com/en-us/azure/azure-sql/database/connectivity-settings\n\nhttps://docs.microsoft.com/en-us/azure/azure-sql/database/connectivity-architecture\n\nhttps://docs.microsoft.com/en-us/azure/azure-sql/database/network-access-controls-overview"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59021r871168_chk","severity":"medium","gid":"V-255348","rid":"SV-255348r871170_rule","stig_id":"ASQL-00-012500","gtitle":"SRG-APP-000441-DB-000378","fix_id":"F-58965r871169_fix","documentable":null,"cci":["CCI-002420"],"nist":["SC-8 (2)"]}},{"id":"SV-255349","code":"control 'SV-255349' do\n  title 'Azure SQL Database must maintain the confidentiality and integrity of information during reception.'\n  desc 'Information can be either unintentionally or maliciously disclosed or modified during reception, including, for example, during aggregation, at protocol transformation points, and during packing/unpacking. These unauthorized disclosures or modifications compromise the confidentiality or integrity of the information.\n\nThis requirement applies only to those applications that are either distributed or can allow access to data nonlocally. Use of this requirement will be limited to situations where the data owner has a strict requirement for ensuring data integrity and confidentiality is maintained at every step of the data transfer and handling process. \n\nWhen receiving data, Azure SQL Database, associated applications, and infrastructure must leverage protection mechanisms.'\n  desc 'check', \"Document reception protection mechanisms based on organizationally defined requirements, if this documentation does not exist this is a finding.\n\nValidate that reception protection mechanisms match documentation of organizationally defined requirements, if discrepancies exist this is a finding.\n\nRun the following PowerShell  script to check the TLS version:\n$ResourceGroupName = '<Resource Group Name>'\nGet-AzSqlServer -ResourceGroupName $ResourceGroupName | Format-Table ServerName,MinimalTlsVersion\n\nVerify that the minimum TLS version property is set to the latest available TLS version. If a less secure TLS version is set, this is a finding.\"\n  desc 'fix', 'Implement and document protective measures against unauthorized disclosure and modification during transmission reception.\n\nhttps://docs.microsoft.com/en-us/azure/azure-sql/database/connectivity-settings\n\nhttps://docs.microsoft.com/en-us/azure/azure-sql/database/connectivity-architecture\n\nhttps://docs.microsoft.com/en-us/azure/azure-sql/database/network-access-controls-overview'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59022r877259_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255349'\n  tag rid: 'SV-255349r877260_rule'\n  tag stig_id: 'ASQL-00-012600'\n  tag gtitle: 'SRG-APP-000442-DB-000379'\n  tag fix_id: 'F-58966r871172_fix'\n  tag 'documentable'\n  tag cci: ['CCI-002422']\n  tag nist: ['SC-8 (2)']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255349.rb"},"title":"Azure SQL Database must maintain the confidentiality and integrity of information during reception.","desc":"Information can be either unintentionally or maliciously disclosed or modified during reception, including, for example, during aggregation, at protocol transformation points, and during packing/unpacking. These unauthorized disclosures or modifications compromise the confidentiality or integrity of the information.\n\nThis requirement applies only to those applications that are either distributed or can allow access to data nonlocally. Use of this requirement will be limited to situations where the data owner has a strict requirement for ensuring data integrity and confidentiality is maintained at every step of the data transfer and handling process. \n\nWhen receiving data, Azure SQL Database, associated applications, and infrastructure must leverage protection mechanisms.","descriptions":{"default":"Information can be either unintentionally or maliciously disclosed or modified during reception, including, for example, during aggregation, at protocol transformation points, and during packing/unpacking. These unauthorized disclosures or modifications compromise the confidentiality or integrity of the information.\n\nThis requirement applies only to those applications that are either distributed or can allow access to data nonlocally. Use of this requirement will be limited to situations where the data owner has a strict requirement for ensuring data integrity and confidentiality is maintained at every step of the data transfer and handling process. \n\nWhen receiving data, Azure SQL Database, associated applications, and infrastructure must leverage protection mechanisms.","check":"Document reception protection mechanisms based on organizationally defined requirements, if this documentation does not exist this is a finding.\n\nValidate that reception protection mechanisms match documentation of organizationally defined requirements, if discrepancies exist this is a finding.\n\nRun the following PowerShell  script to check the TLS version:\n$ResourceGroupName = '<Resource Group Name>'\nGet-AzSqlServer -ResourceGroupName $ResourceGroupName | Format-Table ServerName,MinimalTlsVersion\n\nVerify that the minimum TLS version property is set to the latest available TLS version. If a less secure TLS version is set, this is a finding.","fix":"Implement and document protective measures against unauthorized disclosure and modification during transmission reception.\n\nhttps://docs.microsoft.com/en-us/azure/azure-sql/database/connectivity-settings\n\nhttps://docs.microsoft.com/en-us/azure/azure-sql/database/connectivity-architecture\n\nhttps://docs.microsoft.com/en-us/azure/azure-sql/database/network-access-controls-overview"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59022r877259_chk","severity":"medium","gid":"V-255349","rid":"SV-255349r877260_rule","stig_id":"ASQL-00-012600","gtitle":"SRG-APP-000442-DB-000379","fix_id":"F-58966r871172_fix","documentable":null,"cci":["CCI-002422"],"nist":["SC-8 (2)"]}},{"id":"SV-255350","code":"control 'SV-255350' do\n  title 'Azure SQL DB must be able to generate audit records when security objects are accessed.'\n  desc 'Changes to the security configuration must be tracked. \n\nThis requirement applies to situations where security data is retrieved or modified via data manipulation operations, as opposed to via specialized security functionality. \n\nIn an SQL environment, types of access include, but are not necessarily limited to: \nSELECT \nINSERT \nUPDATE \nDELETE \nEXECUTE'\n  desc 'check', \"Review Azure SQL Database configuration to verify that audit records are produced when security objects are accessed.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nSCHEMA_OBJECT_ACCESS_GROUP\n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.\"\n  desc 'fix', 'Deploy an audit to review the retrieval of privilege/permission/role membership information. \nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59023r871174_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255350'\n  tag rid: 'SV-255350r871176_rule'\n  tag stig_id: 'ASQL-00-012900'\n  tag gtitle: 'SRG-APP-000492-DB-000332'\n  tag fix_id: 'F-58967r871175_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255350.rb"},"title":"Azure SQL DB must be able to generate audit records when security objects are accessed.","desc":"Changes to the security configuration must be tracked. \n\nThis requirement applies to situations where security data is retrieved or modified via data manipulation operations, as opposed to via specialized security functionality. \n\nIn an SQL environment, types of access include, but are not necessarily limited to: \nSELECT \nINSERT \nUPDATE \nDELETE \nEXECUTE","descriptions":{"default":"Changes to the security configuration must be tracked. \n\nThis requirement applies to situations where security data is retrieved or modified via data manipulation operations, as opposed to via specialized security functionality. \n\nIn an SQL environment, types of access include, but are not necessarily limited to: \nSELECT \nINSERT \nUPDATE \nDELETE \nEXECUTE","check":"Review Azure SQL Database configuration to verify that audit records are produced when security objects are accessed.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nSCHEMA_OBJECT_ACCESS_GROUP\n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.","fix":"Deploy an audit to review the retrieval of privilege/permission/role membership information. \nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script."},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59023r871174_chk","severity":"medium","gid":"V-255350","rid":"SV-255350r871176_rule","stig_id":"ASQL-00-012900","gtitle":"SRG-APP-000492-DB-000332","fix_id":"F-58967r871175_fix","documentable":null,"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-255351","code":"control 'SV-255351' do\n  title 'Azure SQL DB must generate audit records when unsuccessful attempts to access security objects occur.'\n  desc 'Changes to the security configuration must be tracked. \n\nThis requirement applies to situations where security data is retrieved or modified via data manipulation operations, as opposed to via specialized security functionality. \n\nIn a SQL environment, types of access include, but are not necessarily limited to: \nSELECT \nINSERT \nUPDATE \nDELETE \nEXECUTE'\n  desc 'check', \"Review Azure SQL Database configuration to verify that audit records are produced when unsuccessful attempts to access security objects occur.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding.\n \nVerify the following AuditActionGroup(s) are configured:\nSCHEMA_OBJECT_ACCESS_GROUP\n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.\"\n  desc 'fix', 'Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59024r877257_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255351'\n  tag rid: 'SV-255351r877258_rule'\n  tag stig_id: 'ASQL-00-013000'\n  tag gtitle: 'SRG-APP-000492-DB-000333'\n  tag fix_id: 'F-58968r877225_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255351.rb"},"title":"Azure SQL DB must generate audit records when unsuccessful attempts to access security objects occur.","desc":"Changes to the security configuration must be tracked. \n\nThis requirement applies to situations where security data is retrieved or modified via data manipulation operations, as opposed to via specialized security functionality. \n\nIn a SQL environment, types of access include, but are not necessarily limited to: \nSELECT \nINSERT \nUPDATE \nDELETE \nEXECUTE","descriptions":{"default":"Changes to the security configuration must be tracked. \n\nThis requirement applies to situations where security data is retrieved or modified via data manipulation operations, as opposed to via specialized security functionality. \n\nIn a SQL environment, types of access include, but are not necessarily limited to: \nSELECT \nINSERT \nUPDATE \nDELETE \nEXECUTE","check":"Review Azure SQL Database configuration to verify that audit records are produced when unsuccessful attempts to access security objects occur.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding.\n \nVerify the following AuditActionGroup(s) are configured:\nSCHEMA_OBJECT_ACCESS_GROUP\n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.","fix":"Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59024r877257_chk","severity":"medium","gid":"V-255351","rid":"SV-255351r877258_rule","stig_id":"ASQL-00-013000","gtitle":"SRG-APP-000492-DB-000333","fix_id":"F-58968r877225_fix","documentable":null,"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-255352","code":"control 'SV-255352' do\n  title 'Azure SQL DB must generate audit records when categorized information (e.g., classification levels/security levels) is accessed.'\n  desc 'Changes in categorized information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected. \n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.'\n  desc 'check', \"Review Azure SQL Database configuration to verify that audit records are produced when categorized information is accessed.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding.  \n\nVerify the following AuditActionGroup(s) are configured:\nSCHEMA_OBJECT_ACCESS_GROUP\n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.\"\n  desc 'fix', 'Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59025r871180_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255352'\n  tag rid: 'SV-255352r871182_rule'\n  tag stig_id: 'ASQL-00-013100'\n  tag gtitle: 'SRG-APP-000494-DB-000344'\n  tag fix_id: 'F-58969r871181_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255352.rb"},"title":"Azure SQL DB must generate audit records when categorized information (e.g., classification levels/security levels) is accessed.","desc":"Changes in categorized information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected. \n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.","descriptions":{"default":"Changes in categorized information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected. \n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.","check":"Review Azure SQL Database configuration to verify that audit records are produced when categorized information is accessed.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding.  \n\nVerify the following AuditActionGroup(s) are configured:\nSCHEMA_OBJECT_ACCESS_GROUP\n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.","fix":"Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59025r871180_chk","severity":"medium","gid":"V-255352","rid":"SV-255352r871182_rule","stig_id":"ASQL-00-013100","gtitle":"SRG-APP-000494-DB-000344","fix_id":"F-58969r871181_fix","documentable":null,"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-255353","code":"control 'SV-255353' do\n  title 'Azure SQL DB must generate audit records when unsuccessful attempts to access categories of information (e.g., classification levels/security levels) occur.'\n  desc 'Changes in categorized information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected. \n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones. \n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.'\n  desc 'check', \"Review Azure SQL Database configuration to verify that audit records are produced when unsuccessful attempts to access categories of information occur. \n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nSCHEMA_OBJECT_ACCESS_GROUP\n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.\"\n  desc 'fix', 'Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59026r871183_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255353'\n  tag rid: 'SV-255353r871185_rule'\n  tag stig_id: 'ASQL-00-013200'\n  tag gtitle: 'SRG-APP-000494-DB-000345'\n  tag fix_id: 'F-58970r871184_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255353.rb"},"title":"Azure SQL DB must generate audit records when unsuccessful attempts to access categories of information (e.g., classification levels/security levels) occur.","desc":"Changes in categorized information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected. \n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones. \n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.","descriptions":{"default":"Changes in categorized information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected. \n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones. \n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.","check":"Review Azure SQL Database configuration to verify that audit records are produced when unsuccessful attempts to access categories of information occur. \n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nSCHEMA_OBJECT_ACCESS_GROUP\n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.","fix":"Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59026r871183_chk","severity":"medium","gid":"V-255353","rid":"SV-255353r871185_rule","stig_id":"ASQL-00-013200","gtitle":"SRG-APP-000494-DB-000345","fix_id":"F-58970r871184_fix","documentable":null,"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-255354","code":"control 'SV-255354' do\n  title 'Azure SQL DB must generate audit records when privileges/permissions are added.'\n  desc 'Changes in the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized elevation or restriction of privileges could go undetected. Elevated privileges give users access to information and functionality that they should not have; restricted privileges wrongly deny access to authorized users. \n\nIn an Azure SQL Database environment, adding permissions is typically done via the GRANT command, or, in the negative, the DENY command.'\n  desc 'check', \"Review Azure SQL Database configuration to verify that audit records are produced when privileges/permissions are added.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nDATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP \nDATABASE_OBJECT_PERMISSION_CHANGE_GROUP \nDATABASE_OWNERSHIP_CHANGE_GROUP \nDATABASE_PERMISSION_CHANGE_GROUP \nDATABASE_ROLE_MEMBER_CHANGE_GROUP \nSCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP \n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.\"\n  desc 'fix', 'Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59027r871186_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255354'\n  tag rid: 'SV-255354r871188_rule'\n  tag stig_id: 'ASQL-00-013300'\n  tag gtitle: 'SRG-APP-000495-DB-000326'\n  tag fix_id: 'F-58971r871187_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255354.rb"},"title":"Azure SQL DB must generate audit records when privileges/permissions are added.","desc":"Changes in the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized elevation or restriction of privileges could go undetected. Elevated privileges give users access to information and functionality that they should not have; restricted privileges wrongly deny access to authorized users. \n\nIn an Azure SQL Database environment, adding permissions is typically done via the GRANT command, or, in the negative, the DENY command.","descriptions":{"default":"Changes in the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized elevation or restriction of privileges could go undetected. Elevated privileges give users access to information and functionality that they should not have; restricted privileges wrongly deny access to authorized users. \n\nIn an Azure SQL Database environment, adding permissions is typically done via the GRANT command, or, in the negative, the DENY command.","check":"Review Azure SQL Database configuration to verify that audit records are produced when privileges/permissions are added.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nDATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP \nDATABASE_OBJECT_PERMISSION_CHANGE_GROUP \nDATABASE_OWNERSHIP_CHANGE_GROUP \nDATABASE_PERMISSION_CHANGE_GROUP \nDATABASE_ROLE_MEMBER_CHANGE_GROUP \nSCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP \n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.","fix":"Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59027r871186_chk","severity":"medium","gid":"V-255354","rid":"SV-255354r871188_rule","stig_id":"ASQL-00-013300","gtitle":"SRG-APP-000495-DB-000326","fix_id":"F-58971r871187_fix","documentable":null,"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-255355","code":"control 'SV-255355' do\n  title 'Azure SQL DB must generate audit records when unsuccessful attempts to add privileges/permissions occur.'\n  desc 'Failed attempts to change the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized attempts to elevate or restrict privileges could go undetected. \n\nIn an Azure SQL Database environment, adding permissions is typically done via the GRANT command, or, in the negative, the DENY command. \n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.'\n  desc 'check', \"Review Azure SQL Database configuration to verify that audit records are produced when unsuccessful attempts to add privileges/permissions occur.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nDATABASE_OBJECT_PERMISSION_CHANGE_GROUP\nDATABASE_PERMISSION_CHANGE_GROUP\nDATABASE_ROLE_MEMBER_CHANGE_GROUP\nSCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP\nSCHEMA_OBJECT_PERMISSION_CHANGE_GROUP\n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.\"\n  desc 'fix', 'Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59028r871189_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255355'\n  tag rid: 'SV-255355r871191_rule'\n  tag stig_id: 'ASQL-00-013400'\n  tag gtitle: 'SRG-APP-000495-DB-000327'\n  tag fix_id: 'F-58972r871190_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255355.rb"},"title":"Azure SQL DB must generate audit records when unsuccessful attempts to add privileges/permissions occur.","desc":"Failed attempts to change the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized attempts to elevate or restrict privileges could go undetected. \n\nIn an Azure SQL Database environment, adding permissions is typically done via the GRANT command, or, in the negative, the DENY command. \n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.","descriptions":{"default":"Failed attempts to change the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized attempts to elevate or restrict privileges could go undetected. \n\nIn an Azure SQL Database environment, adding permissions is typically done via the GRANT command, or, in the negative, the DENY command. \n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.","check":"Review Azure SQL Database configuration to verify that audit records are produced when unsuccessful attempts to add privileges/permissions occur.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nDATABASE_OBJECT_PERMISSION_CHANGE_GROUP\nDATABASE_PERMISSION_CHANGE_GROUP\nDATABASE_ROLE_MEMBER_CHANGE_GROUP\nSCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP\nSCHEMA_OBJECT_PERMISSION_CHANGE_GROUP\n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.","fix":"Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59028r871189_chk","severity":"medium","gid":"V-255355","rid":"SV-255355r871191_rule","stig_id":"ASQL-00-013400","gtitle":"SRG-APP-000495-DB-000327","fix_id":"F-58972r871190_fix","documentable":null,"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-255356","code":"control 'SV-255356' do\n  title 'Azure SQL DB must generate audit records when privileges/permissions are modified.'\n  desc 'Changes in the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized elevation or restriction of privileges could go undetected. Elevated privileges give users access to information and functionality that they should not have; restricted privileges wrongly deny access to authorized users. \n\nIn an SQL environment, modifying permissions is typically done via the GRANT, REVOKE, and DENY commands.'\n  desc 'check', \"Review Azure SQL Database configuration to verify that audit records are produced when privileges/permissions are modified.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nDATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP \nDATABASE_OBJECT_PERMISSION_CHANGE_GROUP \nDATABASE_OWNERSHIP_CHANGE_GROUP \nDATABASE_PERMISSION_CHANGE_GROUP \nDATABASE_ROLE_MEMBER_CHANGE_GROUP \nSCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP \nSCHEMA_OBJECT_PERMISSION_CHANGE_GROUP \n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.\"\n  desc 'fix', 'Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59029r871192_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255356'\n  tag rid: 'SV-255356r871194_rule'\n  tag stig_id: 'ASQL-00-013500'\n  tag gtitle: 'SRG-APP-000495-DB-000328'\n  tag fix_id: 'F-58973r871193_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255356.rb"},"title":"Azure SQL DB must generate audit records when privileges/permissions are modified.","desc":"Changes in the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized elevation or restriction of privileges could go undetected. Elevated privileges give users access to information and functionality that they should not have; restricted privileges wrongly deny access to authorized users. \n\nIn an SQL environment, modifying permissions is typically done via the GRANT, REVOKE, and DENY commands.","descriptions":{"default":"Changes in the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized elevation or restriction of privileges could go undetected. Elevated privileges give users access to information and functionality that they should not have; restricted privileges wrongly deny access to authorized users. \n\nIn an SQL environment, modifying permissions is typically done via the GRANT, REVOKE, and DENY commands.","check":"Review Azure SQL Database configuration to verify that audit records are produced when privileges/permissions are modified.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nDATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP \nDATABASE_OBJECT_PERMISSION_CHANGE_GROUP \nDATABASE_OWNERSHIP_CHANGE_GROUP \nDATABASE_PERMISSION_CHANGE_GROUP \nDATABASE_ROLE_MEMBER_CHANGE_GROUP \nSCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP \nSCHEMA_OBJECT_PERMISSION_CHANGE_GROUP \n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.","fix":"Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59029r871192_chk","severity":"medium","gid":"V-255356","rid":"SV-255356r871194_rule","stig_id":"ASQL-00-013500","gtitle":"SRG-APP-000495-DB-000328","fix_id":"F-58973r871193_fix","documentable":null,"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-255357","code":"control 'SV-255357' do\n  title 'Azure SQL DB must generate audit records when unsuccessful attempts to modify privileges/permissions occur.'\n  desc 'Failed attempts to change the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized attempts to elevate or restrict privileges could go undetected. \n\nIn an SQL environment, modifying permissions is typically done via the GRANT, REVOKE, and DENY commands. \n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.'\n  desc 'check', \"Review Azure SQL Database configuration to verify that audit records are produced when unsuccessful attempts to modify privileges/permissions occur.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nDATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP \nDATABASE_OBJECT_PERMISSION_CHANGE_GROUP \nDATABASE_OWNERSHIP_CHANGE_GROUP \nDATABASE_PERMISSION_CHANGE_GROUP \nDATABASE_ROLE_MEMBER_CHANGE_GROUP \nSCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP \nSCHEMA_OBJECT_PERMISSION_CHANGE_GROUP \n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.\"\n  desc 'fix', 'Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59030r871195_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255357'\n  tag rid: 'SV-255357r871197_rule'\n  tag stig_id: 'ASQL-00-013600'\n  tag gtitle: 'SRG-APP-000495-DB-000329'\n  tag fix_id: 'F-58974r871196_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255357.rb"},"title":"Azure SQL DB must generate audit records when unsuccessful attempts to modify privileges/permissions occur.","desc":"Failed attempts to change the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized attempts to elevate or restrict privileges could go undetected. \n\nIn an SQL environment, modifying permissions is typically done via the GRANT, REVOKE, and DENY commands. \n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.","descriptions":{"default":"Failed attempts to change the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized attempts to elevate or restrict privileges could go undetected. \n\nIn an SQL environment, modifying permissions is typically done via the GRANT, REVOKE, and DENY commands. \n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.","check":"Review Azure SQL Database configuration to verify that audit records are produced when unsuccessful attempts to modify privileges/permissions occur.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nDATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP \nDATABASE_OBJECT_PERMISSION_CHANGE_GROUP \nDATABASE_OWNERSHIP_CHANGE_GROUP \nDATABASE_PERMISSION_CHANGE_GROUP \nDATABASE_ROLE_MEMBER_CHANGE_GROUP \nSCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP \nSCHEMA_OBJECT_PERMISSION_CHANGE_GROUP \n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.","fix":"Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59030r871195_chk","severity":"medium","gid":"V-255357","rid":"SV-255357r871197_rule","stig_id":"ASQL-00-013600","gtitle":"SRG-APP-000495-DB-000329","fix_id":"F-58974r871196_fix","documentable":null,"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-255358","code":"control 'SV-255358' do\n  title 'Azure SQL Database must generate audit records when security objects are modified.'\n  desc 'Changes in the database objects (tables, views, procedures, functions) that record and control permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized changes to the security subsystem could go undetected. The database could be severely compromised or rendered inoperative.'\n  desc 'check', \"Review Azure SQL Database configuration to verify that audit records are produced when security objects are modified.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nSCHEMA_OBJECT_CHANGE_GROUP\n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.\"\n  desc 'fix', 'Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59031r871198_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255358'\n  tag rid: 'SV-255358r871200_rule'\n  tag stig_id: 'ASQL-00-013700'\n  tag gtitle: 'SRG-APP-000496-DB-000334'\n  tag fix_id: 'F-58975r871199_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255358.rb"},"title":"Azure SQL Database must generate audit records when security objects are modified.","desc":"Changes in the database objects (tables, views, procedures, functions) that record and control permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized changes to the security subsystem could go undetected. The database could be severely compromised or rendered inoperative.","descriptions":{"default":"Changes in the database objects (tables, views, procedures, functions) that record and control permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized changes to the security subsystem could go undetected. The database could be severely compromised or rendered inoperative.","check":"Review Azure SQL Database configuration to verify that audit records are produced when security objects are modified.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nSCHEMA_OBJECT_CHANGE_GROUP\n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.","fix":"Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59031r871198_chk","severity":"medium","gid":"V-255358","rid":"SV-255358r871200_rule","stig_id":"ASQL-00-013700","gtitle":"SRG-APP-000496-DB-000334","fix_id":"F-58975r871199_fix","documentable":null,"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-255359","code":"control 'SV-255359' do\n  title 'Azure SQL DB must generate audit records when unsuccessful attempts to modify security objects occur.'\n  desc 'Changes in the database objects (tables, views, procedures, functions) that record and control permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized changes to the security subsystem could go undetected. The database could be severely compromised or rendered inoperative. \n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.'\n  desc 'check', \"Review Azure SQL Database configuration to verify that audit records are produced when unsuccessful attempts to modify security objects occur.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nSCHEMA_OBJECT_CHANGE_GROUP\n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.\"\n  desc 'fix', 'Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59032r871201_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255359'\n  tag rid: 'SV-255359r871203_rule'\n  tag stig_id: 'ASQL-00-013800'\n  tag gtitle: 'SRG-APP-000496-DB-000335'\n  tag fix_id: 'F-58976r871202_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255359.rb"},"title":"Azure SQL DB must generate audit records when unsuccessful attempts to modify security objects occur.","desc":"Changes in the database objects (tables, views, procedures, functions) that record and control permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized changes to the security subsystem could go undetected. The database could be severely compromised or rendered inoperative. \n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.","descriptions":{"default":"Changes in the database objects (tables, views, procedures, functions) that record and control permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized changes to the security subsystem could go undetected. The database could be severely compromised or rendered inoperative. \n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.","check":"Review Azure SQL Database configuration to verify that audit records are produced when unsuccessful attempts to modify security objects occur.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nSCHEMA_OBJECT_CHANGE_GROUP\n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.","fix":"Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59032r871201_chk","severity":"medium","gid":"V-255359","rid":"SV-255359r871203_rule","stig_id":"ASQL-00-013800","gtitle":"SRG-APP-000496-DB-000335","fix_id":"F-58976r871202_fix","documentable":null,"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-255360","code":"control 'SV-255360' do\n  title 'Azure SQL Database must generate audit records when categorized information (e.g., classification levels/security levels) is modified.'\n  desc 'Changes in categorized information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected. \n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.'\n  desc 'check', \"Review Azure SQL Database configuration to verify that audit records are produced when categorized information is modified.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nSCHEMA_OBJECT_ACCESS_GROUP \n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.\"\n  desc 'fix', 'Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59033r871204_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255360'\n  tag rid: 'SV-255360r871206_rule'\n  tag stig_id: 'ASQL-00-013900'\n  tag gtitle: 'SRG-APP-000498-DB-000346'\n  tag fix_id: 'F-58977r871205_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255360.rb"},"title":"Azure SQL Database must generate audit records when categorized information (e.g., classification levels/security levels) is modified.","desc":"Changes in categorized information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected. \n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.","descriptions":{"default":"Changes in categorized information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected. \n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.","check":"Review Azure SQL Database configuration to verify that audit records are produced when categorized information is modified.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nSCHEMA_OBJECT_ACCESS_GROUP \n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.","fix":"Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59033r871204_chk","severity":"medium","gid":"V-255360","rid":"SV-255360r871206_rule","stig_id":"ASQL-00-013900","gtitle":"SRG-APP-000498-DB-000346","fix_id":"F-58977r871205_fix","documentable":null,"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-255361","code":"control 'SV-255361' do\n  title 'Azure SQL Database must generate audit records when unsuccessful attempts to modify categorized information (e.g., classification levels/security levels) occur.'\n  desc 'Changes in categories of information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected. \n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones. \n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.'\n  desc 'check', \"Review Azure SQL Database configuration to verify that audit records are produced when unsuccessful attempts to modify categorized information occur.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nSCHEMA_OBJECT_ACCESS_GROUP \n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.\"\n  desc 'fix', 'Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59034r871207_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255361'\n  tag rid: 'SV-255361r871209_rule'\n  tag stig_id: 'ASQL-00-014000'\n  tag gtitle: 'SRG-APP-000498-DB-000347'\n  tag fix_id: 'F-58978r871208_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255361.rb"},"title":"Azure SQL Database must generate audit records when unsuccessful attempts to modify categorized information (e.g., classification levels/security levels) occur.","desc":"Changes in categories of information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected. \n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones. \n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.","descriptions":{"default":"Changes in categories of information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected. \n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones. \n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.","check":"Review Azure SQL Database configuration to verify that audit records are produced when unsuccessful attempts to modify categorized information occur.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nSCHEMA_OBJECT_ACCESS_GROUP \n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.","fix":"Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59034r871207_chk","severity":"medium","gid":"V-255361","rid":"SV-255361r871209_rule","stig_id":"ASQL-00-014000","gtitle":"SRG-APP-000498-DB-000347","fix_id":"F-58978r871208_fix","documentable":null,"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-255362","code":"control 'SV-255362' do\n  title 'Azure SQL Database must generate audit records when privileges/permissions are deleted.'\n  desc 'Changes in the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized elevation or restriction of privileges could go undetected. Elevated privileges give users access to information and functionality that they should not have; restricted privileges wrongly deny access to authorized users. \n\nIn an SQL environment, deleting permissions is typically done via the REVOKE or DENY command.'\n  desc 'check', \"Review Azure SQL Database configuration to verify that audit records are produced when privileges/permissions are deleted. \n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nDATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP \nDATABASE_OBJECT_PERMISSION_CHANGE_GROUP \nDATABASE_OWNERSHIP_CHANGE_GROUP \nDATABASE_PERMISSION_CHANGE_GROUP \nDATABASE_ROLE_MEMBER_CHANGE_GROUP \nSCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP \nSCHEMA_OBJECT_PERMISSION_CHANGE_GROUP \n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.\"\n  desc 'fix', 'Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59035r871210_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255362'\n  tag rid: 'SV-255362r871212_rule'\n  tag stig_id: 'ASQL-00-014100'\n  tag gtitle: 'SRG-APP-000499-DB-000330'\n  tag fix_id: 'F-58979r871211_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255362.rb"},"title":"Azure SQL Database must generate audit records when privileges/permissions are deleted.","desc":"Changes in the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized elevation or restriction of privileges could go undetected. Elevated privileges give users access to information and functionality that they should not have; restricted privileges wrongly deny access to authorized users. \n\nIn an SQL environment, deleting permissions is typically done via the REVOKE or DENY command.","descriptions":{"default":"Changes in the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized elevation or restriction of privileges could go undetected. Elevated privileges give users access to information and functionality that they should not have; restricted privileges wrongly deny access to authorized users. \n\nIn an SQL environment, deleting permissions is typically done via the REVOKE or DENY command.","check":"Review Azure SQL Database configuration to verify that audit records are produced when privileges/permissions are deleted. \n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nDATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP \nDATABASE_OBJECT_PERMISSION_CHANGE_GROUP \nDATABASE_OWNERSHIP_CHANGE_GROUP \nDATABASE_PERMISSION_CHANGE_GROUP \nDATABASE_ROLE_MEMBER_CHANGE_GROUP \nSCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP \nSCHEMA_OBJECT_PERMISSION_CHANGE_GROUP \n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.","fix":"Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59035r871210_chk","severity":"medium","gid":"V-255362","rid":"SV-255362r871212_rule","stig_id":"ASQL-00-014100","gtitle":"SRG-APP-000499-DB-000330","fix_id":"F-58979r871211_fix","documentable":null,"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-255363","code":"control 'SV-255363' do\n  title 'Azure SQL Database must generate audit records when unsuccessful attempts to delete privileges/permissions occur.'\n  desc 'Failed attempts to change the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized attempts to elevate or restrict privileges could go undetected. \n\nIn an SQL environment, deleting permissions is typically done via the REVOKE or DENY command. \n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.'\n  desc 'check', \"Review Azure SQL Database configuration to verify that audit records are produced when unsuccessful attempts to delete privileges/permissions occur.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nDATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP \nDATABASE_OBJECT_PERMISSION_CHANGE_GROUP \nDATABASE_OWNERSHIP_CHANGE_GROUP \nDATABASE_PERMISSION_CHANGE_GROUP \nDATABASE_ROLE_MEMBER_CHANGE_GROUP \nSCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP \nSCHEMA_OBJECT_PERMISSION_CHANGE_GROUP \n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.\"\n  desc 'fix', 'Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59036r871213_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255363'\n  tag rid: 'SV-255363r871215_rule'\n  tag stig_id: 'ASQL-00-014200'\n  tag gtitle: 'SRG-APP-000499-DB-000331'\n  tag fix_id: 'F-58980r871214_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255363.rb"},"title":"Azure SQL Database must generate audit records when unsuccessful attempts to delete privileges/permissions occur.","desc":"Failed attempts to change the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized attempts to elevate or restrict privileges could go undetected. \n\nIn an SQL environment, deleting permissions is typically done via the REVOKE or DENY command. \n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.","descriptions":{"default":"Failed attempts to change the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized attempts to elevate or restrict privileges could go undetected. \n\nIn an SQL environment, deleting permissions is typically done via the REVOKE or DENY command. \n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.","check":"Review Azure SQL Database configuration to verify that audit records are produced when unsuccessful attempts to delete privileges/permissions occur.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nDATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP \nDATABASE_OBJECT_PERMISSION_CHANGE_GROUP \nDATABASE_OWNERSHIP_CHANGE_GROUP \nDATABASE_PERMISSION_CHANGE_GROUP \nDATABASE_ROLE_MEMBER_CHANGE_GROUP \nSCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP \nSCHEMA_OBJECT_PERMISSION_CHANGE_GROUP \n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.","fix":"Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59036r871213_chk","severity":"medium","gid":"V-255363","rid":"SV-255363r871215_rule","stig_id":"ASQL-00-014200","gtitle":"SRG-APP-000499-DB-000331","fix_id":"F-58980r871214_fix","documentable":null,"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-255364","code":"control 'SV-255364' do\n  title 'Azure SQL Database must generate audit records when security objects are deleted.'\n  desc \"The removal of security objects from the database/DBMS would seriously degrade a system's information assurance posture. If such an event occurs, it must be logged.\"\n  desc 'check', \"Review Azure SQL Database configuration to verify that audit records are produced when security objects are deleted.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nSCHEMA_OBJECT_CHANGE_GROUP \n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.\"\n  desc 'fix', 'Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59037r871216_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255364'\n  tag rid: 'SV-255364r871218_rule'\n  tag stig_id: 'ASQL-00-014300'\n  tag gtitle: 'SRG-APP-000501-DB-000336'\n  tag fix_id: 'F-58981r871217_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255364.rb"},"title":"Azure SQL Database must generate audit records when security objects are deleted.","desc":"The removal of security objects from the database/DBMS would seriously degrade a system's information assurance posture. If such an event occurs, it must be logged.","descriptions":{"default":"The removal of security objects from the database/DBMS would seriously degrade a system's information assurance posture. If such an event occurs, it must be logged.","check":"Review Azure SQL Database configuration to verify that audit records are produced when security objects are deleted.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nSCHEMA_OBJECT_CHANGE_GROUP \n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.","fix":"Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59037r871216_chk","severity":"medium","gid":"V-255364","rid":"SV-255364r871218_rule","stig_id":"ASQL-00-014300","gtitle":"SRG-APP-000501-DB-000336","fix_id":"F-58981r871217_fix","documentable":null,"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-255365","code":"control 'SV-255365' do\n  title 'Azure SQL Database must generate audit records when unsuccessful attempts to delete security objects occur.'\n  desc \"The removal of security objects from the database/DBMS would seriously degrade a system's information assurance posture. If such an action is attempted, it must be logged. \n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.\"\n  desc 'check', \"Review Azure SQL Database configuration to verify that audit records are produced when unsuccessful attempts to delete security objects occur.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nSCHEMA_OBJECT_CHANGE_GROUP \n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.\"\n  desc 'fix', 'Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59038r871219_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255365'\n  tag rid: 'SV-255365r871221_rule'\n  tag stig_id: 'ASQL-00-014400'\n  tag gtitle: 'SRG-APP-000501-DB-000337'\n  tag fix_id: 'F-58982r871220_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255365.rb"},"title":"Azure SQL Database must generate audit records when unsuccessful attempts to delete security objects occur.","desc":"The removal of security objects from the database/DBMS would seriously degrade a system's information assurance posture. If such an action is attempted, it must be logged. \n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.","descriptions":{"default":"The removal of security objects from the database/DBMS would seriously degrade a system's information assurance posture. If such an action is attempted, it must be logged. \n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.","check":"Review Azure SQL Database configuration to verify that audit records are produced when unsuccessful attempts to delete security objects occur.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nSCHEMA_OBJECT_CHANGE_GROUP \n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.","fix":"Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59038r871219_chk","severity":"medium","gid":"V-255365","rid":"SV-255365r871221_rule","stig_id":"ASQL-00-014400","gtitle":"SRG-APP-000501-DB-000337","fix_id":"F-58982r871220_fix","documentable":null,"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-255366","code":"control 'SV-255366' do\n  title 'Azure SQL Database must generate audit records when categories of information (e.g., classification levels/security levels) are deleted.'\n  desc 'Changes in categorized information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected. \n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.'\n  desc 'check', \"Review Azure SQL Database configuration to verify that audit records are produced when categorized information is deleted.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nSCHEMA_OBJECT_ACCESS_GROUP \n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.\"\n  desc 'fix', 'Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59039r871222_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255366'\n  tag rid: 'SV-255366r871224_rule'\n  tag stig_id: 'ASQL-00-014500'\n  tag gtitle: 'SRG-APP-000502-DB-000348'\n  tag fix_id: 'F-58983r871223_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255366.rb"},"title":"Azure SQL Database must generate audit records when categories of information (e.g., classification levels/security levels) are deleted.","desc":"Changes in categorized information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected. \n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.","descriptions":{"default":"Changes in categorized information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected. \n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.","check":"Review Azure SQL Database configuration to verify that audit records are produced when categorized information is deleted.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nSCHEMA_OBJECT_ACCESS_GROUP \n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.","fix":"Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59039r871222_chk","severity":"medium","gid":"V-255366","rid":"SV-255366r871224_rule","stig_id":"ASQL-00-014500","gtitle":"SRG-APP-000502-DB-000348","fix_id":"F-58983r871223_fix","documentable":null,"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-255367","code":"control 'SV-255367' do\n  title 'Azure SQL Database must generate audit records when unsuccessful attempts to delete categories of information (e.g., classification levels/security levels) occur.'\n  desc 'Changes in categorized information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected. \n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones. \n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.'\n  desc 'check', \"Review Azure SQL Database configuration to verify that audit records are produced when unsuccessful attempts to delete categorized information occur.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nSCHEMA_OBJECT_ACCESS_GROUP \n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.\"\n  desc 'fix', 'Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59040r871225_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255367'\n  tag rid: 'SV-255367r871227_rule'\n  tag stig_id: 'ASQL-00-014600'\n  tag gtitle: 'SRG-APP-000502-DB-000349'\n  tag fix_id: 'F-58984r871226_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255367.rb"},"title":"Azure SQL Database must generate audit records when unsuccessful attempts to delete categories of information (e.g., classification levels/security levels) occur.","desc":"Changes in categorized information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected. \n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones. \n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.","descriptions":{"default":"Changes in categorized information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected. \n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones. \n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.","check":"Review Azure SQL Database configuration to verify that audit records are produced when unsuccessful attempts to delete categorized information occur.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nSCHEMA_OBJECT_ACCESS_GROUP \n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.","fix":"Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59040r871225_chk","severity":"medium","gid":"V-255367","rid":"SV-255367r871227_rule","stig_id":"ASQL-00-014600","gtitle":"SRG-APP-000502-DB-000349","fix_id":"F-58984r871226_fix","documentable":null,"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-255368","code":"control 'SV-255368' do\n  title 'Azure SQL Database must generate audit records when successful logons or connections occur.'\n  desc 'For completeness of forensic analysis, it is necessary to track who/what (a user or other principal) logs on to Azure SQL Database.'\n  desc 'check', \"Review Azure SQL Database configuration to verify that audit records are produced when successful logons or connections occur.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nSUCCESSFUL_DATABASE_AUTHENTICATION_GROUP\n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.\"\n  desc 'fix', 'Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59041r871228_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255368'\n  tag rid: 'SV-255368r871230_rule'\n  tag stig_id: 'ASQL-00-014700'\n  tag gtitle: 'SRG-APP-000503-DB-000350'\n  tag fix_id: 'F-58985r871229_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255368.rb"},"title":"Azure SQL Database must generate audit records when successful logons or connections occur.","desc":"For completeness of forensic analysis, it is necessary to track who/what (a user or other principal) logs on to Azure SQL Database.","descriptions":{"default":"For completeness of forensic analysis, it is necessary to track who/what (a user or other principal) logs on to Azure SQL Database.","check":"Review Azure SQL Database configuration to verify that audit records are produced when successful logons or connections occur.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nSUCCESSFUL_DATABASE_AUTHENTICATION_GROUP\n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.","fix":"Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59041r871228_chk","severity":"medium","gid":"V-255368","rid":"SV-255368r871230_rule","stig_id":"ASQL-00-014700","gtitle":"SRG-APP-000503-DB-000350","fix_id":"F-58985r871229_fix","documentable":null,"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-255369","code":"control 'SV-255369' do\n  title 'Azure SQL Database must generate audit records when unsuccessful logons or connection attempts occur.'\n  desc 'For completeness of forensic analysis, it is necessary to track failed attempts to log on to Azure SQL Database. While positive identification may not be possible in a case of failed authentication, as much information as possible about the incident must be captured.'\n  desc 'check', \"Review Azure SQL Database configuration to verify that audit records are produced when unsuccessful logons or connection attempts occur.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nFAILED_DATABASE_AUTHENTICATION_GROUP\n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.\"\n  desc 'fix', 'Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59042r871231_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255369'\n  tag rid: 'SV-255369r871233_rule'\n  tag stig_id: 'ASQL-00-014800'\n  tag gtitle: 'SRG-APP-000503-DB-000351'\n  tag fix_id: 'F-58986r871232_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255369.rb"},"title":"Azure SQL Database must generate audit records when unsuccessful logons or connection attempts occur.","desc":"For completeness of forensic analysis, it is necessary to track failed attempts to log on to Azure SQL Database. While positive identification may not be possible in a case of failed authentication, as much information as possible about the incident must be captured.","descriptions":{"default":"For completeness of forensic analysis, it is necessary to track failed attempts to log on to Azure SQL Database. While positive identification may not be possible in a case of failed authentication, as much information as possible about the incident must be captured.","check":"Review Azure SQL Database configuration to verify that audit records are produced when unsuccessful logons or connection attempts occur.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nFAILED_DATABASE_AUTHENTICATION_GROUP\n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.","fix":"Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59042r871231_chk","severity":"medium","gid":"V-255369","rid":"SV-255369r871233_rule","stig_id":"ASQL-00-014800","gtitle":"SRG-APP-000503-DB-000351","fix_id":"F-58986r871232_fix","documentable":null,"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-255370","code":"control 'SV-255370' do\n  title 'Azure SQL Database must generate audit records for all privileged activities or other system-level access.'\n  desc 'Without tracking privileged activity, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nSystem documentation should include a definition of the functionality considered privileged.\n\nA privileged function in this context is any operation that modifies the structure of the database, its built-in logic, or its security settings. This would include all Data Definition Language (DDL) statements and all security-related statements. In an SQL environment, it encompasses, but is not necessarily limited to:\nCREATE\nALTER\nDROP\nGRANT\nREVOKE\nDENY\n\nThere may also be Data Manipulation Language (DML) statements that, subject to context, should be regarded as privileged. Possible examples in SQL include:\n\nTRUNCATE TABLE;\nDELETE, or\nDELETE affecting more than n rows, for some n, or\nDELETE without a WHERE clause;\n\nUPDATE or\nUPDATE affecting more than n rows, for some n, or\nUPDATE without a WHERE clause;\n\nany SELECT, INSERT, UPDATE, or DELETE to an application-defined security table executed by other than a security principal.\n\nDepending on the capabilities of Azure SQL Database and the design of the database and associated applications, audit logging may be achieved by means of Azure SQL Database auditing features, database triggers, other mechanisms, or a combination of these.\n\nNote that it is particularly important to audit, and tightly control, any action that weakens the implementation of this requirement itself, since the objective is to have a complete audit trail of all administrative activity.'\n  desc 'check', \"Review Azure SQL Database configuration to verify that audit records are produced for all privileged activities or other system-level access.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding.  \n\nVerify the following AuditActionGroup(s) are configured:\nAPPLICATION_ROLE_CHANGE_PASSWORD_GROUP \nBACKUP_RESTORE_GROUP \nDATABASE_CHANGE_GROUP\nDATABASE_OBJECT_CHANGE_GROUP \nDATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP \nDATABASE_OBJECT_PERMISSION_CHANGE_GROUP \nDATABASE_OPERATION_GROUP \nDATABASE_OWNERSHIP_CHANGE_GROUP \nDATABASE_PERMISSION_CHANGE_GROUP\nDATABASE_PRINCIPAL_CHANGE_GROUP \nDATABASE_PRINCIPAL_IMPERSONATION_GROUP \nDATABASE_ROLE_MEMBER_CHANGE_GROUP \nDBCC_GROUP \nSCHEMA_OBJECT_CHANGE_GROUP \nSCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP \nSCHEMA_OBJECT_PERMISSION_CHANGE_GROUP \nUSER_CHANGE_PASSWORD_GROUP\n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.\"\n  desc 'fix', 'Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59043r871234_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255370'\n  tag rid: 'SV-255370r871236_rule'\n  tag stig_id: 'ASQL-00-014900'\n  tag gtitle: 'SRG-APP-000504-DB-000354'\n  tag fix_id: 'F-58987r871235_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255370.rb"},"title":"Azure SQL Database must generate audit records for all privileged activities or other system-level access.","desc":"Without tracking privileged activity, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nSystem documentation should include a definition of the functionality considered privileged.\n\nA privileged function in this context is any operation that modifies the structure of the database, its built-in logic, or its security settings. This would include all Data Definition Language (DDL) statements and all security-related statements. In an SQL environment, it encompasses, but is not necessarily limited to:\nCREATE\nALTER\nDROP\nGRANT\nREVOKE\nDENY\n\nThere may also be Data Manipulation Language (DML) statements that, subject to context, should be regarded as privileged. Possible examples in SQL include:\n\nTRUNCATE TABLE;\nDELETE, or\nDELETE affecting more than n rows, for some n, or\nDELETE without a WHERE clause;\n\nUPDATE or\nUPDATE affecting more than n rows, for some n, or\nUPDATE without a WHERE clause;\n\nany SELECT, INSERT, UPDATE, or DELETE to an application-defined security table executed by other than a security principal.\n\nDepending on the capabilities of Azure SQL Database and the design of the database and associated applications, audit logging may be achieved by means of Azure SQL Database auditing features, database triggers, other mechanisms, or a combination of these.\n\nNote that it is particularly important to audit, and tightly control, any action that weakens the implementation of this requirement itself, since the objective is to have a complete audit trail of all administrative activity.","descriptions":{"default":"Without tracking privileged activity, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nSystem documentation should include a definition of the functionality considered privileged.\n\nA privileged function in this context is any operation that modifies the structure of the database, its built-in logic, or its security settings. This would include all Data Definition Language (DDL) statements and all security-related statements. In an SQL environment, it encompasses, but is not necessarily limited to:\nCREATE\nALTER\nDROP\nGRANT\nREVOKE\nDENY\n\nThere may also be Data Manipulation Language (DML) statements that, subject to context, should be regarded as privileged. Possible examples in SQL include:\n\nTRUNCATE TABLE;\nDELETE, or\nDELETE affecting more than n rows, for some n, or\nDELETE without a WHERE clause;\n\nUPDATE or\nUPDATE affecting more than n rows, for some n, or\nUPDATE without a WHERE clause;\n\nany SELECT, INSERT, UPDATE, or DELETE to an application-defined security table executed by other than a security principal.\n\nDepending on the capabilities of Azure SQL Database and the design of the database and associated applications, audit logging may be achieved by means of Azure SQL Database auditing features, database triggers, other mechanisms, or a combination of these.\n\nNote that it is particularly important to audit, and tightly control, any action that weakens the implementation of this requirement itself, since the objective is to have a complete audit trail of all administrative activity.","check":"Review Azure SQL Database configuration to verify that audit records are produced for all privileged activities or other system-level access.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding.  \n\nVerify the following AuditActionGroup(s) are configured:\nAPPLICATION_ROLE_CHANGE_PASSWORD_GROUP \nBACKUP_RESTORE_GROUP \nDATABASE_CHANGE_GROUP\nDATABASE_OBJECT_CHANGE_GROUP \nDATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP \nDATABASE_OBJECT_PERMISSION_CHANGE_GROUP \nDATABASE_OPERATION_GROUP \nDATABASE_OWNERSHIP_CHANGE_GROUP \nDATABASE_PERMISSION_CHANGE_GROUP\nDATABASE_PRINCIPAL_CHANGE_GROUP \nDATABASE_PRINCIPAL_IMPERSONATION_GROUP \nDATABASE_ROLE_MEMBER_CHANGE_GROUP \nDBCC_GROUP \nSCHEMA_OBJECT_CHANGE_GROUP \nSCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP \nSCHEMA_OBJECT_PERMISSION_CHANGE_GROUP \nUSER_CHANGE_PASSWORD_GROUP\n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.","fix":"Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59043r871234_chk","severity":"medium","gid":"V-255370","rid":"SV-255370r871236_rule","stig_id":"ASQL-00-014900","gtitle":"SRG-APP-000504-DB-000354","fix_id":"F-58987r871235_fix","documentable":null,"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-255371","code":"control 'SV-255371' do\n  title 'Azure SQL Database must generate audit records for all unsuccessful attempts to execute privileged activities or other system-level access.'\n  desc 'Without tracking privileged activity, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nSystem documentation should include a definition of the functionality considered privileged.\n\nA privileged function in this context is any operation that modifies the structure of the database, its built-in logic, or its security settings. This would include all Data Definition Language (DDL) statements and all security-related statements. In an SQL environment, it encompasses, but is not necessarily limited to:\nCREATE\nALTER\nDROP\nGRANT\nREVOKE\nDENY\n\nNote that it is particularly important to audit, and tightly control, any action that weakens the implementation of this requirement itself, since the objective is to have a complete audit trail of all administrative activity.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.'\n  desc 'check', \"Review Azure SQL Database configuration to verify that audit records are produced for all unsuccessful attempts to execute privileged activities or other system-level access.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding.  \n\nVerify the following AuditActionGroup(s) are configured:\nAPPLICATION_ROLE_CHANGE_PASSWORD_GROUP \nBACKUP_RESTORE_GROUP \nDATABASE_CHANGE_GROUP\nDATABASE_OBJECT_CHANGE_GROUP \nDATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP \nDATABASE_OBJECT_PERMISSION_CHANGE_GROUP \nDATABASE_OPERATION_GROUP \nDATABASE_OWNERSHIP_CHANGE_GROUP \nDATABASE_PERMISSION_CHANGE_GROUP\nDATABASE_PRINCIPAL_CHANGE_GROUP \nDATABASE_PRINCIPAL_IMPERSONATION_GROUP \nDATABASE_ROLE_MEMBER_CHANGE_GROUP \nDBCC_GROUP \nSCHEMA_OBJECT_CHANGE_GROUP \nSCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP \nSCHEMA_OBJECT_PERMISSION_CHANGE_GROUP \nUSER_CHANGE_PASSWORD_GROUP\n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.\"\n  desc 'fix', 'Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59044r871237_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255371'\n  tag rid: 'SV-255371r871239_rule'\n  tag stig_id: 'ASQL-00-015000'\n  tag gtitle: 'SRG-APP-000504-DB-000355'\n  tag fix_id: 'F-58988r871238_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255371.rb"},"title":"Azure SQL Database must generate audit records for all unsuccessful attempts to execute privileged activities or other system-level access.","desc":"Without tracking privileged activity, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nSystem documentation should include a definition of the functionality considered privileged.\n\nA privileged function in this context is any operation that modifies the structure of the database, its built-in logic, or its security settings. This would include all Data Definition Language (DDL) statements and all security-related statements. In an SQL environment, it encompasses, but is not necessarily limited to:\nCREATE\nALTER\nDROP\nGRANT\nREVOKE\nDENY\n\nNote that it is particularly important to audit, and tightly control, any action that weakens the implementation of this requirement itself, since the objective is to have a complete audit trail of all administrative activity.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.","descriptions":{"default":"Without tracking privileged activity, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nSystem documentation should include a definition of the functionality considered privileged.\n\nA privileged function in this context is any operation that modifies the structure of the database, its built-in logic, or its security settings. This would include all Data Definition Language (DDL) statements and all security-related statements. In an SQL environment, it encompasses, but is not necessarily limited to:\nCREATE\nALTER\nDROP\nGRANT\nREVOKE\nDENY\n\nNote that it is particularly important to audit, and tightly control, any action that weakens the implementation of this requirement itself, since the objective is to have a complete audit trail of all administrative activity.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.","check":"Review Azure SQL Database configuration to verify that audit records are produced for all unsuccessful attempts to execute privileged activities or other system-level access.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding.  \n\nVerify the following AuditActionGroup(s) are configured:\nAPPLICATION_ROLE_CHANGE_PASSWORD_GROUP \nBACKUP_RESTORE_GROUP \nDATABASE_CHANGE_GROUP\nDATABASE_OBJECT_CHANGE_GROUP \nDATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP \nDATABASE_OBJECT_PERMISSION_CHANGE_GROUP \nDATABASE_OPERATION_GROUP \nDATABASE_OWNERSHIP_CHANGE_GROUP \nDATABASE_PERMISSION_CHANGE_GROUP\nDATABASE_PRINCIPAL_CHANGE_GROUP \nDATABASE_PRINCIPAL_IMPERSONATION_GROUP \nDATABASE_ROLE_MEMBER_CHANGE_GROUP \nDBCC_GROUP \nSCHEMA_OBJECT_CHANGE_GROUP \nSCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP \nSCHEMA_OBJECT_PERMISSION_CHANGE_GROUP \nUSER_CHANGE_PASSWORD_GROUP\n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.","fix":"Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59044r871237_chk","severity":"medium","gid":"V-255371","rid":"SV-255371r871239_rule","stig_id":"ASQL-00-015000","gtitle":"SRG-APP-000504-DB-000355","fix_id":"F-58988r871238_fix","documentable":null,"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-255372","code":"control 'SV-255372' do\n  title 'Azure SQL Database must generate audit records when concurrent logons/connections by the same user from different workstations occur.'\n  desc \"For completeness of forensic analysis, it is necessary to know how long a user's (or other principal's) connection to the Azure Database lasts. This can be achieved by recording disconnections, in addition to logons/connections, in the audit logs. \n\nDisconnection may be initiated by the user or forced by the system (as in a timeout) or result from a system or network failure. To the greatest extent possible, all disconnections must be logged.\"\n  desc 'check', 'Review Azure SQL Database configuration to verify that audit records are produced showing starting and ending time for user access to the database(s).\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n   SELECT distinct audit_action_name\n   FROM sys.database_audit_specification_details \n   ORDER BY audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nAPPLICATION_ROLE_CHANGE_PASSWORD_GROUP \nBACKUP_RESTORE_GROUP \nDATABASE_CHANGE_GROUP\nDATABASE_OBJECT_CHANGE_GROUP \nDATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP \nDATABASE_OBJECT_PERMISSION_CHANGE_GROUP \nDATABASE_OPERATION_GROUP \nDATABASE_OWNERSHIP_CHANGE_GROUP \nDATABASE_PERMISSION_CHANGE_GROUP\nDATABASE_PRINCIPAL_CHANGE_GROUP \nDATABASE_PRINCIPAL_IMPERSONATION_GROUP \nDATABASE_ROLE_MEMBER_CHANGE_GROUP \nDBCC_GROUP \nSCHEMA_OBJECT_CHANGE_GROUP \nSCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP \nSCHEMA_OBJECT_PERMISSION_CHANGE_GROUP \nUSER_CHANGE_PASSWORD_GROUP\n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.'\n  desc 'fix', 'Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59045r871240_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255372'\n  tag rid: 'SV-255372r871242_rule'\n  tag stig_id: 'ASQL-00-015100'\n  tag gtitle: 'SRG-APP-000505-DB-000352'\n  tag fix_id: 'F-58989r871241_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255372.rb"},"title":"Azure SQL Database must generate audit records when concurrent logons/connections by the same user from different workstations occur.","desc":"For completeness of forensic analysis, it is necessary to know how long a user's (or other principal's) connection to the Azure Database lasts. This can be achieved by recording disconnections, in addition to logons/connections, in the audit logs. \n\nDisconnection may be initiated by the user or forced by the system (as in a timeout) or result from a system or network failure. To the greatest extent possible, all disconnections must be logged.","descriptions":{"default":"For completeness of forensic analysis, it is necessary to know how long a user's (or other principal's) connection to the Azure Database lasts. This can be achieved by recording disconnections, in addition to logons/connections, in the audit logs. \n\nDisconnection may be initiated by the user or forced by the system (as in a timeout) or result from a system or network failure. To the greatest extent possible, all disconnections must be logged.","check":"Review Azure SQL Database configuration to verify that audit records are produced showing starting and ending time for user access to the database(s).\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n   SELECT distinct audit_action_name\n   FROM sys.database_audit_specification_details \n   ORDER BY audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nAPPLICATION_ROLE_CHANGE_PASSWORD_GROUP \nBACKUP_RESTORE_GROUP \nDATABASE_CHANGE_GROUP\nDATABASE_OBJECT_CHANGE_GROUP \nDATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP \nDATABASE_OBJECT_PERMISSION_CHANGE_GROUP \nDATABASE_OPERATION_GROUP \nDATABASE_OWNERSHIP_CHANGE_GROUP \nDATABASE_PERMISSION_CHANGE_GROUP\nDATABASE_PRINCIPAL_CHANGE_GROUP \nDATABASE_PRINCIPAL_IMPERSONATION_GROUP \nDATABASE_ROLE_MEMBER_CHANGE_GROUP \nDBCC_GROUP \nSCHEMA_OBJECT_CHANGE_GROUP \nSCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP \nSCHEMA_OBJECT_PERMISSION_CHANGE_GROUP \nUSER_CHANGE_PASSWORD_GROUP\n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.","fix":"Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59045r871240_chk","severity":"medium","gid":"V-255372","rid":"SV-255372r871242_rule","stig_id":"ASQL-00-015100","gtitle":"SRG-APP-000505-DB-000352","fix_id":"F-58989r871241_fix","documentable":null,"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-255373","code":"control 'SV-255373' do\n  title 'Azure SQL Database must generate audit records when concurrent logons/connections by the same user from different workstations occur.'\n  desc 'For completeness of forensic analysis, it is necessary to track who logs on to Azure SQL Database.\n\nConcurrent connections by the same user from multiple workstations may be valid use of the system; or such connections may be due to improper circumvention of the requirement to use the CAC for authentication; or they may indicate unauthorized account sharing; or they may be because an account has been compromised.\n\nIf the fact of multiple, concurrent logons by a given user can be reliably reconstructed from the log entries for other events (logons/connections; voluntary and involuntary disconnections), it is not mandatory to create additional log entries specifically for this.'\n  desc 'check', \"Review Azure SQL Database configuration to verify that audit records are produced when concurrent logons/connections by the same user from different workstations occur.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nSUCCESSFUL_DATABASE_AUTHENTICATION_GROUP\n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.\"\n  desc 'fix', 'Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59046r871243_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255373'\n  tag rid: 'SV-255373r877256_rule'\n  tag stig_id: 'ASQL-00-015200'\n  tag gtitle: 'SRG-APP-000506-DB-000353'\n  tag fix_id: 'F-58990r871244_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255373.rb"},"title":"Azure SQL Database must generate audit records when concurrent logons/connections by the same user from different workstations occur.","desc":"For completeness of forensic analysis, it is necessary to track who logs on to Azure SQL Database.\n\nConcurrent connections by the same user from multiple workstations may be valid use of the system; or such connections may be due to improper circumvention of the requirement to use the CAC for authentication; or they may indicate unauthorized account sharing; or they may be because an account has been compromised.\n\nIf the fact of multiple, concurrent logons by a given user can be reliably reconstructed from the log entries for other events (logons/connections; voluntary and involuntary disconnections), it is not mandatory to create additional log entries specifically for this.","descriptions":{"default":"For completeness of forensic analysis, it is necessary to track who logs on to Azure SQL Database.\n\nConcurrent connections by the same user from multiple workstations may be valid use of the system; or such connections may be due to improper circumvention of the requirement to use the CAC for authentication; or they may indicate unauthorized account sharing; or they may be because an account has been compromised.\n\nIf the fact of multiple, concurrent logons by a given user can be reliably reconstructed from the log entries for other events (logons/connections; voluntary and involuntary disconnections), it is not mandatory to create additional log entries specifically for this.","check":"Review Azure SQL Database configuration to verify that audit records are produced when concurrent logons/connections by the same user from different workstations occur.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nSUCCESSFUL_DATABASE_AUTHENTICATION_GROUP\n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.","fix":"Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59046r871243_chk","severity":"medium","gid":"V-255373","rid":"SV-255373r877256_rule","stig_id":"ASQL-00-015200","gtitle":"SRG-APP-000506-DB-000353","fix_id":"F-58990r871244_fix","documentable":null,"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-255374","code":"control 'SV-255374' do\n  title 'Azure SQL Database must be able to generate audit records when successful accesses to objects occur.'\n  desc 'Without tracking all or selected types of access to all or selected objects (tables, views, procedures, functions, etc.), it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one. \n\nIn an SQL environment, types of access include, but are not necessarily limited to:\nSELECT\nINSERT\nUPDATE\nDELETE\nEXECUTE'\n  desc 'check', \"Review Azure SQL Database configuration to verify that audit records are produced when successful accesses to objects occur.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nSCHEMA_OBJECT_ACCESS_GROUP\n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.\"\n  desc 'fix', 'Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59047r871246_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255374'\n  tag rid: 'SV-255374r871248_rule'\n  tag stig_id: 'ASQL-00-015300'\n  tag gtitle: 'SRG-APP-000507-DB-000356'\n  tag fix_id: 'F-58991r871247_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255374.rb"},"title":"Azure SQL Database must be able to generate audit records when successful accesses to objects occur.","desc":"Without tracking all or selected types of access to all or selected objects (tables, views, procedures, functions, etc.), it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one. \n\nIn an SQL environment, types of access include, but are not necessarily limited to:\nSELECT\nINSERT\nUPDATE\nDELETE\nEXECUTE","descriptions":{"default":"Without tracking all or selected types of access to all or selected objects (tables, views, procedures, functions, etc.), it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one. \n\nIn an SQL environment, types of access include, but are not necessarily limited to:\nSELECT\nINSERT\nUPDATE\nDELETE\nEXECUTE","check":"Review Azure SQL Database configuration to verify that audit records are produced when successful accesses to objects occur.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nSCHEMA_OBJECT_ACCESS_GROUP\n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.","fix":"Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59047r871246_chk","severity":"medium","gid":"V-255374","rid":"SV-255374r871248_rule","stig_id":"ASQL-00-015300","gtitle":"SRG-APP-000507-DB-000356","fix_id":"F-58991r871247_fix","documentable":null,"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-255375","code":"control 'SV-255375' do\n  title 'Azure SQL Database must generate audit records when unsuccessful accesses to objects occur.'\n  desc 'Without tracking all or selected types of access to all or selected objects (tables, views, procedures, functions, etc.), it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nIn an SQL environment, types of access include, but are not necessarily limited to:\nSELECT\nINSERT\nUPDATE\nDELETE\nEXECUTE\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.'\n  desc 'check', \"Review Azure SQL Database configuration to verify that audit records are produced when unsuccessful accesses to objects occur.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nSCHEMA_OBJECT_ACCESS_GROUP\n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.\"\n  desc 'fix', 'Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59048r871249_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255375'\n  tag rid: 'SV-255375r871251_rule'\n  tag stig_id: 'ASQL-00-015400'\n  tag gtitle: 'SRG-APP-000507-DB-000357'\n  tag fix_id: 'F-58992r871250_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255375.rb"},"title":"Azure SQL Database must generate audit records when unsuccessful accesses to objects occur.","desc":"Without tracking all or selected types of access to all or selected objects (tables, views, procedures, functions, etc.), it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nIn an SQL environment, types of access include, but are not necessarily limited to:\nSELECT\nINSERT\nUPDATE\nDELETE\nEXECUTE\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.","descriptions":{"default":"Without tracking all or selected types of access to all or selected objects (tables, views, procedures, functions, etc.), it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nIn an SQL environment, types of access include, but are not necessarily limited to:\nSELECT\nINSERT\nUPDATE\nDELETE\nEXECUTE\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.","check":"Review Azure SQL Database configuration to verify that audit records are produced when unsuccessful accesses to objects occur.\n\nTo determine if an audit is configured, execute the following script. \nRun this TSQL command to determine if SQL Auditing AuditActionGroups are configured:\n  SELECT DISTINCT sd.audit_action_name \n  FROM sys.database_audit_specification_details sd\n  JOIN sys.database_audit_specifications s \n  ON s.database_specification_id = sd.database_specification_id\n  WHERE (name = 'SqlDbAuditing_ServerAuditSpec' /*Server Audit*/\n      OR name = 'SqlDbAuditing_AuditSpec') /*Database Audit*/\n  AND s.is_state_enabled = 1\n  ORDER BY sd.audit_action_name\n\nIf no values exist for AuditActionGroup, this is a finding. \n\nVerify the following AuditActionGroup(s) are configured:\nSCHEMA_OBJECT_ACCESS_GROUP\n\nIf any listed AuditActionGroups do not exist in the configuration, this is a finding.","fix":"Deploy an Azure SQL Database audit.\n\nRefer to the supplemental file \"AzureSQLDatabaseAudit.txt\" PowerShell script.\n\nReference: \nhttps://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit\">https://docs.microsoft.com/en-us/powershell/module/az.sql/set-azsqlserveraudit"},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59048r871249_chk","severity":"medium","gid":"V-255375","rid":"SV-255375r871251_rule","stig_id":"ASQL-00-015400","gtitle":"SRG-APP-000507-DB-000357","fix_id":"F-58992r871250_fix","documentable":null,"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-255376","code":"control 'SV-255376' do\n  title 'Azure SQL Database must generate audit records for all direct access to the database(s).'\n  desc 'In this context, direct access is any query, command, or call to Azure SQL Database that comes from any source other than the application(s) that it supports. Examples would be the command line or a database management utility program. The intent is to capture all activity from administrative and nonstandard sources.'\n  desc 'check', 'Review Azure SQL Database configuration to verify that audit records are produced for all direct access to the database(s).\n\nTo determine if an audit PredicateExpression (filter) exists, execute the following PowerShell script. \n1. In the Azure Portal, open a Cloud Shell session.\n2. Run this PowerShell command to determine the PredicateExpression:\n\n$ResourceGroup = \"myResourceGroup\"\n$ServerName = \"myServerName\"\n$FormatEnumerationLimit=-1\nGet-AzSqlServerAudit -ResourceGroupName $ResourceGroup -ServerName $ServerName\n\nIf a PredicateExpression is returned, review the associated filters to determine whether administrative activities are being excluded. \n\nIf any audits are configured to exclude administrative activities, this is a finding.'\n  desc 'fix', 'Check the system documentation for required Azure SQL Database Audits. Remove any Audit filters that exclude or reduce required auditing. Update filters to ensure administrative activity is not excluded.'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59049r871252_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255376'\n  tag rid: 'SV-255376r871254_rule'\n  tag stig_id: 'ASQL-00-015500'\n  tag gtitle: 'SRG-APP-000508-DB-000358'\n  tag fix_id: 'F-58993r871253_fix'\n  tag 'documentable'\n  tag cci: ['CCI-000172']\n  tag nist: ['AU-12 c']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255376.rb"},"title":"Azure SQL Database must generate audit records for all direct access to the database(s).","desc":"In this context, direct access is any query, command, or call to Azure SQL Database that comes from any source other than the application(s) that it supports. Examples would be the command line or a database management utility program. The intent is to capture all activity from administrative and nonstandard sources.","descriptions":{"default":"In this context, direct access is any query, command, or call to Azure SQL Database that comes from any source other than the application(s) that it supports. Examples would be the command line or a database management utility program. The intent is to capture all activity from administrative and nonstandard sources.","check":"Review Azure SQL Database configuration to verify that audit records are produced for all direct access to the database(s).\n\nTo determine if an audit PredicateExpression (filter) exists, execute the following PowerShell script. \n1. In the Azure Portal, open a Cloud Shell session.\n2. Run this PowerShell command to determine the PredicateExpression:\n\n$ResourceGroup = \"myResourceGroup\"\n$ServerName = \"myServerName\"\n$FormatEnumerationLimit=-1\nGet-AzSqlServerAudit -ResourceGroupName $ResourceGroup -ServerName $ServerName\n\nIf a PredicateExpression is returned, review the associated filters to determine whether administrative activities are being excluded. \n\nIf any audits are configured to exclude administrative activities, this is a finding.","fix":"Check the system documentation for required Azure SQL Database Audits. Remove any Audit filters that exclude or reduce required auditing. Update filters to ensure administrative activity is not excluded."},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59049r871252_chk","severity":"medium","gid":"V-255376","rid":"SV-255376r871254_rule","stig_id":"ASQL-00-015500","gtitle":"SRG-APP-000508-DB-000358","fix_id":"F-58993r871253_fix","documentable":null,"cci":["CCI-000172"],"nist":["AU-12 c"]}},{"id":"SV-255377","code":"control 'SV-255377' do\n  title 'Azure SQL Database must offload audit data to a separate log management facility; this must be continuous and in near real time for systems with a network connection to the storage facility and weekly or more often for stand-alone systems.'\n  desc 'Information stored in one location is vulnerable to accidental or incidental deletion or alteration.\n\nOffloading is a common process in information systems with limited audit storage capacity. \n\nAzure SQL Database may write audit records blob storage, log analytics, or event hub. Multiple methods should be used to ensure audit files are retained, or immutable storage should be used.'\n  desc 'check', 'Review the system documentation for a description of how audit records are stored. \n \n1. Review the Auditing link in the Azure Portal for the SQL Database. Ensure audit logs are written to more than one storage system. If not, navigate to the Storage Container where the audits are stored via the Portal. \n2. Select \"Containers\". \n3. Select the ellipsis on the container for the audit storage. \n4. Select \"Access Policy\". \n\nVerify that an Immutable Blob Storage policy has been added to the audit container. If Azure audit logs are written to only one storage system or immutable storage is not enabled, this is a finding.'\n  desc 'fix', 'Enable immutable storage so that audit logs cannot be modified or deleted accidently.\nhttps://docs.microsoft.com/en-us/azure/storage/blobs/immutable-policy-configure-container-scope?tabs=azure-portal\n\nTo configure a time-based retention policy on a container with the Azure portal, follow these steps:\n\n1. Navigate to the desired container.\n2. Select \"More\" on the right, then select \"Access policy\".\n3. In the Immutable blob storage section, select \"Add policy\".\n4. In the Policy type field, select \"Time-based retention\", and specify the retention period in days.\n5. To create a policy with container scope, do not check the box for \"Enable\" version-level immutability.\n6. If desired, select \"Allow additional protected appends\" to enable writes to append blobs that are protected by an immutability policy.\n\nPowerShell:\nSet-AzRmStorageContainerImmutabilityPolicy -ResourceGroupName <resource-group> `\n    -StorageAccountName <storage-account> `\n    -ContainerName <container> `\n    -ImmutabilityPeriod 10\n\nAlternatively, enable at least two types of audit storage for the Azure SQL Database.\nIn the Azure Portal, select \"Auditing\".\nCheck at least two of the available storage types and select \"Save\".'\n  impact 0.5\n  ref 'DPMS Target MS Azure SQL DB'\n  tag check_id: 'C-59050r877254_chk'\n  tag severity: 'medium'\n  tag gid: 'V-255377'\n  tag rid: 'SV-255377r877255_rule'\n  tag stig_id: 'ASQL-00-015900'\n  tag gtitle: 'SRG-APP-000515-DB-000318'\n  tag fix_id: 'F-58994r871256_fix'\n  tag 'documentable'\n  tag cci: ['CCI-001851']\n  tag nist: ['AU-4 (1)']\nend","source_location":{"line":1,"ref":"U_MS_Azure_SQL_DB_STIG_V1R1-Manual/controls/SV-255377.rb"},"title":"Azure SQL Database must offload audit data to a separate log management facility; this must be continuous and in near real time for systems with a network connection to the storage facility and weekly or more often for stand-alone systems.","desc":"Information stored in one location is vulnerable to accidental or incidental deletion or alteration.\n\nOffloading is a common process in information systems with limited audit storage capacity. \n\nAzure SQL Database may write audit records blob storage, log analytics, or event hub. Multiple methods should be used to ensure audit files are retained, or immutable storage should be used.","descriptions":{"default":"Information stored in one location is vulnerable to accidental or incidental deletion or alteration.\n\nOffloading is a common process in information systems with limited audit storage capacity. \n\nAzure SQL Database may write audit records blob storage, log analytics, or event hub. Multiple methods should be used to ensure audit files are retained, or immutable storage should be used.","check":"Review the system documentation for a description of how audit records are stored. \n \n1. Review the Auditing link in the Azure Portal for the SQL Database. Ensure audit logs are written to more than one storage system. If not, navigate to the Storage Container where the audits are stored via the Portal. \n2. Select \"Containers\". \n3. Select the ellipsis on the container for the audit storage. \n4. Select \"Access Policy\". \n\nVerify that an Immutable Blob Storage policy has been added to the audit container. If Azure audit logs are written to only one storage system or immutable storage is not enabled, this is a finding.","fix":"Enable immutable storage so that audit logs cannot be modified or deleted accidently.\nhttps://docs.microsoft.com/en-us/azure/storage/blobs/immutable-policy-configure-container-scope?tabs=azure-portal\n\nTo configure a time-based retention policy on a container with the Azure portal, follow these steps:\n\n1. Navigate to the desired container.\n2. Select \"More\" on the right, then select \"Access policy\".\n3. In the Immutable blob storage section, select \"Add policy\".\n4. In the Policy type field, select \"Time-based retention\", and specify the retention period in days.\n5. To create a policy with container scope, do not check the box for \"Enable\" version-level immutability.\n6. If desired, select \"Allow additional protected appends\" to enable writes to append blobs that are protected by an immutability policy.\n\nPowerShell:\nSet-AzRmStorageContainerImmutabilityPolicy -ResourceGroupName <resource-group> `\n    -StorageAccountName <storage-account> `\n    -ContainerName <container> `\n    -ImmutabilityPeriod 10\n\nAlternatively, enable at least two types of audit storage for the Azure SQL Database.\nIn the Azure Portal, select \"Auditing\".\nCheck at least two of the available storage types and select \"Save\"."},"impact":0.5,"refs":[{"ref":"DPMS Target MS Azure SQL DB"}],"tags":{"check_id":"C-59050r877254_chk","severity":"medium","gid":"V-255377","rid":"SV-255377r877255_rule","stig_id":"ASQL-00-015900","gtitle":"SRG-APP-000515-DB-000318","fix_id":"F-58994r871256_fix","documentable":null,"cci":["CCI-001851"],"nist":["AU-4 (1)"]}}],"groups":[{"id":"controls/SV-255301.rb","title":null,"controls":["SV-255301"]},{"id":"controls/SV-255302.rb","title":null,"controls":["SV-255302"]},{"id":"controls/SV-255303.rb","title":null,"controls":["SV-255303"]},{"id":"controls/SV-255304.rb","title":null,"controls":["SV-255304"]},{"id":"controls/SV-255305.rb","title":null,"controls":["SV-255305"]},{"id":"controls/SV-255306.rb","title":null,"controls":["SV-255306"]},{"id":"controls/SV-255307.rb","title":null,"controls":["SV-255307"]},{"id":"controls/SV-255308.rb","title":null,"controls":["SV-255308"]},{"id":"controls/SV-255309.rb","title":null,"controls":["SV-255309"]},{"id":"controls/SV-255310.rb","title":null,"controls":["SV-255310"]},{"id":"controls/SV-255311.rb","title":null,"controls":["SV-255311"]},{"id":"controls/SV-255312.rb","title":null,"controls":["SV-255312"]},{"id":"controls/SV-255313.rb","title":null,"controls":["SV-255313"]},{"id":"controls/SV-255314.rb","title":null,"controls":["SV-255314"]},{"id":"controls/SV-255315.rb","title":null,"controls":["SV-255315"]},{"id":"controls/SV-255316.rb","title":null,"controls":["SV-255316"]},{"id":"controls/SV-255317.rb","title":null,"controls":["SV-255317"]},{"id":"controls/SV-255318.rb","title":null,"controls":["SV-255318"]},{"id":"controls/SV-255319.rb","title":null,"controls":["SV-255319"]},{"id":"controls/SV-255320.rb","title":null,"controls":["SV-255320"]},{"id":"controls/SV-255321.rb","title":null,"controls":["SV-255321"]},{"id":"controls/SV-255322.rb","title":null,"controls":["SV-255322"]},{"id":"controls/SV-255323.rb","title":null,"controls":["SV-255323"]},{"id":"controls/SV-255324.rb","title":null,"controls":["SV-255324"]},{"id":"controls/SV-255325.rb","title":null,"controls":["SV-255325"]},{"id":"controls/SV-255326.rb","title":null,"controls":["SV-255326"]},{"id":"controls/SV-255327.rb","title":null,"controls":["SV-255327"]},{"id":"controls/SV-255328.rb","title":null,"controls":["SV-255328"]},{"id":"controls/SV-255329.rb","title":null,"controls":["SV-255329"]},{"id":"controls/SV-255330.rb","title":null,"controls":["SV-255330"]},{"id":"controls/SV-255331.rb","title":null,"controls":["SV-255331"]},{"id":"controls/SV-255332.rb","title":null,"controls":["SV-255332"]},{"id":"controls/SV-255333.rb","title":null,"controls":["SV-255333"]},{"id":"controls/SV-255334.rb","title":null,"controls":["SV-255334"]},{"id":"controls/SV-255335.rb","title":null,"controls":["SV-255335"]},{"id":"controls/SV-255336.rb","title":null,"controls":["SV-255336"]},{"id":"controls/SV-255337.rb","title":null,"controls":["SV-255337"]},{"id":"controls/SV-255338.rb","title":null,"controls":["SV-255338"]},{"id":"controls/SV-255339.rb","title":null,"controls":["SV-255339"]},{"id":"controls/SV-255340.rb","title":null,"controls":["SV-255340"]},{"id":"controls/SV-255341.rb","title":null,"controls":["SV-255341"]},{"id":"controls/SV-255342.rb","title":null,"controls":["SV-255342"]},{"id":"controls/SV-255343.rb","title":null,"controls":["SV-255343"]},{"id":"controls/SV-255344.rb","title":null,"controls":["SV-255344"]},{"id":"controls/SV-255345.rb","title":null,"controls":["SV-255345"]},{"id":"controls/SV-255346.rb","title":null,"controls":["SV-255346"]},{"id":"controls/SV-255347.rb","title":null,"controls":["SV-255347"]},{"id":"controls/SV-255348.rb","title":null,"controls":["SV-255348"]},{"id":"controls/SV-255349.rb","title":null,"controls":["SV-255349"]},{"id":"controls/SV-255350.rb","title":null,"controls":["SV-255350"]},{"id":"controls/SV-255351.rb","title":null,"controls":["SV-255351"]},{"id":"controls/SV-255352.rb","title":null,"controls":["SV-255352"]},{"id":"controls/SV-255353.rb","title":null,"controls":["SV-255353"]},{"id":"controls/SV-255354.rb","title":null,"controls":["SV-255354"]},{"id":"controls/SV-255355.rb","title":null,"controls":["SV-255355"]},{"id":"controls/SV-255356.rb","title":null,"controls":["SV-255356"]},{"id":"controls/SV-255357.rb","title":null,"controls":["SV-255357"]},{"id":"controls/SV-255358.rb","title":null,"controls":["SV-255358"]},{"id":"controls/SV-255359.rb","title":null,"controls":["SV-255359"]},{"id":"controls/SV-255360.rb","title":null,"controls":["SV-255360"]},{"id":"controls/SV-255361.rb","title":null,"controls":["SV-255361"]},{"id":"controls/SV-255362.rb","title":null,"controls":["SV-255362"]},{"id":"controls/SV-255363.rb","title":null,"controls":["SV-255363"]},{"id":"controls/SV-255364.rb","title":null,"controls":["SV-255364"]},{"id":"controls/SV-255365.rb","title":null,"controls":["SV-255365"]},{"id":"controls/SV-255366.rb","title":null,"controls":["SV-255366"]},{"id":"controls/SV-255367.rb","title":null,"controls":["SV-255367"]},{"id":"controls/SV-255368.rb","title":null,"controls":["SV-255368"]},{"id":"controls/SV-255369.rb","title":null,"controls":["SV-255369"]},{"id":"controls/SV-255370.rb","title":null,"controls":["SV-255370"]},{"id":"controls/SV-255371.rb","title":null,"controls":["SV-255371"]},{"id":"controls/SV-255372.rb","title":null,"controls":["SV-255372"]},{"id":"controls/SV-255373.rb","title":null,"controls":["SV-255373"]},{"id":"controls/SV-255374.rb","title":null,"controls":["SV-255374"]},{"id":"controls/SV-255375.rb","title":null,"controls":["SV-255375"]},{"id":"controls/SV-255376.rb","title":null,"controls":["SV-255376"]},{"id":"controls/SV-255377.rb","title":null,"controls":["SV-255377"]}],"name":"MS_Azure_SQL_DB_STIG","title":null,"maintainer":null,"copyright":null,"copyright_email":null,"license":null,"summary":null,"description":null,"version":"1.0.0","supports":[],"depends":[],"inspec_version":null,"inputs":[],"sha256":"880849236d58f3f770063d6bfbaf9c087c3807136bb9b6303fb3d5e7a1dabe90","status_message":"","status":"loaded","generator":{"name":"inspec","version":"6.6.0"}}
